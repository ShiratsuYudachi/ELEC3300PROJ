
ELEC3300PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c30  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800347c  0800347c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800347c  0800347c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800347c  0800347c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000005c  080034e0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080034e0  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000975d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff7  00000000  00000000  00029825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000694  00000000  00000000  0002c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd76  00000000  00000000  0002c77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6b7  00000000  00000000  000484f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094683  00000000  00000000  00053ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000269c  00000000  00000000  000e822c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ea8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002dfc 	.word	0x08002dfc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08002dfc 	.word	0x08002dfc

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f001 fd67 	bl	8001d90 <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fd07 	bl	8000cda <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000078 	.word	0x20000078
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f000 ff6c 	bl	8001218 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f000 ff5f 	bl	8001218 <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000c0 	.word	0x200000c0
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800039c:	4b58      	ldr	r3, [pc, #352]	; (8000500 <MX_GPIO_Init+0x178>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a57      	ldr	r2, [pc, #348]	; (8000500 <MX_GPIO_Init+0x178>)
 80003a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b55      	ldr	r3, [pc, #340]	; (8000500 <MX_GPIO_Init+0x178>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b52      	ldr	r3, [pc, #328]	; (8000500 <MX_GPIO_Init+0x178>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a51      	ldr	r2, [pc, #324]	; (8000500 <MX_GPIO_Init+0x178>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b4f      	ldr	r3, [pc, #316]	; (8000500 <MX_GPIO_Init+0x178>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b4c      	ldr	r3, [pc, #304]	; (8000500 <MX_GPIO_Init+0x178>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a4b      	ldr	r2, [pc, #300]	; (8000500 <MX_GPIO_Init+0x178>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b49      	ldr	r3, [pc, #292]	; (8000500 <MX_GPIO_Init+0x178>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b46      	ldr	r3, [pc, #280]	; (8000500 <MX_GPIO_Init+0x178>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a45      	ldr	r2, [pc, #276]	; (8000500 <MX_GPIO_Init+0x178>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b43      	ldr	r3, [pc, #268]	; (8000500 <MX_GPIO_Init+0x178>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b40      	ldr	r3, [pc, #256]	; (8000500 <MX_GPIO_Init+0x178>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a3f      	ldr	r2, [pc, #252]	; (8000500 <MX_GPIO_Init+0x178>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b3d      	ldr	r3, [pc, #244]	; (8000500 <MX_GPIO_Init+0x178>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	483a      	ldr	r0, [pc, #232]	; (8000504 <MX_GPIO_Init+0x17c>)
 800041a:	f001 f891 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	4838      	ldr	r0, [pc, #224]	; (8000508 <MX_GPIO_Init+0x180>)
 8000426:	f001 f88b 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2102      	movs	r1, #2
 800042e:	4837      	ldr	r0, [pc, #220]	; (800050c <MX_GPIO_Init+0x184>)
 8000430:	f001 f886 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000434:	237d      	movs	r3, #125	; 0x7d
 8000436:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000438:	2303      	movs	r3, #3
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4619      	mov	r1, r3
 8000442:	4832      	ldr	r0, [pc, #200]	; (800050c <MX_GPIO_Init+0x184>)
 8000444:	f000 fee8 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800044c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044e:	2303      	movs	r3, #3
 8000450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000452:	f107 0318 	add.w	r3, r7, #24
 8000456:	4619      	mov	r1, r3
 8000458:	482d      	ldr	r0, [pc, #180]	; (8000510 <MX_GPIO_Init+0x188>)
 800045a:	f000 fedd 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800045e:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8000462:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000464:	2303      	movs	r3, #3
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0318 	add.w	r3, r7, #24
 800046c:	4619      	mov	r1, r3
 800046e:	4829      	ldr	r0, [pc, #164]	; (8000514 <MX_GPIO_Init+0x18c>)
 8000470:	f000 fed2 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000474:	2301      	movs	r3, #1
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	f107 0318 	add.w	r3, r7, #24
 8000488:	4619      	mov	r1, r3
 800048a:	481e      	ldr	r0, [pc, #120]	; (8000504 <MX_GPIO_Init+0x17c>)
 800048c:	f000 fec4 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000490:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000494:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000496:	2303      	movs	r3, #3
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 0318 	add.w	r3, r7, #24
 800049e:	4619      	mov	r1, r3
 80004a0:	4818      	ldr	r0, [pc, #96]	; (8000504 <MX_GPIO_Init+0x17c>)
 80004a2:	f000 feb9 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4619      	mov	r1, r3
 80004be:	4812      	ldr	r0, [pc, #72]	; (8000508 <MX_GPIO_Init+0x180>)
 80004c0:	f000 feaa 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 80004c4:	f242 034c 	movw	r3, #8268	; 0x204c
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ca:	2303      	movs	r3, #3
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	4619      	mov	r1, r3
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <MX_GPIO_Init+0x180>)
 80004d6:	f000 fe9f 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e6:	2303      	movs	r3, #3
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	4619      	mov	r1, r3
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <MX_GPIO_Init+0x184>)
 80004f2:	f000 fe91 	bl	8001218 <HAL_GPIO_Init>

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	40010c00 	.word	0x40010c00
 8000508:	40011400 	.word	0x40011400
 800050c:	40011800 	.word	0x40011800
 8000510:	40011000 	.word	0x40011000
 8000514:	40010800 	.word	0x40010800

08000518 <_ZN8SERVO42C6getCHKEPhh>:
    uint32_t encoderCarry = 0;
    
    uint8_t stepSpeed = 3;
    

    static uint8_t getCHK(uint8_t instruction[], uint8_t len){
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	e00a      	b.n	8000544 <_ZN8SERVO42C6getCHKEPhh+0x2c>
            result+=instruction[i];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b29a      	uxth	r2, r3
 8000538:	89fb      	ldrh	r3, [r7, #14]
 800053a:	4413      	add	r3, r2
 800053c:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	3301      	adds	r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf0      	blt.n	800052e <_ZN8SERVO42C6getCHKEPhh+0x16>
        }
        return result & 0xFF;
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	b2db      	uxtb	r3, r3
    }
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_ZN8SERVO42CC1EhP20__UART_HandleTypeDef>:

public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART) : address(address), pUART(pUART){}
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	460b      	mov	r3, r1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	72fb      	strb	r3, [r7, #11]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	7afa      	ldrb	r2, [r7, #11]
 8000572:	711a      	strb	r2, [r3, #4]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	80da      	strh	r2, [r3, #6]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2203      	movs	r2, #3
 8000584:	731a      	strb	r2, [r3, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4618      	mov	r0, r3
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <_ZN8SERVO42C4stepEhhm>:

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step(uint8_t direction, uint8_t speed, uint32_t stepCount){
 8000592:	b580      	push	{r7, lr}
 8000594:	b088      	sub	sp, #32
 8000596:	af00      	add	r7, sp, #0
 8000598:	60f8      	str	r0, [r7, #12]
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	72fb      	strb	r3, [r7, #11]
 80005a0:	4613      	mov	r3, r2
 80005a2:	72bb      	strb	r3, [r7, #10]
        uint8_t instruction[8] = {};
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
        instruction[0] = address;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	753b      	strb	r3, [r7, #20]
        instruction[1] = 0xfd;
 80005b2:	23fd      	movs	r3, #253	; 0xfd
 80005b4:	757b      	strb	r3, [r7, #21]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	01db      	lsls	r3, r3, #7
 80005ba:	b25a      	sxtb	r2, r3
 80005bc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80005c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	75bb      	strb	r3, [r7, #22]
        for (int i=0; i<4; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
 80005d2:	e015      	b.n	8000600 <_ZN8SERVO42C4stepEhhm+0x6e>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	22ff      	movs	r2, #255	; 0xff
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	401a      	ands	r2, r3
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	40da      	lsrs	r2, r3
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	f1c3 0306 	rsb	r3, r3, #6
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	3320      	adds	r3, #32
 80005f4:	443b      	add	r3, r7
 80005f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i=0; i<4; i++){
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3301      	adds	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	2b03      	cmp	r3, #3
 8000604:	dde6      	ble.n	80005d4 <_ZN8SERVO42C4stepEhhm+0x42>
        }
        instruction[7] = getCHK(instruction, 8);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2108      	movs	r1, #8
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff83 	bl	8000518 <_ZN8SERVO42C6getCHKEPhh>
 8000612:	4603      	mov	r3, r0
 8000614:	76fb      	strb	r3, [r7, #27]
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	f107 0114 	add.w	r1, r7, #20
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	2208      	movs	r2, #8
 8000622:	f001 fc52 	bl	8001eca <HAL_UART_Transmit>
    }
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_ZN8SERVO42C5step0Eh>:
    void step1(uint8_t stepCount){
        step(1, stepSpeed, stepCount);
    }
    void step0(uint8_t stepCount){
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	70fb      	strb	r3, [r7, #3]
        step(0, stepSpeed, stepCount);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7b1a      	ldrb	r2, [r3, #12]
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	2100      	movs	r1, #0
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ffa5 	bl	8000592 <_ZN8SERVO42C4stepEhhm>
    }
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <myfunc>:
#include "interface.hpp"
#include "usart.h"
#include "lcd.h"
#include <stdio.h>

void myfunc(){
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  SERVO42C servo(0xe0, &huart2);
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <myfunc+0x6c>)
 800065c:	21e0      	movs	r1, #224	; 0xe0
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff7b 	bl	800055a <_ZN8SERVO42CC1EhP20__UART_HandleTypeDef>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    servo.step0(10);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	210a      	movs	r1, #10
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffdf 	bl	800062e <_ZN8SERVO42C5step0Eh>
    uint8_t data[3] = {};
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <myfunc+0x70>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	713b      	strb	r3, [r7, #4]
 8000676:	1d7b      	adds	r3, r7, #5
 8000678:	2200      	movs	r2, #0
 800067a:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
 800067c:	1d39      	adds	r1, r7, #4
 800067e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000682:	2203      	movs	r2, #3
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <myfunc+0x6c>)
 8000686:	f001 fca3 	bl	8001fd0 <HAL_UART_Receive>
    char str[3] = {};
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <myfunc+0x70>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	703b      	strb	r3, [r7, #0]
 8000690:	1c7b      	adds	r3, r7, #1
 8000692:	2200      	movs	r2, #0
 8000694:	801a      	strh	r2, [r3, #0]
    sprintf(str, "%02X", data[0]);
 8000696:	793b      	ldrb	r3, [r7, #4]
 8000698:	461a      	mov	r2, r3
 800069a:	463b      	mov	r3, r7
 800069c:	4909      	ldr	r1, [pc, #36]	; (80006c4 <myfunc+0x74>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fefa 	bl	8002498 <siprintf>
    LCD_DrawString(0,0,str);
 80006a4:	463b      	mov	r3, r7
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fa80 	bl	8000bb0 <LCD_DrawString>
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); 
    HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f000 fca8 	bl	8001008 <HAL_Delay>
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
    // HAL_Delay(500);
  }
 80006b8:	e7d4      	b.n	8000664 <myfunc+0x14>
 80006ba:	bf00      	nop
 80006bc:	200000c8 	.word	0x200000c8
 80006c0:	08002e1c 	.word	0x08002e1c
 80006c4:	08002e14 	.word	0x08002e14

080006c8 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	e002      	b.n	80006d8 <Delay+0x10>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f9      	bne.n	80006d2 <Delay+0xa>
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <LCD_INIT>:

void LCD_INIT ( void )
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f829 	bl	8000748 <LCD_BackLed_Control>
	LCD_Rst();
 80006f6:	f000 f80f 	bl	8000718 <LCD_Rst>
	LCD_REG_Config();
 80006fa:	f000 f85f 	bl	80007bc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80006fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000708:	22f0      	movs	r2, #240	; 0xf0
 800070a:	2100      	movs	r1, #0
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f9e6 	bl	8000ade <LCD_Clear>
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <LCD_Rst+0x28>)
 8000722:	f000 ff0d 	bl	8001540 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <LCD_Rst+0x2c>)
 8000728:	f7ff ffce 	bl	80006c8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <LCD_Rst+0x28>)
 8000732:	f000 ff05 	bl	8001540 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <LCD_Rst+0x2c>)
 8000738:	f7ff ffc6 	bl	80006c8 <Delay>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40011800 	.word	0x40011800
 8000744:	0002bffc 	.word	0x0002bffc

08000748 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d006      	beq.n	8000766 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <LCD_BackLed_Control+0x34>)
 8000760:	f000 feee 	bl	8001540 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000764:	e005      	b.n	8000772 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LCD_BackLed_Control+0x34>)
 800076e:	f000 fee7 	bl	8001540 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40011400 	.word	0x40011400

08000780 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800078a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	8013      	strh	r3, [r2, #0]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <LCD_Write_Data+0x1c>)
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	8013      	strh	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	60020000 	.word	0x60020000

080007bc <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80007c0:	20cf      	movs	r0, #207	; 0xcf
 80007c2:	f7ff ffdd 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80007c6:	2000      	movs	r0, #0
 80007c8:	f7ff ffe8 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80007cc:	2081      	movs	r0, #129	; 0x81
 80007ce:	f7ff ffe5 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80007d2:	2030      	movs	r0, #48	; 0x30
 80007d4:	f7ff ffe2 	bl	800079c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80007d8:	20ed      	movs	r0, #237	; 0xed
 80007da:	f7ff ffd1 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f7ff ffdc 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80007e4:	2003      	movs	r0, #3
 80007e6:	f7ff ffd9 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80007ea:	2012      	movs	r0, #18
 80007ec:	f7ff ffd6 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80007f0:	2081      	movs	r0, #129	; 0x81
 80007f2:	f7ff ffd3 	bl	800079c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80007f6:	20e8      	movs	r0, #232	; 0xe8
 80007f8:	f7ff ffc2 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80007fc:	2085      	movs	r0, #133	; 0x85
 80007fe:	f7ff ffcd 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000802:	2010      	movs	r0, #16
 8000804:	f7ff ffca 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000808:	2078      	movs	r0, #120	; 0x78
 800080a:	f7ff ffc7 	bl	800079c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800080e:	20cb      	movs	r0, #203	; 0xcb
 8000810:	f7ff ffb6 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000814:	2039      	movs	r0, #57	; 0x39
 8000816:	f7ff ffc1 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800081a:	202c      	movs	r0, #44	; 0x2c
 800081c:	f7ff ffbe 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff ffbb 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000826:	2034      	movs	r0, #52	; 0x34
 8000828:	f7ff ffb8 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800082c:	2002      	movs	r0, #2
 800082e:	f7ff ffb5 	bl	800079c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000832:	20f7      	movs	r0, #247	; 0xf7
 8000834:	f7ff ffa4 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000838:	2020      	movs	r0, #32
 800083a:	f7ff ffaf 	bl	800079c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800083e:	20ea      	movs	r0, #234	; 0xea
 8000840:	f7ff ff9e 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ffa9 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ffa6 	bl	800079c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000850:	20b1      	movs	r0, #177	; 0xb1
 8000852:	f7ff ff95 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ffa0 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800085c:	201b      	movs	r0, #27
 800085e:	f7ff ff9d 	bl	800079c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000862:	20b6      	movs	r0, #182	; 0xb6
 8000864:	f7ff ff8c 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000868:	200a      	movs	r0, #10
 800086a:	f7ff ff97 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800086e:	20a2      	movs	r0, #162	; 0xa2
 8000870:	f7ff ff94 	bl	800079c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000874:	20c0      	movs	r0, #192	; 0xc0
 8000876:	f7ff ff83 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800087a:	2035      	movs	r0, #53	; 0x35
 800087c:	f7ff ff8e 	bl	800079c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000880:	20c1      	movs	r0, #193	; 0xc1
 8000882:	f7ff ff7d 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000886:	2011      	movs	r0, #17
 8000888:	f7ff ff88 	bl	800079c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800088c:	20c5      	movs	r0, #197	; 0xc5
 800088e:	f7ff ff77 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000892:	2045      	movs	r0, #69	; 0x45
 8000894:	f7ff ff82 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000898:	2045      	movs	r0, #69	; 0x45
 800089a:	f7ff ff7f 	bl	800079c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800089e:	20c7      	movs	r0, #199	; 0xc7
 80008a0:	f7ff ff6e 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80008a4:	20a2      	movs	r0, #162	; 0xa2
 80008a6:	f7ff ff79 	bl	800079c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80008aa:	20f2      	movs	r0, #242	; 0xf2
 80008ac:	f7ff ff68 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ff73 	bl	800079c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80008b6:	2026      	movs	r0, #38	; 0x26
 80008b8:	f7ff ff62 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff ff6d 	bl	800079c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80008c2:	20e0      	movs	r0, #224	; 0xe0
 80008c4:	f7ff ff5c 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80008c8:	200f      	movs	r0, #15
 80008ca:	f7ff ff67 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80008ce:	2026      	movs	r0, #38	; 0x26
 80008d0:	f7ff ff64 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80008d4:	2024      	movs	r0, #36	; 0x24
 80008d6:	f7ff ff61 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80008da:	200b      	movs	r0, #11
 80008dc:	f7ff ff5e 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80008e0:	200e      	movs	r0, #14
 80008e2:	f7ff ff5b 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80008e6:	2009      	movs	r0, #9
 80008e8:	f7ff ff58 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80008ec:	2054      	movs	r0, #84	; 0x54
 80008ee:	f7ff ff55 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80008f2:	20a8      	movs	r0, #168	; 0xa8
 80008f4:	f7ff ff52 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80008f8:	2046      	movs	r0, #70	; 0x46
 80008fa:	f7ff ff4f 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80008fe:	200c      	movs	r0, #12
 8000900:	f7ff ff4c 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000904:	2017      	movs	r0, #23
 8000906:	f7ff ff49 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800090a:	2009      	movs	r0, #9
 800090c:	f7ff ff46 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000910:	200f      	movs	r0, #15
 8000912:	f7ff ff43 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000916:	2007      	movs	r0, #7
 8000918:	f7ff ff40 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ff3d 	bl	800079c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000922:	20e1      	movs	r0, #225	; 0xe1
 8000924:	f7ff ff2c 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff ff37 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800092e:	2019      	movs	r0, #25
 8000930:	f7ff ff34 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000934:	201b      	movs	r0, #27
 8000936:	f7ff ff31 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800093a:	2004      	movs	r0, #4
 800093c:	f7ff ff2e 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000940:	2010      	movs	r0, #16
 8000942:	f7ff ff2b 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000946:	2007      	movs	r0, #7
 8000948:	f7ff ff28 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800094c:	202a      	movs	r0, #42	; 0x2a
 800094e:	f7ff ff25 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000952:	2047      	movs	r0, #71	; 0x47
 8000954:	f7ff ff22 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000958:	2039      	movs	r0, #57	; 0x39
 800095a:	f7ff ff1f 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800095e:	2003      	movs	r0, #3
 8000960:	f7ff ff1c 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000964:	2006      	movs	r0, #6
 8000966:	f7ff ff19 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800096a:	2006      	movs	r0, #6
 800096c:	f7ff ff16 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000970:	2030      	movs	r0, #48	; 0x30
 8000972:	f7ff ff13 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000976:	2038      	movs	r0, #56	; 0x38
 8000978:	f7ff ff10 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800097c:	200f      	movs	r0, #15
 800097e:	f7ff ff0d 	bl	800079c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000982:	2036      	movs	r0, #54	; 0x36
 8000984:	f7ff fefc 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000988:	20c8      	movs	r0, #200	; 0xc8
 800098a:	f7ff ff07 	bl	800079c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800098e:	202a      	movs	r0, #42	; 0x2a
 8000990:	f7ff fef6 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff01 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fefe 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fefb 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80009a6:	20ef      	movs	r0, #239	; 0xef
 80009a8:	f7ff fef8 	bl	800079c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80009ac:	202b      	movs	r0, #43	; 0x2b
 80009ae:	f7ff fee7 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fef2 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff feef 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff feec 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80009c4:	203f      	movs	r0, #63	; 0x3f
 80009c6:	f7ff fee9 	bl	800079c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80009ca:	203a      	movs	r0, #58	; 0x3a
 80009cc:	f7ff fed8 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80009d0:	2055      	movs	r0, #85	; 0x55
 80009d2:	f7ff fee3 	bl	800079c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80009d6:	2011      	movs	r0, #17
 80009d8:	f7ff fed2 	bl	8000780 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <LCD_REG_Config+0x230>)
 80009de:	f7ff fe73 	bl	80006c8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80009e2:	2029      	movs	r0, #41	; 0x29
 80009e4:	f7ff fecc 	bl	8000780 <LCD_Write_Cmd>
	
	
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0002bffc 	.word	0x0002bffc

080009f0 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	80fb      	strh	r3, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	807b      	strh	r3, [r7, #2]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000a0e:	202a      	movs	r0, #42	; 0x2a
 8000a10:	f7ff feb6 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff febe 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff feb8 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000a2c:	88fa      	ldrh	r2, [r7, #6]
 8000a2e:	887b      	ldrh	r3, [r7, #2]
 8000a30:	4413      	add	r3, r2
 8000a32:	3b01      	subs	r3, #1
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff feaf 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	887b      	ldrh	r3, [r7, #2]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fea4 	bl	800079c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000a54:	202b      	movs	r0, #43	; 0x2b
 8000a56:	f7ff fe93 	bl	8000780 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fe9b 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000a66:	88bb      	ldrh	r3, [r7, #4]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe95 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000a72:	88ba      	ldrh	r2, [r7, #4]
 8000a74:	883b      	ldrh	r3, [r7, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	121b      	asrs	r3, r3, #8
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe8c 	bl	800079c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000a84:	88ba      	ldrh	r2, [r7, #4]
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	4413      	add	r3, r2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe81 	bl	800079c <LCD_Write_Data>
	
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd90      	pop	{r4, r7, pc}

08000aa2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000ab2:	202c      	movs	r0, #44	; 0x2c
 8000ab4:	f7ff fe64 	bl	8000780 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e006      	b.n	8000acc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fe6b 	bl	800079c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d3f4      	bcc.n	8000abe <LCD_FillColor+0x1c>
		
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000ade:	b590      	push	{r4, r7, lr}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	4611      	mov	r1, r2
 8000aea:	461a      	mov	r2, r3
 8000aec:	4623      	mov	r3, r4
 8000aee:	80fb      	strh	r3, [r7, #6]
 8000af0:	4603      	mov	r3, r0
 8000af2:	80bb      	strh	r3, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
 8000af8:	4613      	mov	r3, r2
 8000afa:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000afc:	883b      	ldrh	r3, [r7, #0]
 8000afe:	887a      	ldrh	r2, [r7, #2]
 8000b00:	88b9      	ldrh	r1, [r7, #4]
 8000b02:	88f8      	ldrh	r0, [r7, #6]
 8000b04:	f7ff ff74 	bl	80009f0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	883a      	ldrh	r2, [r7, #0]
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	8b3b      	ldrh	r3, [r7, #24]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f7ff ffc3 	bl	8000aa2 <LCD_FillColor>
	
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}

08000b24 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	4613      	mov	r3, r2
 8000b34:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	3b20      	subs	r3, #32
 8000b3a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000b3c:	88b9      	ldrh	r1, [r7, #4]
 8000b3e:	88f8      	ldrh	r0, [r7, #6]
 8000b40:	2310      	movs	r3, #16
 8000b42:	2208      	movs	r2, #8
 8000b44:	f7ff ff54 	bl	80009f0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000b48:	202c      	movs	r0, #44	; 0x2c
 8000b4a:	f7ff fe19 	bl	8000780 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73bb      	strb	r3, [r7, #14]
 8000b52:	e023      	b.n	8000b9c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000b54:	7b3a      	ldrb	r2, [r7, #12]
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	4914      	ldr	r1, [pc, #80]	; (8000bac <LCD_DrawChar+0x88>)
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	440a      	add	r2, r1
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000b64:	2300      	movs	r3, #0
 8000b66:	737b      	strb	r3, [r7, #13]
 8000b68:	e012      	b.n	8000b90 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000b74:	201f      	movs	r0, #31
 8000b76:	f7ff fe11 	bl	800079c <LCD_Write_Data>
 8000b7a:	e003      	b.n	8000b84 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000b7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b80:	f7ff fe0c 	bl	800079c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	085b      	lsrs	r3, r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000b8a:	7b7b      	ldrb	r3, [r7, #13]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	737b      	strb	r3, [r7, #13]
 8000b90:	7b7b      	ldrb	r3, [r7, #13]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d9e9      	bls.n	8000b6a <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	73bb      	strb	r3, [r7, #14]
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	d9d8      	bls.n	8000b54 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08002e2c 	.word	0x08002e2c

08000bb0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	603a      	str	r2, [r7, #0]
 8000bba:	80fb      	strh	r3, [r7, #6]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000bc0:	e01c      	b.n	8000bfc <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2be8      	cmp	r3, #232	; 0xe8
 8000bc6:	d904      	bls.n	8000bd2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	3310      	adds	r3, #16
 8000bd0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000bd8:	d903      	bls.n	8000be2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	88b9      	ldrh	r1, [r7, #4]
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff9a 	bl	8000b24 <LCD_DrawChar>
		
		pStr ++;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1de      	bne.n	8000bc2 <LCD_DrawString+0x12>
		
	}
	
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f000 f995 	bl	8000f44 <HAL_Init>
  

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f823 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f7ff fbb3 	bl	8000388 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c22:	f000 f8f5 	bl	8000e10 <MX_USART2_UART_Init>
  MX_FSMC_Init();
 8000c26:	f7ff fafd 	bl	8000224 <MX_FSMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_INIT();
 8000c2a:	f7ff fd5e 	bl	80006ea <LCD_INIT>
  LCD_DrawString(50,20,"Hello World");
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <main+0x4c>)
 8000c30:	2114      	movs	r1, #20
 8000c32:	2032      	movs	r0, #50	; 0x32
 8000c34:	f7ff ffbc 	bl	8000bb0 <LCD_DrawString>
  myfunc();
 8000c38:	f7ff fd0a 	bl	8000650 <myfunc>
  uint32_t data;
  while (1)
  {
    if(HAL_UART_Receive(&huart2, &data, 1, 0) == HAL_OK){
 8000c3c:	1d39      	adds	r1, r7, #4
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2201      	movs	r2, #1
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <main+0x50>)
 8000c44:	f001 f9c4 	bl	8001fd0 <HAL_UART_Receive>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f6      	bne.n	8000c3c <main+0x2c>
      HAL_UART_Transmit(&huart2, &data, 1, 0);
 8000c4e:	1d39      	adds	r1, r7, #4
 8000c50:	2300      	movs	r3, #0
 8000c52:	2201      	movs	r2, #1
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <main+0x50>)
 8000c56:	f001 f938 	bl	8001eca <HAL_UART_Transmit>
    if(HAL_UART_Receive(&huart2, &data, 1, 0) == HAL_OK){
 8000c5a:	e7ef      	b.n	8000c3c <main+0x2c>
 8000c5c:	08002e20 	.word	0x08002e20
 8000c60:	200000c8 	.word	0x200000c8

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b090      	sub	sp, #64	; 0x40
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2228      	movs	r2, #40	; 0x28
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fc30 	bl	80024d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fc68 	bl	8001570 <HAL_RCC_OscConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f818 	bl	8000cda <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000caa:	230f      	movs	r3, #15
 8000cac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fed6 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cce:	f000 f804 	bl	8000cda <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3740      	adds	r7, #64	; 0x40
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cde:	b672      	cpsid	i
}
 8000ce0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_MspInit+0x60>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_MspInit+0x60>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 f91f 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f001 fb8e 	bl	80024e8 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20010000 	.word	0x20010000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	200000c4 	.word	0x200000c4
 8000e00:	20000260 	.word	0x20000260

08000e04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_USART2_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e48:	f000 ffef 	bl	8001e2a <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f7ff ff42 	bl	8000cda <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000c8 	.word	0x200000c8
 8000e60:	40004400 	.word	0x40004400

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d12f      	bne.n	8000ee4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8e:	61d3      	str	r3, [r2, #28]
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000ec8:	f000 f9a6 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000ee0:	f000 f99a 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff ff84 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480b      	ldr	r0, [pc, #44]	; (8000f2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000efe:	490c      	ldr	r1, [pc, #48]	; (8000f30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f14:	4c09      	ldr	r4, [pc, #36]	; (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f001 fae7 	bl	80024f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff fe73 	bl	8000c10 <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f34:	08003484 	.word	0x08003484
  ldr r2, =_sbss
 8000f38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f3c:	2000025c 	.word	0x2000025c

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f92b 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fec0 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f935 	bl	80011fe <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fac:	f000 f90b 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000110 	.word	0x20000110

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000110 	.word	0x20000110

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff49 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff5e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffb0 	bl	800116c <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e179      	b.n	8001520 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8168 	bne.w	800151a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a96      	ldr	r2, [pc, #600]	; (80014a8 <HAL_GPIO_Init+0x290>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a94      	ldr	r2, [pc, #592]	; (80014a8 <HAL_GPIO_Init+0x290>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a94      	ldr	r2, [pc, #592]	; (80014ac <HAL_GPIO_Init+0x294>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a92      	ldr	r2, [pc, #584]	; (80014ac <HAL_GPIO_Init+0x294>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a92      	ldr	r2, [pc, #584]	; (80014b0 <HAL_GPIO_Init+0x298>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a90      	ldr	r2, [pc, #576]	; (80014b0 <HAL_GPIO_Init+0x298>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a90      	ldr	r2, [pc, #576]	; (80014b4 <HAL_GPIO_Init+0x29c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a8e      	ldr	r2, [pc, #568]	; (80014b4 <HAL_GPIO_Init+0x29c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a8e      	ldr	r2, [pc, #568]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a8c      	ldr	r2, [pc, #560]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a75      	ldr	r2, [pc, #468]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80c1 	beq.w	800151a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a48      	ldr	r2, [pc, #288]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a44      	ldr	r2, [pc, #272]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d01f      	beq.n	800141c <HAL_GPIO_Init+0x204>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3b      	ldr	r2, [pc, #236]	; (80014cc <HAL_GPIO_Init+0x2b4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d019      	beq.n	8001418 <HAL_GPIO_Init+0x200>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3a      	ldr	r2, [pc, #232]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d013      	beq.n	8001414 <HAL_GPIO_Init+0x1fc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a39      	ldr	r2, [pc, #228]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_GPIO_Init+0x1f8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x1f4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a37      	ldr	r2, [pc, #220]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_GPIO_Init+0x1f0>
 8001404:	2305      	movs	r3, #5
 8001406:	e00a      	b.n	800141e <HAL_GPIO_Init+0x206>
 8001408:	2306      	movs	r3, #6
 800140a:	e008      	b.n	800141e <HAL_GPIO_Init+0x206>
 800140c:	2304      	movs	r3, #4
 800140e:	e006      	b.n	800141e <HAL_GPIO_Init+0x206>
 8001410:	2303      	movs	r3, #3
 8001412:	e004      	b.n	800141e <HAL_GPIO_Init+0x206>
 8001414:	2302      	movs	r3, #2
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x206>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_GPIO_Init+0x206>
 800141c:	2300      	movs	r3, #0
 800141e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4093      	lsls	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142e:	4925      	ldr	r1, [pc, #148]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	4924      	ldr	r1, [pc, #144]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	43db      	mvns	r3, r3
 800145e:	4920      	ldr	r1, [pc, #128]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001460:	4013      	ands	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	491a      	ldr	r1, [pc, #104]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	4916      	ldr	r1, [pc, #88]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001488:	4013      	ands	r3, r2
 800148a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d025      	beq.n	80014e4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4910      	ldr	r1, [pc, #64]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	e025      	b.n	80014f2 <HAL_GPIO_Init+0x2da>
 80014a6:	bf00      	nop
 80014a8:	10320000 	.word	0x10320000
 80014ac:	10310000 	.word	0x10310000
 80014b0:	10220000 	.word	0x10220000
 80014b4:	10210000 	.word	0x10210000
 80014b8:	10120000 	.word	0x10120000
 80014bc:	10110000 	.word	0x10110000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	40010800 	.word	0x40010800
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40011400 	.word	0x40011400
 80014d8:	40011800 	.word	0x40011800
 80014dc:	40011c00 	.word	0x40011c00
 80014e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_GPIO_Init+0x324>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4913      	ldr	r1, [pc, #76]	; (800153c <HAL_GPIO_Init+0x324>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_GPIO_Init+0x324>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_GPIO_Init+0x324>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
 800150a:	e006      	b.n	800151a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_GPIO_Init+0x324>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	43db      	mvns	r3, r3
 8001514:	4909      	ldr	r1, [pc, #36]	; (800153c <HAL_GPIO_Init+0x324>)
 8001516:	4013      	ands	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	3301      	adds	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	f47f ae7e 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	372c      	adds	r7, #44	; 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	611a      	str	r2, [r3, #16]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e272      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8087 	beq.w	800169e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001590:	4b92      	ldr	r3, [pc, #584]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b04      	cmp	r3, #4
 800159a:	d00c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800159c:	4b8f      	ldr	r3, [pc, #572]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d112      	bne.n	80015ce <HAL_RCC_OscConfig+0x5e>
 80015a8:	4b8c      	ldr	r3, [pc, #560]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b4:	d10b      	bne.n	80015ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b6:	4b89      	ldr	r3, [pc, #548]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d06c      	beq.n	800169c <HAL_RCC_OscConfig+0x12c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d168      	bne.n	800169c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e24c      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x76>
 80015d8:	4b80      	ldr	r3, [pc, #512]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a7f      	ldr	r2, [pc, #508]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e02e      	b.n	8001644 <HAL_RCC_OscConfig+0xd4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7a      	ldr	r2, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b78      	ldr	r3, [pc, #480]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a77      	ldr	r2, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xd4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0xbc>
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a71      	ldr	r2, [pc, #452]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6e      	ldr	r2, [pc, #440]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xd4>
 800162c:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6a      	ldr	r2, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b68      	ldr	r3, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a67      	ldr	r2, [pc, #412]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fcd2 	bl	8000ff4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fcce 	bl	8000ff4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e200      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b5d      	ldr	r3, [pc, #372]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xe4>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fcbe 	bl	8000ff4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fcba 	bl	8000ff4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1ec      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x10c>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x18c>
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x176>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e1c0      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4939      	ldr	r1, [pc, #228]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e03a      	b.n	8001772 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fc73 	bl	8000ff4 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fc6f 	bl	8000ff4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1a1      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4927      	ldr	r1, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fc52 	bl	8000ff4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fc4e 	bl	8000ff4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e180      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d03a      	beq.n	80017f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_RCC_OscConfig+0x274>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fc32 	bl	8000ff4 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fc2e 	bl	8000ff4 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e160      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f000 face 	bl	8001d54 <RCC_Delay>
 80017b8:	e01c      	b.n	80017f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_RCC_OscConfig+0x274>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff fc18 	bl	8000ff4 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c6:	e00f      	b.n	80017e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fc14 	bl	8000ff4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d908      	bls.n	80017e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e146      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	42420000 	.word	0x42420000
 80017e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b92      	ldr	r3, [pc, #584]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e9      	bne.n	80017c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a6 	beq.w	800194e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b8b      	ldr	r3, [pc, #556]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10d      	bne.n	800182e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a87      	ldr	r2, [pc, #540]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <HAL_RCC_OscConfig+0x4c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d118      	bne.n	800186c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183a:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x4c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7e      	ldr	r2, [pc, #504]	; (8001a38 <HAL_RCC_OscConfig+0x4c8>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001846:	f7ff fbd5 	bl	8000ff4 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184e:	f7ff fbd1 	bl	8000ff4 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e103      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	4b75      	ldr	r3, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x4c8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x312>
 8001874:	4b6f      	ldr	r3, [pc, #444]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a6e      	ldr	r2, [pc, #440]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	e02d      	b.n	80018de <HAL_RCC_OscConfig+0x36e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x334>
 800188a:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a69      	ldr	r2, [pc, #420]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6213      	str	r3, [r2, #32]
 8001896:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a66      	ldr	r2, [pc, #408]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	e01c      	b.n	80018de <HAL_RCC_OscConfig+0x36e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d10c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x356>
 80018ac:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a60      	ldr	r2, [pc, #384]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a5d      	ldr	r2, [pc, #372]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0x36e>
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a57      	ldr	r2, [pc, #348]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d015      	beq.n	8001912 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb85 	bl	8000ff4 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fb81 	bl	8000ff4 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0b1      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ee      	beq.n	80018ee <HAL_RCC_OscConfig+0x37e>
 8001910:	e014      	b.n	800193c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff fb6f 	bl	8000ff4 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff fb6b 	bl	8000ff4 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e09b      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ee      	bne.n	800191a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a3b      	ldr	r2, [pc, #236]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8087 	beq.w	8001a66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d061      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d146      	bne.n	80019fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_RCC_OscConfig+0x4cc>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fb3f 	bl	8000ff4 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff fb3b 	bl	8000ff4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e06d      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d108      	bne.n	80019b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4921      	ldr	r1, [pc, #132]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a19      	ldr	r1, [r3, #32]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	430b      	orrs	r3, r1
 80019c6:	491b      	ldr	r1, [pc, #108]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_RCC_OscConfig+0x4cc>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fb0f 	bl	8000ff4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff fb0b 	bl	8000ff4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e03d      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x46a>
 80019f8:	e035      	b.n	8001a66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_RCC_OscConfig+0x4cc>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff faf8 	bl	8000ff4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff faf4 	bl	8000ff4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e026      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x498>
 8001a26:	e01e      	b.n	8001a66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e019      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x500>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0d0      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d910      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0207 	bic.w	r2, r3, #7
 8001a9e:	4965      	ldr	r1, [pc, #404]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0b8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad0:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ada:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001af2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	494d      	ldr	r1, [pc, #308]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d040      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d115      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e07f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e073      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06b      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4936      	ldr	r1, [pc, #216]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff fa46 	bl	8000ff4 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff fa42 	bl	8000ff4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e053      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d210      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	4922      	ldr	r1, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e032      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4916      	ldr	r1, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c02:	f000 f821 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	490a      	ldr	r1, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	5ccb      	ldrb	r3, [r1, r3]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1cc>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1d0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f9a4 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	0800341c 	.word	0x0800341c
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x30>
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x36>
 8001c76:	e027      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7a:	613b      	str	r3, [r7, #16]
      break;
 8001c7c:	e027      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	0c9b      	lsrs	r3, r3, #18
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	0c5b      	lsrs	r3, r3, #17
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001caa:	fb03 f202 	mul.w	r2, r3, r2
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e004      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	613b      	str	r3, [r7, #16]
      break;
 8001cc6:	e002      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cca:	613b      	str	r3, [r7, #16]
      break;
 8001ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cce:	693b      	ldr	r3, [r7, #16]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	08003434 	.word	0x08003434
 8001ce8:	08003444 	.word	0x08003444
 8001cec:	003d0900 	.word	0x003d0900

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000000 	.word	0x20000000

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d08:	f7ff fff2 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	0800342c 	.word	0x0800342c

08001d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0adb      	lsrs	r3, r3, #11
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	0800342c 	.word	0x0800342c

08001d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <RCC_Delay+0x34>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <RCC_Delay+0x38>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0a5b      	lsrs	r3, r3, #9
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d70:	bf00      	nop
  }
  while (Delay --);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	60fa      	str	r2, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f9      	bne.n	8001d70 <RCC_Delay+0x1c>
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	10624dd3 	.word	0x10624dd3

08001d90 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_SRAM_Init+0x1c>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001daa:	d101      	bne.n	8001db0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e038      	b.n	8001e22 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7fe fad5 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	f000 fa89 	bl	80022ec <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	f000 faeb 	bl	80023c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6858      	ldr	r0, [r3, #4]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f000 fb16 	bl	8002428 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	6892      	ldr	r2, [r2, #8]
 8001e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	6892      	ldr	r2, [r2, #8]
 8001e10:	f041 0101 	orr.w	r1, r1, #1
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e042      	b.n	8001ec2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d106      	bne.n	8001e56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff f807 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2224      	movs	r2, #36	; 0x24
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f9ae 	bl	80021d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b08a      	sub	sp, #40	; 0x28
 8001ece:	af02      	add	r7, sp, #8
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d16d      	bne.n	8001fc6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_UART_Transmit+0x2c>
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e066      	b.n	8001fc8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2221      	movs	r2, #33	; 0x21
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f08:	f7ff f874 	bl	8000ff4 <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f22:	d108      	bne.n	8001f36 <HAL_UART_Transmit+0x6c>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d104      	bne.n	8001f36 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e003      	b.n	8001f3e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f3e:	e02a      	b.n	8001f96 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f8d2 	bl	80020f4 <UART_WaitOnFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e036      	b.n	8001fc8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10b      	bne.n	8001f78 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	3302      	adds	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	e007      	b.n	8001f88 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1cf      	bne.n	8001f40 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2140      	movs	r1, #64	; 0x40
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f8a2 	bl	80020f4 <UART_WaitOnFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e006      	b.n	8001fc8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d17c      	bne.n	80020ea <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_UART_Receive+0x2c>
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e075      	b.n	80020ec <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2222      	movs	r2, #34	; 0x22
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002014:	f7fe ffee 	bl	8000ff4 <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202e:	d108      	bne.n	8002042 <HAL_UART_Receive+0x72>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	e003      	b.n	800204a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800204a:	e043      	b.n	80020d4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	2120      	movs	r1, #32
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f84c 	bl	80020f4 <UART_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e042      	b.n	80020ec <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10c      	bne.n	8002086 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	b29b      	uxth	r3, r3
 8002074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002078:	b29a      	uxth	r2, r3
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3302      	adds	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	e01f      	b.n	80020c6 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208e:	d007      	beq.n	80020a0 <HAL_UART_Receive+0xd0>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <HAL_UART_Receive+0xde>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e008      	b.n	80020c0 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1b6      	bne.n	800204c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b090      	sub	sp, #64	; 0x40
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002104:	e050      	b.n	80021a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210c:	d04c      	beq.n	80021a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800210e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <UART_WaitOnFlagUntilTimeout+0x30>
 8002114:	f7fe ff6e 	bl	8000ff4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002120:	429a      	cmp	r2, r3
 8002122:	d241      	bcs.n	80021a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	330c      	adds	r3, #12
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	e853 3f00 	ldrex	r3, [r3]
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002144:	637a      	str	r2, [r7, #52]	; 0x34
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800214a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800214c:	e841 2300 	strex	r3, r2, [r1]
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e5      	bne.n	8002124 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3314      	adds	r3, #20
 800215e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	613b      	str	r3, [r7, #16]
   return(result);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002178:	623a      	str	r2, [r7, #32]
 800217a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217c:	69f9      	ldr	r1, [r7, #28]
 800217e:	6a3a      	ldr	r2, [r7, #32]
 8002180:	e841 2300 	strex	r3, r2, [r1]
 8002184:	61bb      	str	r3, [r7, #24]
   return(result);
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e00f      	b.n	80021c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d09f      	beq.n	8002106 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3740      	adds	r7, #64	; 0x40
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800220a:	f023 030c 	bic.w	r3, r3, #12
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	430b      	orrs	r3, r1
 8002216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <UART_SetConfig+0x114>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002238:	f7ff fd78 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	e002      	b.n	8002246 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002240:	f7ff fd60 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8002244:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	009a      	lsls	r2, r3, #2
 8002250:	441a      	add	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <UART_SetConfig+0x118>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	0119      	lsls	r1, r3, #4
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fbb2 f2f3 	udiv	r2, r2, r3
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <UART_SetConfig+0x118>)
 800227e:	fba3 0302 	umull	r0, r3, r3, r2
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2064      	movs	r0, #100	; 0x64
 8002286:	fb00 f303 	mul.w	r3, r0, r3
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	3332      	adds	r3, #50	; 0x32
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <UART_SetConfig+0x118>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	4419      	add	r1, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <UART_SetConfig+0x118>)
 80022b6:	fba3 0302 	umull	r0, r3, r3, r2
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2064      	movs	r0, #100	; 0x64
 80022be:	fb00 f303 	mul.w	r3, r0, r3
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <UART_SetConfig+0x118>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f003 020f 	and.w	r2, r3, #15
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	440a      	add	r2, r1
 80022da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40013800 	.word	0x40013800
 80022e8:	51eb851f 	.word	0x51eb851f

080022ec <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	f023 0101 	bic.w	r1, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b08      	cmp	r3, #8
 8002314:	d102      	bne.n	800231c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002316:	2340      	movs	r3, #64	; 0x40
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e001      	b.n	8002320 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800232c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002332:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002338:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800233e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002344:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800234a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002350:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002356:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800235c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <FSMC_NORSRAM_Init+0xd0>)
 800237c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002384:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800238c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	ea02 0103 	and.w	r1, r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4319      	orrs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	0008fb7f 	.word	0x0008fb7f

080023c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	431a      	orrs	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	3b02      	subs	r3, #2
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	431a      	orrs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	3201      	adds	r2, #1
 8002414:	4319      	orrs	r1, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800243c:	d11d      	bne.n	800247a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002448:	4013      	ands	r3, r2
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	6811      	ldr	r1, [r2, #0]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	6852      	ldr	r2, [r2, #4]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	4311      	orrs	r1, r2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	6892      	ldr	r2, [r2, #8]
 800245a:	0212      	lsls	r2, r2, #8
 800245c:	4311      	orrs	r1, r2
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	6992      	ldr	r2, [r2, #24]
 8002462:	4311      	orrs	r1, r2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	68d2      	ldr	r2, [r2, #12]
 8002468:	0412      	lsls	r2, r2, #16
 800246a:	430a      	orrs	r2, r1
 800246c:	ea43 0102 	orr.w	r1, r3, r2
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002478:	e005      	b.n	8002486 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	cff00000 	.word	0xcff00000

08002498 <siprintf>:
 8002498:	b40e      	push	{r1, r2, r3}
 800249a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800249e:	b500      	push	{lr}
 80024a0:	b09c      	sub	sp, #112	; 0x70
 80024a2:	ab1d      	add	r3, sp, #116	; 0x74
 80024a4:	9002      	str	r0, [sp, #8]
 80024a6:	9006      	str	r0, [sp, #24]
 80024a8:	9107      	str	r1, [sp, #28]
 80024aa:	9104      	str	r1, [sp, #16]
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <siprintf+0x38>)
 80024ae:	4909      	ldr	r1, [pc, #36]	; (80024d4 <siprintf+0x3c>)
 80024b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80024b4:	9105      	str	r1, [sp, #20]
 80024b6:	6800      	ldr	r0, [r0, #0]
 80024b8:	a902      	add	r1, sp, #8
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f000 f89a 	bl	80025f4 <_svfiprintf_r>
 80024c0:	2200      	movs	r2, #0
 80024c2:	9b02      	ldr	r3, [sp, #8]
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	b01c      	add	sp, #112	; 0x70
 80024c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024cc:	b003      	add	sp, #12
 80024ce:	4770      	bx	lr
 80024d0:	20000058 	.word	0x20000058
 80024d4:	ffff0208 	.word	0xffff0208

080024d8 <memset>:
 80024d8:	4603      	mov	r3, r0
 80024da:	4402      	add	r2, r0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d100      	bne.n	80024e2 <memset+0xa>
 80024e0:	4770      	bx	lr
 80024e2:	f803 1b01 	strb.w	r1, [r3], #1
 80024e6:	e7f9      	b.n	80024dc <memset+0x4>

080024e8 <__errno>:
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <__errno+0x8>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000058 	.word	0x20000058

080024f4 <__libc_init_array>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	2600      	movs	r6, #0
 80024f8:	4d0c      	ldr	r5, [pc, #48]	; (800252c <__libc_init_array+0x38>)
 80024fa:	4c0d      	ldr	r4, [pc, #52]	; (8002530 <__libc_init_array+0x3c>)
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	42a6      	cmp	r6, r4
 8002502:	d109      	bne.n	8002518 <__libc_init_array+0x24>
 8002504:	f000 fc7a 	bl	8002dfc <_init>
 8002508:	2600      	movs	r6, #0
 800250a:	4d0a      	ldr	r5, [pc, #40]	; (8002534 <__libc_init_array+0x40>)
 800250c:	4c0a      	ldr	r4, [pc, #40]	; (8002538 <__libc_init_array+0x44>)
 800250e:	1b64      	subs	r4, r4, r5
 8002510:	10a4      	asrs	r4, r4, #2
 8002512:	42a6      	cmp	r6, r4
 8002514:	d105      	bne.n	8002522 <__libc_init_array+0x2e>
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	f855 3b04 	ldr.w	r3, [r5], #4
 800251c:	4798      	blx	r3
 800251e:	3601      	adds	r6, #1
 8002520:	e7ee      	b.n	8002500 <__libc_init_array+0xc>
 8002522:	f855 3b04 	ldr.w	r3, [r5], #4
 8002526:	4798      	blx	r3
 8002528:	3601      	adds	r6, #1
 800252a:	e7f2      	b.n	8002512 <__libc_init_array+0x1e>
 800252c:	0800347c 	.word	0x0800347c
 8002530:	0800347c 	.word	0x0800347c
 8002534:	0800347c 	.word	0x0800347c
 8002538:	08003480 	.word	0x08003480

0800253c <__retarget_lock_acquire_recursive>:
 800253c:	4770      	bx	lr

0800253e <__retarget_lock_release_recursive>:
 800253e:	4770      	bx	lr

08002540 <__ssputs_r>:
 8002540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002544:	461f      	mov	r7, r3
 8002546:	688e      	ldr	r6, [r1, #8]
 8002548:	4682      	mov	sl, r0
 800254a:	42be      	cmp	r6, r7
 800254c:	460c      	mov	r4, r1
 800254e:	4690      	mov	r8, r2
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	d82c      	bhi.n	80025ae <__ssputs_r+0x6e>
 8002554:	898a      	ldrh	r2, [r1, #12]
 8002556:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800255a:	d026      	beq.n	80025aa <__ssputs_r+0x6a>
 800255c:	6965      	ldr	r5, [r4, #20]
 800255e:	6909      	ldr	r1, [r1, #16]
 8002560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002564:	eba3 0901 	sub.w	r9, r3, r1
 8002568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800256c:	1c7b      	adds	r3, r7, #1
 800256e:	444b      	add	r3, r9
 8002570:	106d      	asrs	r5, r5, #1
 8002572:	429d      	cmp	r5, r3
 8002574:	bf38      	it	cc
 8002576:	461d      	movcc	r5, r3
 8002578:	0553      	lsls	r3, r2, #21
 800257a:	d527      	bpl.n	80025cc <__ssputs_r+0x8c>
 800257c:	4629      	mov	r1, r5
 800257e:	f000 f957 	bl	8002830 <_malloc_r>
 8002582:	4606      	mov	r6, r0
 8002584:	b360      	cbz	r0, 80025e0 <__ssputs_r+0xa0>
 8002586:	464a      	mov	r2, r9
 8002588:	6921      	ldr	r1, [r4, #16]
 800258a:	f000 fbd9 	bl	8002d40 <memcpy>
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	6126      	str	r6, [r4, #16]
 800259c:	444e      	add	r6, r9
 800259e:	6026      	str	r6, [r4, #0]
 80025a0:	463e      	mov	r6, r7
 80025a2:	6165      	str	r5, [r4, #20]
 80025a4:	eba5 0509 	sub.w	r5, r5, r9
 80025a8:	60a5      	str	r5, [r4, #8]
 80025aa:	42be      	cmp	r6, r7
 80025ac:	d900      	bls.n	80025b0 <__ssputs_r+0x70>
 80025ae:	463e      	mov	r6, r7
 80025b0:	4632      	mov	r2, r6
 80025b2:	4641      	mov	r1, r8
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	f000 fb8a 	bl	8002cce <memmove>
 80025ba:	2000      	movs	r0, #0
 80025bc:	68a3      	ldr	r3, [r4, #8]
 80025be:	1b9b      	subs	r3, r3, r6
 80025c0:	60a3      	str	r3, [r4, #8]
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	4433      	add	r3, r6
 80025c6:	6023      	str	r3, [r4, #0]
 80025c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025cc:	462a      	mov	r2, r5
 80025ce:	f000 fb4f 	bl	8002c70 <_realloc_r>
 80025d2:	4606      	mov	r6, r0
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1e0      	bne.n	800259a <__ssputs_r+0x5a>
 80025d8:	4650      	mov	r0, sl
 80025da:	6921      	ldr	r1, [r4, #16]
 80025dc:	f000 fbbe 	bl	8002d5c <_free_r>
 80025e0:	230c      	movs	r3, #12
 80025e2:	f8ca 3000 	str.w	r3, [sl]
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f0:	81a3      	strh	r3, [r4, #12]
 80025f2:	e7e9      	b.n	80025c8 <__ssputs_r+0x88>

080025f4 <_svfiprintf_r>:
 80025f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f8:	4698      	mov	r8, r3
 80025fa:	898b      	ldrh	r3, [r1, #12]
 80025fc:	4607      	mov	r7, r0
 80025fe:	061b      	lsls	r3, r3, #24
 8002600:	460d      	mov	r5, r1
 8002602:	4614      	mov	r4, r2
 8002604:	b09d      	sub	sp, #116	; 0x74
 8002606:	d50e      	bpl.n	8002626 <_svfiprintf_r+0x32>
 8002608:	690b      	ldr	r3, [r1, #16]
 800260a:	b963      	cbnz	r3, 8002626 <_svfiprintf_r+0x32>
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	f000 f90f 	bl	8002830 <_malloc_r>
 8002612:	6028      	str	r0, [r5, #0]
 8002614:	6128      	str	r0, [r5, #16]
 8002616:	b920      	cbnz	r0, 8002622 <_svfiprintf_r+0x2e>
 8002618:	230c      	movs	r3, #12
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002620:	e0d0      	b.n	80027c4 <_svfiprintf_r+0x1d0>
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	616b      	str	r3, [r5, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	9309      	str	r3, [sp, #36]	; 0x24
 800262a:	2320      	movs	r3, #32
 800262c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002630:	2330      	movs	r3, #48	; 0x30
 8002632:	f04f 0901 	mov.w	r9, #1
 8002636:	f8cd 800c 	str.w	r8, [sp, #12]
 800263a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80027dc <_svfiprintf_r+0x1e8>
 800263e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002642:	4623      	mov	r3, r4
 8002644:	469a      	mov	sl, r3
 8002646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800264a:	b10a      	cbz	r2, 8002650 <_svfiprintf_r+0x5c>
 800264c:	2a25      	cmp	r2, #37	; 0x25
 800264e:	d1f9      	bne.n	8002644 <_svfiprintf_r+0x50>
 8002650:	ebba 0b04 	subs.w	fp, sl, r4
 8002654:	d00b      	beq.n	800266e <_svfiprintf_r+0x7a>
 8002656:	465b      	mov	r3, fp
 8002658:	4622      	mov	r2, r4
 800265a:	4629      	mov	r1, r5
 800265c:	4638      	mov	r0, r7
 800265e:	f7ff ff6f 	bl	8002540 <__ssputs_r>
 8002662:	3001      	adds	r0, #1
 8002664:	f000 80a9 	beq.w	80027ba <_svfiprintf_r+0x1c6>
 8002668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800266a:	445a      	add	r2, fp
 800266c:	9209      	str	r2, [sp, #36]	; 0x24
 800266e:	f89a 3000 	ldrb.w	r3, [sl]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80a1 	beq.w	80027ba <_svfiprintf_r+0x1c6>
 8002678:	2300      	movs	r3, #0
 800267a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002682:	f10a 0a01 	add.w	sl, sl, #1
 8002686:	9304      	str	r3, [sp, #16]
 8002688:	9307      	str	r3, [sp, #28]
 800268a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800268e:	931a      	str	r3, [sp, #104]	; 0x68
 8002690:	4654      	mov	r4, sl
 8002692:	2205      	movs	r2, #5
 8002694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002698:	4850      	ldr	r0, [pc, #320]	; (80027dc <_svfiprintf_r+0x1e8>)
 800269a:	f000 fb43 	bl	8002d24 <memchr>
 800269e:	9a04      	ldr	r2, [sp, #16]
 80026a0:	b9d8      	cbnz	r0, 80026da <_svfiprintf_r+0xe6>
 80026a2:	06d0      	lsls	r0, r2, #27
 80026a4:	bf44      	itt	mi
 80026a6:	2320      	movmi	r3, #32
 80026a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ac:	0711      	lsls	r1, r2, #28
 80026ae:	bf44      	itt	mi
 80026b0:	232b      	movmi	r3, #43	; 0x2b
 80026b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b6:	f89a 3000 	ldrb.w	r3, [sl]
 80026ba:	2b2a      	cmp	r3, #42	; 0x2a
 80026bc:	d015      	beq.n	80026ea <_svfiprintf_r+0xf6>
 80026be:	4654      	mov	r4, sl
 80026c0:	2000      	movs	r0, #0
 80026c2:	f04f 0c0a 	mov.w	ip, #10
 80026c6:	9a07      	ldr	r2, [sp, #28]
 80026c8:	4621      	mov	r1, r4
 80026ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026ce:	3b30      	subs	r3, #48	; 0x30
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d94d      	bls.n	8002770 <_svfiprintf_r+0x17c>
 80026d4:	b1b0      	cbz	r0, 8002704 <_svfiprintf_r+0x110>
 80026d6:	9207      	str	r2, [sp, #28]
 80026d8:	e014      	b.n	8002704 <_svfiprintf_r+0x110>
 80026da:	eba0 0308 	sub.w	r3, r0, r8
 80026de:	fa09 f303 	lsl.w	r3, r9, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	46a2      	mov	sl, r4
 80026e6:	9304      	str	r3, [sp, #16]
 80026e8:	e7d2      	b.n	8002690 <_svfiprintf_r+0x9c>
 80026ea:	9b03      	ldr	r3, [sp, #12]
 80026ec:	1d19      	adds	r1, r3, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	9103      	str	r1, [sp, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bfbb      	ittet	lt
 80026f6:	425b      	neglt	r3, r3
 80026f8:	f042 0202 	orrlt.w	r2, r2, #2
 80026fc:	9307      	strge	r3, [sp, #28]
 80026fe:	9307      	strlt	r3, [sp, #28]
 8002700:	bfb8      	it	lt
 8002702:	9204      	strlt	r2, [sp, #16]
 8002704:	7823      	ldrb	r3, [r4, #0]
 8002706:	2b2e      	cmp	r3, #46	; 0x2e
 8002708:	d10c      	bne.n	8002724 <_svfiprintf_r+0x130>
 800270a:	7863      	ldrb	r3, [r4, #1]
 800270c:	2b2a      	cmp	r3, #42	; 0x2a
 800270e:	d134      	bne.n	800277a <_svfiprintf_r+0x186>
 8002710:	9b03      	ldr	r3, [sp, #12]
 8002712:	3402      	adds	r4, #2
 8002714:	1d1a      	adds	r2, r3, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	9203      	str	r2, [sp, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bfb8      	it	lt
 800271e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002722:	9305      	str	r3, [sp, #20]
 8002724:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80027e0 <_svfiprintf_r+0x1ec>
 8002728:	2203      	movs	r2, #3
 800272a:	4650      	mov	r0, sl
 800272c:	7821      	ldrb	r1, [r4, #0]
 800272e:	f000 faf9 	bl	8002d24 <memchr>
 8002732:	b138      	cbz	r0, 8002744 <_svfiprintf_r+0x150>
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	9b04      	ldr	r3, [sp, #16]
 8002738:	eba0 000a 	sub.w	r0, r0, sl
 800273c:	4082      	lsls	r2, r0
 800273e:	4313      	orrs	r3, r2
 8002740:	3401      	adds	r4, #1
 8002742:	9304      	str	r3, [sp, #16]
 8002744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002748:	2206      	movs	r2, #6
 800274a:	4826      	ldr	r0, [pc, #152]	; (80027e4 <_svfiprintf_r+0x1f0>)
 800274c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002750:	f000 fae8 	bl	8002d24 <memchr>
 8002754:	2800      	cmp	r0, #0
 8002756:	d038      	beq.n	80027ca <_svfiprintf_r+0x1d6>
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <_svfiprintf_r+0x1f4>)
 800275a:	bb1b      	cbnz	r3, 80027a4 <_svfiprintf_r+0x1b0>
 800275c:	9b03      	ldr	r3, [sp, #12]
 800275e:	3307      	adds	r3, #7
 8002760:	f023 0307 	bic.w	r3, r3, #7
 8002764:	3308      	adds	r3, #8
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800276a:	4433      	add	r3, r6
 800276c:	9309      	str	r3, [sp, #36]	; 0x24
 800276e:	e768      	b.n	8002642 <_svfiprintf_r+0x4e>
 8002770:	460c      	mov	r4, r1
 8002772:	2001      	movs	r0, #1
 8002774:	fb0c 3202 	mla	r2, ip, r2, r3
 8002778:	e7a6      	b.n	80026c8 <_svfiprintf_r+0xd4>
 800277a:	2300      	movs	r3, #0
 800277c:	f04f 0c0a 	mov.w	ip, #10
 8002780:	4619      	mov	r1, r3
 8002782:	3401      	adds	r4, #1
 8002784:	9305      	str	r3, [sp, #20]
 8002786:	4620      	mov	r0, r4
 8002788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800278c:	3a30      	subs	r2, #48	; 0x30
 800278e:	2a09      	cmp	r2, #9
 8002790:	d903      	bls.n	800279a <_svfiprintf_r+0x1a6>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0c6      	beq.n	8002724 <_svfiprintf_r+0x130>
 8002796:	9105      	str	r1, [sp, #20]
 8002798:	e7c4      	b.n	8002724 <_svfiprintf_r+0x130>
 800279a:	4604      	mov	r4, r0
 800279c:	2301      	movs	r3, #1
 800279e:	fb0c 2101 	mla	r1, ip, r1, r2
 80027a2:	e7f0      	b.n	8002786 <_svfiprintf_r+0x192>
 80027a4:	ab03      	add	r3, sp, #12
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	462a      	mov	r2, r5
 80027aa:	4638      	mov	r0, r7
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <_svfiprintf_r+0x1f8>)
 80027ae:	a904      	add	r1, sp, #16
 80027b0:	f3af 8000 	nop.w
 80027b4:	1c42      	adds	r2, r0, #1
 80027b6:	4606      	mov	r6, r0
 80027b8:	d1d6      	bne.n	8002768 <_svfiprintf_r+0x174>
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	065b      	lsls	r3, r3, #25
 80027be:	f53f af2d 	bmi.w	800261c <_svfiprintf_r+0x28>
 80027c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027c4:	b01d      	add	sp, #116	; 0x74
 80027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ca:	ab03      	add	r3, sp, #12
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	462a      	mov	r2, r5
 80027d0:	4638      	mov	r0, r7
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <_svfiprintf_r+0x1f8>)
 80027d4:	a904      	add	r1, sp, #16
 80027d6:	f000 f91d 	bl	8002a14 <_printf_i>
 80027da:	e7eb      	b.n	80027b4 <_svfiprintf_r+0x1c0>
 80027dc:	08003446 	.word	0x08003446
 80027e0:	0800344c 	.word	0x0800344c
 80027e4:	08003450 	.word	0x08003450
 80027e8:	00000000 	.word	0x00000000
 80027ec:	08002541 	.word	0x08002541

080027f0 <sbrk_aligned>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	4e0e      	ldr	r6, [pc, #56]	; (800282c <sbrk_aligned+0x3c>)
 80027f4:	460c      	mov	r4, r1
 80027f6:	6831      	ldr	r1, [r6, #0]
 80027f8:	4605      	mov	r5, r0
 80027fa:	b911      	cbnz	r1, 8002802 <sbrk_aligned+0x12>
 80027fc:	f000 fa82 	bl	8002d04 <_sbrk_r>
 8002800:	6030      	str	r0, [r6, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 fa7d 	bl	8002d04 <_sbrk_r>
 800280a:	1c43      	adds	r3, r0, #1
 800280c:	d00a      	beq.n	8002824 <sbrk_aligned+0x34>
 800280e:	1cc4      	adds	r4, r0, #3
 8002810:	f024 0403 	bic.w	r4, r4, #3
 8002814:	42a0      	cmp	r0, r4
 8002816:	d007      	beq.n	8002828 <sbrk_aligned+0x38>
 8002818:	1a21      	subs	r1, r4, r0
 800281a:	4628      	mov	r0, r5
 800281c:	f000 fa72 	bl	8002d04 <_sbrk_r>
 8002820:	3001      	adds	r0, #1
 8002822:	d101      	bne.n	8002828 <sbrk_aligned+0x38>
 8002824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002828:	4620      	mov	r0, r4
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	20000254 	.word	0x20000254

08002830 <_malloc_r>:
 8002830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002834:	1ccd      	adds	r5, r1, #3
 8002836:	f025 0503 	bic.w	r5, r5, #3
 800283a:	3508      	adds	r5, #8
 800283c:	2d0c      	cmp	r5, #12
 800283e:	bf38      	it	cc
 8002840:	250c      	movcc	r5, #12
 8002842:	2d00      	cmp	r5, #0
 8002844:	4607      	mov	r7, r0
 8002846:	db01      	blt.n	800284c <_malloc_r+0x1c>
 8002848:	42a9      	cmp	r1, r5
 800284a:	d905      	bls.n	8002858 <_malloc_r+0x28>
 800284c:	230c      	movs	r3, #12
 800284e:	2600      	movs	r6, #0
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4630      	mov	r0, r6
 8002854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002858:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800292c <_malloc_r+0xfc>
 800285c:	f000 f9fc 	bl	8002c58 <__malloc_lock>
 8002860:	f8d8 3000 	ldr.w	r3, [r8]
 8002864:	461c      	mov	r4, r3
 8002866:	bb5c      	cbnz	r4, 80028c0 <_malloc_r+0x90>
 8002868:	4629      	mov	r1, r5
 800286a:	4638      	mov	r0, r7
 800286c:	f7ff ffc0 	bl	80027f0 <sbrk_aligned>
 8002870:	1c43      	adds	r3, r0, #1
 8002872:	4604      	mov	r4, r0
 8002874:	d155      	bne.n	8002922 <_malloc_r+0xf2>
 8002876:	f8d8 4000 	ldr.w	r4, [r8]
 800287a:	4626      	mov	r6, r4
 800287c:	2e00      	cmp	r6, #0
 800287e:	d145      	bne.n	800290c <_malloc_r+0xdc>
 8002880:	2c00      	cmp	r4, #0
 8002882:	d048      	beq.n	8002916 <_malloc_r+0xe6>
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	4631      	mov	r1, r6
 8002888:	4638      	mov	r0, r7
 800288a:	eb04 0903 	add.w	r9, r4, r3
 800288e:	f000 fa39 	bl	8002d04 <_sbrk_r>
 8002892:	4581      	cmp	r9, r0
 8002894:	d13f      	bne.n	8002916 <_malloc_r+0xe6>
 8002896:	6821      	ldr	r1, [r4, #0]
 8002898:	4638      	mov	r0, r7
 800289a:	1a6d      	subs	r5, r5, r1
 800289c:	4629      	mov	r1, r5
 800289e:	f7ff ffa7 	bl	80027f0 <sbrk_aligned>
 80028a2:	3001      	adds	r0, #1
 80028a4:	d037      	beq.n	8002916 <_malloc_r+0xe6>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	442b      	add	r3, r5
 80028aa:	6023      	str	r3, [r4, #0]
 80028ac:	f8d8 3000 	ldr.w	r3, [r8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d038      	beq.n	8002926 <_malloc_r+0xf6>
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	42a2      	cmp	r2, r4
 80028b8:	d12b      	bne.n	8002912 <_malloc_r+0xe2>
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	e00f      	b.n	80028e0 <_malloc_r+0xb0>
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	1b52      	subs	r2, r2, r5
 80028c4:	d41f      	bmi.n	8002906 <_malloc_r+0xd6>
 80028c6:	2a0b      	cmp	r2, #11
 80028c8:	d917      	bls.n	80028fa <_malloc_r+0xca>
 80028ca:	1961      	adds	r1, r4, r5
 80028cc:	42a3      	cmp	r3, r4
 80028ce:	6025      	str	r5, [r4, #0]
 80028d0:	bf18      	it	ne
 80028d2:	6059      	strne	r1, [r3, #4]
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	bf08      	it	eq
 80028d8:	f8c8 1000 	streq.w	r1, [r8]
 80028dc:	5162      	str	r2, [r4, r5]
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	4638      	mov	r0, r7
 80028e2:	f104 060b 	add.w	r6, r4, #11
 80028e6:	f000 f9bd 	bl	8002c64 <__malloc_unlock>
 80028ea:	f026 0607 	bic.w	r6, r6, #7
 80028ee:	1d23      	adds	r3, r4, #4
 80028f0:	1af2      	subs	r2, r6, r3
 80028f2:	d0ae      	beq.n	8002852 <_malloc_r+0x22>
 80028f4:	1b9b      	subs	r3, r3, r6
 80028f6:	50a3      	str	r3, [r4, r2]
 80028f8:	e7ab      	b.n	8002852 <_malloc_r+0x22>
 80028fa:	42a3      	cmp	r3, r4
 80028fc:	6862      	ldr	r2, [r4, #4]
 80028fe:	d1dd      	bne.n	80028bc <_malloc_r+0x8c>
 8002900:	f8c8 2000 	str.w	r2, [r8]
 8002904:	e7ec      	b.n	80028e0 <_malloc_r+0xb0>
 8002906:	4623      	mov	r3, r4
 8002908:	6864      	ldr	r4, [r4, #4]
 800290a:	e7ac      	b.n	8002866 <_malloc_r+0x36>
 800290c:	4634      	mov	r4, r6
 800290e:	6876      	ldr	r6, [r6, #4]
 8002910:	e7b4      	b.n	800287c <_malloc_r+0x4c>
 8002912:	4613      	mov	r3, r2
 8002914:	e7cc      	b.n	80028b0 <_malloc_r+0x80>
 8002916:	230c      	movs	r3, #12
 8002918:	4638      	mov	r0, r7
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	f000 f9a2 	bl	8002c64 <__malloc_unlock>
 8002920:	e797      	b.n	8002852 <_malloc_r+0x22>
 8002922:	6025      	str	r5, [r4, #0]
 8002924:	e7dc      	b.n	80028e0 <_malloc_r+0xb0>
 8002926:	605b      	str	r3, [r3, #4]
 8002928:	deff      	udf	#255	; 0xff
 800292a:	bf00      	nop
 800292c:	20000250 	.word	0x20000250

08002930 <_printf_common>:
 8002930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002934:	4616      	mov	r6, r2
 8002936:	4699      	mov	r9, r3
 8002938:	688a      	ldr	r2, [r1, #8]
 800293a:	690b      	ldr	r3, [r1, #16]
 800293c:	4607      	mov	r7, r0
 800293e:	4293      	cmp	r3, r2
 8002940:	bfb8      	it	lt
 8002942:	4613      	movlt	r3, r2
 8002944:	6033      	str	r3, [r6, #0]
 8002946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800294a:	460c      	mov	r4, r1
 800294c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002950:	b10a      	cbz	r2, 8002956 <_printf_common+0x26>
 8002952:	3301      	adds	r3, #1
 8002954:	6033      	str	r3, [r6, #0]
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	0699      	lsls	r1, r3, #26
 800295a:	bf42      	ittt	mi
 800295c:	6833      	ldrmi	r3, [r6, #0]
 800295e:	3302      	addmi	r3, #2
 8002960:	6033      	strmi	r3, [r6, #0]
 8002962:	6825      	ldr	r5, [r4, #0]
 8002964:	f015 0506 	ands.w	r5, r5, #6
 8002968:	d106      	bne.n	8002978 <_printf_common+0x48>
 800296a:	f104 0a19 	add.w	sl, r4, #25
 800296e:	68e3      	ldr	r3, [r4, #12]
 8002970:	6832      	ldr	r2, [r6, #0]
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	42ab      	cmp	r3, r5
 8002976:	dc2b      	bgt.n	80029d0 <_printf_common+0xa0>
 8002978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800297c:	1e13      	subs	r3, r2, #0
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	bf18      	it	ne
 8002982:	2301      	movne	r3, #1
 8002984:	0692      	lsls	r2, r2, #26
 8002986:	d430      	bmi.n	80029ea <_printf_common+0xba>
 8002988:	4649      	mov	r1, r9
 800298a:	4638      	mov	r0, r7
 800298c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002990:	47c0      	blx	r8
 8002992:	3001      	adds	r0, #1
 8002994:	d023      	beq.n	80029de <_printf_common+0xae>
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	6922      	ldr	r2, [r4, #16]
 800299a:	f003 0306 	and.w	r3, r3, #6
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf14      	ite	ne
 80029a2:	2500      	movne	r5, #0
 80029a4:	6833      	ldreq	r3, [r6, #0]
 80029a6:	f04f 0600 	mov.w	r6, #0
 80029aa:	bf08      	it	eq
 80029ac:	68e5      	ldreq	r5, [r4, #12]
 80029ae:	f104 041a 	add.w	r4, r4, #26
 80029b2:	bf08      	it	eq
 80029b4:	1aed      	subeq	r5, r5, r3
 80029b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80029ba:	bf08      	it	eq
 80029bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bfc4      	itt	gt
 80029c4:	1a9b      	subgt	r3, r3, r2
 80029c6:	18ed      	addgt	r5, r5, r3
 80029c8:	42b5      	cmp	r5, r6
 80029ca:	d11a      	bne.n	8002a02 <_printf_common+0xd2>
 80029cc:	2000      	movs	r0, #0
 80029ce:	e008      	b.n	80029e2 <_printf_common+0xb2>
 80029d0:	2301      	movs	r3, #1
 80029d2:	4652      	mov	r2, sl
 80029d4:	4649      	mov	r1, r9
 80029d6:	4638      	mov	r0, r7
 80029d8:	47c0      	blx	r8
 80029da:	3001      	adds	r0, #1
 80029dc:	d103      	bne.n	80029e6 <_printf_common+0xb6>
 80029de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e6:	3501      	adds	r5, #1
 80029e8:	e7c1      	b.n	800296e <_printf_common+0x3e>
 80029ea:	2030      	movs	r0, #48	; 0x30
 80029ec:	18e1      	adds	r1, r4, r3
 80029ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029f8:	4422      	add	r2, r4
 80029fa:	3302      	adds	r3, #2
 80029fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a00:	e7c2      	b.n	8002988 <_printf_common+0x58>
 8002a02:	2301      	movs	r3, #1
 8002a04:	4622      	mov	r2, r4
 8002a06:	4649      	mov	r1, r9
 8002a08:	4638      	mov	r0, r7
 8002a0a:	47c0      	blx	r8
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	d0e6      	beq.n	80029de <_printf_common+0xae>
 8002a10:	3601      	adds	r6, #1
 8002a12:	e7d9      	b.n	80029c8 <_printf_common+0x98>

08002a14 <_printf_i>:
 8002a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a18:	7e0f      	ldrb	r7, [r1, #24]
 8002a1a:	4691      	mov	r9, r2
 8002a1c:	2f78      	cmp	r7, #120	; 0x78
 8002a1e:	4680      	mov	r8, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	469a      	mov	sl, r3
 8002a24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a2a:	d807      	bhi.n	8002a3c <_printf_i+0x28>
 8002a2c:	2f62      	cmp	r7, #98	; 0x62
 8002a2e:	d80a      	bhi.n	8002a46 <_printf_i+0x32>
 8002a30:	2f00      	cmp	r7, #0
 8002a32:	f000 80d5 	beq.w	8002be0 <_printf_i+0x1cc>
 8002a36:	2f58      	cmp	r7, #88	; 0x58
 8002a38:	f000 80c1 	beq.w	8002bbe <_printf_i+0x1aa>
 8002a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a44:	e03a      	b.n	8002abc <_printf_i+0xa8>
 8002a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a4a:	2b15      	cmp	r3, #21
 8002a4c:	d8f6      	bhi.n	8002a3c <_printf_i+0x28>
 8002a4e:	a101      	add	r1, pc, #4	; (adr r1, 8002a54 <_printf_i+0x40>)
 8002a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a54:	08002aad 	.word	0x08002aad
 8002a58:	08002ac1 	.word	0x08002ac1
 8002a5c:	08002a3d 	.word	0x08002a3d
 8002a60:	08002a3d 	.word	0x08002a3d
 8002a64:	08002a3d 	.word	0x08002a3d
 8002a68:	08002a3d 	.word	0x08002a3d
 8002a6c:	08002ac1 	.word	0x08002ac1
 8002a70:	08002a3d 	.word	0x08002a3d
 8002a74:	08002a3d 	.word	0x08002a3d
 8002a78:	08002a3d 	.word	0x08002a3d
 8002a7c:	08002a3d 	.word	0x08002a3d
 8002a80:	08002bc7 	.word	0x08002bc7
 8002a84:	08002aed 	.word	0x08002aed
 8002a88:	08002b81 	.word	0x08002b81
 8002a8c:	08002a3d 	.word	0x08002a3d
 8002a90:	08002a3d 	.word	0x08002a3d
 8002a94:	08002be9 	.word	0x08002be9
 8002a98:	08002a3d 	.word	0x08002a3d
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002a3d 	.word	0x08002a3d
 8002aa4:	08002a3d 	.word	0x08002a3d
 8002aa8:	08002b89 	.word	0x08002b89
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	1d1a      	adds	r2, r3, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	602a      	str	r2, [r5, #0]
 8002ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0a0      	b.n	8002c02 <_printf_i+0x1ee>
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	682b      	ldr	r3, [r5, #0]
 8002ac4:	0607      	lsls	r7, r0, #24
 8002ac6:	f103 0104 	add.w	r1, r3, #4
 8002aca:	6029      	str	r1, [r5, #0]
 8002acc:	d501      	bpl.n	8002ad2 <_printf_i+0xbe>
 8002ace:	681e      	ldr	r6, [r3, #0]
 8002ad0:	e003      	b.n	8002ada <_printf_i+0xc6>
 8002ad2:	0646      	lsls	r6, r0, #25
 8002ad4:	d5fb      	bpl.n	8002ace <_printf_i+0xba>
 8002ad6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002ada:	2e00      	cmp	r6, #0
 8002adc:	da03      	bge.n	8002ae6 <_printf_i+0xd2>
 8002ade:	232d      	movs	r3, #45	; 0x2d
 8002ae0:	4276      	negs	r6, r6
 8002ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	4859      	ldr	r0, [pc, #356]	; (8002c50 <_printf_i+0x23c>)
 8002aea:	e012      	b.n	8002b12 <_printf_i+0xfe>
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	1d19      	adds	r1, r3, #4
 8002af2:	6029      	str	r1, [r5, #0]
 8002af4:	0605      	lsls	r5, r0, #24
 8002af6:	d501      	bpl.n	8002afc <_printf_i+0xe8>
 8002af8:	681e      	ldr	r6, [r3, #0]
 8002afa:	e002      	b.n	8002b02 <_printf_i+0xee>
 8002afc:	0641      	lsls	r1, r0, #25
 8002afe:	d5fb      	bpl.n	8002af8 <_printf_i+0xe4>
 8002b00:	881e      	ldrh	r6, [r3, #0]
 8002b02:	2f6f      	cmp	r7, #111	; 0x6f
 8002b04:	bf0c      	ite	eq
 8002b06:	2308      	moveq	r3, #8
 8002b08:	230a      	movne	r3, #10
 8002b0a:	4851      	ldr	r0, [pc, #324]	; (8002c50 <_printf_i+0x23c>)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b12:	6865      	ldr	r5, [r4, #4]
 8002b14:	2d00      	cmp	r5, #0
 8002b16:	bfa8      	it	ge
 8002b18:	6821      	ldrge	r1, [r4, #0]
 8002b1a:	60a5      	str	r5, [r4, #8]
 8002b1c:	bfa4      	itt	ge
 8002b1e:	f021 0104 	bicge.w	r1, r1, #4
 8002b22:	6021      	strge	r1, [r4, #0]
 8002b24:	b90e      	cbnz	r6, 8002b2a <_printf_i+0x116>
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	d04b      	beq.n	8002bc2 <_printf_i+0x1ae>
 8002b2a:	4615      	mov	r5, r2
 8002b2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b30:	fb03 6711 	mls	r7, r3, r1, r6
 8002b34:	5dc7      	ldrb	r7, [r0, r7]
 8002b36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b3a:	4637      	mov	r7, r6
 8002b3c:	42bb      	cmp	r3, r7
 8002b3e:	460e      	mov	r6, r1
 8002b40:	d9f4      	bls.n	8002b2c <_printf_i+0x118>
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d10b      	bne.n	8002b5e <_printf_i+0x14a>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	07de      	lsls	r6, r3, #31
 8002b4a:	d508      	bpl.n	8002b5e <_printf_i+0x14a>
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	6861      	ldr	r1, [r4, #4]
 8002b50:	4299      	cmp	r1, r3
 8002b52:	bfde      	ittt	le
 8002b54:	2330      	movle	r3, #48	; 0x30
 8002b56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002b5e:	1b52      	subs	r2, r2, r5
 8002b60:	6122      	str	r2, [r4, #16]
 8002b62:	464b      	mov	r3, r9
 8002b64:	4621      	mov	r1, r4
 8002b66:	4640      	mov	r0, r8
 8002b68:	f8cd a000 	str.w	sl, [sp]
 8002b6c:	aa03      	add	r2, sp, #12
 8002b6e:	f7ff fedf 	bl	8002930 <_printf_common>
 8002b72:	3001      	adds	r0, #1
 8002b74:	d14a      	bne.n	8002c0c <_printf_i+0x1f8>
 8002b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b7a:	b004      	add	sp, #16
 8002b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	f043 0320 	orr.w	r3, r3, #32
 8002b86:	6023      	str	r3, [r4, #0]
 8002b88:	2778      	movs	r7, #120	; 0x78
 8002b8a:	4832      	ldr	r0, [pc, #200]	; (8002c54 <_printf_i+0x240>)
 8002b8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	6829      	ldr	r1, [r5, #0]
 8002b94:	061f      	lsls	r7, r3, #24
 8002b96:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b9a:	d402      	bmi.n	8002ba2 <_printf_i+0x18e>
 8002b9c:	065f      	lsls	r7, r3, #25
 8002b9e:	bf48      	it	mi
 8002ba0:	b2b6      	uxthmi	r6, r6
 8002ba2:	07df      	lsls	r7, r3, #31
 8002ba4:	bf48      	it	mi
 8002ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8002baa:	6029      	str	r1, [r5, #0]
 8002bac:	bf48      	it	mi
 8002bae:	6023      	strmi	r3, [r4, #0]
 8002bb0:	b91e      	cbnz	r6, 8002bba <_printf_i+0x1a6>
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	f023 0320 	bic.w	r3, r3, #32
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	2310      	movs	r3, #16
 8002bbc:	e7a6      	b.n	8002b0c <_printf_i+0xf8>
 8002bbe:	4824      	ldr	r0, [pc, #144]	; (8002c50 <_printf_i+0x23c>)
 8002bc0:	e7e4      	b.n	8002b8c <_printf_i+0x178>
 8002bc2:	4615      	mov	r5, r2
 8002bc4:	e7bd      	b.n	8002b42 <_printf_i+0x12e>
 8002bc6:	682b      	ldr	r3, [r5, #0]
 8002bc8:	6826      	ldr	r6, [r4, #0]
 8002bca:	1d18      	adds	r0, r3, #4
 8002bcc:	6961      	ldr	r1, [r4, #20]
 8002bce:	6028      	str	r0, [r5, #0]
 8002bd0:	0635      	lsls	r5, r6, #24
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	d501      	bpl.n	8002bda <_printf_i+0x1c6>
 8002bd6:	6019      	str	r1, [r3, #0]
 8002bd8:	e002      	b.n	8002be0 <_printf_i+0x1cc>
 8002bda:	0670      	lsls	r0, r6, #25
 8002bdc:	d5fb      	bpl.n	8002bd6 <_printf_i+0x1c2>
 8002bde:	8019      	strh	r1, [r3, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	4615      	mov	r5, r2
 8002be4:	6123      	str	r3, [r4, #16]
 8002be6:	e7bc      	b.n	8002b62 <_printf_i+0x14e>
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	2100      	movs	r1, #0
 8002bec:	1d1a      	adds	r2, r3, #4
 8002bee:	602a      	str	r2, [r5, #0]
 8002bf0:	681d      	ldr	r5, [r3, #0]
 8002bf2:	6862      	ldr	r2, [r4, #4]
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f000 f895 	bl	8002d24 <memchr>
 8002bfa:	b108      	cbz	r0, 8002c00 <_printf_i+0x1ec>
 8002bfc:	1b40      	subs	r0, r0, r5
 8002bfe:	6060      	str	r0, [r4, #4]
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	6123      	str	r3, [r4, #16]
 8002c04:	2300      	movs	r3, #0
 8002c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c0a:	e7aa      	b.n	8002b62 <_printf_i+0x14e>
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	4649      	mov	r1, r9
 8002c10:	4640      	mov	r0, r8
 8002c12:	6923      	ldr	r3, [r4, #16]
 8002c14:	47d0      	blx	sl
 8002c16:	3001      	adds	r0, #1
 8002c18:	d0ad      	beq.n	8002b76 <_printf_i+0x162>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	079b      	lsls	r3, r3, #30
 8002c1e:	d413      	bmi.n	8002c48 <_printf_i+0x234>
 8002c20:	68e0      	ldr	r0, [r4, #12]
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	4298      	cmp	r0, r3
 8002c26:	bfb8      	it	lt
 8002c28:	4618      	movlt	r0, r3
 8002c2a:	e7a6      	b.n	8002b7a <_printf_i+0x166>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	4632      	mov	r2, r6
 8002c30:	4649      	mov	r1, r9
 8002c32:	4640      	mov	r0, r8
 8002c34:	47d0      	blx	sl
 8002c36:	3001      	adds	r0, #1
 8002c38:	d09d      	beq.n	8002b76 <_printf_i+0x162>
 8002c3a:	3501      	adds	r5, #1
 8002c3c:	68e3      	ldr	r3, [r4, #12]
 8002c3e:	9903      	ldr	r1, [sp, #12]
 8002c40:	1a5b      	subs	r3, r3, r1
 8002c42:	42ab      	cmp	r3, r5
 8002c44:	dcf2      	bgt.n	8002c2c <_printf_i+0x218>
 8002c46:	e7eb      	b.n	8002c20 <_printf_i+0x20c>
 8002c48:	2500      	movs	r5, #0
 8002c4a:	f104 0619 	add.w	r6, r4, #25
 8002c4e:	e7f5      	b.n	8002c3c <_printf_i+0x228>
 8002c50:	08003457 	.word	0x08003457
 8002c54:	08003468 	.word	0x08003468

08002c58 <__malloc_lock>:
 8002c58:	4801      	ldr	r0, [pc, #4]	; (8002c60 <__malloc_lock+0x8>)
 8002c5a:	f7ff bc6f 	b.w	800253c <__retarget_lock_acquire_recursive>
 8002c5e:	bf00      	nop
 8002c60:	2000024c 	.word	0x2000024c

08002c64 <__malloc_unlock>:
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <__malloc_unlock+0x8>)
 8002c66:	f7ff bc6a 	b.w	800253e <__retarget_lock_release_recursive>
 8002c6a:	bf00      	nop
 8002c6c:	2000024c 	.word	0x2000024c

08002c70 <_realloc_r>:
 8002c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c74:	4680      	mov	r8, r0
 8002c76:	4614      	mov	r4, r2
 8002c78:	460e      	mov	r6, r1
 8002c7a:	b921      	cbnz	r1, 8002c86 <_realloc_r+0x16>
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c82:	f7ff bdd5 	b.w	8002830 <_malloc_r>
 8002c86:	b92a      	cbnz	r2, 8002c94 <_realloc_r+0x24>
 8002c88:	f000 f868 	bl	8002d5c <_free_r>
 8002c8c:	4625      	mov	r5, r4
 8002c8e:	4628      	mov	r0, r5
 8002c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c94:	f000 f8aa 	bl	8002dec <_malloc_usable_size_r>
 8002c98:	4284      	cmp	r4, r0
 8002c9a:	4607      	mov	r7, r0
 8002c9c:	d802      	bhi.n	8002ca4 <_realloc_r+0x34>
 8002c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ca2:	d812      	bhi.n	8002cca <_realloc_r+0x5a>
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	4640      	mov	r0, r8
 8002ca8:	f7ff fdc2 	bl	8002830 <_malloc_r>
 8002cac:	4605      	mov	r5, r0
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d0ed      	beq.n	8002c8e <_realloc_r+0x1e>
 8002cb2:	42bc      	cmp	r4, r7
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	bf28      	it	cs
 8002cba:	463a      	movcs	r2, r7
 8002cbc:	f000 f840 	bl	8002d40 <memcpy>
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	4640      	mov	r0, r8
 8002cc4:	f000 f84a 	bl	8002d5c <_free_r>
 8002cc8:	e7e1      	b.n	8002c8e <_realloc_r+0x1e>
 8002cca:	4635      	mov	r5, r6
 8002ccc:	e7df      	b.n	8002c8e <_realloc_r+0x1e>

08002cce <memmove>:
 8002cce:	4288      	cmp	r0, r1
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	eb01 0402 	add.w	r4, r1, r2
 8002cd6:	d902      	bls.n	8002cde <memmove+0x10>
 8002cd8:	4284      	cmp	r4, r0
 8002cda:	4623      	mov	r3, r4
 8002cdc:	d807      	bhi.n	8002cee <memmove+0x20>
 8002cde:	1e43      	subs	r3, r0, #1
 8002ce0:	42a1      	cmp	r1, r4
 8002ce2:	d008      	beq.n	8002cf6 <memmove+0x28>
 8002ce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ce8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cec:	e7f8      	b.n	8002ce0 <memmove+0x12>
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4402      	add	r2, r0
 8002cf2:	428a      	cmp	r2, r1
 8002cf4:	d100      	bne.n	8002cf8 <memmove+0x2a>
 8002cf6:	bd10      	pop	{r4, pc}
 8002cf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d00:	e7f7      	b.n	8002cf2 <memmove+0x24>
	...

08002d04 <_sbrk_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	2300      	movs	r3, #0
 8002d08:	4d05      	ldr	r5, [pc, #20]	; (8002d20 <_sbrk_r+0x1c>)
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	602b      	str	r3, [r5, #0]
 8002d10:	f7fe f842 	bl	8000d98 <_sbrk>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_sbrk_r+0x1a>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_sbrk_r+0x1a>
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	20000258 	.word	0x20000258

08002d24 <memchr>:
 8002d24:	4603      	mov	r3, r0
 8002d26:	b510      	push	{r4, lr}
 8002d28:	b2c9      	uxtb	r1, r1
 8002d2a:	4402      	add	r2, r0
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	d101      	bne.n	8002d36 <memchr+0x12>
 8002d32:	2000      	movs	r0, #0
 8002d34:	e003      	b.n	8002d3e <memchr+0x1a>
 8002d36:	7804      	ldrb	r4, [r0, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	428c      	cmp	r4, r1
 8002d3c:	d1f6      	bne.n	8002d2c <memchr+0x8>
 8002d3e:	bd10      	pop	{r4, pc}

08002d40 <memcpy>:
 8002d40:	440a      	add	r2, r1
 8002d42:	4291      	cmp	r1, r2
 8002d44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002d48:	d100      	bne.n	8002d4c <memcpy+0xc>
 8002d4a:	4770      	bx	lr
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d52:	4291      	cmp	r1, r2
 8002d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d58:	d1f9      	bne.n	8002d4e <memcpy+0xe>
 8002d5a:	bd10      	pop	{r4, pc}

08002d5c <_free_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	4605      	mov	r5, r0
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d040      	beq.n	8002de6 <_free_r+0x8a>
 8002d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d68:	1f0c      	subs	r4, r1, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bfb8      	it	lt
 8002d6e:	18e4      	addlt	r4, r4, r3
 8002d70:	f7ff ff72 	bl	8002c58 <__malloc_lock>
 8002d74:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <_free_r+0x8c>)
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	b933      	cbnz	r3, 8002d88 <_free_r+0x2c>
 8002d7a:	6063      	str	r3, [r4, #4]
 8002d7c:	6014      	str	r4, [r2, #0]
 8002d7e:	4628      	mov	r0, r5
 8002d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d84:	f7ff bf6e 	b.w	8002c64 <__malloc_unlock>
 8002d88:	42a3      	cmp	r3, r4
 8002d8a:	d908      	bls.n	8002d9e <_free_r+0x42>
 8002d8c:	6820      	ldr	r0, [r4, #0]
 8002d8e:	1821      	adds	r1, r4, r0
 8002d90:	428b      	cmp	r3, r1
 8002d92:	bf01      	itttt	eq
 8002d94:	6819      	ldreq	r1, [r3, #0]
 8002d96:	685b      	ldreq	r3, [r3, #4]
 8002d98:	1809      	addeq	r1, r1, r0
 8002d9a:	6021      	streq	r1, [r4, #0]
 8002d9c:	e7ed      	b.n	8002d7a <_free_r+0x1e>
 8002d9e:	461a      	mov	r2, r3
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b10b      	cbz	r3, 8002da8 <_free_r+0x4c>
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	d9fa      	bls.n	8002d9e <_free_r+0x42>
 8002da8:	6811      	ldr	r1, [r2, #0]
 8002daa:	1850      	adds	r0, r2, r1
 8002dac:	42a0      	cmp	r0, r4
 8002dae:	d10b      	bne.n	8002dc8 <_free_r+0x6c>
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	4401      	add	r1, r0
 8002db4:	1850      	adds	r0, r2, r1
 8002db6:	4283      	cmp	r3, r0
 8002db8:	6011      	str	r1, [r2, #0]
 8002dba:	d1e0      	bne.n	8002d7e <_free_r+0x22>
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4408      	add	r0, r1
 8002dc2:	6010      	str	r0, [r2, #0]
 8002dc4:	6053      	str	r3, [r2, #4]
 8002dc6:	e7da      	b.n	8002d7e <_free_r+0x22>
 8002dc8:	d902      	bls.n	8002dd0 <_free_r+0x74>
 8002dca:	230c      	movs	r3, #12
 8002dcc:	602b      	str	r3, [r5, #0]
 8002dce:	e7d6      	b.n	8002d7e <_free_r+0x22>
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	1821      	adds	r1, r4, r0
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	bf01      	itttt	eq
 8002dd8:	6819      	ldreq	r1, [r3, #0]
 8002dda:	685b      	ldreq	r3, [r3, #4]
 8002ddc:	1809      	addeq	r1, r1, r0
 8002dde:	6021      	streq	r1, [r4, #0]
 8002de0:	6063      	str	r3, [r4, #4]
 8002de2:	6054      	str	r4, [r2, #4]
 8002de4:	e7cb      	b.n	8002d7e <_free_r+0x22>
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
 8002de8:	20000250 	.word	0x20000250

08002dec <_malloc_usable_size_r>:
 8002dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df0:	1f18      	subs	r0, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bfbc      	itt	lt
 8002df6:	580b      	ldrlt	r3, [r1, r0]
 8002df8:	18c0      	addlt	r0, r0, r3
 8002dfa:	4770      	bx	lr

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
