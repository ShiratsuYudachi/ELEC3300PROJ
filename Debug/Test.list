
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08007c20  08007c20  00017c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e0  080082e0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080082e0  080082e0  000182e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082e8  080082e8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082e8  080082e8  000182e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080082f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200000a8  08008398  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08008398  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014034  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041cd  00000000  00000000  00034105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  000382d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00039580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0cb  00000000  00000000  0003a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a21e  00000000  00000000  00057723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbcb  00000000  00000000  00071941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  000fe55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a8 	.word	0x200000a8
 8000204:	00000000 	.word	0x00000000
 8000208:	08007c04 	.word	0x08007c04

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000ac 	.word	0x200000ac
 8000224:	08007c04 	.word	0x08007c04

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b976 	b.w	8000e68 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14d      	bne.n	8000c40 <__udivmoddi4+0xac>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d968      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b152      	cbz	r2, 8000bc6 <__udivmoddi4+0x32>
 8000bb0:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb4:	f1c2 0120 	rsb	r1, r2, #32
 8000bb8:	fa20 f101 	lsr.w	r1, r0, r1
 8000bbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc0:	ea41 0803 	orr.w	r8, r1, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bca:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bce:	fa1f fe8c 	uxth.w	lr, ip
 8000bd2:	fb01 8817 	mls	r8, r1, r7, r8
 8000bd6:	fb07 f00e 	mul.w	r0, r7, lr
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	4298      	cmp	r0, r3
 8000be2:	d90a      	bls.n	8000bfa <__udivmoddi4+0x66>
 8000be4:	eb1c 0303 	adds.w	r3, ip, r3
 8000be8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000bec:	f080 811e 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f240 811b 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf6:	3f02      	subs	r7, #2
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1a1b      	subs	r3, r3, r0
 8000bfc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c00:	fb01 3310 	mls	r3, r1, r0, r3
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0404 	adds.w	r4, ip, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8109 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8106 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c24:	4464      	add	r4, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	2100      	movs	r1, #0
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa8>
 8000c34:	2300      	movs	r3, #0
 8000c36:	40d4      	lsrs	r4, r2
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	f000 80ee 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c50:	4608      	mov	r0, r1
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	42ab      	cmp	r3, r5
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fc 	bhi.w	8000e60 <__udivmoddi4+0x2cc>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e2      	beq.n	8000c3c <__udivmoddi4+0xa8>
 8000c76:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8091 	bne.w	8000dac <__udivmoddi4+0x218>
 8000c8a:	eba1 000c 	sub.w	r0, r1, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c9c:	fb07 0013 	mls	r0, r7, r3, r0
 8000ca0:	0c25      	lsrs	r5, r4, #16
 8000ca2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	42a8      	cmp	r0, r5
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0505 	adds.w	r5, ip, r5
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	42a8      	cmp	r0, r5
 8000cba:	f200 80ce 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a2d      	subs	r5, r5, r0
 8000cc2:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cc6:	fb07 5510 	mls	r5, r7, r0, r5
 8000cca:	fb0e fe00 	mul.w	lr, lr, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80b6 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000ce8:	4628      	mov	r0, r5
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79e      	b.n	8000c32 <__udivmoddi4+0x9e>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d0a:	fbba f8f9 	udiv	r8, sl, r9
 8000d0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d12:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d16:	408d      	lsls	r5, r1
 8000d18:	fa1f fe8c 	uxth.w	lr, ip
 8000d1c:	431d      	orrs	r5, r3
 8000d1e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d22:	fb08 f00e 	mul.w	r0, r8, lr
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d2c:	42a0      	cmp	r0, r4
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	42a0      	cmp	r0, r4
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	1a24      	subs	r4, r4, r0
 8000d4e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d52:	fb09 4410 	mls	r4, r9, r0, r4
 8000d56:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d5a:	b2ad      	uxth	r5, r5
 8000d5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4464      	add	r4, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9502 	umull	r9, r5, r0, r2
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	42ac      	cmp	r4, r5
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46ae      	mov	lr, r5
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2d0>
 8000d90:	ebb3 0208 	subs.w	r2, r3, r8
 8000d94:	eb64 040e 	sbc.w	r4, r4, lr
 8000d98:	fa22 f301 	lsr.w	r3, r2, r1
 8000d9c:	fa04 f707 	lsl.w	r7, r4, r7
 8000da0:	431f      	orrs	r7, r3
 8000da2:	40cc      	lsrs	r4, r1
 8000da4:	e9c6 7400 	strd	r7, r4, [r6]
 8000da8:	2100      	movs	r1, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000dac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db0:	f1c2 0120 	rsb	r1, r2, #32
 8000db4:	fa25 f301 	lsr.w	r3, r5, r1
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa20 f101 	lsr.w	r1, r0, r1
 8000dc0:	4095      	lsls	r5, r2
 8000dc2:	430d      	orrs	r5, r1
 8000dc4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dc8:	fb07 3311 	mls	r3, r7, r1, r3
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	0c28      	lsrs	r0, r5, #16
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	fb01 f30e 	mul.w	r3, r1, lr
 8000dda:	4283      	cmp	r3, r0
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0000 	adds.w	r0, ip, r0
 8000de6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	4283      	cmp	r3, r0
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3902      	subs	r1, #2
 8000df2:	4460      	add	r0, ip
 8000df4:	1ac0      	subs	r0, r0, r3
 8000df6:	fbb0 f3f7 	udiv	r3, r0, r7
 8000dfa:	fb07 0013 	mls	r0, r7, r3, r0
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e04:	fb03 f00e 	mul.w	r0, r3, lr
 8000e08:	42a8      	cmp	r0, r5
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e10:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	42a8      	cmp	r0, r5
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3b02      	subs	r3, #2
 8000e1c:	4465      	add	r5, ip
 8000e1e:	1a28      	subs	r0, r5, r0
 8000e20:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e707      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000e2c:	462f      	mov	r7, r5
 8000e2e:	e6e4      	b.n	8000bfa <__udivmoddi4+0x66>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6f9      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4643      	mov	r3, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	4464      	add	r4, ip
 8000e56:	3802      	subs	r0, #2
 8000e58:	e747      	b.n	8000cea <__udivmoddi4+0x156>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	4465      	add	r5, ip
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e706      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e64:	4631      	mov	r1, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa8>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <_ZN9UIElement17updateAllElementsEv>:
#include "EasyUI.hpp"
#define SHOW_LOCATION 0 
UIElement* UIElement::allElements[MAX_UI_ELEMENTS] = {};
uint8_t UIElement::elementNum = 0;

void UIElement::updateAllElements(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 8000e72:	463b      	mov	r3, r7
 8000e74:	4910      	ldr	r1, [pc, #64]	; (8000eb8 <_ZN9UIElement17updateAllElementsEv+0x4c>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fc76 	bl	8004768 <XPT2046_Get_TouchedPoint>
    char str[20];
    LCD_DrawString(0, 0, "                     ");
    sprintf(str, "x=%d, y=%d", touch.x, touch.y);
    LCD_DrawString(0, 0, str);
    #endif
    for (int i=0; i<elementNum; i++){
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <_ZN9UIElement17updateAllElementsEv+0x50>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	da11      	bge.n	8000eb0 <_ZN9UIElement17updateAllElementsEv+0x44>
        allElements[i]->update(touch.x, touch.y);
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <_ZN9UIElement17updateAllElementsEv+0x54>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <_ZN9UIElement17updateAllElementsEv+0x54>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	8839      	ldrh	r1, [r7, #0]
 8000ea4:	887a      	ldrh	r2, [r7, #2]
 8000ea6:	4798      	blx	r3
    for (int i=0; i<elementNum; i++){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e7e7      	b.n	8000e80 <_ZN9UIElement17updateAllElementsEv+0x14>
    }
    // Update all UI elements
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000144 	.word	0x20000144
 8000ec0:	200000c4 	.word	0x200000c4

08000ec4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <MX_ADC1_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000eee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ef2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000f02:	f003 fd41 	bl	8004988 <HAL_ADC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f0c:	f001 f854 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f10:	230c      	movs	r3, #12
 8000f12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_ADC1_Init+0x74>)
 8000f22:	f003 fe1b 	bl	8004b5c <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f2c:	f001 f844 	bl	8001fb8 <Error_Handler>
  }

}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000148 	.word	0x20000148
 8000f3c:	40012400 	.word	0x40012400

08000f40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_ADC_MspInit+0x6c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d121      	bne.n	8000fa4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_ADC_MspInit+0x70>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <HAL_ADC_MspInit+0x70>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_ADC_MspInit+0x70>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_ADC_MspInit+0x70>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_ADC_MspInit+0x70>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_ADC_MspInit+0x70>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f90:	2304      	movs	r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f94:	2303      	movs	r3, #3
 8000f96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_ADC_MspInit+0x74>)
 8000fa0:	f004 f920 	bl	80051e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40012400 	.word	0x40012400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40011000 	.word	0x40011000

08000fb8 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <DEBUG_USART_Config+0x50>)
 8000fc0:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000fea:	f005 ff62 	bl	8006eb2 <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <DEBUG_USART_Config+0x4c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0220 	orr.w	r2, r2, #32
 8000ffc:	60da      	str	r2, [r3, #12]
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000178 	.word	0x20000178
 8001008:	40013800 	.word	0x40013800

0800100c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001024:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001026:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800102a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <MX_FSMC_Init+0xbc>)
 800102e:	4a27      	ldr	r2, [pc, #156]	; (80010cc <MX_FSMC_Init+0xc0>)
 8001030:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <MX_FSMC_Init+0xbc>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001046:	2210      	movs	r2, #16
 8001048:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_FSMC_Init+0xbc>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_FSMC_Init+0xbc>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_FSMC_Init+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001072:	2200      	movs	r2, #0
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_FSMC_Init+0xbc>)
 8001078:	2200      	movs	r2, #0
 800107a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_FSMC_Init+0xbc>)
 800107e:	2200      	movs	r2, #0
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001082:	230f      	movs	r3, #15
 8001084:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001086:	230f      	movs	r3, #15
 8001088:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800108a:	23ff      	movs	r3, #255	; 0xff
 800108c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800108e:	230f      	movs	r3, #15
 8001090:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001092:	2310      	movs	r3, #16
 8001094:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001096:	2311      	movs	r3, #17
 8001098:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <MX_FSMC_Init+0xbc>)
 80010a6:	f004 ff5d 	bl	8005f64 <HAL_SRAM_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80010b0:	f000 ff82 	bl	8001fb8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_FSMC_Init+0xc4>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <MX_FSMC_Init+0xc4>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	61d3      	str	r3, [r2, #28]

}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001f8 	.word	0x200001f8
 80010cc:	a0000104 	.word	0xa0000104
 80010d0:	40010000 	.word	0x40010000

080010d4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_FSMC_MspInit+0x78>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d129      	bne.n	8001144 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_FSMC_MspInit+0x78>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_FSMC_MspInit+0x7c>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_FSMC_MspInit+0x7c>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_FSMC_MspInit+0x7c>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800110e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001112:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4619      	mov	r1, r3
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <HAL_FSMC_MspInit+0x80>)
 8001124:	f004 f85e 	bl	80051e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001128:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800112c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4619      	mov	r1, r3
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <HAL_FSMC_MspInit+0x84>)
 800113e:	f004 f851 	bl	80051e4 <HAL_GPIO_Init>
 8001142:	e000      	b.n	8001146 <HAL_FSMC_MspInit+0x72>
    return;
 8001144:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000023c 	.word	0x2000023c
 8001150:	40021000 	.word	0x40021000
 8001154:	40011800 	.word	0x40011800
 8001158:	40011400 	.word	0x40011400

0800115c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001164:	f7ff ffb6 	bl	80010d4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001184:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <MX_GPIO_Init+0x1d4>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a6e      	ldr	r2, [pc, #440]	; (8001344 <MX_GPIO_Init+0x1d4>)
 800118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <MX_GPIO_Init+0x1d4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	4b69      	ldr	r3, [pc, #420]	; (8001344 <MX_GPIO_Init+0x1d4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a68      	ldr	r2, [pc, #416]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b66      	ldr	r3, [pc, #408]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b63      	ldr	r3, [pc, #396]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a62      	ldr	r2, [pc, #392]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b60      	ldr	r3, [pc, #384]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a5c      	ldr	r2, [pc, #368]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e4:	4b57      	ldr	r3, [pc, #348]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a56      	ldr	r2, [pc, #344]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011ea:	f043 0320 	orr.w	r3, r3, #32
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <MX_GPIO_Init+0x1d4>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2107      	movs	r1, #7
 8001200:	4851      	ldr	r0, [pc, #324]	; (8001348 <MX_GPIO_Init+0x1d8>)
 8001202:	f004 f99e 	bl	8005542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	484f      	ldr	r0, [pc, #316]	; (8001348 <MX_GPIO_Init+0x1d8>)
 800120c:	f004 f999 	bl	8005542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2123      	movs	r1, #35	; 0x23
 8001214:	484d      	ldr	r0, [pc, #308]	; (800134c <MX_GPIO_Init+0x1dc>)
 8001216:	f004 f994 	bl	8005542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001220:	484b      	ldr	r0, [pc, #300]	; (8001350 <MX_GPIO_Init+0x1e0>)
 8001222:	f004 f98e 	bl	8005542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 7140 	mov.w	r1, #768	; 0x300
 800122c:	4847      	ldr	r0, [pc, #284]	; (800134c <MX_GPIO_Init+0x1dc>)
 800122e:	f004 f988 	bl	8005542 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001232:	2347      	movs	r3, #71	; 0x47
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4619      	mov	r1, r3
 8001248:	483f      	ldr	r0, [pc, #252]	; (8001348 <MX_GPIO_Init+0x1d8>)
 800124a:	f003 ffcb 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800124e:	2308      	movs	r3, #8
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4619      	mov	r1, r3
 8001260:	4839      	ldr	r0, [pc, #228]	; (8001348 <MX_GPIO_Init+0x1d8>)
 8001262:	f003 ffbf 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001266:	2310      	movs	r3, #16
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126a:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <MX_GPIO_Init+0x1e4>)
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126e:	2301      	movs	r3, #1
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	4619      	mov	r1, r3
 8001278:	4833      	ldr	r0, [pc, #204]	; (8001348 <MX_GPIO_Init+0x1d8>)
 800127a:	f003 ffb3 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 800127e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <MX_GPIO_Init+0x1e8>)
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4619      	mov	r1, r3
 8001292:	4832      	ldr	r0, [pc, #200]	; (800135c <MX_GPIO_Init+0x1ec>)
 8001294:	f003 ffa6 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <MX_GPIO_Init+0x1e8>)
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4619      	mov	r1, r3
 80012aa:	482d      	ldr	r0, [pc, #180]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80012ac:	f003 ff9a 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 80012b0:	f240 1323 	movw	r3, #291	; 0x123
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4820      	ldr	r0, [pc, #128]	; (800134c <MX_GPIO_Init+0x1dc>)
 80012ca:	f003 ff8b 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4619      	mov	r1, r3
 80012e6:	481a      	ldr	r0, [pc, #104]	; (8001350 <MX_GPIO_Init+0x1e0>)
 80012e8:	f003 ff7c 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	4619      	mov	r1, r3
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_GPIO_Init+0x1dc>)
 8001306:	f003 ff6d 	bl	80051e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2006      	movs	r0, #6
 8001310:	f003 fe29 	bl	8004f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001314:	2006      	movs	r0, #6
 8001316:	f003 fe42 	bl	8004f9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	200a      	movs	r0, #10
 8001320:	f003 fe21 	bl	8004f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001324:	200a      	movs	r0, #10
 8001326:	f003 fe3a 	bl	8004f9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2028      	movs	r0, #40	; 0x28
 8001330:	f003 fe19 	bl	8004f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001334:	2028      	movs	r0, #40	; 0x28
 8001336:	f003 fe32 	bl	8004f9e <HAL_NVIC_EnableIRQ>

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	40011800 	.word	0x40011800
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011400 	.word	0x40011400
 8001354:	10210000 	.word	0x10210000
 8001358:	10110000 	.word	0x10110000
 800135c:	40011000 	.word	0x40011000
 8001360:	40010800 	.word	0x40010800

08001364 <_ZN8SERVO42C6getCHKEPhh>:
    uint32_t encoderCarry = 0;
    
    uint8_t stepSpeed = 3;
    

    static uint8_t getCHK(uint8_t instruction[], uint8_t len){
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	429a      	cmp	r2, r3
 800137e:	da0b      	bge.n	8001398 <_ZN8SERVO42C6getCHKEPhh+0x34>
            result+=instruction[i];
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b29a      	uxth	r2, r3
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	4413      	add	r3, r2
 800138e:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3301      	adds	r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	e7ef      	b.n	8001378 <_ZN8SERVO42C6getCHKEPhh+0x14>
        }
        return result & 0xFF;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	b2db      	uxtb	r3, r3
    }
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>:

public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART) : address(address), pUART(pUART){}
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	460b      	mov	r3, r1
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	72fb      	strb	r3, [r7, #11]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	7afa      	ldrb	r2, [r7, #11]
 80013be:	711a      	strb	r2, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	80da      	strh	r2, [r3, #6]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2203      	movs	r2, #3
 80013d0:	731a      	strb	r2, [r3, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <_ZN8SERVO42C4stepEhhm>:

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step(uint8_t direction, uint8_t speed, uint32_t stepCount){
 80013de:	b580      	push	{r7, lr}
 80013e0:	b088      	sub	sp, #32
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	72fb      	strb	r3, [r7, #11]
 80013ec:	4613      	mov	r3, r2
 80013ee:	72bb      	strb	r3, [r7, #10]
        uint8_t instruction[8] = {};
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
        instruction[0] = address;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	753b      	strb	r3, [r7, #20]
        instruction[1] = 0xfd;
 80013fe:	23fd      	movs	r3, #253	; 0xfd
 8001400:	757b      	strb	r3, [r7, #21]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	01db      	lsls	r3, r3, #7
 8001406:	b25a      	sxtb	r2, r3
 8001408:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800140c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	75bb      	strb	r3, [r7, #22]
        for (int i=0; i<4; i++){
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b03      	cmp	r3, #3
 8001422:	dc16      	bgt.n	8001452 <_ZN8SERVO42C4stepEhhm+0x74>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	22ff      	movs	r2, #255	; 0xff
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	461a      	mov	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	401a      	ands	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	40da      	lsrs	r2, r3
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f1c3 0306 	rsb	r3, r3, #6
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	3320      	adds	r3, #32
 8001444:	443b      	add	r3, r7
 8001446:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i=0; i<4; i++){
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	e7e5      	b.n	800141e <_ZN8SERVO42C4stepEhhm+0x40>
        }
        instruction[7] = getCHK(instruction, 8);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2108      	movs	r1, #8
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff83 	bl	8001364 <_ZN8SERVO42C6getCHKEPhh>
 800145e:	4603      	mov	r3, r0
 8001460:	76fb      	strb	r3, [r7, #27]
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	f107 0114 	add.w	r1, r7, #20
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	2208      	movs	r2, #8
 800146e:	f005 fd6d 	bl	8006f4c <HAL_UART_Transmit>
    }
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZN8SERVO42C13stepClockwiseEh>:
    void stepClockwise(uint8_t stepCount){
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
        step(0, stepSpeed, stepCount);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7b1a      	ldrb	r2, [r3, #12]
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2100      	movs	r1, #0
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa5 	bl	80013de <_ZN8SERVO42C4stepEhhm>
    }
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN8SERVO42C20stepCounterClockwiseEh>:
    void stepCounterClockwise(uint8_t stepCount){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
        step(1, stepSpeed, stepCount);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7b1a      	ldrb	r2, [r3, #12]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2101      	movs	r1, #1
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff94 	bl	80013de <_ZN8SERVO42C4stepEhhm>
    }
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <_ZN9UIElementC1Etttt>:
    static void updateAllElements();

protected:
    uint16_t x, y;
    uint16_t width, height;
    UIElement(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	817b      	strh	r3, [r7, #10]
 80014d2:	460b      	mov	r3, r1
 80014d4:	813b      	strh	r3, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <_ZN9UIElementC1Etttt+0x5c>)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	601a      	str	r2, [r3, #0]
        this->x = x;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	897a      	ldrh	r2, [r7, #10]
 80014e4:	809a      	strh	r2, [r3, #4]
        this->y = y;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	893a      	ldrh	r2, [r7, #8]
 80014ea:	80da      	strh	r2, [r3, #6]
        this->width = width;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	88fa      	ldrh	r2, [r7, #6]
 80014f0:	811a      	strh	r2, [r3, #8]
        this->height = height;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8b3a      	ldrh	r2, [r7, #24]
 80014f6:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <_ZN9UIElementC1Etttt+0x60>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	b2d1      	uxtb	r1, r2
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <_ZN9UIElementC1Etttt+0x60>)
 8001502:	7011      	strb	r1, [r2, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <_ZN9UIElementC1Etttt+0x64>)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	08007c80 	.word	0x08007c80
 8001520:	20000144 	.word	0x20000144
 8001524:	200000c4 	.word	0x200000c4

08001528 <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	803b      	strh	r3, [r7, #0]
        return x>=this->x && x<=this->x+width && y>=this->y && y<=this->y+height;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	889b      	ldrh	r3, [r3, #4]
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	429a      	cmp	r2, r3
 8001540:	d318      	bcc.n	8001574 <_ZN9UIElement10checkTouchEtt+0x4c>
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	889b      	ldrh	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	891b      	ldrh	r3, [r3, #8]
 800154e:	440b      	add	r3, r1
 8001550:	429a      	cmp	r2, r3
 8001552:	dc0f      	bgt.n	8001574 <_ZN9UIElement10checkTouchEtt+0x4c>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	88db      	ldrh	r3, [r3, #6]
 8001558:	883a      	ldrh	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d30a      	bcc.n	8001574 <_ZN9UIElement10checkTouchEtt+0x4c>
 800155e:	883a      	ldrh	r2, [r7, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	88db      	ldrh	r3, [r3, #6]
 8001564:	4619      	mov	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	895b      	ldrh	r3, [r3, #10]
 800156a:	440b      	add	r3, r1
 800156c:	429a      	cmp	r2, r3
 800156e:	dc01      	bgt.n	8001574 <_ZN9UIElement10checkTouchEtt+0x4c>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <_ZN9UIElement10checkTouchEtt+0x4e>
 8001574:	2300      	movs	r3, #0
    }
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <_ZN6ButtonC1EttPcPFvvEtttt>:
    char text[TEXT_CHAR_NUM];
public:
    bool isPressed = false;
    void (*onPressed)();

    Button(uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], void (*onPressed)() = nullptr, uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b087      	sub	sp, #28
 8001584:	af02      	add	r7, sp, #8
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	817b      	strh	r3, [r7, #10]
 800158e:	4613      	mov	r3, r2
 8001590:	813b      	strh	r3, [r7, #8]
    : UIElement(x, y, width, height)
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8001596:	893a      	ldrh	r2, [r7, #8]
 8001598:	8979      	ldrh	r1, [r7, #10]
 800159a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4623      	mov	r3, r4
 80015a0:	f7ff ff8e 	bl	80014c0 <_ZN9UIElementC1Etttt>
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <_ZN6ButtonC1EttPcPFvvEtttt+0x68>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	819a      	strh	r2, [r3, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    {
        this->initialColor = color;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015bc:	81da      	strh	r2, [r3, #14]
        this->color = color;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015c2:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80015c8:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3314      	adds	r3, #20
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f006 fb0f 	bl	8007bf4 <strcpy>
        this->onPressed = onPressed;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a3a      	ldr	r2, [r7, #32]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08007c70 	.word	0x08007c70

080015ec <_ZN6Button6renderEv>:

    void render() override
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	8898      	ldrh	r0, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	88d9      	ldrh	r1, [r3, #6]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	891a      	ldrh	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	895b      	ldrh	r3, [r3, #10]
 8001604:	f000 fa8a 	bl	8001b1c <LCD_OpenWindow>
        LCD_FillColor(width*height, color);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	891b      	ldrh	r3, [r3, #8]
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	8a1b      	ldrh	r3, [r3, #16]
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f000 fad5 	bl	8001bce <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x+width/3, y+height/3, text, color, textColor);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	889a      	ldrh	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	891b      	ldrh	r3, [r3, #8]
 800162c:	4910      	ldr	r1, [pc, #64]	; (8001670 <_ZN6Button6renderEv+0x84>)
 800162e:	fba1 1303 	umull	r1, r3, r1, r3
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	b29b      	uxth	r3, r3
 8001636:	4413      	add	r3, r2
 8001638:	b298      	uxth	r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	88da      	ldrh	r2, [r3, #6]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	895b      	ldrh	r3, [r3, #10]
 8001642:	490b      	ldr	r1, [pc, #44]	; (8001670 <_ZN6Button6renderEv+0x84>)
 8001644:	fba1 1303 	umull	r1, r3, r1, r3
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	b299      	uxth	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f103 0214 	add.w	r2, r3, #20
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8a1c      	ldrh	r4, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	8a5b      	ldrh	r3, [r3, #18]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4623      	mov	r3, r4
 8001662:	f000 fbdb 	bl	8001e1c <LCD_DrawString_Color>
    }
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	aaaaaaab 	.word	0xaaaaaaab

08001674 <_ZN6Button6updateEtt>:

    
    void update(u_int16_t x, u_int16_t y) override
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y)){
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	883a      	ldrh	r2, [r7, #0]
 8001688:	8879      	ldrh	r1, [r7, #2]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff4c 	bl	8001528 <_ZN9UIElement10checkTouchEtt>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d017      	beq.n	80016c6 <_ZN6Button6updateEtt+0x52>
            color = YELLOW;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800169c:	821a      	strh	r2, [r3, #16]
            if (!isPressed){
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a4:	f083 0301 	eor.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d013      	beq.n	80016d6 <_ZN6Button6updateEtt+0x62>
                isPressed = true;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                if (onPressed) onPressed();
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <_ZN6Button6updateEtt+0x62>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	4798      	blx	r3
 80016c4:	e007      	b.n	80016d6 <_ZN6Button6updateEtt+0x62>
            }
        }
        else{
            color = initialColor;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	89da      	ldrh	r2, [r3, #14]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color){
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	899a      	ldrh	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	8a1b      	ldrh	r3, [r3, #16]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d008      	beq.n	80016f4 <_ZN6Button6updateEtt+0x80>
            render();
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
            last_color = color;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8a1a      	ldrh	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	819a      	strh	r2, [r3, #12]
        }
    }
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <myfunc>:
#include "EasyUI.hpp"

#include <stdio.h>


void myfunc(){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09e      	sub	sp, #120	; 0x78
 8001700:	af06      	add	r7, sp, #24
  SERVO42C servo(0xe0, &huart2);
 8001702:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001706:	4a35      	ldr	r2, [pc, #212]	; (80017dc <myfunc+0xe0>)
 8001708:	21e0      	movs	r1, #224	; 0xe0
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fe4b 	bl	80013a6 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>

  Button testButton(150, 100, "Test");
 8001710:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001714:	2300      	movs	r3, #0
 8001716:	9304      	str	r3, [sp, #16]
 8001718:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800171c:	9303      	str	r3, [sp, #12]
 800171e:	2332      	movs	r3, #50	; 0x32
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2355      	movs	r3, #85	; 0x55
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2300      	movs	r3, #0
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <myfunc+0xe4>)
 800172c:	2264      	movs	r2, #100	; 0x64
 800172e:	2196      	movs	r1, #150	; 0x96
 8001730:	f7ff ff26 	bl	8001580 <_ZN6ButtonC1EttPcPFvvEtttt>
  testButton.render();
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff57 	bl	80015ec <_ZN6Button6renderEv>
  char str[20];
  strType_XPT2046_Coordinate touch;
  LCD_DrawString(0, 0, "Hello World");
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <myfunc+0xe8>)
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f000 faec 	bl	8001d20 <LCD_DrawString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4926      	ldr	r1, [pc, #152]	; (80017e8 <myfunc+0xec>)
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f80a 	bl	8004768 <XPT2046_Get_TouchedPoint>

    // sprintf(str, "x=%d, y=%d", touch.x, touch.y);
    // LCD_DrawString(0, 0, str);

    
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001754:	2101      	movs	r1, #1
 8001756:	4825      	ldr	r0, [pc, #148]	; (80017ec <myfunc+0xf0>)
 8001758:	f003 fedc 	bl	8005514 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <myfunc+0x7c>
      servo.stepCounterClockwise(10);
 800176c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001770:	210a      	movs	r1, #10
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe92 	bl	800149c <_ZN8SERVO42C20stepCounterClockwiseEh>
    }
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	481c      	ldr	r0, [pc, #112]	; (80017f0 <myfunc+0xf4>)
 800177e:	f003 fec9 	bl	8005514 <HAL_GPIO_ReadPin>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <myfunc+0xa2>
      servo.stepClockwise(10);
 8001792:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001796:	210a      	movs	r1, #10
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fe6e 	bl	800147a <_ZN8SERVO42C13stepClockwiseEh>
    }


    uint8_t data[3] = {};
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <myfunc+0xf8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	723b      	strb	r3, [r7, #8]
 80017a4:	f107 0309 	add.w	r3, r7, #9
 80017a8:	2200      	movs	r2, #0
 80017aa:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
 80017ac:	f107 0108 	add.w	r1, r7, #8
 80017b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b4:	2203      	movs	r2, #3
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <myfunc+0xe0>)
 80017b8:	f005 fc61 	bl	800707e <HAL_UART_Receive>
    char str[3] = {};
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <myfunc+0xf8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	713b      	strb	r3, [r7, #4]
 80017c2:	1d7b      	adds	r3, r7, #5
 80017c4:	2200      	movs	r2, #0
 80017c6:	801a      	strh	r2, [r3, #0]
    sprintf(str, "%02X", data[0]);
 80017c8:	7a3b      	ldrb	r3, [r7, #8]
 80017ca:	461a      	mov	r2, r3
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	490a      	ldr	r1, [pc, #40]	; (80017f8 <myfunc+0xfc>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 f839 	bl	8003848 <sprintf_>
    
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); 
    UIElement::updateAllElements();
 80017d6:	f7ff fb49 	bl	8000e6c <_ZN9UIElement17updateAllElementsEv>
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
    // HAL_Delay(500);
  }
 80017da:	e7b5      	b.n	8001748 <myfunc+0x4c>
 80017dc:	2000079c 	.word	0x2000079c
 80017e0:	08007c20 	.word	0x08007c20
 80017e4:	08007c28 	.word	0x08007c28
 80017e8:	20000008 	.word	0x20000008
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40011000 	.word	0x40011000
 80017f4:	08007c3c 	.word	0x08007c3c
 80017f8:	08007c34 	.word	0x08007c34

080017fc <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	e002      	b.n	800180c <Delay+0x10>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3b01      	subs	r3, #1
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f9      	bne.n	8001806 <Delay+0xa>
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 8001822:	2001      	movs	r0, #1
 8001824:	f000 f826 	bl	8001874 <LCD_BackLed_Control>
	LCD_Rst();
 8001828:	f000 f80c 	bl	8001844 <LCD_Rst>
	LCD_REG_Config();
 800182c:	f000 f85c 	bl	80018e8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8001830:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001834:	22f0      	movs	r2, #240	; 0xf0
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f9e7 	bl	8001c0c <LCD_Clear>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2102      	movs	r1, #2
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <LCD_Rst+0x28>)
 800184e:	f003 fe78 	bl	8005542 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <LCD_Rst+0x2c>)
 8001854:	f7ff ffd2 	bl	80017fc <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2102      	movs	r1, #2
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <LCD_Rst+0x28>)
 800185e:	f003 fe70 	bl	8005542 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <LCD_Rst+0x2c>)
 8001864:	f7ff ffca 	bl	80017fc <Delay>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40011800 	.word	0x40011800
 8001870:	0002bffc 	.word	0x0002bffc

08001874 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <LCD_BackLed_Control+0x34>)
 800188c:	f003 fe59 	bl	8005542 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001890:	e005      	b.n	800189e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <LCD_BackLed_Control+0x34>)
 800189a:	f003 fe52 	bl	8005542 <HAL_GPIO_WritePin>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40011400 	.word	0x40011400

080018ac <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80018b6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	8013      	strh	r3, [r2, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <LCD_Write_Data+0x1c>)
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	8013      	strh	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	60020000 	.word	0x60020000

080018e8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80018ec:	20cf      	movs	r0, #207	; 0xcf
 80018ee:	f7ff ffdd 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff ffe8 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80018f8:	2081      	movs	r0, #129	; 0x81
 80018fa:	f7ff ffe5 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80018fe:	2030      	movs	r0, #48	; 0x30
 8001900:	f7ff ffe2 	bl	80018c8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001904:	20ed      	movs	r0, #237	; 0xed
 8001906:	f7ff ffd1 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800190a:	2064      	movs	r0, #100	; 0x64
 800190c:	f7ff ffdc 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001910:	2003      	movs	r0, #3
 8001912:	f7ff ffd9 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001916:	2012      	movs	r0, #18
 8001918:	f7ff ffd6 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800191c:	2081      	movs	r0, #129	; 0x81
 800191e:	f7ff ffd3 	bl	80018c8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001922:	20e8      	movs	r0, #232	; 0xe8
 8001924:	f7ff ffc2 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001928:	2085      	movs	r0, #133	; 0x85
 800192a:	f7ff ffcd 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800192e:	2010      	movs	r0, #16
 8001930:	f7ff ffca 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001934:	2078      	movs	r0, #120	; 0x78
 8001936:	f7ff ffc7 	bl	80018c8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800193a:	20cb      	movs	r0, #203	; 0xcb
 800193c:	f7ff ffb6 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001940:	2039      	movs	r0, #57	; 0x39
 8001942:	f7ff ffc1 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001946:	202c      	movs	r0, #44	; 0x2c
 8001948:	f7ff ffbe 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff ffbb 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001952:	2034      	movs	r0, #52	; 0x34
 8001954:	f7ff ffb8 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001958:	2002      	movs	r0, #2
 800195a:	f7ff ffb5 	bl	80018c8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800195e:	20f7      	movs	r0, #247	; 0xf7
 8001960:	f7ff ffa4 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001964:	2020      	movs	r0, #32
 8001966:	f7ff ffaf 	bl	80018c8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800196a:	20ea      	movs	r0, #234	; 0xea
 800196c:	f7ff ff9e 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff ffa9 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ffa6 	bl	80018c8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800197c:	20b1      	movs	r0, #177	; 0xb1
 800197e:	f7ff ff95 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff ffa0 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001988:	201b      	movs	r0, #27
 800198a:	f7ff ff9d 	bl	80018c8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800198e:	20b6      	movs	r0, #182	; 0xb6
 8001990:	f7ff ff8c 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001994:	200a      	movs	r0, #10
 8001996:	f7ff ff97 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800199a:	20a2      	movs	r0, #162	; 0xa2
 800199c:	f7ff ff94 	bl	80018c8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80019a0:	20c0      	movs	r0, #192	; 0xc0
 80019a2:	f7ff ff83 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80019a6:	2035      	movs	r0, #53	; 0x35
 80019a8:	f7ff ff8e 	bl	80018c8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80019ac:	20c1      	movs	r0, #193	; 0xc1
 80019ae:	f7ff ff7d 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80019b2:	2011      	movs	r0, #17
 80019b4:	f7ff ff88 	bl	80018c8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80019b8:	20c5      	movs	r0, #197	; 0xc5
 80019ba:	f7ff ff77 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80019be:	2045      	movs	r0, #69	; 0x45
 80019c0:	f7ff ff82 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80019c4:	2045      	movs	r0, #69	; 0x45
 80019c6:	f7ff ff7f 	bl	80018c8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80019ca:	20c7      	movs	r0, #199	; 0xc7
 80019cc:	f7ff ff6e 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80019d0:	20a2      	movs	r0, #162	; 0xa2
 80019d2:	f7ff ff79 	bl	80018c8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80019d6:	20f2      	movs	r0, #242	; 0xf2
 80019d8:	f7ff ff68 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ff73 	bl	80018c8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80019e2:	2026      	movs	r0, #38	; 0x26
 80019e4:	f7ff ff62 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff ff6d 	bl	80018c8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80019ee:	20e0      	movs	r0, #224	; 0xe0
 80019f0:	f7ff ff5c 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80019f4:	200f      	movs	r0, #15
 80019f6:	f7ff ff67 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80019fa:	2026      	movs	r0, #38	; 0x26
 80019fc:	f7ff ff64 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001a00:	2024      	movs	r0, #36	; 0x24
 8001a02:	f7ff ff61 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001a06:	200b      	movs	r0, #11
 8001a08:	f7ff ff5e 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001a0c:	200e      	movs	r0, #14
 8001a0e:	f7ff ff5b 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001a12:	2009      	movs	r0, #9
 8001a14:	f7ff ff58 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001a18:	2054      	movs	r0, #84	; 0x54
 8001a1a:	f7ff ff55 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001a1e:	20a8      	movs	r0, #168	; 0xa8
 8001a20:	f7ff ff52 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001a24:	2046      	movs	r0, #70	; 0x46
 8001a26:	f7ff ff4f 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001a2a:	200c      	movs	r0, #12
 8001a2c:	f7ff ff4c 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001a30:	2017      	movs	r0, #23
 8001a32:	f7ff ff49 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001a36:	2009      	movs	r0, #9
 8001a38:	f7ff ff46 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001a3c:	200f      	movs	r0, #15
 8001a3e:	f7ff ff43 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001a42:	2007      	movs	r0, #7
 8001a44:	f7ff ff40 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff ff3d 	bl	80018c8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001a4e:	20e1      	movs	r0, #225	; 0xe1
 8001a50:	f7ff ff2c 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff ff37 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001a5a:	2019      	movs	r0, #25
 8001a5c:	f7ff ff34 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001a60:	201b      	movs	r0, #27
 8001a62:	f7ff ff31 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001a66:	2004      	movs	r0, #4
 8001a68:	f7ff ff2e 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001a6c:	2010      	movs	r0, #16
 8001a6e:	f7ff ff2b 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001a72:	2007      	movs	r0, #7
 8001a74:	f7ff ff28 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001a78:	202a      	movs	r0, #42	; 0x2a
 8001a7a:	f7ff ff25 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001a7e:	2047      	movs	r0, #71	; 0x47
 8001a80:	f7ff ff22 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001a84:	2039      	movs	r0, #57	; 0x39
 8001a86:	f7ff ff1f 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f7ff ff1c 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001a90:	2006      	movs	r0, #6
 8001a92:	f7ff ff19 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001a96:	2006      	movs	r0, #6
 8001a98:	f7ff ff16 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001a9c:	2030      	movs	r0, #48	; 0x30
 8001a9e:	f7ff ff13 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001aa2:	2038      	movs	r0, #56	; 0x38
 8001aa4:	f7ff ff10 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001aa8:	200f      	movs	r0, #15
 8001aaa:	f7ff ff0d 	bl	80018c8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001aae:	2036      	movs	r0, #54	; 0x36
 8001ab0:	f7ff fefc 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001ab4:	20c8      	movs	r0, #200	; 0xc8
 8001ab6:	f7ff ff07 	bl	80018c8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001aba:	202a      	movs	r0, #42	; 0x2a
 8001abc:	f7ff fef6 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff ff01 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fefe 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fefb 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001ad2:	20ef      	movs	r0, #239	; 0xef
 8001ad4:	f7ff fef8 	bl	80018c8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001ad8:	202b      	movs	r0, #43	; 0x2b
 8001ada:	f7ff fee7 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fef2 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff feef 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff feec 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001af0:	203f      	movs	r0, #63	; 0x3f
 8001af2:	f7ff fee9 	bl	80018c8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001af6:	203a      	movs	r0, #58	; 0x3a
 8001af8:	f7ff fed8 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001afc:	2055      	movs	r0, #85	; 0x55
 8001afe:	f7ff fee3 	bl	80018c8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001b02:	2011      	movs	r0, #17
 8001b04:	f7ff fed2 	bl	80018ac <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <LCD_REG_Config+0x230>)
 8001b0a:	f7ff fe77 	bl	80017fc <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001b0e:	2029      	movs	r0, #41	; 0x29
 8001b10:	f7ff fecc 	bl	80018ac <LCD_Write_Cmd>
	
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	0002bffc 	.word	0x0002bffc

08001b1c <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	80fb      	strh	r3, [r7, #6]
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80bb      	strh	r3, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001b3a:	202a      	movs	r0, #42	; 0x2a
 8001b3c:	f7ff feb6 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff febe 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff feb8 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001b58:	88fa      	ldrh	r2, [r7, #6]
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	121b      	asrs	r3, r3, #8
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff feaf 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fea4 	bl	80018c8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001b80:	202b      	movs	r0, #43	; 0x2b
 8001b82:	f7ff fe93 	bl	80018ac <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fe9b 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fe95 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001b9e:	88ba      	ldrh	r2, [r7, #4]
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	121b      	asrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fe8c 	bl	80018c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001bb0:	88ba      	ldrh	r2, [r7, #4]
 8001bb2:	883b      	ldrh	r3, [r7, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe81 	bl	80018c8 <LCD_Write_Data>
	
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}

08001bce <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001bde:	202c      	movs	r0, #44	; 0x2c
 8001be0:	f7ff fe64 	bl	80018ac <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e006      	b.n	8001bf8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe6b 	bl	80018c8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d3f4      	bcc.n	8001bea <LCD_FillColor+0x1c>
		
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4604      	mov	r4, r0
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80bb      	strh	r3, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]
 8001c26:	4613      	mov	r3, r2
 8001c28:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <LCD_Clear+0x58>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <LCD_Clear+0x2a>
 8001c32:	2300      	movs	r3, #0
 8001c34:	e001      	b.n	8001c3a <LCD_Clear+0x2e>
 8001c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3a:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001c3c:	883b      	ldrh	r3, [r7, #0]
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	88b9      	ldrh	r1, [r7, #4]
 8001c42:	88f8      	ldrh	r0, [r7, #6]
 8001c44:	f7ff ff6a 	bl	8001b1c <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f7ff ffb9 	bl	8001bce <LCD_FillColor>
	
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	20000240 	.word	0x20000240

08001c68 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
 8001c72:	460b      	mov	r3, r1
 8001c74:	80bb      	strh	r3, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <LCD_DrawChar+0xb0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <LCD_DrawChar+0x20>
 8001c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c86:	e000      	b.n	8001c8a <LCD_DrawChar+0x22>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <LCD_DrawChar+0xb0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <LCD_DrawChar+0x30>
 8001c94:	2300      	movs	r3, #0
 8001c96:	e001      	b.n	8001c9c <LCD_DrawChar+0x34>
 8001c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9c:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	3b20      	subs	r3, #32
 8001ca2:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001ca4:	88b9      	ldrh	r1, [r7, #4]
 8001ca6:	88f8      	ldrh	r0, [r7, #6]
 8001ca8:	2310      	movs	r3, #16
 8001caa:	2208      	movs	r2, #8
 8001cac:	f7ff ff36 	bl	8001b1c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001cb0:	202c      	movs	r0, #44	; 0x2c
 8001cb2:	f7ff fdfb 	bl	80018ac <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75bb      	strb	r3, [r7, #22]
 8001cba:	e024      	b.n	8001d06 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	7dbb      	ldrb	r3, [r7, #22]
 8001cc0:	4916      	ldr	r1, [pc, #88]	; (8001d1c <LCD_DrawChar+0xb4>)
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	440a      	add	r2, r1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001ccc:	2300      	movs	r3, #0
 8001cce:	757b      	strb	r3, [r7, #21]
 8001cd0:	e013      	b.n	8001cfa <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 8001cdc:	8a7b      	ldrh	r3, [r7, #18]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fdf2 	bl	80018c8 <LCD_Write_Data>
 8001ce4:	e003      	b.n	8001cee <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8001ce6:	8a3b      	ldrh	r3, [r7, #16]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fded 	bl	80018c8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001cf4:	7d7b      	ldrb	r3, [r7, #21]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	757b      	strb	r3, [r7, #21]
 8001cfa:	7d7b      	ldrb	r3, [r7, #21]
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	d9e8      	bls.n	8001cd2 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001d00:	7dbb      	ldrb	r3, [r7, #22]
 8001d02:	3301      	adds	r3, #1
 8001d04:	75bb      	strb	r3, [r7, #22]
 8001d06:	7dbb      	ldrb	r3, [r7, #22]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d9d7      	bls.n	8001cbc <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000240 	.word	0x20000240
 8001d1c:	08007c88 	.word	0x08007c88

08001d20 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	603a      	str	r2, [r7, #0]
 8001d2a:	80fb      	strh	r3, [r7, #6]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001d30:	e01c      	b.n	8001d6c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	2be8      	cmp	r3, #232	; 0xe8
 8001d36:	d904      	bls.n	8001d42 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	3310      	adds	r3, #16
 8001d40:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001d48:	d903      	bls.n	8001d52 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	88b9      	ldrh	r1, [r7, #4]
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff84 	bl	8001c68 <LCD_DrawChar>
		
		pStr ++;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	3308      	adds	r3, #8
 8001d6a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1de      	bne.n	8001d32 <LCD_DrawString+0x12>
		
	}
	
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4604      	mov	r4, r0
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	80fb      	strh	r3, [r7, #6]
 8001d92:	4603      	mov	r3, r0
 8001d94:	80bb      	strh	r3, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	3b20      	subs	r3, #32
 8001da2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001da4:	88b9      	ldrh	r1, [r7, #4]
 8001da6:	88f8      	ldrh	r0, [r7, #6]
 8001da8:	2310      	movs	r3, #16
 8001daa:	2208      	movs	r2, #8
 8001dac:	f7ff feb6 	bl	8001b1c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001db0:	202c      	movs	r0, #44	; 0x2c
 8001db2:	f7ff fd7b 	bl	80018ac <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001db6:	2300      	movs	r3, #0
 8001db8:	73bb      	strb	r3, [r7, #14]
 8001dba:	e024      	b.n	8001e06 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001dbc:	7b3a      	ldrb	r2, [r7, #12]
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	4915      	ldr	r1, [pc, #84]	; (8001e18 <LCD_DrawChar_Color+0x98>)
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	440a      	add	r2, r1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001dcc:	2300      	movs	r3, #0
 8001dce:	737b      	strb	r3, [r7, #13]
 8001dd0:	e013      	b.n	8001dfa <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8001ddc:	8c3b      	ldrh	r3, [r7, #32]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fd72 	bl	80018c8 <LCD_Write_Data>
 8001de4:	e003      	b.n	8001dee <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8001de6:	883b      	ldrh	r3, [r7, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fd6d 	bl	80018c8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001df4:	7b7b      	ldrb	r3, [r7, #13]
 8001df6:	3301      	adds	r3, #1
 8001df8:	737b      	strb	r3, [r7, #13]
 8001dfa:	7b7b      	ldrb	r3, [r7, #13]
 8001dfc:	2b07      	cmp	r3, #7
 8001dfe:	d9e8      	bls.n	8001dd2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73bb      	strb	r3, [r7, #14]
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d9d7      	bls.n	8001dbc <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08007c88 	.word	0x08007c88

08001e1c <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60ba      	str	r2, [r7, #8]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	81fb      	strh	r3, [r7, #14]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	81bb      	strh	r3, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001e32:	e01f      	b.n	8001e74 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	2be8      	cmp	r3, #232	; 0xe8
 8001e38:	d904      	bls.n	8001e44 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001e3e:	89bb      	ldrh	r3, [r7, #12]
 8001e40:	3310      	adds	r3, #16
 8001e42:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001e44:	89bb      	ldrh	r3, [r7, #12]
 8001e46:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001e4a:	d903      	bls.n	8001e54 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	88fc      	ldrh	r4, [r7, #6]
 8001e5a:	89b9      	ldrh	r1, [r7, #12]
 8001e5c:	89f8      	ldrh	r0, [r7, #14]
 8001e5e:	8c3b      	ldrh	r3, [r7, #32]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4623      	mov	r3, r4
 8001e64:	f7ff ff8c 	bl	8001d80 <LCD_DrawChar_Color>
		
		pStr ++;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	3308      	adds	r3, #8
 8001e72:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1db      	bne.n	8001e34 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd90      	pop	{r4, r7, pc}
	...

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8c:	f002 fd1a 	bl	80048c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e90:	f000 f830 	bl	8001ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e94:	f7ff f96c 	bl	8001170 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001e98:	f7ff f8b8 	bl	800100c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001e9c:	f002 f938 	bl	8004110 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001ea0:	f001 ff7e 	bl	8003da0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ea4:	f001 ffc8 	bl	8003e38 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001ea8:	f002 f814 	bl	8003ed4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001eac:	f001 fed2 	bl	8003c54 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001eb0:	f7ff f808 	bl	8000ec4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001eb4:	f002 f980 	bl	80041b8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001eb8:	f002 f954 	bl	8004164 <MX_USART2_UART_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec2:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <main+0x60>)
 8001ec4:	f003 fb3d 	bl	8005542 <HAL_GPIO_WritePin>
	LCD_INIT();
 8001ec8:	f7ff fca9 	bl	800181e <LCD_INIT>
	
	
	DEBUG_USART_Config();
 8001ecc:	f7ff f874 	bl	8000fb8 <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8001ed0:	f002 f8ea 	bl	80040a8 <TIMER_INIT>
	timer_min(1);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f002 f8f9 	bl	80040cc <timer_min>
  myfunc();
 8001eda:	f7ff fc0f 	bl	80016fc <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8001ede:	4903      	ldr	r1, [pc, #12]	; (8001eec <main+0x64>)
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <main+0x68>)
 8001ee2:	f002 fc41 	bl	8004768 <XPT2046_Get_TouchedPoint>
 8001ee6:	e7fa      	b.n	8001ede <main+0x56>
 8001ee8:	40011400 	.word	0x40011400
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000244 	.word	0x20000244

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001efe:	2228      	movs	r2, #40	; 0x28
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f005 fe2a 	bl	8007b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]
 8001f26:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001f28:	2305      	movs	r3, #5
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f36:	2301      	movs	r3, #1
 8001f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fb30 	bl	80055b8 <HAL_RCC_OscConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001f5e:	f000 f82b 	bl	8001fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f62:	230f      	movs	r3, #15
 8001f64:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fd7e 	bl	8005a80 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f8a:	f000 f815 	bl	8001fb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f96:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 ff29 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001fac:	f000 f804 	bl	8001fb8 <Error_Handler>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3758      	adds	r7, #88	; 0x58
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d204      	bcs.n	8001fe6 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	701a      	strb	r2, [r3, #0]
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e002      	b.n	8002020 <_strnlen_s+0x16>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3301      	adds	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <_strnlen_s+0x28>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	603a      	str	r2, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f3      	bne.n	800201a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1ad3      	subs	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	2b2f      	cmp	r3, #47	; 0x2f
 8002050:	d904      	bls.n	800205c <_is_digit+0x1a>
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b39      	cmp	r3, #57	; 0x39
 8002056:	d801      	bhi.n	800205c <_is_digit+0x1a>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <_is_digit+0x1c>
 800205c:	2300      	movs	r3, #0
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800207a:	e00e      	b.n	800209a <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4618      	mov	r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	1c59      	adds	r1, r3, #1
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6011      	str	r1, [r2, #0]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4403      	add	r3, r0
 8002096:	3b30      	subs	r3, #48	; 0x30
 8002098:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ffce 	bl	8002042 <_is_digit>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e7      	bne.n	800207c <_atoi+0xe>
  }
  return i;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d125      	bne.n	800211e <_out_rev+0x68>
 80020d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d120      	bne.n	800211e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	1c53      	adds	r3, r2, #1
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	68fc      	ldr	r4, [r7, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	2020      	movs	r0, #32
 80020f0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3f0      	bcc.n	80020e2 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002100:	e00d      	b.n	800211e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	3b01      	subs	r3, #1
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	4413      	add	r3, r2
 800210e:	7818      	ldrb	r0, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	1c53      	adds	r3, r2, #1
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	68fc      	ldr	r4, [r7, #12]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	47a0      	blx	r4
  while (len) {
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ee      	bne.n	8002102 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00e      	beq.n	800214c <_out_rev+0x96>
    while (idx - start_idx < width) {
 800212e:	e007      	b.n	8002140 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	1c53      	adds	r3, r2, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	68fc      	ldr	r4, [r7, #12]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	2020      	movs	r0, #32
 800213e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f1      	bhi.n	8002130 <_out_rev+0x7a>
    }
  }

  return idx;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}

08002156 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af04      	add	r7, sp, #16
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d136      	bne.n	80021dc <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <_ntoa_format+0x50>
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d013      	beq.n	80021a6 <_ntoa_format+0x50>
 800217e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <_ntoa_format+0x3a>
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <_ntoa_format+0x50>
      width--;
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	3b01      	subs	r3, #1
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002196:	e006      	b.n	80021a6 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	61fa      	str	r2, [r7, #28]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	2230      	movs	r2, #48	; 0x30
 80021a4:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d20a      	bcs.n	80021c4 <_ntoa_format+0x6e>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b1f      	cmp	r3, #31
 80021b2:	d9f1      	bls.n	8002198 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80021b4:	e006      	b.n	80021c4 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	61fa      	str	r2, [r7, #28]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4413      	add	r3, r2
 80021c0:	2230      	movs	r2, #48	; 0x30
 80021c2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <_ntoa_format+0x86>
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d202      	bcs.n	80021dc <_ntoa_format+0x86>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b1f      	cmp	r3, #31
 80021da:	d9ec      	bls.n	80021b6 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d058      	beq.n	8002298 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d116      	bne.n	800221e <_ntoa_format+0xc8>
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d013      	beq.n	800221e <_ntoa_format+0xc8>
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d003      	beq.n	8002206 <_ntoa_format+0xb0>
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	429a      	cmp	r2, r3
 8002204:	d10b      	bne.n	800221e <_ntoa_format+0xc8>
      len--;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b01      	subs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <_ntoa_format+0xc8>
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	2b10      	cmp	r3, #16
 8002216:	d102      	bne.n	800221e <_ntoa_format+0xc8>
        len--;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3b01      	subs	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	2b10      	cmp	r3, #16
 8002222:	d10f      	bne.n	8002244 <_ntoa_format+0xee>
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10a      	bne.n	8002244 <_ntoa_format+0xee>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b1f      	cmp	r3, #31
 8002232:	d807      	bhi.n	8002244 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	61fa      	str	r2, [r7, #28]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4413      	add	r3, r2
 800223e:	2278      	movs	r2, #120	; 0x78
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e01f      	b.n	8002284 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	2b10      	cmp	r3, #16
 8002248:	d10f      	bne.n	800226a <_ntoa_format+0x114>
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <_ntoa_format+0x114>
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b1f      	cmp	r3, #31
 8002258:	d807      	bhi.n	800226a <_ntoa_format+0x114>
      buf[len++] = 'X';
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	61fa      	str	r2, [r7, #28]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	2258      	movs	r2, #88	; 0x58
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e00c      	b.n	8002284 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	2b02      	cmp	r3, #2
 800226e:	d109      	bne.n	8002284 <_ntoa_format+0x12e>
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b1f      	cmp	r3, #31
 8002274:	d806      	bhi.n	8002284 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	61fa      	str	r2, [r7, #28]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	2262      	movs	r2, #98	; 0x62
 8002282:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b1f      	cmp	r3, #31
 8002288:	d806      	bhi.n	8002298 <_ntoa_format+0x142>
      buf[len++] = '0';
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	61fa      	str	r2, [r7, #28]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4413      	add	r3, r2
 8002294:	2230      	movs	r2, #48	; 0x30
 8002296:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b1f      	cmp	r3, #31
 800229c:	d824      	bhi.n	80022e8 <_ntoa_format+0x192>
    if (negative) {
 800229e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <_ntoa_format+0x160>
      buf[len++] = '-';
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	61fa      	str	r2, [r7, #28]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4413      	add	r3, r2
 80022b0:	222d      	movs	r2, #45	; 0x2d
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e018      	b.n	80022e8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	61fa      	str	r2, [r7, #28]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4413      	add	r3, r2
 80022ca:	222b      	movs	r2, #43	; 0x2b
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e00b      	b.n	80022e8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	61fa      	str	r2, [r7, #28]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4413      	add	r3, r2
 80022e4:	2220      	movs	r2, #32
 80022e6:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	9303      	str	r3, [sp, #12]
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fed9 	bl	80020b6 <_out_rev>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b096      	sub	sp, #88	; 0x58
 8002312:	af08      	add	r7, sp, #32
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	f023 0310 	bic.w	r3, r3, #16
 800232c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800232e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <_ntoa_long+0x30>
 8002338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d032      	beq.n	80023a4 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002342:	fbb3 f2f2 	udiv	r2, r3, r2
 8002346:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002348:	fb01 f202 	mul.w	r2, r1, r2
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002352:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002356:	2b09      	cmp	r3, #9
 8002358:	d804      	bhi.n	8002364 <_ntoa_long+0x56>
 800235a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800235e:	3330      	adds	r3, #48	; 0x30
 8002360:	b2da      	uxtb	r2, r3
 8002362:	e00d      	b.n	8002380 <_ntoa_long+0x72>
 8002364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ntoa_long+0x64>
 800236e:	2241      	movs	r2, #65	; 0x41
 8002370:	e000      	b.n	8002374 <_ntoa_long+0x66>
 8002372:	2261      	movs	r2, #97	; 0x61
 8002374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002378:	4413      	add	r3, r2
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3b0a      	subs	r3, #10
 800237e:	b2da      	uxtb	r2, r3
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	6379      	str	r1, [r7, #52]	; 0x34
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	443b      	add	r3, r7
 800238a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800238e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <_ntoa_long+0x96>
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	2b1f      	cmp	r3, #31
 80023a2:	d9cc      	bls.n	800233e <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80023a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a6:	9306      	str	r3, [sp, #24]
 80023a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023aa:	9305      	str	r3, [sp, #20]
 80023ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ae:	9304      	str	r3, [sp, #16]
 80023b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff fec3 	bl	8002156 <_ntoa_format>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3738      	adds	r7, #56	; 0x38
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b096      	sub	sp, #88	; 0x58
 80023de:	af08      	add	r7, sp, #32
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80023ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023f0:	4313      	orrs	r3, r2
 80023f2:	d103      	bne.n	80023fc <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80023f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f6:	f023 0310 	bic.w	r3, r3, #16
 80023fa:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80023fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <_ntoa_long_long+0x34>
 8002406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800240a:	4313      	orrs	r3, r2
 800240c:	d037      	beq.n	800247e <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800240e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002412:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002416:	f7fe fba5 	bl	8000b64 <__aeabi_uldivmod>
 800241a:	4613      	mov	r3, r2
 800241c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002420:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002424:	2b09      	cmp	r3, #9
 8002426:	d804      	bhi.n	8002432 <_ntoa_long_long+0x58>
 8002428:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800242c:	3330      	adds	r3, #48	; 0x30
 800242e:	b2da      	uxtb	r2, r3
 8002430:	e00d      	b.n	800244e <_ntoa_long_long+0x74>
 8002432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <_ntoa_long_long+0x66>
 800243c:	2241      	movs	r2, #65	; 0x41
 800243e:	e000      	b.n	8002442 <_ntoa_long_long+0x68>
 8002440:	2261      	movs	r2, #97	; 0x61
 8002442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002446:	4413      	add	r3, r2
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3b0a      	subs	r3, #10
 800244c:	b2da      	uxtb	r2, r3
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	1c59      	adds	r1, r3, #1
 8002452:	6379      	str	r1, [r7, #52]	; 0x34
 8002454:	3338      	adds	r3, #56	; 0x38
 8002456:	443b      	add	r3, r7
 8002458:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800245c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002460:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002464:	f7fe fb7e 	bl	8000b64 <__aeabi_uldivmod>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002470:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002474:	4313      	orrs	r3, r2
 8002476:	d002      	beq.n	800247e <_ntoa_long_long+0xa4>
 8002478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247a:	2b1f      	cmp	r3, #31
 800247c:	d9c7      	bls.n	800240e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800247e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002480:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002482:	9206      	str	r2, [sp, #24]
 8002484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002486:	9205      	str	r2, [sp, #20]
 8002488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800248a:	9204      	str	r2, [sp, #16]
 800248c:	9303      	str	r3, [sp, #12]
 800248e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff fe56 	bl	8002156 <_ntoa_format>
 80024aa:	4603      	mov	r3, r0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3738      	adds	r7, #56	; 0x38
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	0000      	movs	r0, r0
	...

080024b8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b09d      	sub	sp, #116	; 0x74
 80024bc:	af06      	add	r7, sp, #24
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80024d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80024da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024de:	f7fe fac7 	bl	8000a70 <__aeabi_dcmpeq>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10f      	bne.n	8002508 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80024e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ea:	9303      	str	r3, [sp, #12]
 80024ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2303      	movs	r3, #3
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	4b82      	ldr	r3, [pc, #520]	; (8002700 <_ftoa+0x248>)
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff fdd9 	bl	80020b6 <_out_rev>
 8002504:	4603      	mov	r3, r0
 8002506:	e224      	b.n	8002952 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800250c:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002510:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002514:	f7fe fab6 	bl	8000a84 <__aeabi_dcmplt>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00f      	beq.n	800253e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800251e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002520:	9303      	str	r3, [sp, #12]
 8002522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	2304      	movs	r3, #4
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	4b76      	ldr	r3, [pc, #472]	; (8002704 <_ftoa+0x24c>)
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fdbe 	bl	80020b6 <_out_rev>
 800253a:	4603      	mov	r3, r0
 800253c:	e209      	b.n	8002952 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800253e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002542:	4b71      	ldr	r3, [pc, #452]	; (8002708 <_ftoa+0x250>)
 8002544:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002548:	f7fe faba 	bl	8000ac0 <__aeabi_dcmpgt>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01d      	beq.n	800258e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <_ftoa+0xa8>
 800255c:	4b6b      	ldr	r3, [pc, #428]	; (800270c <_ftoa+0x254>)
 800255e:	e000      	b.n	8002562 <_ftoa+0xaa>
 8002560:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <_ftoa+0x258>)
 8002562:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002564:	f002 0204 	and.w	r2, r2, #4
 8002568:	2a00      	cmp	r2, #0
 800256a:	d001      	beq.n	8002570 <_ftoa+0xb8>
 800256c:	2204      	movs	r2, #4
 800256e:	e000      	b.n	8002572 <_ftoa+0xba>
 8002570:	2203      	movs	r2, #3
 8002572:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002574:	9103      	str	r1, [sp, #12]
 8002576:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002578:	9102      	str	r1, [sp, #8]
 800257a:	9201      	str	r2, [sp, #4]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff fd96 	bl	80020b6 <_out_rev>
 800258a:	4603      	mov	r3, r0
 800258c:	e1e1      	b.n	8002952 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800258e:	a358      	add	r3, pc, #352	; (adr r3, 80026f0 <_ftoa+0x238>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002598:	f7fe fa92 	bl	8000ac0 <__aeabi_dcmpgt>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <_ftoa+0xfe>
 80025a2:	a355      	add	r3, pc, #340	; (adr r3, 80026f8 <_ftoa+0x240>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025ac:	f7fe fa6a 	bl	8000a84 <__aeabi_dcmplt>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d011      	beq.n	80025da <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80025b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b8:	9304      	str	r3, [sp, #16]
 80025ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025bc:	9303      	str	r3, [sp, #12]
 80025be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80025c6:	e9cd 2300 	strd	r2, r3, [sp]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f9c9 	bl	8002968 <_etoa>
 80025d6:	4603      	mov	r3, r0
 80025d8:	e1bb      	b.n	8002952 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025ec:	f7fe fa4a 	bl	8000a84 <__aeabi_dcmplt>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00e      	beq.n	8002614 <_ftoa+0x15c>
    negative = true;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 80025fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	f7fd fe12 	bl	8000230 <__aeabi_dsub>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800261e:	2306      	movs	r3, #6
 8002620:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002622:	e00a      	b.n	800263a <_ftoa+0x182>
    buf[len++] = '0';
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	657a      	str	r2, [r7, #84]	; 0x54
 800262a:	3358      	adds	r3, #88	; 0x58
 800262c:	443b      	add	r3, r7
 800262e:	2230      	movs	r2, #48	; 0x30
 8002630:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002636:	3b01      	subs	r3, #1
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	2b1f      	cmp	r3, #31
 800263e:	d802      	bhi.n	8002646 <_ftoa+0x18e>
 8002640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002642:	2b09      	cmp	r3, #9
 8002644:	d8ee      	bhi.n	8002624 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002646:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800264a:	f7fe fa43 	bl	8000ad4 <__aeabi_d2iz>
 800264e:	4603      	mov	r3, r0
 8002650:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8002652:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002654:	f7fd ff3a 	bl	80004cc <__aeabi_i2d>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002660:	f7fd fde6 	bl	8000230 <__aeabi_dsub>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <_ftoa+0x25c>)
 800266e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd ff92 	bl	80005a0 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8002684:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002688:	f7fe fa4c 	bl	8000b24 <__aeabi_d2uiz>
 800268c:	4603      	mov	r3, r0
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8002690:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002692:	f7fd ff0b 	bl	80004ac <__aeabi_ui2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800269e:	f7fd fdc7 	bl	8000230 <__aeabi_dsub>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <_ftoa+0x260>)
 80026b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026b4:	f7fe fa04 	bl	8000ac0 <__aeabi_dcmpgt>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d02e      	beq.n	800271c <_ftoa+0x264>
    ++frac;
 80026be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c0:	3301      	adds	r3, #1
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80026c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026c6:	f7fd fef1 	bl	80004ac <__aeabi_ui2d>
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <_ftoa+0x25c>)
 80026cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fe f9e9 	bl	8000aac <__aeabi_dcmpge>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d032      	beq.n	8002746 <_ftoa+0x28e>
      frac = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	3301      	adds	r3, #1
 80026e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ea:	e02c      	b.n	8002746 <_ftoa+0x28e>
 80026ec:	f3af 8000 	nop.w
 80026f0:	00000000 	.word	0x00000000
 80026f4:	41cdcd65 	.word	0x41cdcd65
 80026f8:	00000000 	.word	0x00000000
 80026fc:	c1cdcd65 	.word	0xc1cdcd65
 8002700:	08007c40 	.word	0x08007c40
 8002704:	08007c44 	.word	0x08007c44
 8002708:	7fefffff 	.word	0x7fefffff
 800270c:	08007c4c 	.word	0x08007c4c
 8002710:	08007c54 	.word	0x08007c54
 8002714:	08008278 	.word	0x08008278
 8002718:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b8e      	ldr	r3, [pc, #568]	; (800295c <_ftoa+0x4a4>)
 8002722:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002726:	f7fe f9ad 	bl	8000a84 <__aeabi_dcmplt>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <_ftoa+0x288>
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002742:	3301      	adds	r3, #1
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8002746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002748:	2b00      	cmp	r3, #0
 800274a:	d133      	bne.n	80027b4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800274c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800274e:	f7fd febd 	bl	80004cc <__aeabi_i2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800275a:	f7fd fd69 	bl	8000230 <__aeabi_dsub>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002766:	2301      	movs	r3, #1
 8002768:	461c      	mov	r4, r3
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b7b      	ldr	r3, [pc, #492]	; (800295c <_ftoa+0x4a4>)
 8002770:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002774:	f7fe f986 	bl	8000a84 <__aeabi_dcmplt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <_ftoa+0x2ca>
 800277e:	2300      	movs	r3, #0
 8002780:	461c      	mov	r4, r3
 8002782:	b2e3      	uxtb	r3, r4
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <_ftoa+0x2ea>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b72      	ldr	r3, [pc, #456]	; (800295c <_ftoa+0x4a4>)
 8002794:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002798:	f7fe f992 	bl	8000ac0 <__aeabi_dcmpgt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04c      	beq.n	800283c <_ftoa+0x384>
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d069      	beq.n	8002880 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80027ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ae:	3301      	adds	r3, #1
 80027b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b2:	e065      	b.n	8002880 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 80027b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b6:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80027b8:	e01f      	b.n	80027fa <_ftoa+0x342>
      --count;
 80027ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027bc:	3b01      	subs	r3, #1
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80027c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <_ftoa+0x4a8>)
 80027c4:	fba3 2301 	umull	r2, r3, r3, r1
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	1aca      	subs	r2, r1, r3
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	6579      	str	r1, [r7, #84]	; 0x54
 80027dc:	3230      	adds	r2, #48	; 0x30
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	3358      	adds	r3, #88	; 0x58
 80027e2:	443b      	add	r3, r7
 80027e4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80027e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ea:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <_ftoa+0x4a8>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	2b1f      	cmp	r3, #31
 80027fe:	d9dc      	bls.n	80027ba <_ftoa+0x302>
 8002800:	e009      	b.n	8002816 <_ftoa+0x35e>
        break;
 8002802:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002804:	e007      	b.n	8002816 <_ftoa+0x35e>
      buf[len++] = '0';
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	657a      	str	r2, [r7, #84]	; 0x54
 800280c:	3358      	adds	r3, #88	; 0x58
 800280e:	443b      	add	r3, r7
 8002810:	2230      	movs	r2, #48	; 0x30
 8002812:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002818:	2b1f      	cmp	r3, #31
 800281a:	d804      	bhi.n	8002826 <_ftoa+0x36e>
 800281c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281e:	1e5a      	subs	r2, r3, #1
 8002820:	647a      	str	r2, [r7, #68]	; 0x44
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ef      	bne.n	8002806 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002828:	2b1f      	cmp	r3, #31
 800282a:	d829      	bhi.n	8002880 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	657a      	str	r2, [r7, #84]	; 0x54
 8002832:	3358      	adds	r3, #88	; 0x58
 8002834:	443b      	add	r3, r7
 8002836:	222e      	movs	r2, #46	; 0x2e
 8002838:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800283c:	e020      	b.n	8002880 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800283e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002840:	4b48      	ldr	r3, [pc, #288]	; (8002964 <_ftoa+0x4ac>)
 8002842:	fb83 1302 	smull	r1, r3, r3, r2
 8002846:	1099      	asrs	r1, r3, #2
 8002848:	17d3      	asrs	r3, r2, #31
 800284a:	1ac9      	subs	r1, r1, r3
 800284c:	460b      	mov	r3, r1
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	1ad1      	subs	r1, r2, r3
 8002856:	b2ca      	uxtb	r2, r1
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	6579      	str	r1, [r7, #84]	; 0x54
 800285e:	3230      	adds	r2, #48	; 0x30
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	3358      	adds	r3, #88	; 0x58
 8002864:	443b      	add	r3, r7
 8002866:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	4a3d      	ldr	r2, [pc, #244]	; (8002964 <_ftoa+0x4ac>)
 800286e:	fb82 1203 	smull	r1, r2, r2, r3
 8002872:	1092      	asrs	r2, r2, #2
 8002874:	17db      	asrs	r3, r3, #31
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002882:	2b1f      	cmp	r3, #31
 8002884:	d9db      	bls.n	800283e <_ftoa+0x386>
 8002886:	e000      	b.n	800288a <_ftoa+0x3d2>
      break;
 8002888:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800288a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d123      	bne.n	80028dc <_ftoa+0x424>
 8002894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01e      	beq.n	80028dc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800289e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d014      	beq.n	80028ce <_ftoa+0x416>
 80028a4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <_ftoa+0x3fe>
 80028ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <_ftoa+0x416>
      width--;
 80028b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b8:	3b01      	subs	r3, #1
 80028ba:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80028bc:	e007      	b.n	80028ce <_ftoa+0x416>
      buf[len++] = '0';
 80028be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	657a      	str	r2, [r7, #84]	; 0x54
 80028c4:	3358      	adds	r3, #88	; 0x58
 80028c6:	443b      	add	r3, r7
 80028c8:	2230      	movs	r2, #48	; 0x30
 80028ca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80028ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d202      	bcs.n	80028dc <_ftoa+0x424>
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	2b1f      	cmp	r3, #31
 80028da:	d9f0      	bls.n	80028be <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	2b1f      	cmp	r3, #31
 80028e0:	d827      	bhi.n	8002932 <_ftoa+0x47a>
    if (negative) {
 80028e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <_ftoa+0x444>
      buf[len++] = '-';
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	657a      	str	r2, [r7, #84]	; 0x54
 80028f0:	3358      	adds	r3, #88	; 0x58
 80028f2:	443b      	add	r3, r7
 80028f4:	222d      	movs	r2, #45	; 0x2d
 80028f6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80028fa:	e01a      	b.n	8002932 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80028fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	657a      	str	r2, [r7, #84]	; 0x54
 800290c:	3358      	adds	r3, #88	; 0x58
 800290e:	443b      	add	r3, r7
 8002910:	222b      	movs	r2, #43	; 0x2b
 8002912:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002916:	e00c      	b.n	8002932 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <_ftoa+0x47a>
      buf[len++] = ' ';
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	657a      	str	r2, [r7, #84]	; 0x54
 8002928:	3358      	adds	r3, #88	; 0x58
 800292a:	443b      	add	r3, r7
 800292c:	2220      	movs	r2, #32
 800292e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002934:	9303      	str	r3, [sp, #12]
 8002936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff fbb3 	bl	80020b6 <_out_rev>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	375c      	adds	r7, #92	; 0x5c
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	bf00      	nop
 800295c:	3fe00000 	.word	0x3fe00000
 8002960:	cccccccd 	.word	0xcccccccd
 8002964:	66666667 	.word	0x66666667

08002968 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296c:	b09d      	sub	sp, #116	; 0x74
 800296e:	af06      	add	r7, sp, #24
 8002970:	61f8      	str	r0, [r7, #28]
 8002972:	61b9      	str	r1, [r7, #24]
 8002974:	617a      	str	r2, [r7, #20]
 8002976:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002978:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800297c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002980:	f7fe f876 	bl	8000a70 <__aeabi_dcmpeq>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d014      	beq.n	80029b4 <_etoa+0x4c>
 800298a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800298e:	4bc4      	ldr	r3, [pc, #784]	; (8002ca0 <_etoa+0x338>)
 8002990:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002994:	f7fe f894 	bl	8000ac0 <__aeabi_dcmpgt>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <_etoa+0x4c>
 800299e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029a2:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80029a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029aa:	f7fe f86b 	bl	8000a84 <__aeabi_dcmplt>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80029b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029b8:	9304      	str	r3, [sp, #16]
 80029ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029be:	9303      	str	r3, [sp, #12]
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c4:	9302      	str	r3, [sp, #8]
 80029c6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80029ca:	e9cd 2300 	strd	r2, r3, [sp]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	69f8      	ldr	r0, [r7, #28]
 80029d6:	f7ff fd6f 	bl	80024b8 <_ftoa>
 80029da:	4603      	mov	r3, r0
 80029dc:	e247      	b.n	8002e6e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 80029de:	2301      	movs	r3, #1
 80029e0:	461e      	mov	r6, r3
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029ee:	f7fe f849 	bl	8000a84 <__aeabi_dcmplt>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <_etoa+0x94>
 80029f8:	2300      	movs	r3, #0
 80029fa:	461e      	mov	r6, r3
 80029fc:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002a00:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <_etoa+0xb8>
    value = -value;
 8002a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a1c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002a2c:	2306      	movs	r3, #6
 8002a2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002a32:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002a36:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002a3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	0d0a      	lsrs	r2, r1, #20
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002a60:	4644      	mov	r4, r8
 8002a62:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002a66:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002a6a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002a6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a70:	f7fd fd2c 	bl	80004cc <__aeabi_i2d>
 8002a74:	a37e      	add	r3, pc, #504	; (adr r3, 8002c70 <_etoa+0x308>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fd91 	bl	80005a0 <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	a37c      	add	r3, pc, #496	; (adr r3, 8002c78 <_etoa+0x310>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fbd2 	bl	8000234 <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	461d      	mov	r5, r3
 8002a98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	4b80      	ldr	r3, [pc, #512]	; (8002ca4 <_etoa+0x33c>)
 8002aa2:	f7fd fbc5 	bl	8000230 <__aeabi_dsub>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	a374      	add	r3, pc, #464	; (adr r3, 8002c80 <_etoa+0x318>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fd74 	bl	80005a0 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fbb8 	bl	8000234 <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f802 	bl	8000ad4 <__aeabi_d2iz>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002ad4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002ad6:	f7fd fcf9 	bl	80004cc <__aeabi_i2d>
 8002ada:	a36b      	add	r3, pc, #428	; (adr r3, 8002c88 <_etoa+0x320>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd fd5e 	bl	80005a0 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	4b6d      	ldr	r3, [pc, #436]	; (8002ca8 <_etoa+0x340>)
 8002af2:	f7fd fb9f 	bl	8000234 <__adddf3>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fd ffe9 	bl	8000ad4 <__aeabi_d2iz>
 8002b02:	4603      	mov	r3, r0
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002b06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002b08:	f7fd fce0 	bl	80004cc <__aeabi_i2d>
 8002b0c:	a360      	add	r3, pc, #384	; (adr r3, 8002c90 <_etoa+0x328>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f7fd fd45 	bl	80005a0 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b20:	f7fd fcd4 	bl	80004cc <__aeabi_i2d>
 8002b24:	a35c      	add	r3, pc, #368	; (adr r3, 8002c98 <_etoa+0x330>)
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f7fd fd39 	bl	80005a0 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	f7fd fb7b 	bl	8000230 <__aeabi_dsub>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002b42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b4a:	f7fd fd29 	bl	80005a0 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b58:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002b5c:	17da      	asrs	r2, r3, #31
 8002b5e:	469a      	mov	sl, r3
 8002b60:	4693      	mov	fp, r2
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002b6e:	2200      	movs	r2, #0
 8002b70:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002b74:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b78:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	f7fd fb58 	bl	8000234 <__adddf3>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4690      	mov	r8, r2
 8002b8a:	4699      	mov	r9, r3
 8002b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b90:	f04f 0000 	mov.w	r0, #0
 8002b94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b98:	f7fd fb4a 	bl	8000230 <__aeabi_dsub>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4692      	mov	sl, r2
 8002ba2:	469b      	mov	fp, r3
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	4b40      	ldr	r3, [pc, #256]	; (8002cac <_etoa+0x344>)
 8002baa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bae:	f7fd fe21 	bl	80007f4 <__aeabi_ddiv>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <_etoa+0x348>)
 8002bc0:	f7fd fb38 	bl	8000234 <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bcc:	f7fd fe12 	bl	80007f4 <__aeabi_ddiv>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <_etoa+0x34c>)
 8002bde:	f7fd fb29 	bl	8000234 <__adddf3>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bea:	f7fd fe03 	bl	80007f4 <__aeabi_ddiv>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4650      	mov	r0, sl
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	f7fd fb1d 	bl	8000234 <__adddf3>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4640      	mov	r0, r8
 8002c00:	4649      	mov	r1, r9
 8002c02:	f7fd fdf7 	bl	80007f4 <__aeabi_ddiv>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <_etoa+0x350>)
 8002c14:	f7fd fb0e 	bl	8000234 <__adddf3>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	4629      	mov	r1, r5
 8002c20:	f7fd fcbe 	bl	80005a0 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8002c2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c30:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c34:	f7fd ff26 	bl	8000a84 <__aeabi_dcmplt>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <_etoa+0x2f2>
    expval--;
 8002c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c40:	3b01      	subs	r3, #1
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8002c44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <_etoa+0x348>)
 8002c4e:	f7fd fdd1 	bl	80007f4 <__aeabi_ddiv>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	2b63      	cmp	r3, #99	; 0x63
 8002c5e:	dc2d      	bgt.n	8002cbc <_etoa+0x354>
 8002c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c62:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002c66:	db29      	blt.n	8002cbc <_etoa+0x354>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	e028      	b.n	8002cbe <_etoa+0x356>
 8002c6c:	f3af 8000 	nop.w
 8002c70:	509f79fb 	.word	0x509f79fb
 8002c74:	3fd34413 	.word	0x3fd34413
 8002c78:	8b60c8b3 	.word	0x8b60c8b3
 8002c7c:	3fc68a28 	.word	0x3fc68a28
 8002c80:	636f4361 	.word	0x636f4361
 8002c84:	3fd287a7 	.word	0x3fd287a7
 8002c88:	0979a371 	.word	0x0979a371
 8002c8c:	400a934f 	.word	0x400a934f
 8002c90:	bbb55516 	.word	0xbbb55516
 8002c94:	40026bb1 	.word	0x40026bb1
 8002c98:	fefa39ef 	.word	0xfefa39ef
 8002c9c:	3fe62e42 	.word	0x3fe62e42
 8002ca0:	7fefffff 	.word	0x7fefffff
 8002ca4:	3ff80000 	.word	0x3ff80000
 8002ca8:	3fe00000 	.word	0x3fe00000
 8002cac:	402c0000 	.word	0x402c0000
 8002cb0:	40240000 	.word	0x40240000
 8002cb4:	40180000 	.word	0x40180000
 8002cb8:	3ff00000 	.word	0x3ff00000
 8002cbc:	2305      	movs	r3, #5
 8002cbe:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03d      	beq.n	8002d48 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002ccc:	a36a      	add	r3, pc, #424	; (adr r3, 8002e78 <_etoa+0x510>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cd6:	f7fd fee9 	bl	8000aac <__aeabi_dcmpge>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d024      	beq.n	8002d2a <_etoa+0x3c2>
 8002ce0:	a367      	add	r3, pc, #412	; (adr r3, 8002e80 <_etoa+0x518>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cea:	f7fd fecb 	bl	8000a84 <__aeabi_dcmplt>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01a      	beq.n	8002d2a <_etoa+0x3c2>
      if ((int)prec > expval) {
 8002cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	da07      	bge.n	8002d0e <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8002cfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d0c:	e002      	b.n	8002d14 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	657b      	str	r3, [r7, #84]	; 0x54
 8002d28:	e00e      	b.n	8002d48 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <_etoa+0x3e0>
 8002d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <_etoa+0x3e0>
        --prec;
 8002d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8002d4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d904      	bls.n	8002d62 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d60:	e001      	b.n	8002d66 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <_etoa+0x414>
 8002d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <_etoa+0x42e>
    value /= conv.F;
 8002d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d8a:	f7fd fd33 	bl	80007f4 <__aeabi_ddiv>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002d9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <_etoa+0x44c>
 8002da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e003      	b.n	8002dbc <_etoa+0x454>
 8002db4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002db8:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dc4:	9304      	str	r3, [sp, #16]
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	9303      	str	r3, [sp, #12]
 8002dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002dd4:	e9cd 3400 	strd	r3, r4, [sp]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	69b9      	ldr	r1, [r7, #24]
 8002dde:	69f8      	ldr	r0, [r7, #28]
 8002de0:	f7ff fb6a 	bl	80024b8 <_ftoa>
 8002de4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d03f      	beq.n	8002e6c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <_etoa+0x494>
 8002df8:	2045      	movs	r0, #69	; 0x45
 8002dfa:	e000      	b.n	8002dfe <_etoa+0x496>
 8002dfc:	2065      	movs	r0, #101	; 0x65
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	1c53      	adds	r3, r2, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	69fc      	ldr	r4, [r7, #28]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bfb8      	it	lt
 8002e12:	425b      	neglt	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	0fdb      	lsrs	r3, r3, #31
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e1e:	3a01      	subs	r2, #1
 8002e20:	2105      	movs	r1, #5
 8002e22:	9105      	str	r1, [sp, #20]
 8002e24:	9204      	str	r2, [sp, #16]
 8002e26:	2200      	movs	r2, #0
 8002e28:	9203      	str	r2, [sp, #12]
 8002e2a:	220a      	movs	r2, #10
 8002e2c:	9202      	str	r2, [sp, #8]
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	9000      	str	r0, [sp, #0]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	69f8      	ldr	r0, [r7, #28]
 8002e3a:	f7ff fa68 	bl	800230e <_ntoa_long>
 8002e3e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00f      	beq.n	8002e6c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002e4c:	e007      	b.n	8002e5e <_etoa+0x4f6>
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	1c53      	adds	r3, r2, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	69fc      	ldr	r4, [r7, #28]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	69b9      	ldr	r1, [r7, #24]
 8002e5a:	2020      	movs	r0, #32
 8002e5c:	47a0      	blx	r4
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f0      	bhi.n	8002e4e <_etoa+0x4e6>
    }
  }
  return idx;
 8002e6c:	697b      	ldr	r3, [r7, #20]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	375c      	adds	r7, #92	; 0x5c
 8002e72:	46bd      	mov	sp, r7
 8002e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e78:	eb1c432d 	.word	0xeb1c432d
 8002e7c:	3f1a36e2 	.word	0x3f1a36e2
 8002e80:	00000000 	.word	0x00000000
 8002e84:	412e8480 	.word	0x412e8480

08002e88 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	b0a3      	sub	sp, #140	; 0x8c
 8002e8e:	af0a      	add	r7, sp, #40	; 0x28
 8002e90:	6178      	str	r0, [r7, #20]
 8002e92:	6139      	str	r1, [r7, #16]
 8002e94:	60fa      	str	r2, [r7, #12]
 8002e96:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 84ba 	bne.w	8003818 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8002ea4:	4ba3      	ldr	r3, [pc, #652]	; (8003134 <_vsnprintf+0x2ac>)
 8002ea6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002ea8:	f000 bcb6 	b.w	8003818 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b25      	cmp	r3, #37	; 0x25
 8002eb2:	d00d      	beq.n	8002ed0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	7818      	ldrb	r0, [r3, #0]
 8002eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eba:	1c53      	adds	r3, r2, #1
 8002ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ebe:	697c      	ldr	r4, [r7, #20]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6939      	ldr	r1, [r7, #16]
 8002ec4:	47a0      	blx	r4
      format++;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
      continue;
 8002ecc:	f000 bca4 	b.w	8003818 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	3b20      	subs	r3, #32
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d857      	bhi.n	8002f94 <_vsnprintf+0x10c>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <_vsnprintf+0x64>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f6d 	.word	0x08002f6d
 8002ef0:	08002f95 	.word	0x08002f95
 8002ef4:	08002f95 	.word	0x08002f95
 8002ef8:	08002f81 	.word	0x08002f81
 8002efc:	08002f95 	.word	0x08002f95
 8002f00:	08002f95 	.word	0x08002f95
 8002f04:	08002f95 	.word	0x08002f95
 8002f08:	08002f95 	.word	0x08002f95
 8002f0c:	08002f95 	.word	0x08002f95
 8002f10:	08002f95 	.word	0x08002f95
 8002f14:	08002f95 	.word	0x08002f95
 8002f18:	08002f59 	.word	0x08002f59
 8002f1c:	08002f95 	.word	0x08002f95
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f95 	.word	0x08002f95
 8002f28:	08002f95 	.word	0x08002f95
 8002f2c:	08002f31 	.word	0x08002f31
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	653b      	str	r3, [r7, #80]	; 0x50
 8002f42:	e02a      	b.n	8002f9a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	2301      	movs	r3, #1
 8002f54:	653b      	str	r3, [r7, #80]	; 0x50
 8002f56:	e020      	b.n	8002f9a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3301      	adds	r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	2301      	movs	r3, #1
 8002f68:	653b      	str	r3, [r7, #80]	; 0x50
 8002f6a:	e016      	b.n	8002f9a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6e:	f043 0308 	orr.w	r3, r3, #8
 8002f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	3301      	adds	r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f7e:	e00c      	b.n	8002f9a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f82:	f043 0310 	orr.w	r3, r3, #16
 8002f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	2301      	movs	r3, #1
 8002f90:	653b      	str	r3, [r7, #80]	; 0x50
 8002f92:	e002      	b.n	8002f9a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002f94:	2300      	movs	r3, #0
 8002f96:	653b      	str	r3, [r7, #80]	; 0x50
 8002f98:	bf00      	nop
      }
    } while (n);
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d19c      	bne.n	8002eda <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f84a 	bl	8002042 <_is_digit>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002fb4:	f107 0308 	add.w	r3, r7, #8
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff f858 	bl	800206e <_atoi>
 8002fbe:	65b8      	str	r0, [r7, #88]	; 0x58
 8002fc0:	e01a      	b.n	8002ff8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc8:	d116      	bne.n	8002ff8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8002fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fce:	1d1a      	adds	r2, r3, #4
 8002fd0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da07      	bge.n	8002fee <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8002fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	425b      	negs	r3, r3
 8002fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fec:	e001      	b.n	8002ff2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b2e      	cmp	r3, #46	; 0x2e
 8003002:	d127      	bne.n	8003054 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3301      	adds	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f813 	bl	8002042 <_is_digit>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f821 	bl	800206e <_atoi>
 800302c:	6578      	str	r0, [r7, #84]	; 0x54
 800302e:	e011      	b.n	8003054 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b2a      	cmp	r3, #42	; 0x2a
 8003036:	d10d      	bne.n	8003054 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800303c:	1d1a      	adds	r2, r3, #4
 800303e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800304c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3301      	adds	r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3b68      	subs	r3, #104	; 0x68
 800305a:	2b12      	cmp	r3, #18
 800305c:	d866      	bhi.n	800312c <_vsnprintf+0x2a4>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <_vsnprintf+0x1dc>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	080030d7 	.word	0x080030d7
 8003068:	0800312d 	.word	0x0800312d
 800306c:	0800310d 	.word	0x0800310d
 8003070:	0800312d 	.word	0x0800312d
 8003074:	080030b1 	.word	0x080030b1
 8003078:	0800312d 	.word	0x0800312d
 800307c:	0800312d 	.word	0x0800312d
 8003080:	0800312d 	.word	0x0800312d
 8003084:	0800312d 	.word	0x0800312d
 8003088:	0800312d 	.word	0x0800312d
 800308c:	0800312d 	.word	0x0800312d
 8003090:	0800312d 	.word	0x0800312d
 8003094:	080030fd 	.word	0x080030fd
 8003098:	0800312d 	.word	0x0800312d
 800309c:	0800312d 	.word	0x0800312d
 80030a0:	0800312d 	.word	0x0800312d
 80030a4:	0800312d 	.word	0x0800312d
 80030a8:	0800312d 	.word	0x0800312d
 80030ac:	0800311d 	.word	0x0800311d
      case 'l' :
        flags |= FLAGS_LONG;
 80030b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b6c      	cmp	r3, #108	; 0x6c
 80030c4:	d134      	bne.n	8003130 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80030c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030cc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
        }
        break;
 80030d4:	e02c      	b.n	8003130 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80030d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b68      	cmp	r3, #104	; 0x68
 80030ea:	d125      	bne.n	8003138 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80030ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80030fa:	e01d      	b.n	8003138 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80030fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3301      	adds	r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
        break;
 800310a:	e016      	b.n	800313a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800310c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003112:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
        break;
 800311a:	e00e      	b.n	800313a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800311c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003122:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3301      	adds	r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
        break;
 800312a:	e006      	b.n	800313a <_vsnprintf+0x2b2>
      default :
        break;
 800312c:	bf00      	nop
 800312e:	e004      	b.n	800313a <_vsnprintf+0x2b2>
        break;
 8003130:	bf00      	nop
 8003132:	e002      	b.n	800313a <_vsnprintf+0x2b2>
 8003134:	08001ff1 	.word	0x08001ff1
        break;
 8003138:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	3b25      	subs	r3, #37	; 0x25
 8003140:	2b53      	cmp	r3, #83	; 0x53
 8003142:	f200 835c 	bhi.w	80037fe <_vsnprintf+0x976>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <_vsnprintf+0x2c4>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	080037e7 	.word	0x080037e7
 8003150:	080037ff 	.word	0x080037ff
 8003154:	080037ff 	.word	0x080037ff
 8003158:	080037ff 	.word	0x080037ff
 800315c:	080037ff 	.word	0x080037ff
 8003160:	080037ff 	.word	0x080037ff
 8003164:	080037ff 	.word	0x080037ff
 8003168:	080037ff 	.word	0x080037ff
 800316c:	080037ff 	.word	0x080037ff
 8003170:	080037ff 	.word	0x080037ff
 8003174:	080037ff 	.word	0x080037ff
 8003178:	080037ff 	.word	0x080037ff
 800317c:	080037ff 	.word	0x080037ff
 8003180:	080037ff 	.word	0x080037ff
 8003184:	080037ff 	.word	0x080037ff
 8003188:	080037ff 	.word	0x080037ff
 800318c:	080037ff 	.word	0x080037ff
 8003190:	080037ff 	.word	0x080037ff
 8003194:	080037ff 	.word	0x080037ff
 8003198:	080037ff 	.word	0x080037ff
 800319c:	080037ff 	.word	0x080037ff
 80031a0:	080037ff 	.word	0x080037ff
 80031a4:	080037ff 	.word	0x080037ff
 80031a8:	080037ff 	.word	0x080037ff
 80031ac:	080037ff 	.word	0x080037ff
 80031b0:	080037ff 	.word	0x080037ff
 80031b4:	080037ff 	.word	0x080037ff
 80031b8:	080037ff 	.word	0x080037ff
 80031bc:	080037ff 	.word	0x080037ff
 80031c0:	080037ff 	.word	0x080037ff
 80031c4:	080037ff 	.word	0x080037ff
 80031c8:	080037ff 	.word	0x080037ff
 80031cc:	0800359f 	.word	0x0800359f
 80031d0:	08003553 	.word	0x08003553
 80031d4:	0800359f 	.word	0x0800359f
 80031d8:	080037ff 	.word	0x080037ff
 80031dc:	080037ff 	.word	0x080037ff
 80031e0:	080037ff 	.word	0x080037ff
 80031e4:	080037ff 	.word	0x080037ff
 80031e8:	080037ff 	.word	0x080037ff
 80031ec:	080037ff 	.word	0x080037ff
 80031f0:	080037ff 	.word	0x080037ff
 80031f4:	080037ff 	.word	0x080037ff
 80031f8:	080037ff 	.word	0x080037ff
 80031fc:	080037ff 	.word	0x080037ff
 8003200:	080037ff 	.word	0x080037ff
 8003204:	080037ff 	.word	0x080037ff
 8003208:	080037ff 	.word	0x080037ff
 800320c:	080037ff 	.word	0x080037ff
 8003210:	080037ff 	.word	0x080037ff
 8003214:	080037ff 	.word	0x080037ff
 8003218:	0800329d 	.word	0x0800329d
 800321c:	080037ff 	.word	0x080037ff
 8003220:	080037ff 	.word	0x080037ff
 8003224:	080037ff 	.word	0x080037ff
 8003228:	080037ff 	.word	0x080037ff
 800322c:	080037ff 	.word	0x080037ff
 8003230:	080037ff 	.word	0x080037ff
 8003234:	080037ff 	.word	0x080037ff
 8003238:	080037ff 	.word	0x080037ff
 800323c:	080037ff 	.word	0x080037ff
 8003240:	0800329d 	.word	0x0800329d
 8003244:	0800360b 	.word	0x0800360b
 8003248:	0800329d 	.word	0x0800329d
 800324c:	0800359f 	.word	0x0800359f
 8003250:	08003553 	.word	0x08003553
 8003254:	0800359f 	.word	0x0800359f
 8003258:	080037ff 	.word	0x080037ff
 800325c:	0800329d 	.word	0x0800329d
 8003260:	080037ff 	.word	0x080037ff
 8003264:	080037ff 	.word	0x080037ff
 8003268:	080037ff 	.word	0x080037ff
 800326c:	080037ff 	.word	0x080037ff
 8003270:	080037ff 	.word	0x080037ff
 8003274:	0800329d 	.word	0x0800329d
 8003278:	0800374b 	.word	0x0800374b
 800327c:	080037ff 	.word	0x080037ff
 8003280:	080037ff 	.word	0x080037ff
 8003284:	08003683 	.word	0x08003683
 8003288:	080037ff 	.word	0x080037ff
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080037ff 	.word	0x080037ff
 8003294:	080037ff 	.word	0x080037ff
 8003298:	0800329d 	.word	0x0800329d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b78      	cmp	r3, #120	; 0x78
 80032a2:	d003      	beq.n	80032ac <_vsnprintf+0x424>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b58      	cmp	r3, #88	; 0x58
 80032aa:	d102      	bne.n	80032b2 <_vsnprintf+0x42a>
          base = 16U;
 80032ac:	2310      	movs	r3, #16
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b0:	e013      	b.n	80032da <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b6f      	cmp	r3, #111	; 0x6f
 80032b8:	d102      	bne.n	80032c0 <_vsnprintf+0x438>
          base =  8U;
 80032ba:	2308      	movs	r3, #8
 80032bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80032be:	e00c      	b.n	80032da <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b62      	cmp	r3, #98	; 0x62
 80032c6:	d102      	bne.n	80032ce <_vsnprintf+0x446>
          base =  2U;
 80032c8:	2302      	movs	r3, #2
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80032cc:	e005      	b.n	80032da <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 80032ce:	230a      	movs	r3, #10
 80032d0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80032d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d4:	f023 0310 	bic.w	r3, r3, #16
 80032d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b58      	cmp	r3, #88	; 0x58
 80032e0:	d103      	bne.n	80032ea <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80032e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e4:	f043 0320 	orr.w	r3, r3, #32
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b69      	cmp	r3, #105	; 0x69
 80032f0:	d007      	beq.n	8003302 <_vsnprintf+0x47a>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d003      	beq.n	8003302 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	f023 030c 	bic.w	r3, r3, #12
 8003300:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800330c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b69      	cmp	r3, #105	; 0x69
 800331a:	d004      	beq.n	8003326 <_vsnprintf+0x49e>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b64      	cmp	r3, #100	; 0x64
 8003322:	f040 8098 	bne.w	8003456 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	2b00      	cmp	r3, #0
 800332e:	d031      	beq.n	8003394 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003334:	3307      	adds	r3, #7
 8003336:	f023 0307 	bic.w	r3, r3, #7
 800333a:	f103 0208 	add.w	r2, r3, #8
 800333e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800334a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	da06      	bge.n	8003360 <_vsnprintf+0x4d8>
 8003352:	2100      	movs	r1, #0
 8003354:	f1d2 0800 	rsbs	r8, r2, #0
 8003358:	eb61 0903 	sbc.w	r9, r1, r3
 800335c:	4642      	mov	r2, r8
 800335e:	464b      	mov	r3, r9
 8003360:	69f9      	ldr	r1, [r7, #28]
 8003362:	0fc9      	lsrs	r1, r1, #31
 8003364:	b2c9      	uxtb	r1, r1
 8003366:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003368:	2400      	movs	r4, #0
 800336a:	4682      	mov	sl, r0
 800336c:	46a3      	mov	fp, r4
 800336e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003370:	9008      	str	r0, [sp, #32]
 8003372:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003374:	9007      	str	r0, [sp, #28]
 8003376:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003378:	9006      	str	r0, [sp, #24]
 800337a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800337e:	9102      	str	r1, [sp, #8]
 8003380:	e9cd 2300 	strd	r2, r3, [sp]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff f825 	bl	80023da <_ntoa_long_long>
 8003390:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003392:	e0da      	b.n	800354a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d020      	beq.n	80033e0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800339e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a2:	1d1a      	adds	r2, r3, #4
 80033a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bfb8      	it	lt
 80033b2:	425b      	neglt	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	0fdb      	lsrs	r3, r3, #31
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033be:	9205      	str	r2, [sp, #20]
 80033c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033c2:	9204      	str	r2, [sp, #16]
 80033c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033c6:	9203      	str	r2, [sp, #12]
 80033c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ca:	9202      	str	r2, [sp, #8]
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	9100      	str	r1, [sp, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7fe ff99 	bl	800230e <_ntoa_long>
 80033dc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80033de:	e0b4      	b.n	800354a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80033e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <_vsnprintf+0x572>
 80033ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e012      	b.n	8003420 <_vsnprintf+0x598>
 80033fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <_vsnprintf+0x58c>
 8003404:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003408:	1d1a      	adds	r2, r3, #4
 800340a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	b21b      	sxth	r3, r3
 8003412:	e005      	b.n	8003420 <_vsnprintf+0x598>
 8003414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003418:	1d1a      	adds	r2, r3, #4
 800341a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	bfb8      	it	lt
 8003428:	425b      	neglt	r3, r3
 800342a:	4619      	mov	r1, r3
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	0fdb      	lsrs	r3, r3, #31
 8003430:	b2db      	uxtb	r3, r3
 8003432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003434:	9205      	str	r2, [sp, #20]
 8003436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003438:	9204      	str	r2, [sp, #16]
 800343a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800343c:	9203      	str	r2, [sp, #12]
 800343e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003440:	9202      	str	r2, [sp, #8]
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	9100      	str	r1, [sp, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800344a:	6939      	ldr	r1, [r7, #16]
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f7fe ff5e 	bl	800230e <_ntoa_long>
 8003452:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003454:	e079      	b.n	800354a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345c:	2b00      	cmp	r3, #0
 800345e:	d022      	beq.n	80034a6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003464:	3307      	adds	r3, #7
 8003466:	f023 0307 	bic.w	r3, r3, #7
 800346a:	f103 0208 	add.w	r2, r3, #8
 800346e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003478:	2000      	movs	r0, #0
 800347a:	460d      	mov	r5, r1
 800347c:	4606      	mov	r6, r0
 800347e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003480:	9108      	str	r1, [sp, #32]
 8003482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003484:	9107      	str	r1, [sp, #28]
 8003486:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003488:	9106      	str	r1, [sp, #24]
 800348a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800348e:	2100      	movs	r1, #0
 8003490:	9102      	str	r1, [sp, #8]
 8003492:	e9cd 2300 	strd	r2, r3, [sp]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	f7fe ff9c 	bl	80023da <_ntoa_long_long>
 80034a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80034a4:	e051      	b.n	800354a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80034a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d018      	beq.n	80034e2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80034b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034be:	9205      	str	r2, [sp, #20]
 80034c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034c2:	9204      	str	r2, [sp, #16]
 80034c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034c6:	9203      	str	r2, [sp, #12]
 80034c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034ca:	9202      	str	r2, [sp, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	9201      	str	r2, [sp, #4]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d6:	6939      	ldr	r1, [r7, #16]
 80034d8:	6978      	ldr	r0, [r7, #20]
 80034da:	f7fe ff18 	bl	800230e <_ntoa_long>
 80034de:	64f8      	str	r0, [r7, #76]	; 0x4c
 80034e0:	e033      	b.n	800354a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80034e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <_vsnprintf+0x674>
 80034ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f0:	1d1a      	adds	r2, r3, #4
 80034f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e012      	b.n	8003522 <_vsnprintf+0x69a>
 80034fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <_vsnprintf+0x68e>
 8003506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	e005      	b.n	8003522 <_vsnprintf+0x69a>
 8003516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800351a:	1d1a      	adds	r2, r3, #4
 800351c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003526:	9305      	str	r3, [sp, #20]
 8003528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352a:	9304      	str	r3, [sp, #16]
 800352c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352e:	9303      	str	r3, [sp, #12]
 8003530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	2300      	movs	r3, #0
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003540:	6939      	ldr	r1, [r7, #16]
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f7fe fee3 	bl	800230e <_ntoa_long>
 8003548:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
        break;
 8003550:	e162      	b.n	8003818 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b46      	cmp	r3, #70	; 0x46
 8003558:	d103      	bne.n	8003562 <_vsnprintf+0x6da>
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003566:	3307      	adds	r3, #7
 8003568:	f023 0307 	bic.w	r3, r3, #7
 800356c:	f103 0208 	add.w	r2, r3, #8
 8003570:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800357a:	9104      	str	r1, [sp, #16]
 800357c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800357e:	9103      	str	r1, [sp, #12]
 8003580:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003582:	9102      	str	r1, [sp, #8]
 8003584:	e9cd 2300 	strd	r2, r3, [sp]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358c:	6939      	ldr	r1, [r7, #16]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7fe ff92 	bl	80024b8 <_ftoa>
 8003594:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
        break;
 800359c:	e13c      	b.n	8003818 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b67      	cmp	r3, #103	; 0x67
 80035a4:	d003      	beq.n	80035ae <_vsnprintf+0x726>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b47      	cmp	r3, #71	; 0x47
 80035ac:	d103      	bne.n	80035b6 <_vsnprintf+0x72e>
 80035ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b45      	cmp	r3, #69	; 0x45
 80035bc:	d003      	beq.n	80035c6 <_vsnprintf+0x73e>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b47      	cmp	r3, #71	; 0x47
 80035c4:	d103      	bne.n	80035ce <_vsnprintf+0x746>
 80035c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80035ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d2:	3307      	adds	r3, #7
 80035d4:	f023 0307 	bic.w	r3, r3, #7
 80035d8:	f103 0208 	add.w	r2, r3, #8
 80035dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80035e6:	9104      	str	r1, [sp, #16]
 80035e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035ea:	9103      	str	r1, [sp, #12]
 80035ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035ee:	9102      	str	r1, [sp, #8]
 80035f0:	e9cd 2300 	strd	r2, r3, [sp]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f8:	6939      	ldr	r1, [r7, #16]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff f9b4 	bl	8002968 <_etoa>
 8003600:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3301      	adds	r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
        break;
 8003608:	e106      	b.n	8003818 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800360a:	2301      	movs	r3, #1
 800360c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800360e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10e      	bne.n	8003636 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8003618:	e007      	b.n	800362a <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800361a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800361c:	1c53      	adds	r3, r2, #1
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003620:	697c      	ldr	r4, [r7, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6939      	ldr	r1, [r7, #16]
 8003626:	2020      	movs	r0, #32
 8003628:	47a0      	blx	r4
          while (l++ < width) {
 800362a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	647a      	str	r2, [r7, #68]	; 0x44
 8003630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003632:	429a      	cmp	r2, r3
 8003634:	d8f1      	bhi.n	800361a <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800363a:	1d1a      	adds	r2, r3, #4
 800363c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b2d8      	uxtb	r0, r3
 8003644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003646:	1c53      	adds	r3, r2, #1
 8003648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364a:	697c      	ldr	r4, [r7, #20]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6939      	ldr	r1, [r7, #16]
 8003650:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <_vsnprintf+0x7f2>
          while (l++ < width) {
 800365c:	e007      	b.n	800366e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 800365e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003660:	1c53      	adds	r3, r2, #1
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	697c      	ldr	r4, [r7, #20]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6939      	ldr	r1, [r7, #16]
 800366a:	2020      	movs	r0, #32
 800366c:	47a0      	blx	r4
          while (l++ < width) {
 800366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	647a      	str	r2, [r7, #68]	; 0x44
 8003674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003676:	429a      	cmp	r2, r3
 8003678:	d8f1      	bhi.n	800365e <_vsnprintf+0x7d6>
          }
        }
        format++;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3301      	adds	r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
        break;
 8003680:	e0ca      	b.n	8003818 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <_vsnprintf+0x812>
 8003696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003698:	e001      	b.n	800369e <_vsnprintf+0x816>
 800369a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800369e:	4619      	mov	r1, r3
 80036a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80036a2:	f7fe fcb2 	bl	800200a <_strnlen_s>
 80036a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80036a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80036b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b6:	4293      	cmp	r3, r2
 80036b8:	bf28      	it	cs
 80036ba:	4613      	movcs	r3, r2
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11a      	bne.n	80036fe <_vsnprintf+0x876>
          while (l++ < width) {
 80036c8:	e007      	b.n	80036da <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80036ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036cc:	1c53      	adds	r3, r2, #1
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d0:	697c      	ldr	r4, [r7, #20]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6939      	ldr	r1, [r7, #16]
 80036d6:	2020      	movs	r0, #32
 80036d8:	47a0      	blx	r4
          while (l++ < width) {
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d8f1      	bhi.n	80036ca <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80036e6:	e00a      	b.n	80036fe <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80036e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	643a      	str	r2, [r7, #64]	; 0x40
 80036ee:	7818      	ldrb	r0, [r3, #0]
 80036f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f2:	1c53      	adds	r3, r2, #1
 80036f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f6:	697c      	ldr	r4, [r7, #20]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6939      	ldr	r1, [r7, #16]
 80036fc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80036fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <_vsnprintf+0x892>
 8003706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0eb      	beq.n	80036e8 <_vsnprintf+0x860>
 8003710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	657a      	str	r2, [r7, #84]	; 0x54
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e6      	bne.n	80036e8 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800371a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8003724:	e007      	b.n	8003736 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8003726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003728:	1c53      	adds	r3, r2, #1
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372c:	697c      	ldr	r4, [r7, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6939      	ldr	r1, [r7, #16]
 8003732:	2020      	movs	r0, #32
 8003734:	47a0      	blx	r4
          while (l++ < width) {
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800373c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800373e:	429a      	cmp	r2, r3
 8003740:	d8f1      	bhi.n	8003726 <_vsnprintf+0x89e>
          }
        }
        format++;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
        break;
 8003748:	e066      	b.n	8003818 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800374a:	2308      	movs	r3, #8
 800374c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800374e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003750:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003754:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003756:	2300      	movs	r3, #0
 8003758:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800375c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003760:	2b00      	cmp	r3, #0
 8003762:	d023      	beq.n	80037ac <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	603a      	str	r2, [r7, #0]
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377a:	9308      	str	r3, [sp, #32]
 800377c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800377e:	9307      	str	r3, [sp, #28]
 8003780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003782:	9306      	str	r3, [sp, #24]
 8003784:	f04f 0210 	mov.w	r2, #16
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003790:	2300      	movs	r3, #0
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003798:	e9cd 3400 	strd	r3, r4, [sp]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037a0:	6939      	ldr	r1, [r7, #16]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7fe fe19 	bl	80023da <_ntoa_long_long>
 80037a8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80037aa:	e018      	b.n	80037de <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80037ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037b0:	1d1a      	adds	r2, r3, #4
 80037b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037bc:	9305      	str	r3, [sp, #20]
 80037be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c0:	9304      	str	r3, [sp, #16]
 80037c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c4:	9303      	str	r3, [sp, #12]
 80037c6:	2310      	movs	r3, #16
 80037c8:	9302      	str	r3, [sp, #8]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	9200      	str	r2, [sp, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d4:	6939      	ldr	r1, [r7, #16]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7fe fd99 	bl	800230e <_ntoa_long>
 80037dc:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3301      	adds	r3, #1
 80037e2:	60bb      	str	r3, [r7, #8]
        break;
 80037e4:	e018      	b.n	8003818 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80037e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037e8:	1c53      	adds	r3, r2, #1
 80037ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ec:	697c      	ldr	r4, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6939      	ldr	r1, [r7, #16]
 80037f2:	2025      	movs	r0, #37	; 0x25
 80037f4:	47a0      	blx	r4
        format++;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
        break;
 80037fc:	e00c      	b.n	8003818 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	7818      	ldrb	r0, [r3, #0]
 8003802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003804:	1c53      	adds	r3, r2, #1
 8003806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003808:	697c      	ldr	r4, [r7, #20]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6939      	ldr	r1, [r7, #16]
 800380e:	47a0      	blx	r4
        format++;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
        break;
 8003816:	bf00      	nop
  while (*format)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f47f ab45 	bne.w	8002eac <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <_vsnprintf+0x9a8>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	e000      	b.n	8003832 <_vsnprintf+0x9aa>
 8003830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003832:	697c      	ldr	r4, [r7, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6939      	ldr	r1, [r7, #16]
 8003838:	2000      	movs	r0, #0
 800383a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800383c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800383e:	4618      	mov	r0, r3
 8003840:	3764      	adds	r7, #100	; 0x64
 8003842:	46bd      	mov	sp, r7
 8003844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003848 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003848:	b40e      	push	{r1, r2, r3}
 800384a:	b580      	push	{r7, lr}
 800384c:	b087      	sub	sp, #28
 800384e:	af02      	add	r7, sp, #8
 8003850:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003852:	f107 0320 	add.w	r3, r7, #32
 8003856:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4805      	ldr	r0, [pc, #20]	; (800387c <sprintf_+0x34>)
 8003866:	f7ff fb0f 	bl	8002e88 <_vsnprintf>
 800386a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003878:	b003      	add	sp, #12
 800387a:	4770      	bx	lr
 800387c:	08001fc5 	.word	0x08001fc5

08003880 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003898:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d009      	beq.n	80038ba <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	79f9      	ldrb	r1, [r7, #7]
 80038b0:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <Uart_isr+0x52>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d012      	beq.n	8003916 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <Uart_isr+0xbc>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff ffba 	bl	8003880 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <Uart_isr+0xc0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	605a      	str	r2, [r3, #4]
        return;
 8003914:	e031      	b.n	800397a <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02c      	beq.n	800397a <Uart_isr+0xb6>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d027      	beq.n	800397a <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <Uart_isr+0xc4>)
 800392c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <Uart_isr+0xc4>)
 8003932:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003936:	429a      	cmp	r2, r3
 8003938:	d108      	bne.n	800394c <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003948:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800394a:	e015      	b.n	8003978 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <Uart_isr+0xc4>)
 800394e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003952:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <Uart_isr+0xc4>)
 8003954:	5cd3      	ldrb	r3, [r2, r3]
 8003956:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <Uart_isr+0xc4>)
 800395a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003964:	4a08      	ldr	r2, [pc, #32]	; (8003988 <Uart_isr+0xc4>)
 8003966:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	7bba      	ldrb	r2, [r7, #14]
 8003976:	605a      	str	r2, [r3, #4]
    	return;
 8003978:	bf00      	nop
    }
}
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000654 	.word	0x20000654
 8003984:	20000178 	.word	0x20000178
 8003988:	2000024c 	.word	0x2000024c

0800398c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_MspInit+0x5c>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <HAL_MspInit+0x5c>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6193      	str	r3, [r2, #24]
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_MspInit+0x5c>)
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_MspInit+0x5c>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <HAL_MspInit+0x5c>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <HAL_MspInit+0x5c>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_MspInit+0x60>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <HAL_MspInit+0x60>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40010000 	.word	0x40010000

080039f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <HardFault_Handler+0x4>

08003a02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a06:	e7fe      	b.n	8003a06 <MemManage_Handler+0x4>

08003a08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0c:	e7fe      	b.n	8003a0c <BusFault_Handler+0x4>

08003a0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <UsageFault_Handler+0x4>

08003a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <SysTick_Handler+0x20>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <SysTick_Handler+0x18>
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <SysTick_Handler+0x20>)
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <SysTick_Handler+0x20>)
 8003a4e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a50:	f000 ff7e 	bl	8004950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000248 	.word	0x20000248

08003a5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <EXTI0_IRQHandler+0x28>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <EXTI0_IRQHandler+0x28>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8003a72:	2001      	movs	r0, #1
 8003a74:	f001 fd96 	bl	80055a4 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f001 fd7b 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40010400 	.word	0x40010400

08003a88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <EXTI4_IRQHandler+0x2c>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <EXTI4_IRQHandler+0x30>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <EXTI4_IRQHandler+0x2c>)
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8003aa4:	2010      	movs	r0, #16
 8003aa6:	f001 fd7d 	bl	80055a4 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003aaa:	2010      	movs	r0, #16
 8003aac:	f001 fd62 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	2000081c 	.word	0x2000081c

08003abc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <TIM3_IRQHandler+0x3c>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <TIM3_IRQHandler+0x3c>)
 8003aca:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <TIM3_IRQHandler+0x3c>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10c      	bne.n	8003aee <TIM3_IRQHandler+0x32>
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <TIM3_IRQHandler+0x40>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d108      	bne.n	8003aee <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 8003adc:	4808      	ldr	r0, [pc, #32]	; (8003b00 <TIM3_IRQHandler+0x44>)
 8003ade:	f002 faca 	bl	8006076 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8003ae2:	4807      	ldr	r0, [pc, #28]	; (8003b00 <TIM3_IRQHandler+0x44>)
 8003ae4:	f002 fb0b 	bl	80060fe <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <TIM3_IRQHandler+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003aee:	4804      	ldr	r0, [pc, #16]	; (8003b00 <TIM3_IRQHandler+0x44>)
 8003af0:	f002 fb63 	bl	80061ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000758 	.word	0x20000758
 8003afc:	20000759 	.word	0x20000759
 8003b00:	200006d8 	.word	0x200006d8

08003b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <USART1_IRQHandler+0x38>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d107      	bne.n	8003b2c <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <USART1_IRQHandler+0x38>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <USART1_IRQHandler+0x3c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	79fa      	ldrb	r2, [r7, #7]
 8003b2a:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b2c:	4805      	ldr	r0, [pc, #20]	; (8003b44 <USART1_IRQHandler+0x40>)
 8003b2e:	f003 fb4d 	bl	80071cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000178 	.word	0x20000178
 8003b40:	200001b8 	.word	0x200001b8
 8003b44:	2000075c 	.word	0x2000075c

08003b48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <USART3_IRQHandler+0x10>)
 8003b4e:	f7ff feb9 	bl	80038c4 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200007dc 	.word	0x200007dc

08003b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <EXTI15_10_IRQHandler+0x2c>)
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <EXTI15_10_IRQHandler+0x20>
	{
		// extern void debug_alarm_set();
		// debug_alarm_set();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <EXTI15_10_IRQHandler+0x2c>)
 8003b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b72:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8003b74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b78:	f001 fd14 	bl	80055a4 <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003b7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b80:	f001 fcf8 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40010400 	.word	0x40010400

08003b8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <TIM5_IRQHandler+0x14>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b96:	4803      	ldr	r0, [pc, #12]	; (8003ba4 <TIM5_IRQHandler+0x18>)
 8003b98:	f002 fb0f 	bl	80061ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	20000718 	.word	0x20000718

08003ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	return 1;
 8003bac:	2301      	movs	r3, #1
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <_kill>:

int _kill(int pid, int sig)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bc0:	f003 ffa2 	bl	8007b08 <__errno>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2216      	movs	r2, #22
 8003bc8:	601a      	str	r2, [r3, #0]
	return -1;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <_exit>:

void _exit (int status)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffe7 	bl	8003bb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003be8:	e7fe      	b.n	8003be8 <_exit+0x12>
	...

08003bec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003bf0:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <SystemInit+0x5c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <SystemInit+0x5c>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <SystemInit+0x5c>)
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	4911      	ldr	r1, [pc, #68]	; (8003c48 <SystemInit+0x5c>)
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <SystemInit+0x60>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <SystemInit+0x5c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <SystemInit+0x5c>)
 8003c0e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <SystemInit+0x5c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <SystemInit+0x5c>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <SystemInit+0x5c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <SystemInit+0x5c>)
 8003c2a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003c2e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <SystemInit+0x5c>)
 8003c32:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003c36:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <SystemInit+0x64>)
 8003c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c3e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	f8ff0000 	.word	0xf8ff0000
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b094      	sub	sp, #80	; 0x50
 8003c58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c72:	f107 031c 	add.w	r3, r7, #28
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	615a      	str	r2, [r3, #20]
 8003c84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c86:	463b      	mov	r3, r7
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
 8003c94:	615a      	str	r2, [r3, #20]
 8003c96:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8003c98:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003c9a:	4a40      	ldr	r2, [pc, #256]	; (8003d9c <MX_TIM1_Init+0x148>)
 8003c9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003ca0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003ca4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca6:	4b3c      	ldr	r3, [pc, #240]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8003cac:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003cae:	f240 4265 	movw	r2, #1125	; 0x465
 8003cb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb4:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc0:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cc6:	4834      	ldr	r0, [pc, #208]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003cc8:	f002 f990 	bl	8005fec <HAL_TIM_Base_Init>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003cd2:	f7fe f971 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cda:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	482d      	ldr	r0, [pc, #180]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003ce4:	f002 fc38 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003cee:	f7fe f963 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cf2:	4829      	ldr	r0, [pc, #164]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003cf4:	f002 fa2d 	bl	8006152 <HAL_TIM_PWM_Init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8003cfe:	f7fe f95b 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d02:	2300      	movs	r3, #0
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4821      	ldr	r0, [pc, #132]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003d12:	f003 f878 	bl	8006e06 <HAL_TIMEx_MasterConfigSynchronization>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003d1c:	f7fe f94c 	bl	8001fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d20:	2360      	movs	r3, #96	; 0x60
 8003d22:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 8003d24:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003d28:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d3e:	f107 031c 	add.w	r3, r7, #28
 8003d42:	2200      	movs	r2, #0
 8003d44:	4619      	mov	r1, r3
 8003d46:	4814      	ldr	r0, [pc, #80]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003d48:	f002 fb40 	bl	80063cc <HAL_TIM_PWM_ConfigChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8003d52:	f7fe f931 	bl	8001fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d74:	463b      	mov	r3, r7
 8003d76:	4619      	mov	r1, r3
 8003d78:	4807      	ldr	r0, [pc, #28]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003d7a:	f002 ffec 	bl	8006d56 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8003d84:	f7fe f918 	bl	8001fb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003d88:	4803      	ldr	r0, [pc, #12]	; (8003d98 <MX_TIM1_Init+0x144>)
 8003d8a:	f000 f959 	bl	8004040 <HAL_TIM_MspPostInit>

}
 8003d8e:	bf00      	nop
 8003d90:	3750      	adds	r7, #80	; 0x50
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000658 	.word	0x20000658
 8003d9c:	40012c00 	.word	0x40012c00

08003da0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003db4:	463b      	mov	r3, r7
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003dbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003dc6:	2247      	movs	r2, #71	; 0x47
 8003dc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003dd0:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003de4:	4813      	ldr	r0, [pc, #76]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003de6:	f002 f901 	bl	8005fec <HAL_TIM_Base_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003df0:	f7fe f8e2 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	4619      	mov	r1, r3
 8003e00:	480c      	ldr	r0, [pc, #48]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003e02:	f002 fba9 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003e0c:	f7fe f8d4 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e10:	2300      	movs	r3, #0
 8003e12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e18:	463b      	mov	r3, r7
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4805      	ldr	r0, [pc, #20]	; (8003e34 <MX_TIM2_Init+0x94>)
 8003e1e:	f002 fff2 	bl	8006e06 <HAL_TIMEx_MasterConfigSynchronization>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003e28:	f7fe f8c6 	bl	8001fb8 <Error_Handler>
  }

}
 8003e2c:	bf00      	nop
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000698 	.word	0x20000698

08003e38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3e:	f107 0308 	add.w	r3, r7, #8
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <MX_TIM3_Init+0x98>)
 8003e58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e5c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003e60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8003e68:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e6a:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8003e6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e7c:	4813      	ldr	r0, [pc, #76]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e7e:	f002 f8b5 	bl	8005fec <HAL_TIM_Base_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003e88:	f7fe f896 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	4619      	mov	r1, r3
 8003e98:	480c      	ldr	r0, [pc, #48]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003e9a:	f002 fb5d 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003ea4:	f7fe f888 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4805      	ldr	r0, [pc, #20]	; (8003ecc <MX_TIM3_Init+0x94>)
 8003eb6:	f002 ffa6 	bl	8006e06 <HAL_TIMEx_MasterConfigSynchronization>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ec0:	f7fe f87a 	bl	8001fb8 <Error_Handler>
  }

}
 8003ec4:	bf00      	nop
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200006d8 	.word	0x200006d8
 8003ed0:	40000400 	.word	0x40000400

08003ed4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee8:	463b      	mov	r3, r7
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <MX_TIM5_Init+0x98>)
 8003ef4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003ef8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003efc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003f06:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8003f0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f0c:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003f14:	2280      	movs	r2, #128	; 0x80
 8003f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f18:	4813      	ldr	r0, [pc, #76]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003f1a:	f002 f867 	bl	8005fec <HAL_TIM_Base_Init>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003f24:	f7fe f848 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f2e:	f107 0308 	add.w	r3, r7, #8
 8003f32:	4619      	mov	r1, r3
 8003f34:	480c      	ldr	r0, [pc, #48]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003f36:	f002 fb0f 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003f40:	f7fe f83a 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4805      	ldr	r0, [pc, #20]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003f52:	f002 ff58 	bl	8006e06 <HAL_TIMEx_MasterConfigSynchronization>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003f5c:	f7fe f82c 	bl	8001fb8 <Error_Handler>
  }

}
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000718 	.word	0x20000718
 8003f6c:	40000c00 	.word	0x40000c00

08003f70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <HAL_TIM_Base_MspInit+0xc0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10c      	bne.n	8003f9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003f88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f8c:	6193      	str	r3, [r2, #24]
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003f9a:	e044      	b.n	8004026 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	4a22      	ldr	r2, [pc, #136]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	61d3      	str	r3, [r2, #28]
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
}
 8003fbe:	e032      	b.n	8004026 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_TIM_Base_MspInit+0xc8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d114      	bne.n	8003ff4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	61d3      	str	r3, [r2, #28]
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	201d      	movs	r0, #29
 8003fe8:	f000 ffbd 	bl	8004f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003fec:	201d      	movs	r0, #29
 8003fee:	f000 ffd6 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 8003ff2:	e018      	b.n	8004026 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a10      	ldr	r2, [pc, #64]	; (800403c <HAL_TIM_Base_MspInit+0xcc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d113      	bne.n	8004026 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	61d3      	str	r3, [r2, #28]
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_TIM_Base_MspInit+0xc4>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004016:	2200      	movs	r2, #0
 8004018:	2100      	movs	r1, #0
 800401a:	2032      	movs	r0, #50	; 0x32
 800401c:	f000 ffa3 	bl	8004f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004020:	2032      	movs	r0, #50	; 0x32
 8004022:	f000 ffbc 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40000400 	.word	0x40000400
 800403c:	40000c00 	.word	0x40000c00

08004040 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <HAL_TIM_MspPostInit+0x5c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d118      	bne.n	8004092 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_TIM_MspPostInit+0x60>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_TIM_MspPostInit+0x60>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	6193      	str	r3, [r2, #24]
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_TIM_MspPostInit+0x60>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800407c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004082:	2302      	movs	r3, #2
 8004084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 0310 	add.w	r3, r7, #16
 800408a:	4619      	mov	r1, r3
 800408c:	4805      	ldr	r0, [pc, #20]	; (80040a4 <HAL_TIM_MspPostInit+0x64>)
 800408e:	f001 f8a9 	bl	80051e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004092:	bf00      	nop
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40010800 	.word	0x40010800

080040a8 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <TIMER_INIT+0x20>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0201 	mvn.w	r2, #1
 80040b4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 80040b6:	4804      	ldr	r0, [pc, #16]	; (80040c8 <TIMER_INIT+0x20>)
 80040b8:	f001 ffc3 	bl	8006042 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <TIMER_INIT+0x20>)
 80040be:	f002 f804 	bl	80060ca <HAL_TIM_Base_Start_IT>
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000718 	.word	0x20000718

080040cc <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <timer_min+0x38>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0201 	mvn.w	r2, #1
 80040de:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <timer_min+0x3c>)
 80040e8:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <timer_min+0x40>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 80040f0:	4804      	ldr	r0, [pc, #16]	; (8004104 <timer_min+0x38>)
 80040f2:	f001 ffa6 	bl	8006042 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80040f6:	4803      	ldr	r0, [pc, #12]	; (8004104 <timer_min+0x38>)
 80040f8:	f001 ffe7 	bl	80060ca <HAL_TIM_Base_Start_IT>
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200006d8 	.word	0x200006d8
 8004108:	20000758 	.word	0x20000758
 800410c:	20000759 	.word	0x20000759

08004110 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <MX_USART1_UART_Init+0x4c>)
 8004116:	4a12      	ldr	r2, [pc, #72]	; (8004160 <MX_USART1_UART_Init+0x50>)
 8004118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <MX_USART1_UART_Init+0x4c>)
 800411c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <MX_USART1_UART_Init+0x4c>)
 8004124:	2200      	movs	r2, #0
 8004126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <MX_USART1_UART_Init+0x4c>)
 800412a:	2200      	movs	r2, #0
 800412c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <MX_USART1_UART_Init+0x4c>)
 8004130:	2200      	movs	r2, #0
 8004132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <MX_USART1_UART_Init+0x4c>)
 8004136:	220c      	movs	r2, #12
 8004138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <MX_USART1_UART_Init+0x4c>)
 800413c:	2200      	movs	r2, #0
 800413e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <MX_USART1_UART_Init+0x4c>)
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004146:	4805      	ldr	r0, [pc, #20]	; (800415c <MX_USART1_UART_Init+0x4c>)
 8004148:	f002 feb3 	bl	8006eb2 <HAL_UART_Init>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004152:	f7fd ff31 	bl	8001fb8 <Error_Handler>
  }

}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	2000075c 	.word	0x2000075c
 8004160:	40013800 	.word	0x40013800

08004164 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <MX_USART2_UART_Init+0x50>)
 800416c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 8004170:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 800418a:	220c      	movs	r2, #12
 800418c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800419a:	4805      	ldr	r0, [pc, #20]	; (80041b0 <MX_USART2_UART_Init+0x4c>)
 800419c:	f002 fe89 	bl	8006eb2 <HAL_UART_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80041a6:	f7fd ff07 	bl	8001fb8 <Error_Handler>
  }

}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000079c 	.word	0x2000079c
 80041b4:	40004400 	.word	0x40004400

080041b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041be:	4a12      	ldr	r2, [pc, #72]	; (8004208 <MX_USART3_UART_Init+0x50>)
 80041c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041de:	220c      	movs	r2, #12
 80041e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80041ee:	4805      	ldr	r0, [pc, #20]	; (8004204 <MX_USART3_UART_Init+0x4c>)
 80041f0:	f002 fe5f 	bl	8006eb2 <HAL_UART_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80041fa:	f7fd fedd 	bl	8001fb8 <Error_Handler>
  }

}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200007dc 	.word	0x200007dc
 8004208:	40004800 	.word	0x40004800

0800420c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004214:	f107 0320 	add.w	r3, r7, #32
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a5b      	ldr	r2, [pc, #364]	; (8004394 <HAL_UART_MspInit+0x188>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d13a      	bne.n	80042a2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800422c:	4b5a      	ldr	r3, [pc, #360]	; (8004398 <HAL_UART_MspInit+0x18c>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	4a59      	ldr	r2, [pc, #356]	; (8004398 <HAL_UART_MspInit+0x18c>)
 8004232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004236:	6193      	str	r3, [r2, #24]
 8004238:	4b57      	ldr	r3, [pc, #348]	; (8004398 <HAL_UART_MspInit+0x18c>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004244:	4b54      	ldr	r3, [pc, #336]	; (8004398 <HAL_UART_MspInit+0x18c>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	4a53      	ldr	r2, [pc, #332]	; (8004398 <HAL_UART_MspInit+0x18c>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	6193      	str	r3, [r2, #24]
 8004250:	4b51      	ldr	r3, [pc, #324]	; (8004398 <HAL_UART_MspInit+0x18c>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800425c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004262:	2302      	movs	r3, #2
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004266:	2303      	movs	r3, #3
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800426a:	f107 0320 	add.w	r3, r7, #32
 800426e:	4619      	mov	r1, r3
 8004270:	484a      	ldr	r0, [pc, #296]	; (800439c <HAL_UART_MspInit+0x190>)
 8004272:	f000 ffb7 	bl	80051e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	2300      	movs	r3, #0
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004284:	f107 0320 	add.w	r3, r7, #32
 8004288:	4619      	mov	r1, r3
 800428a:	4844      	ldr	r0, [pc, #272]	; (800439c <HAL_UART_MspInit+0x190>)
 800428c:	f000 ffaa 	bl	80051e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	2025      	movs	r0, #37	; 0x25
 8004296:	f000 fe66 	bl	8004f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800429a:	2025      	movs	r0, #37	; 0x25
 800429c:	f000 fe7f 	bl	8004f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80042a0:	e074      	b.n	800438c <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a3e      	ldr	r2, [pc, #248]	; (80043a0 <HAL_UART_MspInit+0x194>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d130      	bne.n	800430e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042ac:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_UART_MspInit+0x18c>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4a39      	ldr	r2, [pc, #228]	; (8004398 <HAL_UART_MspInit+0x18c>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b6:	61d3      	str	r3, [r2, #28]
 80042b8:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_UART_MspInit+0x18c>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c4:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_UART_MspInit+0x18c>)
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	4a33      	ldr	r2, [pc, #204]	; (8004398 <HAL_UART_MspInit+0x18c>)
 80042ca:	f043 0304 	orr.w	r3, r3, #4
 80042ce:	6193      	str	r3, [r2, #24]
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_UART_MspInit+0x18c>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042dc:	2304      	movs	r3, #4
 80042de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e0:	2302      	movs	r3, #2
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042e4:	2303      	movs	r3, #3
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e8:	f107 0320 	add.w	r3, r7, #32
 80042ec:	4619      	mov	r1, r3
 80042ee:	482b      	ldr	r0, [pc, #172]	; (800439c <HAL_UART_MspInit+0x190>)
 80042f0:	f000 ff78 	bl	80051e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042f4:	2308      	movs	r3, #8
 80042f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004300:	f107 0320 	add.w	r3, r7, #32
 8004304:	4619      	mov	r1, r3
 8004306:	4825      	ldr	r0, [pc, #148]	; (800439c <HAL_UART_MspInit+0x190>)
 8004308:	f000 ff6c 	bl	80051e4 <HAL_GPIO_Init>
}
 800430c:	e03e      	b.n	800438c <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART3)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <HAL_UART_MspInit+0x198>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d139      	bne.n	800438c <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <HAL_UART_MspInit+0x18c>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <HAL_UART_MspInit+0x18c>)
 800431e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004322:	61d3      	str	r3, [r2, #28]
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <HAL_UART_MspInit+0x18c>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_UART_MspInit+0x18c>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <HAL_UART_MspInit+0x18c>)
 8004336:	f043 0308 	orr.w	r3, r3, #8
 800433a:	6193      	str	r3, [r2, #24]
 800433c:	4b16      	ldr	r3, [pc, #88]	; (8004398 <HAL_UART_MspInit+0x18c>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800434c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434e:	2302      	movs	r3, #2
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004352:	2303      	movs	r3, #3
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f107 0320 	add.w	r3, r7, #32
 800435a:	4619      	mov	r1, r3
 800435c:	4812      	ldr	r0, [pc, #72]	; (80043a8 <HAL_UART_MspInit+0x19c>)
 800435e:	f000 ff41 	bl	80051e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004370:	f107 0320 	add.w	r3, r7, #32
 8004374:	4619      	mov	r1, r3
 8004376:	480c      	ldr	r0, [pc, #48]	; (80043a8 <HAL_UART_MspInit+0x19c>)
 8004378:	f000 ff34 	bl	80051e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800437c:	2200      	movs	r2, #0
 800437e:	2100      	movs	r1, #0
 8004380:	2027      	movs	r0, #39	; 0x27
 8004382:	f000 fdf0 	bl	8004f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004386:	2027      	movs	r0, #39	; 0x27
 8004388:	f000 fe09 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 800438c:	bf00      	nop
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40013800 	.word	0x40013800
 8004398:	40021000 	.word	0x40021000
 800439c:	40010800 	.word	0x40010800
 80043a0:	40004400 	.word	0x40004400
 80043a4:	40004800 	.word	0x40004800
 80043a8:	40010c00 	.word	0x40010c00

080043ac <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e00a      	b.n	80043d0 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 80043ba:	230c      	movs	r3, #12
 80043bc:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 80043be:	bf00      	nop
 80043c0:	7afb      	ldrb	r3, [r7, #11]
 80043c2:	1e5a      	subs	r2, r3, #1
 80043c4:	72fa      	strb	r2, [r7, #11]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1fa      	bne.n	80043c0 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3301      	adds	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d3f0      	bcc.n	80043ba <XPT2046_DelayUS+0xe>
			;

	}

}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 80043ee:	2200      	movs	r2, #0
 80043f0:	2104      	movs	r1, #4
 80043f2:	481d      	ldr	r0, [pc, #116]	; (8004468 <XPT2046_WriteCMD+0x84>)
 80043f4:	f001 f8a5 	bl	8005542 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 80043f8:	2200      	movs	r2, #0
 80043fa:	2101      	movs	r1, #1
 80043fc:	481a      	ldr	r0, [pc, #104]	; (8004468 <XPT2046_WriteCMD+0x84>)
 80043fe:	f001 f8a0 	bl	8005542 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	e027      	b.n	8004458 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8004408:	79fa      	ldrb	r2, [r7, #7]
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	f1c3 0307 	rsb	r3, r3, #7
 8004410:	fa42 f303 	asr.w	r3, r2, r3
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <XPT2046_WriteCMD+0x44>
 800441c:	2201      	movs	r2, #1
 800441e:	2104      	movs	r1, #4
 8004420:	4811      	ldr	r0, [pc, #68]	; (8004468 <XPT2046_WriteCMD+0x84>)
 8004422:	f001 f88e 	bl	8005542 <HAL_GPIO_WritePin>
 8004426:	e004      	b.n	8004432 <XPT2046_WriteCMD+0x4e>
 8004428:	2200      	movs	r2, #0
 800442a:	2104      	movs	r1, #4
 800442c:	480e      	ldr	r0, [pc, #56]	; (8004468 <XPT2046_WriteCMD+0x84>)
 800442e:	f001 f888 	bl	8005542 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8004432:	2005      	movs	r0, #5
 8004434:	f7ff ffba 	bl	80043ac <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8004438:	2201      	movs	r2, #1
 800443a:	2101      	movs	r1, #1
 800443c:	480a      	ldr	r0, [pc, #40]	; (8004468 <XPT2046_WriteCMD+0x84>)
 800443e:	f001 f880 	bl	8005542 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8004442:	2005      	movs	r0, #5
 8004444:	f7ff ffb2 	bl	80043ac <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8004448:	2200      	movs	r2, #0
 800444a:	2101      	movs	r1, #1
 800444c:	4806      	ldr	r0, [pc, #24]	; (8004468 <XPT2046_WriteCMD+0x84>)
 800444e:	f001 f878 	bl	8005542 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3301      	adds	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b07      	cmp	r3, #7
 800445c:	d9d4      	bls.n	8004408 <XPT2046_WriteCMD+0x24>
	}

}
 800445e:	bf00      	nop
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40011800 	.word	0x40011800

0800446c <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8004472:	2300      	movs	r3, #0
 8004474:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 8004476:	2200      	movs	r2, #0
 8004478:	2104      	movs	r1, #4
 800447a:	4819      	ldr	r0, [pc, #100]	; (80044e0 <XPT2046_ReadCMD+0x74>)
 800447c:	f001 f861 	bl	8005542 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8004480:	2201      	movs	r2, #1
 8004482:	2101      	movs	r1, #1
 8004484:	4816      	ldr	r0, [pc, #88]	; (80044e0 <XPT2046_ReadCMD+0x74>)
 8004486:	f001 f85c 	bl	8005542 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 800448a:	2300      	movs	r3, #0
 800448c:	71fb      	strb	r3, [r7, #7]
 800448e:	e01e      	b.n	80044ce <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8004490:	2200      	movs	r2, #0
 8004492:	2101      	movs	r1, #1
 8004494:	4812      	ldr	r0, [pc, #72]	; (80044e0 <XPT2046_ReadCMD+0x74>)
 8004496:	f001 f854 	bl	8005542 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 800449a:	2108      	movs	r1, #8
 800449c:	4810      	ldr	r0, [pc, #64]	; (80044e0 <XPT2046_ReadCMD+0x74>)
 800449e:	f001 f839 	bl	8005514 <HAL_GPIO_ReadPin>
 80044a2:	4603      	mov	r3, r0
 80044a4:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	f1c3 030b 	rsb	r3, r3, #11
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	b21a      	sxth	r2, r3
 80044b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 80044be:	2201      	movs	r2, #1
 80044c0:	2101      	movs	r1, #1
 80044c2:	4807      	ldr	r0, [pc, #28]	; (80044e0 <XPT2046_ReadCMD+0x74>)
 80044c4:	f001 f83d 	bl	8005542 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	3301      	adds	r3, #1
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	2b0b      	cmp	r3, #11
 80044d2:	d9dd      	bls.n	8004490 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 80044d4:	88bb      	ldrh	r3, [r7, #4]

}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40011800 	.word	0x40011800

080044e4 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff77 	bl	80043e4 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 80044f6:	f7ff ffb9 	bl	800446c <XPT2046_ReadCMD>
 80044fa:	4603      	mov	r3, r0

}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 800450e:	2090      	movs	r0, #144	; 0x90
 8004510:	f7ff ffe8 	bl	80044e4 <XPT2046_ReadAdc>
 8004514:	4603      	mov	r3, r0
 8004516:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8004518:	2001      	movs	r0, #1
 800451a:	f7ff ff47 	bl	80043ac <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 800451e:	20d0      	movs	r0, #208	; 0xd0
 8004520:	f7ff ffe0 	bl	80044e4 <XPT2046_ReadAdc>
 8004524:	4603      	mov	r3, r0
 8004526:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	89fa      	ldrh	r2, [r7, #14]
 800452c:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	89ba      	ldrh	r2, [r7, #12]
 8004532:	801a      	strh	r2, [r3, #0]

}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b092      	sub	sp, #72	; 0x48
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 800454a:	f107 0308 	add.w	r3, r7, #8
 800454e:	2228      	movs	r2, #40	; 0x28
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f003 fb02 	bl	8007b5c <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8004558:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800455c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ffce 	bl	8004504 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8004568:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800456c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	3348      	adds	r3, #72	; 0x48
 8004574:	443b      	add	r3, r7
 8004576:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 800457a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800457e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004582:	330a      	adds	r3, #10
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	3348      	adds	r3, #72	; 0x48
 8004588:	443b      	add	r3, r7
 800458a:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 800458e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004592:	3301      	adds	r3, #1
 8004594:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8004598:	2110      	movs	r1, #16
 800459a:	4871      	ldr	r0, [pc, #452]	; (8004760 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800459c:	f000 ffba 	bl	8005514 <HAL_GPIO_ReadPin>
 80045a0:	4603      	mov	r3, r0
			&& (ucCount < 10));
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d103      	bne.n	80045ae <XPT2046_ReadAdc_Smooth_XY+0x72>
 80045a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045aa:	2b09      	cmp	r3, #9
 80045ac:	d9d4      	bls.n	8004558 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 80045ae:	2110      	movs	r1, #16
 80045b0:	486b      	ldr	r0, [pc, #428]	; (8004760 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80045b2:	f000 ffaf 	bl	8005514 <HAL_GPIO_ReadPin>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 80045bc:	4b69      	ldr	r3, [pc, #420]	; (8004764 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 80045c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045c6:	2b0a      	cmp	r3, #10
 80045c8:	f040 80c4 	bne.w	8004754 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 80045cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
 80045d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 80045d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80045e6:	e02b      	b.n	8004640 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 80045e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	3348      	adds	r3, #72	; 0x48
 80045f0:	443b      	add	r3, r7
 80045f2:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045fa:	4293      	cmp	r3, r2
 80045fc:	dd08      	ble.n	8004610 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 80045fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	3348      	adds	r3, #72	; 0x48
 8004606:	443b      	add	r3, r7
 8004608:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800460c:	643b      	str	r3, [r7, #64]	; 0x40
 800460e:	e012      	b.n	8004636 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8004610:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	3348      	adds	r3, #72	; 0x48
 8004618:	443b      	add	r3, r7
 800461a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800461e:	461a      	mov	r2, r3
 8004620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004622:	4293      	cmp	r3, r2
 8004624:	da07      	bge.n	8004636 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8004626:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	3348      	adds	r3, #72	; 0x48
 800462e:	443b      	add	r3, r7
 8004630:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8004636:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800463a:	3301      	adds	r3, #1
 800463c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004640:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004644:	2b09      	cmp	r3, #9
 8004646:	d9cf      	bls.n	80045e8 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800464e:	e02f      	b.n	80046b0 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8004650:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004654:	330a      	adds	r3, #10
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	3348      	adds	r3, #72	; 0x48
 800465a:	443b      	add	r3, r7
 800465c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004660:	461a      	mov	r2, r3
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	4293      	cmp	r3, r2
 8004666:	dd09      	ble.n	800467c <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8004668:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800466c:	330a      	adds	r3, #10
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	3348      	adds	r3, #72	; 0x48
 8004672:	443b      	add	r3, r7
 8004674:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
 800467a:	e014      	b.n	80046a6 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 800467c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004680:	330a      	adds	r3, #10
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	3348      	adds	r3, #72	; 0x48
 8004686:	443b      	add	r3, r7
 8004688:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800468c:	461a      	mov	r2, r3
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	4293      	cmp	r3, r2
 8004692:	da08      	bge.n	80046a6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8004694:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004698:	330a      	adds	r3, #10
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	3348      	adds	r3, #72	; 0x48
 800469e:	443b      	add	r3, r7
 80046a0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 80046a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80046aa:	3301      	adds	r3, #1
 80046ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80046b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	d9cb      	bls.n	8004650 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80046b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80046bc:	461a      	mov	r2, r3
 80046be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046c2:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 80046c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046ce:	4413      	add	r3, r2
 80046d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80046d4:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 80046d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80046da:	4413      	add	r3, r2
 80046dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046e6:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 80046e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80046f2:	441a      	add	r2, r3
 80046f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	1ad3      	subs	r3, r2, r3
				>> 3;
 80046fc:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8004704:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004708:	461a      	mov	r2, r3
 800470a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800470e:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8004710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004714:	4413      	add	r3, r2
 8004716:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800471a:	4413      	add	r3, r2
 800471c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004720:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8004722:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004726:	4413      	add	r3, r2
 8004728:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800472c:	4413      	add	r3, r2
 800472e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8004732:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8004734:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8004738:	4413      	add	r3, r2
 800473a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800473e:	441a      	add	r2, r3
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	1ad3      	subs	r3, r2, r3
				>> 3;
 8004748:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	805a      	strh	r2, [r3, #2]

		return 1;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8004754:	2300      	movs	r3, #0

}
 8004756:	4618      	mov	r0, r3
 8004758:	3748      	adds	r7, #72	; 0x48
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40011800 	.word	0x40011800
 8004764:	2000081c 	.word	0x2000081c

08004768 <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8004768:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8004778:	f107 0308 	add.w	r3, r7, #8
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fedd 	bl	800453c <XPT2046_ReadAdc_Smooth_XY>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d06e      	beq.n	8004866 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800478e:	893b      	ldrh	r3, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f7fb fe9b 	bl	80004cc <__aeabi_i2d>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fb feff 	bl	80005a0 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80047b0:	897b      	ldrh	r3, [r7, #10]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb fe8a 	bl	80004cc <__aeabi_i2d>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4620      	mov	r0, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	f7fb feee 	bl	80005a0 <__aeabi_dmul>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4640      	mov	r0, r8
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fb fd32 	bl	8000234 <__adddf3>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80047de:	f7fb fd29 	bl	8000234 <__adddf3>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f7fc f99b 	bl	8000b24 <__aeabi_d2uiz>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80047fc:	893b      	ldrh	r3, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fb fe64 	bl	80004cc <__aeabi_i2d>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4620      	mov	r0, r4
 800480a:	4629      	mov	r1, r5
 800480c:	f7fb fec8 	bl	80005a0 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4690      	mov	r8, r2
 8004816:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fb fe53 	bl	80004cc <__aeabi_i2d>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4620      	mov	r0, r4
 800482c:	4629      	mov	r1, r5
 800482e:	f7fb feb7 	bl	80005a0 <__aeabi_dmul>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4640      	mov	r0, r8
 8004838:	4649      	mov	r1, r9
 800483a:	f7fb fcfb 	bl	8000234 <__adddf3>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800484c:	f7fb fcf2 	bl	8000234 <__adddf3>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	f7fc f964 	bl	8000b24 <__aeabi_d2uiz>
 800485c:	4603      	mov	r3, r0
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	805a      	strh	r2, [r3, #2]
 8004864:	e001      	b.n	800486a <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 800486a:	7bfb      	ldrb	r3, [r7, #15]

}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004878:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800487a:	e003      	b.n	8004884 <LoopCopyDataInit>

0800487c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800487e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004880:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004882:	3104      	adds	r1, #4

08004884 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004884:	480a      	ldr	r0, [pc, #40]	; (80048b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004888:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800488a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800488c:	d3f6      	bcc.n	800487c <CopyDataInit>
  ldr r2, =_sbss
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004890:	e002      	b.n	8004898 <LoopFillZerobss>

08004892 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004892:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004894:	f842 3b04 	str.w	r3, [r2], #4

08004898 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800489a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800489c:	d3f9      	bcc.n	8004892 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800489e:	f7ff f9a5 	bl	8003bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048a2:	f003 f937 	bl	8007b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048a6:	f7fd faef 	bl	8001e88 <main>
  bx lr
 80048aa:	4770      	bx	lr
  ldr r3, =_sidata
 80048ac:	080082f0 	.word	0x080082f0
  ldr r0, =_sdata
 80048b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80048b4:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 80048b8:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 80048bc:	20000828 	.word	0x20000828

080048c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048c0:	e7fe      	b.n	80048c0 <ADC1_2_IRQHandler>
	...

080048c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_Init+0x28>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a07      	ldr	r2, [pc, #28]	; (80048ec <HAL_Init+0x28>)
 80048ce:	f043 0310 	orr.w	r3, r3, #16
 80048d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048d4:	2003      	movs	r0, #3
 80048d6:	f000 fb3b 	bl	8004f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048da:	2000      	movs	r0, #0
 80048dc:	f000 f808 	bl	80048f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048e0:	f7ff f854 	bl	800398c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40022000 	.word	0x40022000

080048f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048f8:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_InitTick+0x54>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <HAL_InitTick+0x58>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004906:	fbb3 f3f1 	udiv	r3, r3, r1
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fb53 	bl	8004fba <HAL_SYSTICK_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e00e      	b.n	800493c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d80a      	bhi.n	800493a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004924:	2200      	movs	r2, #0
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800492c:	f000 fb1b 	bl	8004f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004930:	4a06      	ldr	r2, [pc, #24]	; (800494c <HAL_InitTick+0x5c>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000004 	.word	0x20000004
 8004948:	2000003c 	.word	0x2000003c
 800494c:	20000038 	.word	0x20000038

08004950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_IncTick+0x1c>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_IncTick+0x20>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4413      	add	r3, r2
 8004960:	4a03      	ldr	r2, [pc, #12]	; (8004970 <HAL_IncTick+0x20>)
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	2000003c 	.word	0x2000003c
 8004970:	20000820 	.word	0x20000820

08004974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return uwTick;
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <HAL_GetTick+0x10>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	20000820 	.word	0x20000820

08004988 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0ce      	b.n	8004b48 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc faba 	bl	8000f40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f9bd 	bl	8004d4c <ADC_ConversionStop_Disable>
 80049d2:	4603      	mov	r3, r0
 80049d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 80a9 	bne.w	8004b36 <HAL_ADC_Init+0x1ae>
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 80a5 	bne.w	8004b36 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049f4:	f023 0302 	bic.w	r3, r3, #2
 80049f8:	f043 0202 	orr.w	r2, r3, #2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4951      	ldr	r1, [pc, #324]	; (8004b50 <HAL_ADC_Init+0x1c8>)
 8004a0a:	428b      	cmp	r3, r1
 8004a0c:	d10a      	bne.n	8004a24 <HAL_ADC_Init+0x9c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a16:	d002      	beq.n	8004a1e <HAL_ADC_Init+0x96>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	e004      	b.n	8004a28 <HAL_ADC_Init+0xa0>
 8004a1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a22:	e001      	b.n	8004a28 <HAL_ADC_Init+0xa0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8004a28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8004a30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a40:	d003      	beq.n	8004a4a <HAL_ADC_Init+0xc2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d102      	bne.n	8004a50 <HAL_ADC_Init+0xc8>
 8004a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4e:	e000      	b.n	8004a52 <HAL_ADC_Init+0xca>
 8004a50:	2300      	movs	r3, #0
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d119      	bne.n	8004a94 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	035a      	lsls	r2, r3, #13
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e00b      	b.n	8004a94 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_ADC_Init+0x1cc>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac4:	d003      	beq.n	8004ace <HAL_ADC_Init+0x146>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d104      	bne.n	8004ad8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	051b      	lsls	r3, r3, #20
 8004ad6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <HAL_ADC_Init+0x1d0>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d10b      	bne.n	8004b14 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004b12:	e018      	b.n	8004b46 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f023 0312 	bic.w	r3, r3, #18
 8004b1c:	f043 0210 	orr.w	r2, r3, #16
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f043 0201 	orr.w	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004b34:	e007      	b.n	8004b46 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	f043 0210 	orr.w	r2, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40013c00 	.word	0x40013c00
 8004b54:	ffe1f7fd 	.word	0xffe1f7fd
 8004b58:	ff1f0efe 	.word	0xff1f0efe

08004b5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x20>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0dc      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x1da>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b06      	cmp	r3, #6
 8004b8a:	d81c      	bhi.n	8004bc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3b05      	subs	r3, #5
 8004b9e:	221f      	movs	r2, #31
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	4019      	ands	r1, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3b05      	subs	r3, #5
 8004bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8004bc4:	e03c      	b.n	8004c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d81c      	bhi.n	8004c08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b23      	subs	r3, #35	; 0x23
 8004be0:	221f      	movs	r2, #31
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	4019      	ands	r1, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b23      	subs	r3, #35	; 0x23
 8004bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
 8004c06:	e01b      	b.n	8004c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	3b41      	subs	r3, #65	; 0x41
 8004c1a:	221f      	movs	r2, #31
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	4019      	ands	r1, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	3b41      	subs	r3, #65	; 0x41
 8004c34:	fa00 f203 	lsl.w	r2, r0, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b09      	cmp	r3, #9
 8004c46:	d91c      	bls.n	8004c82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68d9      	ldr	r1, [r3, #12]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	3b1e      	subs	r3, #30
 8004c5a:	2207      	movs	r2, #7
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	4019      	ands	r1, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6898      	ldr	r0, [r3, #8]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4413      	add	r3, r2
 8004c72:	3b1e      	subs	r3, #30
 8004c74:	fa00 f203 	lsl.w	r2, r0, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]
 8004c80:	e019      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6919      	ldr	r1, [r3, #16]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4413      	add	r3, r2
 8004c92:	2207      	movs	r2, #7
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	4019      	ands	r1, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6898      	ldr	r0, [r3, #8]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	fa00 f203 	lsl.w	r2, r0, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d003      	beq.n	8004cc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cc2:	2b11      	cmp	r3, #17
 8004cc4:	d132      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <HAL_ADC_ConfigChannel+0x1e4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d125      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d126      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004cec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d11a      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_ADC_ConfigChannel+0x1e8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <HAL_ADC_ConfigChannel+0x1ec>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	0c9a      	lsrs	r2, r3, #18
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d0c:	e002      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f9      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x1b2>
 8004d1a:	e007      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	40012400 	.word	0x40012400
 8004d44:	20000004 	.word	0x20000004
 8004d48:	431bde83 	.word	0x431bde83

08004d4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d127      	bne.n	8004db6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d76:	f7ff fdfd 	bl	8004974 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d7c:	e014      	b.n	8004da8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d7e:	f7ff fdf9 	bl	8004974 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d90d      	bls.n	8004da8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f043 0210 	orr.w	r2, r3, #16
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e007      	b.n	8004db8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d0e3      	beq.n	8004d7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <NVIC_SetPriorityGrouping+0x44>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df2:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <NVIC_SetPriorityGrouping+0x44>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	60d3      	str	r3, [r2, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <NVIC_GetPriorityGrouping+0x18>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 0307 	and.w	r3, r3, #7
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	f003 021f 	and.w	r2, r3, #31
 8004e34:	4906      	ldr	r1, [pc, #24]	; (8004e50 <NVIC_EnableIRQ+0x2c>)
 8004e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	e000e100 	.word	0xe000e100

08004e54 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6039      	str	r1, [r7, #0]
 8004e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da0b      	bge.n	8004e80 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	490c      	ldr	r1, [pc, #48]	; (8004ea0 <NVIC_SetPriority+0x4c>)
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	3b04      	subs	r3, #4
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e7e:	e009      	b.n	8004e94 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	4907      	ldr	r1, [pc, #28]	; (8004ea4 <NVIC_SetPriority+0x50>)
 8004e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8a:	0112      	lsls	r2, r2, #4
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	440b      	add	r3, r1
 8004e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000ed00 	.word	0xe000ed00
 8004ea4:	e000e100 	.word	0xe000e100

08004ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f1c3 0307 	rsb	r3, r3, #7
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf28      	it	cs
 8004ec6:	2304      	movcs	r3, #4
 8004ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d902      	bls.n	8004ed8 <NVIC_EncodePriority+0x30>
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3b03      	subs	r3, #3
 8004ed6:	e000      	b.n	8004eda <NVIC_EncodePriority+0x32>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	401a      	ands	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	43d9      	mvns	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f00:	4313      	orrs	r3, r2
         );
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3724      	adds	r7, #36	; 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr

08004f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f1c:	d301      	bcc.n	8004f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e00f      	b.n	8004f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <SysTick_Config+0x40>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f2a:	210f      	movs	r1, #15
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f30:	f7ff ff90 	bl	8004e54 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <SysTick_Config+0x40>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f3a:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <SysTick_Config+0x40>)
 8004f3c:	2207      	movs	r2, #7
 8004f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	e000e010 	.word	0xe000e010

08004f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff31 	bl	8004dc0 <NVIC_SetPriorityGrouping>
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f78:	f7ff ff46 	bl	8004e08 <NVIC_GetPriorityGrouping>
 8004f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	f7ff ff90 	bl	8004ea8 <NVIC_EncodePriority>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff5f 	bl	8004e54 <NVIC_SetPriority>
}
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff ff39 	bl	8004e24 <NVIC_EnableIRQ>
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff ffa2 	bl	8004f0c <SysTick_Config>
 8004fc8:	4603      	mov	r3, r0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d005      	beq.n	8004ff6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	e0d6      	b.n	80051a4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 020e 	bic.w	r2, r2, #14
 8005004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <HAL_DMA_Abort_IT+0x1dc>)
 800501e:	429a      	cmp	r2, r3
 8005020:	d958      	bls.n	80050d4 <HAL_DMA_Abort_IT+0x100>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a63      	ldr	r2, [pc, #396]	; (80051b4 <HAL_DMA_Abort_IT+0x1e0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04f      	beq.n	80050cc <HAL_DMA_Abort_IT+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a61      	ldr	r2, [pc, #388]	; (80051b8 <HAL_DMA_Abort_IT+0x1e4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d048      	beq.n	80050c8 <HAL_DMA_Abort_IT+0xf4>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a60      	ldr	r2, [pc, #384]	; (80051bc <HAL_DMA_Abort_IT+0x1e8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d040      	beq.n	80050c2 <HAL_DMA_Abort_IT+0xee>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5e      	ldr	r2, [pc, #376]	; (80051c0 <HAL_DMA_Abort_IT+0x1ec>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d038      	beq.n	80050bc <HAL_DMA_Abort_IT+0xe8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a5d      	ldr	r2, [pc, #372]	; (80051c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d030      	beq.n	80050b6 <HAL_DMA_Abort_IT+0xe2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5b      	ldr	r2, [pc, #364]	; (80051c8 <HAL_DMA_Abort_IT+0x1f4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d028      	beq.n	80050b0 <HAL_DMA_Abort_IT+0xdc>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a53      	ldr	r2, [pc, #332]	; (80051b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d020      	beq.n	80050aa <HAL_DMA_Abort_IT+0xd6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a57      	ldr	r2, [pc, #348]	; (80051cc <HAL_DMA_Abort_IT+0x1f8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d019      	beq.n	80050a6 <HAL_DMA_Abort_IT+0xd2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a56      	ldr	r2, [pc, #344]	; (80051d0 <HAL_DMA_Abort_IT+0x1fc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d012      	beq.n	80050a2 <HAL_DMA_Abort_IT+0xce>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a54      	ldr	r2, [pc, #336]	; (80051d4 <HAL_DMA_Abort_IT+0x200>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00a      	beq.n	800509c <HAL_DMA_Abort_IT+0xc8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a53      	ldr	r2, [pc, #332]	; (80051d8 <HAL_DMA_Abort_IT+0x204>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d102      	bne.n	8005096 <HAL_DMA_Abort_IT+0xc2>
 8005090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005094:	e01b      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 8005096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800509a:	e018      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 800509c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a0:	e015      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050a2:	2310      	movs	r3, #16
 80050a4:	e013      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e011      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ae:	e00e      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050b4:	e00b      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ba:	e008      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c0:	e005      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c6:	e002      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050c8:	2310      	movs	r3, #16
 80050ca:	e000      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4a43      	ldr	r2, [pc, #268]	; (80051dc <HAL_DMA_Abort_IT+0x208>)
 80050d0:	6053      	str	r3, [r2, #4]
 80050d2:	e057      	b.n	8005184 <HAL_DMA_Abort_IT+0x1b0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a36      	ldr	r2, [pc, #216]	; (80051b4 <HAL_DMA_Abort_IT+0x1e0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d04f      	beq.n	800517e <HAL_DMA_Abort_IT+0x1aa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a35      	ldr	r2, [pc, #212]	; (80051b8 <HAL_DMA_Abort_IT+0x1e4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d048      	beq.n	800517a <HAL_DMA_Abort_IT+0x1a6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a33      	ldr	r2, [pc, #204]	; (80051bc <HAL_DMA_Abort_IT+0x1e8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d040      	beq.n	8005174 <HAL_DMA_Abort_IT+0x1a0>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a32      	ldr	r2, [pc, #200]	; (80051c0 <HAL_DMA_Abort_IT+0x1ec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d038      	beq.n	800516e <HAL_DMA_Abort_IT+0x19a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d030      	beq.n	8005168 <HAL_DMA_Abort_IT+0x194>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2f      	ldr	r2, [pc, #188]	; (80051c8 <HAL_DMA_Abort_IT+0x1f4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d028      	beq.n	8005162 <HAL_DMA_Abort_IT+0x18e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d020      	beq.n	800515c <HAL_DMA_Abort_IT+0x188>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <HAL_DMA_Abort_IT+0x1f8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d019      	beq.n	8005158 <HAL_DMA_Abort_IT+0x184>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <HAL_DMA_Abort_IT+0x1fc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d012      	beq.n	8005154 <HAL_DMA_Abort_IT+0x180>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <HAL_DMA_Abort_IT+0x200>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00a      	beq.n	800514e <HAL_DMA_Abort_IT+0x17a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <HAL_DMA_Abort_IT+0x204>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d102      	bne.n	8005148 <HAL_DMA_Abort_IT+0x174>
 8005142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005146:	e01b      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800514c:	e018      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800514e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005152:	e015      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005154:	2310      	movs	r3, #16
 8005156:	e013      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005158:	2301      	movs	r3, #1
 800515a:	e011      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800515c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005160:	e00e      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005166:	e00b      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800516c:	e008      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800516e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005172:	e005      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005178:	e002      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800517a:	2310      	movs	r3, #16
 800517c:	e000      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800517e:	2301      	movs	r3, #1
 8005180:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <HAL_DMA_Abort_IT+0x20c>)
 8005182:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
    } 
  }
  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40020080 	.word	0x40020080
 80051b4:	40020008 	.word	0x40020008
 80051b8:	4002001c 	.word	0x4002001c
 80051bc:	40020030 	.word	0x40020030
 80051c0:	40020044 	.word	0x40020044
 80051c4:	40020058 	.word	0x40020058
 80051c8:	4002006c 	.word	0x4002006c
 80051cc:	40020408 	.word	0x40020408
 80051d0:	4002041c 	.word	0x4002041c
 80051d4:	40020430 	.word	0x40020430
 80051d8:	40020444 	.word	0x40020444
 80051dc:	40020400 	.word	0x40020400
 80051e0:	40020000 	.word	0x40020000

080051e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b08b      	sub	sp, #44	; 0x2c
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	e179      	b.n	80054fc <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8005208:	2201      	movs	r2, #1
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	429a      	cmp	r2, r3
 8005222:	f040 8168 	bne.w	80054f6 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4a96      	ldr	r2, [pc, #600]	; (8005484 <HAL_GPIO_Init+0x2a0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d05e      	beq.n	80052ee <HAL_GPIO_Init+0x10a>
 8005230:	4a94      	ldr	r2, [pc, #592]	; (8005484 <HAL_GPIO_Init+0x2a0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d875      	bhi.n	8005322 <HAL_GPIO_Init+0x13e>
 8005236:	4a94      	ldr	r2, [pc, #592]	; (8005488 <HAL_GPIO_Init+0x2a4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d058      	beq.n	80052ee <HAL_GPIO_Init+0x10a>
 800523c:	4a92      	ldr	r2, [pc, #584]	; (8005488 <HAL_GPIO_Init+0x2a4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d86f      	bhi.n	8005322 <HAL_GPIO_Init+0x13e>
 8005242:	4a92      	ldr	r2, [pc, #584]	; (800548c <HAL_GPIO_Init+0x2a8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d052      	beq.n	80052ee <HAL_GPIO_Init+0x10a>
 8005248:	4a90      	ldr	r2, [pc, #576]	; (800548c <HAL_GPIO_Init+0x2a8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d869      	bhi.n	8005322 <HAL_GPIO_Init+0x13e>
 800524e:	4a90      	ldr	r2, [pc, #576]	; (8005490 <HAL_GPIO_Init+0x2ac>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d04c      	beq.n	80052ee <HAL_GPIO_Init+0x10a>
 8005254:	4a8e      	ldr	r2, [pc, #568]	; (8005490 <HAL_GPIO_Init+0x2ac>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d863      	bhi.n	8005322 <HAL_GPIO_Init+0x13e>
 800525a:	4a8e      	ldr	r2, [pc, #568]	; (8005494 <HAL_GPIO_Init+0x2b0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d046      	beq.n	80052ee <HAL_GPIO_Init+0x10a>
 8005260:	4a8c      	ldr	r2, [pc, #560]	; (8005494 <HAL_GPIO_Init+0x2b0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d85d      	bhi.n	8005322 <HAL_GPIO_Init+0x13e>
 8005266:	2b12      	cmp	r3, #18
 8005268:	d82a      	bhi.n	80052c0 <HAL_GPIO_Init+0xdc>
 800526a:	2b12      	cmp	r3, #18
 800526c:	d859      	bhi.n	8005322 <HAL_GPIO_Init+0x13e>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <HAL_GPIO_Init+0x90>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	080052ef 	.word	0x080052ef
 8005278:	080052c9 	.word	0x080052c9
 800527c:	080052db 	.word	0x080052db
 8005280:	0800531d 	.word	0x0800531d
 8005284:	08005323 	.word	0x08005323
 8005288:	08005323 	.word	0x08005323
 800528c:	08005323 	.word	0x08005323
 8005290:	08005323 	.word	0x08005323
 8005294:	08005323 	.word	0x08005323
 8005298:	08005323 	.word	0x08005323
 800529c:	08005323 	.word	0x08005323
 80052a0:	08005323 	.word	0x08005323
 80052a4:	08005323 	.word	0x08005323
 80052a8:	08005323 	.word	0x08005323
 80052ac:	08005323 	.word	0x08005323
 80052b0:	08005323 	.word	0x08005323
 80052b4:	08005323 	.word	0x08005323
 80052b8:	080052d1 	.word	0x080052d1
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	4a75      	ldr	r2, [pc, #468]	; (8005498 <HAL_GPIO_Init+0x2b4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80052c6:	e02c      	b.n	8005322 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	623b      	str	r3, [r7, #32]
          break;
 80052ce:	e029      	b.n	8005324 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	3304      	adds	r3, #4
 80052d6:	623b      	str	r3, [r7, #32]
          break;
 80052d8:	e024      	b.n	8005324 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	3308      	adds	r3, #8
 80052e0:	623b      	str	r3, [r7, #32]
          break;
 80052e2:	e01f      	b.n	8005324 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	330c      	adds	r3, #12
 80052ea:	623b      	str	r3, [r7, #32]
          break;
 80052ec:	e01a      	b.n	8005324 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80052f6:	2304      	movs	r3, #4
 80052f8:	623b      	str	r3, [r7, #32]
          break;
 80052fa:	e013      	b.n	8005324 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005304:	2308      	movs	r3, #8
 8005306:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	611a      	str	r2, [r3, #16]
          break;
 800530e:	e009      	b.n	8005324 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005310:	2308      	movs	r3, #8
 8005312:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	615a      	str	r2, [r3, #20]
          break;
 800531a:	e003      	b.n	8005324 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800531c:	2300      	movs	r3, #0
 800531e:	623b      	str	r3, [r7, #32]
          break;
 8005320:	e000      	b.n	8005324 <HAL_GPIO_Init+0x140>
          break;
 8005322:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2bff      	cmp	r3, #255	; 0xff
 8005328:	d801      	bhi.n	800532e <HAL_GPIO_Init+0x14a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	e001      	b.n	8005332 <HAL_GPIO_Init+0x14e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2bff      	cmp	r3, #255	; 0xff
 8005338:	d802      	bhi.n	8005340 <HAL_GPIO_Init+0x15c>
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	e002      	b.n	8005346 <HAL_GPIO_Init+0x162>
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	3b08      	subs	r3, #8
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	210f      	movs	r1, #15
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	401a      	ands	r2, r3
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	fa01 f303 	lsl.w	r3, r1, r3
 8005360:	431a      	orrs	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80c1 	beq.w	80054f6 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005374:	4b49      	ldr	r3, [pc, #292]	; (800549c <HAL_GPIO_Init+0x2b8>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4a48      	ldr	r2, [pc, #288]	; (800549c <HAL_GPIO_Init+0x2b8>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6193      	str	r3, [r2, #24]
 8005380:	4b46      	ldr	r3, [pc, #280]	; (800549c <HAL_GPIO_Init+0x2b8>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800538c:	4a44      	ldr	r2, [pc, #272]	; (80054a0 <HAL_GPIO_Init+0x2bc>)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	089b      	lsrs	r3, r3, #2
 8005392:	3302      	adds	r3, #2
 8005394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005398:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	220f      	movs	r2, #15
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4013      	ands	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3c      	ldr	r2, [pc, #240]	; (80054a4 <HAL_GPIO_Init+0x2c0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d01f      	beq.n	80053f8 <HAL_GPIO_Init+0x214>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a3b      	ldr	r2, [pc, #236]	; (80054a8 <HAL_GPIO_Init+0x2c4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d019      	beq.n	80053f4 <HAL_GPIO_Init+0x210>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a3a      	ldr	r2, [pc, #232]	; (80054ac <HAL_GPIO_Init+0x2c8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_GPIO_Init+0x20c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a39      	ldr	r2, [pc, #228]	; (80054b0 <HAL_GPIO_Init+0x2cc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00d      	beq.n	80053ec <HAL_GPIO_Init+0x208>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a38      	ldr	r2, [pc, #224]	; (80054b4 <HAL_GPIO_Init+0x2d0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d007      	beq.n	80053e8 <HAL_GPIO_Init+0x204>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <HAL_GPIO_Init+0x2d4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d101      	bne.n	80053e4 <HAL_GPIO_Init+0x200>
 80053e0:	2305      	movs	r3, #5
 80053e2:	e00a      	b.n	80053fa <HAL_GPIO_Init+0x216>
 80053e4:	2306      	movs	r3, #6
 80053e6:	e008      	b.n	80053fa <HAL_GPIO_Init+0x216>
 80053e8:	2304      	movs	r3, #4
 80053ea:	e006      	b.n	80053fa <HAL_GPIO_Init+0x216>
 80053ec:	2303      	movs	r3, #3
 80053ee:	e004      	b.n	80053fa <HAL_GPIO_Init+0x216>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e002      	b.n	80053fa <HAL_GPIO_Init+0x216>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_GPIO_Init+0x216>
 80053f8:	2300      	movs	r3, #0
 80053fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fc:	f002 0203 	and.w	r2, r2, #3
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	4093      	lsls	r3, r2
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800540a:	4925      	ldr	r1, [pc, #148]	; (80054a0 <HAL_GPIO_Init+0x2bc>)
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	3302      	adds	r3, #2
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4924      	ldr	r1, [pc, #144]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4313      	orrs	r3, r2
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	e006      	b.n	8005440 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	43db      	mvns	r3, r3
 800543a:	4920      	ldr	r1, [pc, #128]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 800543c:	4013      	ands	r3, r2
 800543e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	491a      	ldr	r1, [pc, #104]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	e006      	b.n	8005468 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800545a:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	43db      	mvns	r3, r3
 8005462:	4916      	ldr	r1, [pc, #88]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 8005464:	4013      	ands	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d025      	beq.n	80054c0 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005474:	4b11      	ldr	r3, [pc, #68]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4910      	ldr	r1, [pc, #64]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]
 8005480:	e025      	b.n	80054ce <HAL_GPIO_Init+0x2ea>
 8005482:	bf00      	nop
 8005484:	10320000 	.word	0x10320000
 8005488:	10310000 	.word	0x10310000
 800548c:	10220000 	.word	0x10220000
 8005490:	10210000 	.word	0x10210000
 8005494:	10120000 	.word	0x10120000
 8005498:	10110000 	.word	0x10110000
 800549c:	40021000 	.word	0x40021000
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40010800 	.word	0x40010800
 80054a8:	40010c00 	.word	0x40010c00
 80054ac:	40011000 	.word	0x40011000
 80054b0:	40011400 	.word	0x40011400
 80054b4:	40011800 	.word	0x40011800
 80054b8:	40011c00 	.word	0x40011c00
 80054bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <HAL_GPIO_Init+0x32c>)
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	43db      	mvns	r3, r3
 80054c8:	4911      	ldr	r1, [pc, #68]	; (8005510 <HAL_GPIO_Init+0x32c>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <HAL_GPIO_Init+0x32c>)
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	490c      	ldr	r1, [pc, #48]	; (8005510 <HAL_GPIO_Init+0x32c>)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60cb      	str	r3, [r1, #12]
 80054e6:	e006      	b.n	80054f6 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_GPIO_Init+0x32c>)
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	43db      	mvns	r3, r3
 80054f0:	4907      	ldr	r1, [pc, #28]	; (8005510 <HAL_GPIO_Init+0x32c>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	f67f ae82 	bls.w	8005208 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	372c      	adds	r7, #44	; 0x2c
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	40010400 	.word	0x40010400

08005514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	887b      	ldrh	r3, [r7, #2]
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
 8005530:	e001      	b.n	8005536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	807b      	strh	r3, [r7, #2]
 800554e:	4613      	mov	r3, r2
 8005550:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005552:	787b      	ldrb	r3, [r7, #1]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005558:	887a      	ldrh	r2, [r7, #2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800555e:	e003      	b.n	8005568 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	041a      	lsls	r2, r3, #16
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	611a      	str	r2, [r3, #16]
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr
	...

08005574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800557e:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d006      	beq.n	8005598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f806 	bl	80055a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40010400 	.word	0x40010400

080055a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8087 	beq.w	80056e0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055d2:	4b92      	ldr	r3, [pc, #584]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d00c      	beq.n	80055f8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055de:	4b8f      	ldr	r3, [pc, #572]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d112      	bne.n	8005610 <HAL_RCC_OscConfig+0x58>
 80055ea:	4b8c      	ldr	r3, [pc, #560]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d10b      	bne.n	8005610 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f8:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d06c      	beq.n	80056de <HAL_RCC_OscConfig+0x126>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d168      	bne.n	80056de <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e22d      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005618:	d106      	bne.n	8005628 <HAL_RCC_OscConfig+0x70>
 800561a:	4b80      	ldr	r3, [pc, #512]	; (800581c <HAL_RCC_OscConfig+0x264>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a7f      	ldr	r2, [pc, #508]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e02e      	b.n	8005686 <HAL_RCC_OscConfig+0xce>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10c      	bne.n	800564a <HAL_RCC_OscConfig+0x92>
 8005630:	4b7a      	ldr	r3, [pc, #488]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a79      	ldr	r2, [pc, #484]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	4b77      	ldr	r3, [pc, #476]	; (800581c <HAL_RCC_OscConfig+0x264>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a76      	ldr	r2, [pc, #472]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	e01d      	b.n	8005686 <HAL_RCC_OscConfig+0xce>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005652:	d10c      	bne.n	800566e <HAL_RCC_OscConfig+0xb6>
 8005654:	4b71      	ldr	r3, [pc, #452]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a70      	ldr	r2, [pc, #448]	; (800581c <HAL_RCC_OscConfig+0x264>)
 800565a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b6e      	ldr	r3, [pc, #440]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a6d      	ldr	r2, [pc, #436]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e00b      	b.n	8005686 <HAL_RCC_OscConfig+0xce>
 800566e:	4b6b      	ldr	r3, [pc, #428]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6a      	ldr	r2, [pc, #424]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b68      	ldr	r3, [pc, #416]	; (800581c <HAL_RCC_OscConfig+0x264>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a67      	ldr	r2, [pc, #412]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005684:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d013      	beq.n	80056b6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568e:	f7ff f971 	bl	8004974 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005696:	f7ff f96d 	bl	8004974 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b64      	cmp	r3, #100	; 0x64
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e1e1      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a8:	4b5c      	ldr	r3, [pc, #368]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0xde>
 80056b4:	e014      	b.n	80056e0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b6:	f7ff f95d 	bl	8004974 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056be:	f7ff f959 	bl	8004974 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b64      	cmp	r3, #100	; 0x64
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e1cd      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d0:	4b52      	ldr	r3, [pc, #328]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCC_OscConfig+0x106>
 80056dc:	e000      	b.n	80056e0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d063      	beq.n	80057b4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80056f8:	4b48      	ldr	r3, [pc, #288]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 030c 	and.w	r3, r3, #12
 8005700:	2b08      	cmp	r3, #8
 8005702:	d11c      	bne.n	800573e <HAL_RCC_OscConfig+0x186>
 8005704:	4b45      	ldr	r3, [pc, #276]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d116      	bne.n	800573e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005710:	4b42      	ldr	r3, [pc, #264]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCC_OscConfig+0x170>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d001      	beq.n	8005728 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e1a1      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005728:	4b3c      	ldr	r3, [pc, #240]	; (800581c <HAL_RCC_OscConfig+0x264>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4939      	ldr	r1, [pc, #228]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573c:	e03a      	b.n	80057b4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d020      	beq.n	8005788 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005746:	4b36      	ldr	r3, [pc, #216]	; (8005820 <HAL_RCC_OscConfig+0x268>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7ff f912 	bl	8004974 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005754:	f7ff f90e 	bl	8004974 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e182      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005766:	4b2d      	ldr	r3, [pc, #180]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b2a      	ldr	r3, [pc, #168]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4926      	ldr	r1, [pc, #152]	; (800581c <HAL_RCC_OscConfig+0x264>)
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
 8005786:	e015      	b.n	80057b4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <HAL_RCC_OscConfig+0x268>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7ff f8f1 	bl	8004974 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005796:	f7ff f8ed 	bl	8004974 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e161      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a8:	4b1c      	ldr	r3, [pc, #112]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d039      	beq.n	8005834 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d019      	beq.n	80057fc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_RCC_OscConfig+0x26c>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ce:	f7ff f8d1 	bl	8004974 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d6:	f7ff f8cd 	bl	8004974 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e141      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <HAL_RCC_OscConfig+0x264>)
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f000 fadf 	bl	8005db8 <RCC_Delay>
 80057fa:	e01b      	b.n	8005834 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057fc:	4b09      	ldr	r3, [pc, #36]	; (8005824 <HAL_RCC_OscConfig+0x26c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005802:	f7ff f8b7 	bl	8004974 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005808:	e00e      	b.n	8005828 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800580a:	f7ff f8b3 	bl	8004974 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d907      	bls.n	8005828 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e127      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
 800581c:	40021000 	.word	0x40021000
 8005820:	42420000 	.word	0x42420000
 8005824:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005828:	4b92      	ldr	r3, [pc, #584]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ea      	bne.n	800580a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80a6 	beq.w	800598e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005842:	2300      	movs	r3, #0
 8005844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005846:	4b8b      	ldr	r3, [pc, #556]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005852:	4b88      	ldr	r3, [pc, #544]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	4a87      	ldr	r2, [pc, #540]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585c:	61d3      	str	r3, [r2, #28]
 800585e:	4b85      	ldr	r3, [pc, #532]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586e:	4b82      	ldr	r3, [pc, #520]	; (8005a78 <HAL_RCC_OscConfig+0x4c0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d118      	bne.n	80058ac <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800587a:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <HAL_RCC_OscConfig+0x4c0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a7e      	ldr	r2, [pc, #504]	; (8005a78 <HAL_RCC_OscConfig+0x4c0>)
 8005880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005886:	f7ff f875 	bl	8004974 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588e:	f7ff f871 	bl	8004974 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b64      	cmp	r3, #100	; 0x64
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e0e5      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a0:	4b75      	ldr	r3, [pc, #468]	; (8005a78 <HAL_RCC_OscConfig+0x4c0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d106      	bne.n	80058c2 <HAL_RCC_OscConfig+0x30a>
 80058b4:	4b6f      	ldr	r3, [pc, #444]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	4a6e      	ldr	r2, [pc, #440]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6213      	str	r3, [r2, #32]
 80058c0:	e02d      	b.n	800591e <HAL_RCC_OscConfig+0x366>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x32c>
 80058ca:	4b6a      	ldr	r3, [pc, #424]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	4a69      	ldr	r2, [pc, #420]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	6213      	str	r3, [r2, #32]
 80058d6:	4b67      	ldr	r3, [pc, #412]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	4a66      	ldr	r2, [pc, #408]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058dc:	f023 0304 	bic.w	r3, r3, #4
 80058e0:	6213      	str	r3, [r2, #32]
 80058e2:	e01c      	b.n	800591e <HAL_RCC_OscConfig+0x366>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b05      	cmp	r3, #5
 80058ea:	d10c      	bne.n	8005906 <HAL_RCC_OscConfig+0x34e>
 80058ec:	4b61      	ldr	r3, [pc, #388]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4a60      	ldr	r2, [pc, #384]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058f2:	f043 0304 	orr.w	r3, r3, #4
 80058f6:	6213      	str	r3, [r2, #32]
 80058f8:	4b5e      	ldr	r3, [pc, #376]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	4a5d      	ldr	r2, [pc, #372]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	6213      	str	r3, [r2, #32]
 8005904:	e00b      	b.n	800591e <HAL_RCC_OscConfig+0x366>
 8005906:	4b5b      	ldr	r3, [pc, #364]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	4a5a      	ldr	r2, [pc, #360]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	6213      	str	r3, [r2, #32]
 8005912:	4b58      	ldr	r3, [pc, #352]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4a57      	ldr	r2, [pc, #348]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005918:	f023 0304 	bic.w	r3, r3, #4
 800591c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d015      	beq.n	8005952 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005926:	f7ff f825 	bl	8004974 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	e00a      	b.n	8005944 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7ff f821 	bl	8004974 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e093      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ee      	beq.n	800592e <HAL_RCC_OscConfig+0x376>
 8005950:	e014      	b.n	800597c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005952:	f7ff f80f 	bl	8004974 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7ff f80b 	bl	8004974 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e07d      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005970:	4b40      	ldr	r3, [pc, #256]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ee      	bne.n	800595a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d105      	bne.n	800598e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005982:	4b3c      	ldr	r3, [pc, #240]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	4a3b      	ldr	r2, [pc, #236]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800598c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d069      	beq.n	8005a6a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005996:	4b37      	ldr	r3, [pc, #220]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d061      	beq.n	8005a66 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d146      	bne.n	8005a38 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059aa:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <HAL_RCC_OscConfig+0x4c4>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b0:	f7fe ffe0 	bl	8004974 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b8:	f7fe ffdc 	bl	8004974 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e050      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ca:	4b2a      	ldr	r3, [pc, #168]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059de:	d108      	bne.n	80059f2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059e0:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4921      	ldr	r1, [pc, #132]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f2:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a19      	ldr	r1, [r3, #32]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	430b      	orrs	r3, r1
 8005a04:	491b      	ldr	r1, [pc, #108]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <HAL_RCC_OscConfig+0x4c4>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fe ffb0 	bl	8004974 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fe ffac 	bl	8004974 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e020      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0f0      	beq.n	8005a18 <HAL_RCC_OscConfig+0x460>
 8005a36:	e018      	b.n	8005a6a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a38:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <HAL_RCC_OscConfig+0x4c4>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fe ff99 	bl	8004974 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fe ff95 	bl	8004974 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e009      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <HAL_RCC_OscConfig+0x4bc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f0      	bne.n	8005a46 <HAL_RCC_OscConfig+0x48e>
 8005a64:	e001      	b.n	8005a6a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40007000 	.word	0x40007000
 8005a7c:	42420060 	.word	0x42420060

08005a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a8e:	4b7e      	ldr	r3, [pc, #504]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d910      	bls.n	8005abe <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9c:	4b7a      	ldr	r3, [pc, #488]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f023 0207 	bic.w	r2, r3, #7
 8005aa4:	4978      	ldr	r1, [pc, #480]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005aac:	4b76      	ldr	r3, [pc, #472]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d001      	beq.n	8005abe <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e0e0      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d020      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4a6c      	ldr	r2, [pc, #432]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005adc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ae0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aee:	4b67      	ldr	r3, [pc, #412]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4a66      	ldr	r2, [pc, #408]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005af4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005af8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005afa:	4b64      	ldr	r3, [pc, #400]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	4961      	ldr	r1, [pc, #388]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d06a      	beq.n	8005bee <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b20:	4b5a      	ldr	r3, [pc, #360]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d115      	bne.n	8005b58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0a7      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d107      	bne.n	8005b48 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b38:	4b54      	ldr	r3, [pc, #336]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e09b      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b48:	4b50      	ldr	r3, [pc, #320]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e093      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b58:	4b4c      	ldr	r3, [pc, #304]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f023 0203 	bic.w	r2, r3, #3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	4949      	ldr	r1, [pc, #292]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b6a:	f7fe ff03 	bl	8004974 <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d112      	bne.n	8005b9e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b78:	e00a      	b.n	8005b90 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b7a:	f7fe fefb 	bl	8004974 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e077      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b90:	4b3e      	ldr	r3, [pc, #248]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 030c 	and.w	r3, r3, #12
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d1ee      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xfa>
 8005b9c:	e027      	b.n	8005bee <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d11d      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba8:	f7fe fee4 	bl	8004974 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e060      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bbe:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d1ee      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x128>
 8005bca:	e010      	b.n	8005bee <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bcc:	f7fe fed2 	bl	8004974 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e04e      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005be2:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ee      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005bee:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d210      	bcs.n	8005c1e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfc:	4b22      	ldr	r3, [pc, #136]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 0207 	bic.w	r2, r3, #7
 8005c04:	4920      	ldr	r1, [pc, #128]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c0c:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <HAL_RCC_ClockConfig+0x208>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d001      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e030      	b.n	8005c80 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	4915      	ldr	r1, [pc, #84]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c48:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	490d      	ldr	r1, [pc, #52]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c5c:	f000 f81c 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8005c60:	4602      	mov	r2, r0
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <HAL_RCC_ClockConfig+0x20c>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	4908      	ldr	r1, [pc, #32]	; (8005c90 <HAL_RCC_ClockConfig+0x210>)
 8005c6e:	5ccb      	ldrb	r3, [r1, r3]
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	4a07      	ldr	r2, [pc, #28]	; (8005c94 <HAL_RCC_ClockConfig+0x214>)
 8005c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f7fe fe39 	bl	80048f0 <HAL_InitTick>
  
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40022000 	.word	0x40022000
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	080082c8 	.word	0x080082c8
 8005c94:	20000004 	.word	0x20000004

08005c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c98:	b490      	push	{r4, r7}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005c9e:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xac>)
 8005ca0:	1d3c      	adds	r4, r7, #4
 8005ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ca8:	f240 2301 	movw	r3, #513	; 0x201
 8005cac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cc2:	4b21      	ldr	r3, [pc, #132]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d002      	beq.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d003      	beq.n	8005cde <HAL_RCC_GetSysClockFreq+0x46>
 8005cd6:	e02b      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cd8:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005cda:	623b      	str	r3, [r7, #32]
      break;
 8005cdc:	e02b      	b.n	8005d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	0c9b      	lsrs	r3, r3, #18
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	3328      	adds	r3, #40	; 0x28
 8005ce8:	443b      	add	r3, r7
 8005cea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005cee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d012      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	0c5b      	lsrs	r3, r3, #17
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	3328      	adds	r3, #40	; 0x28
 8005d06:	443b      	add	r3, r7
 8005d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d0c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d12:	fb03 f202 	mul.w	r2, r3, r2
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1e:	e004      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4a0b      	ldr	r2, [pc, #44]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	623b      	str	r3, [r7, #32]
      break;
 8005d2e:	e002      	b.n	8005d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d32:	623b      	str	r3, [r7, #32]
      break;
 8005d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d36:	6a3b      	ldr	r3, [r7, #32]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3728      	adds	r7, #40	; 0x28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc90      	pop	{r4, r7}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	08007c58 	.word	0x08007c58
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	007a1200 	.word	0x007a1200
 8005d50:	003d0900 	.word	0x003d0900

08005d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d58:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr
 8005d64:	20000004 	.word	0x20000004

08005d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d6c:	f7ff fff2 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d70:	4602      	mov	r2, r0
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	4903      	ldr	r1, [pc, #12]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d7e:	5ccb      	ldrb	r3, [r1, r3]
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	080082d8 	.word	0x080082d8

08005d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d94:	f7ff ffde 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	0adb      	lsrs	r3, r3, #11
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	4903      	ldr	r1, [pc, #12]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005da6:	5ccb      	ldrb	r3, [r1, r3]
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40021000 	.word	0x40021000
 8005db4:	080082d8 	.word	0x080082d8

08005db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <RCC_Delay+0x38>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <RCC_Delay+0x3c>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0a5b      	lsrs	r3, r3, #9
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8005dd4:	bf00      	nop
}
 8005dd6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1e5a      	subs	r2, r3, #1
 8005ddc:	60fa      	str	r2, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f8      	bne.n	8005dd4 <RCC_Delay+0x1c>
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000004 	.word	0x20000004
 8005df4:	10624dd3 	.word	0x10624dd3

08005df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d07d      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005e14:	2300      	movs	r3, #0
 8005e16:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e18:	4b4f      	ldr	r3, [pc, #316]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10d      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e24:	4b4c      	ldr	r3, [pc, #304]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	4a4b      	ldr	r2, [pc, #300]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	61d3      	str	r3, [r2, #28]
 8005e30:	4b49      	ldr	r3, [pc, #292]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e40:	4b46      	ldr	r3, [pc, #280]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d118      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e4c:	4b43      	ldr	r3, [pc, #268]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a42      	ldr	r2, [pc, #264]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e58:	f7fe fd8c 	bl	8004974 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5e:	e008      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e60:	f7fe fd88 	bl	8004974 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	; 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e06d      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e72:	4b3a      	ldr	r3, [pc, #232]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e7e:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d02e      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d027      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e9c:	4b2e      	ldr	r3, [pc, #184]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ea6:	4b2e      	ldr	r3, [pc, #184]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eac:	4b2c      	ldr	r3, [pc, #176]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005eb2:	4a29      	ldr	r2, [pc, #164]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d014      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fe fd57 	bl	8004974 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fe fd53 	bl	8004974 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e036      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	4b1d      	ldr	r3, [pc, #116]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0ee      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4917      	ldr	r1, [pc, #92]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d105      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f04:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	490b      	ldr	r1, [pc, #44]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	4904      	ldr	r1, [pc, #16]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40007000 	.word	0x40007000
 8005f60:	42420440 	.word	0x42420440

08005f64 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e034      	b.n	8005fe4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7fb f8e4 	bl	800115c <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f001 fcaa 	bl	80078f8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	461a      	mov	r2, r3
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	f001 fd22 	bl	80079f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6858      	ldr	r0, [r3, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	f001 fd4d 	bl	8007a60 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	6892      	ldr	r2, [r2, #8]
 8005fce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	6892      	ldr	r2, [r2, #8]
 8005fda:	f041 0101 	orr.w	r1, r1, #1
 8005fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e01d      	b.n	800603a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fd ffac 	bl	8003f70 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f000 fbac 	bl	8006788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2202      	movs	r2, #2
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr

08006076 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <HAL_TIM_Base_Stop+0x40>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	f240 4344 	movw	r3, #1092	; 0x444
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d107      	bne.n	80060b6 <HAL_TIM_Base_Stop+0x40>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0201 	orr.w	r2, r2, #1
 80060e0:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0201 	orr.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <HAL_TIM_Base_Stop_IT+0x48>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	f240 4344 	movw	r3, #1092	; 0x444
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <HAL_TIM_Base_Stop_IT+0x48>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	bc80      	pop	{r7}
 8006150:	4770      	bx	lr

08006152 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e01d      	b.n	80061a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f815 	bl	80061a8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 faf9 	bl	8006788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d122      	bne.n	8006216 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d11b      	bne.n	8006216 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f06f 0202 	mvn.w	r2, #2
 80061e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 faa8 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 8006202:	e005      	b.n	8006210 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fa9b 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 faaa 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b04      	cmp	r3, #4
 8006222:	d122      	bne.n	800626a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d11b      	bne.n	800626a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0204 	mvn.w	r2, #4
 800623a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fa7e 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 8006256:	e005      	b.n	8006264 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa71 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa80 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b08      	cmp	r3, #8
 8006276:	d122      	bne.n	80062be <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b08      	cmp	r3, #8
 8006284:	d11b      	bne.n	80062be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f06f 0208 	mvn.w	r2, #8
 800628e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2204      	movs	r2, #4
 8006294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa54 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 80062aa:	e005      	b.n	80062b8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa47 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa56 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d122      	bne.n	8006312 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d11b      	bne.n	8006312 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0210 	mvn.w	r2, #16
 80062e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2208      	movs	r2, #8
 80062e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa2a 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 80062fe:	e005      	b.n	800630c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa1d 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa2c 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d10e      	bne.n	800633e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d107      	bne.n	800633e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f06f 0201 	mvn.w	r2, #1
 8006336:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f9f8 	bl	800672e <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d10e      	bne.n	800636a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d107      	bne.n	800636a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006362:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fd9b 	bl	8006ea0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d10e      	bne.n	8006396 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d107      	bne.n	8006396 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800638e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f9f0 	bl	8006776 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d10e      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d107      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f06f 0220 	mvn.w	r2, #32
 80063ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fd66 	bl	8006e8e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e0b4      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x184>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2202      	movs	r2, #2
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	f200 809f 	bhi.w	800653c <HAL_TIM_PWM_ConfigChannel+0x170>
 80063fe:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	08006439 	.word	0x08006439
 8006408:	0800653d 	.word	0x0800653d
 800640c:	0800653d 	.word	0x0800653d
 8006410:	0800653d 	.word	0x0800653d
 8006414:	08006479 	.word	0x08006479
 8006418:	0800653d 	.word	0x0800653d
 800641c:	0800653d 	.word	0x0800653d
 8006420:	0800653d 	.word	0x0800653d
 8006424:	080064bb 	.word	0x080064bb
 8006428:	0800653d 	.word	0x0800653d
 800642c:	0800653d 	.word	0x0800653d
 8006430:	0800653d 	.word	0x0800653d
 8006434:	080064fb 	.word	0x080064fb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fa20 	bl	8006884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0208 	orr.w	r2, r2, #8
 8006452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0204 	bic.w	r2, r2, #4
 8006462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6999      	ldr	r1, [r3, #24]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	619a      	str	r2, [r3, #24]
    }
    break;
 8006476:	e062      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fa76 	bl	8006970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	021a      	lsls	r2, r3, #8
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	619a      	str	r2, [r3, #24]
    }
    break;
 80064b8:	e041      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 facf 	bl	8006a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0208 	orr.w	r2, r2, #8
 80064d4:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0204 	bic.w	r2, r2, #4
 80064e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	61da      	str	r2, [r3, #28]
    }
    break;
 80064f8:	e021      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fb29 	bl	8006b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006514:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	021a      	lsls	r2, r3, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	61da      	str	r2, [r3, #28]
    }
    break;
 800653a:	e000      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 800653c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIM_ConfigClockSource+0x1c>
 8006570:	2302      	movs	r3, #2
 8006572:	e0d8      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x1ce>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006592:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	d052      	beq.n	8006654 <HAL_TIM_ConfigClockSource+0xfc>
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	f200 80ae 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ba:	d027      	beq.n	800660c <HAL_TIM_ConfigClockSource+0xb4>
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	f200 80a7 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 80065c4:	2b70      	cmp	r3, #112	; 0x70
 80065c6:	d02a      	beq.n	800661e <HAL_TIM_ConfigClockSource+0xc6>
 80065c8:	2b70      	cmp	r3, #112	; 0x70
 80065ca:	f200 80a2 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 80065ce:	2b60      	cmp	r3, #96	; 0x60
 80065d0:	d063      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x142>
 80065d2:	2b60      	cmp	r3, #96	; 0x60
 80065d4:	f200 809d 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 80065d8:	2b50      	cmp	r3, #80	; 0x50
 80065da:	d04e      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x122>
 80065dc:	2b50      	cmp	r3, #80	; 0x50
 80065de:	f200 8098 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d069      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x162>
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	f200 8093 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	f000 8089 	beq.w	8006704 <HAL_TIM_ConfigClockSource+0x1ac>
 80065f2:	2b30      	cmp	r3, #48	; 0x30
 80065f4:	f200 808d 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d07c      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x19e>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	f200 8088 	bhi.w	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d069      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x182>
 8006606:	2b10      	cmp	r3, #16
 8006608:	d06e      	beq.n	80066e8 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800660a:	e082      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0207 	bic.w	r2, r2, #7
 800661a:	609a      	str	r2, [r3, #8]
    break;
 800661c:	e07a      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6899      	ldr	r1, [r3, #8]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f000 fb71 	bl	8006d14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006640:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006648:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	609a      	str	r2, [r3, #8]
    break;
 8006652:	e05f      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	6899      	ldr	r1, [r3, #8]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f000 fb56 	bl	8006d14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006676:	609a      	str	r2, [r3, #8]
    break;
 8006678:	e04c      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fac0 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2150      	movs	r1, #80	; 0x50
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb1f 	bl	8006cd6 <TIM_ITRx_SetConfig>
    break;
 8006698:	e03c      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fae2 	bl	8006c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2160      	movs	r1, #96	; 0x60
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fb0f 	bl	8006cd6 <TIM_ITRx_SetConfig>
    break;
 80066b8:	e02c      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f000 faa0 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2140      	movs	r1, #64	; 0x40
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 faff 	bl	8006cd6 <TIM_ITRx_SetConfig>
    break;
 80066d8:	e01c      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 faf8 	bl	8006cd6 <TIM_ITRx_SetConfig>
    break;
 80066e6:	e015      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2110      	movs	r1, #16
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 faf1 	bl	8006cd6 <TIM_ITRx_SetConfig>
    break;
 80066f4:	e00e      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2120      	movs	r1, #32
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 faea 	bl	8006cd6 <TIM_ITRx_SetConfig>
    break;
 8006702:	e007      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2130      	movs	r1, #48	; 0x30
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fae3 	bl	8006cd6 <TIM_ITRx_SetConfig>
    break;
 8006710:	e000      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8006712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a34      	ldr	r2, [pc, #208]	; (8006870 <TIM_Base_SetConfig+0xe8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d013      	beq.n	80067cc <TIM_Base_SetConfig+0x44>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a33      	ldr	r2, [pc, #204]	; (8006874 <TIM_Base_SetConfig+0xec>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00f      	beq.n	80067cc <TIM_Base_SetConfig+0x44>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d00b      	beq.n	80067cc <TIM_Base_SetConfig+0x44>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a30      	ldr	r2, [pc, #192]	; (8006878 <TIM_Base_SetConfig+0xf0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_Base_SetConfig+0x44>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a2f      	ldr	r2, [pc, #188]	; (800687c <TIM_Base_SetConfig+0xf4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_Base_SetConfig+0x44>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <TIM_Base_SetConfig+0xf8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d108      	bne.n	80067de <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a23      	ldr	r2, [pc, #140]	; (8006870 <TIM_Base_SetConfig+0xe8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <TIM_Base_SetConfig+0x86>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <TIM_Base_SetConfig+0xec>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00f      	beq.n	800680e <TIM_Base_SetConfig+0x86>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f4:	d00b      	beq.n	800680e <TIM_Base_SetConfig+0x86>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <TIM_Base_SetConfig+0xf0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d007      	beq.n	800680e <TIM_Base_SetConfig+0x86>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <TIM_Base_SetConfig+0xf4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_Base_SetConfig+0x86>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <TIM_Base_SetConfig+0xf8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d108      	bne.n	8006820 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006826:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a09      	ldr	r2, [pc, #36]	; (8006870 <TIM_Base_SetConfig+0xe8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_Base_SetConfig+0xd0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a08      	ldr	r2, [pc, #32]	; (8006874 <TIM_Base_SetConfig+0xec>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d103      	bne.n	8006860 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	615a      	str	r2, [r3, #20]
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40013400 	.word	0x40013400
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00

08006884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f023 0201 	bic.w	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 0302 	bic.w	r3, r3, #2
 80068d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a20      	ldr	r2, [pc, #128]	; (8006968 <TIM_OC1_SetConfig+0xe4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC1_SetConfig+0x70>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1f      	ldr	r2, [pc, #124]	; (800696c <TIM_OC1_SetConfig+0xe8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d10c      	bne.n	800690e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f023 0308 	bic.w	r3, r3, #8
 80068fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 0304 	bic.w	r3, r3, #4
 800690c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a15      	ldr	r2, [pc, #84]	; (8006968 <TIM_OC1_SetConfig+0xe4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_OC1_SetConfig+0x9a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a14      	ldr	r2, [pc, #80]	; (800696c <TIM_OC1_SetConfig+0xe8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d111      	bne.n	8006942 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800692c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	621a      	str	r2, [r3, #32]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40013400 	.word	0x40013400

08006970 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f023 0210 	bic.w	r2, r3, #16
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0320 	bic.w	r3, r3, #32
 80069c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <TIM_OC2_SetConfig+0xec>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC2_SetConfig+0x74>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <TIM_OC2_SetConfig+0xf0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d10d      	bne.n	8006a00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fe:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <TIM_OC2_SetConfig+0xec>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC2_SetConfig+0xa0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <TIM_OC2_SetConfig+0xf0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d113      	bne.n	8006a38 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40013400 	.word	0x40013400

08006a64 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a21      	ldr	r2, [pc, #132]	; (8006b50 <TIM_OC3_SetConfig+0xec>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d003      	beq.n	8006ad6 <TIM_OC3_SetConfig+0x72>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a20      	ldr	r2, [pc, #128]	; (8006b54 <TIM_OC3_SetConfig+0xf0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10d      	bne.n	8006af2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006af0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <TIM_OC3_SetConfig+0xec>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d003      	beq.n	8006b02 <TIM_OC3_SetConfig+0x9e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a15      	ldr	r2, [pc, #84]	; (8006b54 <TIM_OC3_SetConfig+0xf0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d113      	bne.n	8006b2a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	621a      	str	r2, [r3, #32]
}
 8006b44:	bf00      	nop
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40013400 	.word	0x40013400

08006b58 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	031b      	lsls	r3, r3, #12
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a11      	ldr	r2, [pc, #68]	; (8006c04 <TIM_OC4_SetConfig+0xac>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_OC4_SetConfig+0x74>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <TIM_OC4_SetConfig+0xb0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d109      	bne.n	8006be0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	019b      	lsls	r3, r3, #6
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40013400 	.word	0x40013400

08006c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f023 0201 	bic.w	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f023 030a 	bic.w	r3, r3, #10
 8006c50:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	f023 0210 	bic.w	r2, r3, #16
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	031b      	lsls	r3, r3, #12
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	f043 0307 	orr.w	r3, r3, #7
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	021a      	lsls	r2, r3, #8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	609a      	str	r2, [r3, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e044      	b.n	8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e032      	b.n	8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6859      	ldr	r1, [r3, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e5e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6899      	ldr	r1, [r3, #8]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e03f      	b.n	8006f44 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d106      	bne.n	8006ede <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fd f997 	bl	800420c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2224      	movs	r2, #36	; 0x24
 8006ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ef4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fbe6 	bl	80076c8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695a      	ldr	r2, [r3, #20]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f1a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f2a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	f040 8083 	bne.w	8007074 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_UART_Transmit+0x2e>
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e07b      	b.n	8007076 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_UART_Transmit+0x40>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e074      	b.n	8007076 <HAL_UART_Transmit+0x12a>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2221      	movs	r2, #33	; 0x21
 8006f9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006fa2:	f7fd fce7 	bl	8004974 <HAL_GetTick>
 8006fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	88fa      	ldrh	r2, [r7, #6]
 8006fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8006fb4:	e042      	b.n	800703c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fcc:	d122      	bne.n	8007014 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2180      	movs	r1, #128	; 0x80
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fa0c 	bl	80073f6 <UART_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e046      	b.n	8007076 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ffa:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3302      	adds	r3, #2
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	e017      	b.n	800703c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3301      	adds	r3, #1
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	e013      	b.n	800703c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	2180      	movs	r1, #128	; 0x80
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 f9e9 	bl	80073f6 <UART_WaitOnFlagUntilTimeout>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e023      	b.n	8007076 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	60ba      	str	r2, [r7, #8]
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1b7      	bne.n	8006fb6 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	2140      	movs	r1, #64	; 0x40
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f9d0 	bl	80073f6 <UART_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e00a      	b.n	8007076 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b088      	sub	sp, #32
 8007082:	af02      	add	r7, sp, #8
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	603b      	str	r3, [r7, #0]
 800708a:	4613      	mov	r3, r2
 800708c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b20      	cmp	r3, #32
 800709c:	f040 8090 	bne.w	80071c0 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <HAL_UART_Receive+0x2e>
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e088      	b.n	80071c2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_UART_Receive+0x40>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e081      	b.n	80071c2 <HAL_UART_Receive+0x144>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2222      	movs	r2, #34	; 0x22
 80070d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80070d4:	f7fd fc4e 	bl	8004974 <HAL_GetTick>
 80070d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	88fa      	ldrh	r2, [r7, #6]
 80070de:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80070e6:	e05c      	b.n	80071a2 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fe:	d12b      	bne.n	8007158 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	2120      	movs	r1, #32
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f973 	bl	80073f6 <UART_WaitOnFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e053      	b.n	80071c2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10c      	bne.n	8007140 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	b29a      	uxth	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3302      	adds	r3, #2
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	e030      	b.n	80071a2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b29b      	uxth	r3, r3
 8007148:	b2db      	uxtb	r3, r3
 800714a:	b29a      	uxth	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	3301      	adds	r3, #1
 8007154:	60bb      	str	r3, [r7, #8]
 8007156:	e024      	b.n	80071a2 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2200      	movs	r2, #0
 8007160:	2120      	movs	r1, #32
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f947 	bl	80073f6 <UART_WaitOnFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e027      	b.n	80071c2 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d108      	bne.n	800718c <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6859      	ldr	r1, [r3, #4]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	60ba      	str	r2, [r7, #8]
 8007186:	b2ca      	uxtb	r2, r1
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	e00a      	b.n	80071a2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d19d      	bne.n	80070e8 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_UART_IRQHandler+0x52>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9d5 	bl	80075c6 <UART_Receive_IT>
      return;
 800721c:	e0cb      	b.n	80073b6 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 80ab 	beq.w	800737c <HAL_UART_IRQHandler+0x1b0>
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d105      	bne.n	800723c <HAL_UART_IRQHandler+0x70>
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80a0 	beq.w	800737c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <HAL_UART_IRQHandler+0x90>
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007254:	f043 0201 	orr.w	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_UART_IRQHandler+0xb0>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007274:	f043 0202 	orr.w	r2, r3, #2
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_UART_IRQHandler+0xd0>
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007294:	f043 0204 	orr.w	r2, r3, #4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <HAL_UART_IRQHandler+0xf0>
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b4:	f043 0208 	orr.w	r2, r3, #8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d077      	beq.n	80073b4 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <HAL_UART_IRQHandler+0x112>
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f974 	bl	80075c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bf14      	ite	ne
 80072ec:	2301      	movne	r3, #1
 80072ee:	2300      	moveq	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <HAL_UART_IRQHandler+0x13a>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d031      	beq.n	800736a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f8bf 	bl	800748a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d023      	beq.n	8007362 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695a      	ldr	r2, [r3, #20]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007328:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732e:	2b00      	cmp	r3, #0
 8007330:	d013      	beq.n	800735a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007336:	4a21      	ldr	r2, [pc, #132]	; (80073bc <HAL_UART_IRQHandler+0x1f0>)
 8007338:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd fe48 	bl	8004fd4 <HAL_DMA_Abort_IT>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007358:	e00e      	b.n	8007378 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f842 	bl	80073e4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	e00a      	b.n	8007378 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f83e 	bl	80073e4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e006      	b.n	8007378 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f83a 	bl	80073e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007376:	e01d      	b.n	80073b4 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	bf00      	nop
    return;
 800737a:	e01b      	b.n	80073b4 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d008      	beq.n	8007398 <HAL_UART_IRQHandler+0x1cc>
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f8ab 	bl	80074ec <UART_Transmit_IT>
    return;
 8007396:	e00e      	b.n	80073b6 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <HAL_UART_IRQHandler+0x1ea>
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d004      	beq.n	80073b6 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f8f2 	bl	8007596 <UART_EndTransmit_IT>
    return;
 80073b2:	e000      	b.n	80073b6 <HAL_UART_IRQHandler+0x1ea>
    return;
 80073b4:	bf00      	nop
  }
}
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	080074c5 	.word	0x080074c5

080073c0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bc80      	pop	{r7}
 80073d0:	4770      	bx	lr

080073d2 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr

080073f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	4613      	mov	r3, r2
 8007404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007406:	e02c      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800740e:	d028      	beq.n	8007462 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0x30>
 8007416:	f7fd faad 	bl	8004974 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	429a      	cmp	r2, r3
 8007424:	d21d      	bcs.n	8007462 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007434:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695a      	ldr	r2, [r3, #20]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0201 	bic.w	r2, r2, #1
 8007444:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e00f      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4013      	ands	r3, r2
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	bf0c      	ite	eq
 8007472:	2301      	moveq	r3, #1
 8007474:	2300      	movne	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	429a      	cmp	r2, r3
 800747e:	d0c3      	beq.n	8007408 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695a      	ldr	r2, [r3, #20]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0201 	bic.w	r2, r2, #1
 80074b0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff ff80 	bl	80073e4 <HAL_UART_ErrorCallback>
}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b21      	cmp	r3, #33	; 0x21
 80074fe:	d144      	bne.n	800758a <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d11a      	bne.n	8007540 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800751e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	1c9a      	adds	r2, r3, #2
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	621a      	str	r2, [r3, #32]
 8007532:	e00e      	b.n	8007552 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	621a      	str	r2, [r3, #32]
 800753e:	e008      	b.n	8007552 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	1c59      	adds	r1, r3, #1
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6211      	str	r1, [r2, #32]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29b      	uxth	r3, r3
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	4619      	mov	r1, r3
 8007560:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10f      	bne.n	8007586 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ac:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff ff02 	bl	80073c0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b22      	cmp	r3, #34	; 0x22
 80075d8:	d171      	bne.n	80076be <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e2:	d123      	bne.n	800762c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10e      	bne.n	8007610 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	1c9a      	adds	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	629a      	str	r2, [r3, #40]	; 0x28
 800760e:	e029      	b.n	8007664 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b29b      	uxth	r3, r3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	629a      	str	r2, [r3, #40]	; 0x28
 800762a:	e01b      	b.n	8007664 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6858      	ldr	r0, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	1c59      	adds	r1, r3, #1
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6291      	str	r1, [r2, #40]	; 0x28
 8007644:	b2c2      	uxtb	r2, r0
 8007646:	701a      	strb	r2, [r3, #0]
 8007648:	e00c      	b.n	8007664 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	1c58      	adds	r0, r3, #1
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	6288      	str	r0, [r1, #40]	; 0x28
 800765c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	4619      	mov	r1, r3
 8007672:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007674:	2b00      	cmp	r3, #0
 8007676:	d120      	bne.n	80076ba <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0220 	bic.w	r2, r2, #32
 8007686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007696:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0201 	bic.w	r2, r2, #1
 80076a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fe8e 	bl	80073d2 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e002      	b.n	80076c0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e000      	b.n	80076c0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80076be:	2302      	movs	r3, #2
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076c8:	b5b0      	push	{r4, r5, r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800770a:	f023 030c 	bic.w	r3, r3, #12
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	430b      	orrs	r3, r1
 8007716:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a6f      	ldr	r2, [pc, #444]	; (80078f0 <UART_SetConfig+0x228>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d16b      	bne.n	8007810 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007738:	f7fe fb2a 	bl	8005d90 <HAL_RCC_GetPCLK2Freq>
 800773c:	4602      	mov	r2, r0
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009a      	lsls	r2, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	4a68      	ldr	r2, [pc, #416]	; (80078f4 <UART_SetConfig+0x22c>)
 8007754:	fba2 2303 	umull	r2, r3, r2, r3
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	011c      	lsls	r4, r3, #4
 800775c:	f7fe fb18 	bl	8005d90 <HAL_RCC_GetPCLK2Freq>
 8007760:	4602      	mov	r2, r0
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009a      	lsls	r2, r3, #2
 800776a:	441a      	add	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	fbb2 f5f3 	udiv	r5, r2, r3
 8007776:	f7fe fb0b 	bl	8005d90 <HAL_RCC_GetPCLK2Freq>
 800777a:	4602      	mov	r2, r0
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009a      	lsls	r2, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	4a58      	ldr	r2, [pc, #352]	; (80078f4 <UART_SetConfig+0x22c>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	2264      	movs	r2, #100	; 0x64
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	1aeb      	subs	r3, r5, r3
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	3332      	adds	r3, #50	; 0x32
 80077a4:	4a53      	ldr	r2, [pc, #332]	; (80078f4 <UART_SetConfig+0x22c>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077b0:	441c      	add	r4, r3
 80077b2:	f7fe faed 	bl	8005d90 <HAL_RCC_GetPCLK2Freq>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009a      	lsls	r2, r3, #2
 80077c0:	441a      	add	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80077cc:	f7fe fae0 	bl	8005d90 <HAL_RCC_GetPCLK2Freq>
 80077d0:	4602      	mov	r2, r0
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009a      	lsls	r2, r3, #2
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	4a43      	ldr	r2, [pc, #268]	; (80078f4 <UART_SetConfig+0x22c>)
 80077e8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	2264      	movs	r2, #100	; 0x64
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
 80077f4:	1aeb      	subs	r3, r5, r3
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	3332      	adds	r3, #50	; 0x32
 80077fa:	4a3e      	ldr	r2, [pc, #248]	; (80078f4 <UART_SetConfig+0x22c>)
 80077fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	f003 020f 	and.w	r2, r3, #15
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4422      	add	r2, r4
 800780c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800780e:	e06a      	b.n	80078e6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007810:	f7fe faaa 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 8007814:	4602      	mov	r2, r0
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009a      	lsls	r2, r3, #2
 800781e:	441a      	add	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	fbb2 f3f3 	udiv	r3, r2, r3
 800782a:	4a32      	ldr	r2, [pc, #200]	; (80078f4 <UART_SetConfig+0x22c>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	011c      	lsls	r4, r3, #4
 8007834:	f7fe fa98 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 8007838:	4602      	mov	r2, r0
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009a      	lsls	r2, r3, #2
 8007842:	441a      	add	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	fbb2 f5f3 	udiv	r5, r2, r3
 800784e:	f7fe fa8b 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 8007852:	4602      	mov	r2, r0
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009a      	lsls	r2, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	4a22      	ldr	r2, [pc, #136]	; (80078f4 <UART_SetConfig+0x22c>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	2264      	movs	r2, #100	; 0x64
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	1aeb      	subs	r3, r5, r3
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	3332      	adds	r3, #50	; 0x32
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <UART_SetConfig+0x22c>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007888:	441c      	add	r4, r3
 800788a:	f7fe fa6d 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 800788e:	4602      	mov	r2, r0
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009a      	lsls	r2, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80078a4:	f7fe fa60 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009a      	lsls	r2, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	4a0d      	ldr	r2, [pc, #52]	; (80078f4 <UART_SetConfig+0x22c>)
 80078c0:	fba2 2303 	umull	r2, r3, r2, r3
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	2264      	movs	r2, #100	; 0x64
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	1aeb      	subs	r3, r5, r3
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	3332      	adds	r3, #50	; 0x32
 80078d2:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <UART_SetConfig+0x22c>)
 80078d4:	fba2 2303 	umull	r2, r3, r2, r3
 80078d8:	095b      	lsrs	r3, r3, #5
 80078da:	f003 020f 	and.w	r2, r3, #15
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4422      	add	r2, r4
 80078e4:	609a      	str	r2, [r3, #8]
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bdb0      	pop	{r4, r5, r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40013800 	.word	0x40013800
 80078f4:	51eb851f 	.word	0x51eb851f

080078f8 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	f023 0101 	bic.w	r1, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b08      	cmp	r3, #8
 8007920:	d132      	bne.n	8007988 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800792c:	4b31      	ldr	r3, [pc, #196]	; (80079f4 <FSMC_NORSRAM_Init+0xfc>)
 800792e:	4013      	ands	r3, r2
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	6851      	ldr	r1, [r2, #4]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	6892      	ldr	r2, [r2, #8]
 8007938:	4311      	orrs	r1, r2
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	68d2      	ldr	r2, [r2, #12]
 800793e:	4311      	orrs	r1, r2
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	6912      	ldr	r2, [r2, #16]
 8007944:	4311      	orrs	r1, r2
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	6952      	ldr	r2, [r2, #20]
 800794a:	4311      	orrs	r1, r2
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	6992      	ldr	r2, [r2, #24]
 8007950:	4311      	orrs	r1, r2
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	69d2      	ldr	r2, [r2, #28]
 8007956:	4311      	orrs	r1, r2
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	6a12      	ldr	r2, [r2, #32]
 800795c:	4311      	orrs	r1, r2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007962:	4311      	orrs	r1, r2
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007968:	4311      	orrs	r1, r2
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800796e:	4311      	orrs	r1, r2
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007974:	430a      	orrs	r2, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007986:	e02f      	b.n	80079e8 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007992:	4b18      	ldr	r3, [pc, #96]	; (80079f4 <FSMC_NORSRAM_Init+0xfc>)
 8007994:	4013      	ands	r3, r2
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	6851      	ldr	r1, [r2, #4]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	6892      	ldr	r2, [r2, #8]
 800799e:	4311      	orrs	r1, r2
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	68d2      	ldr	r2, [r2, #12]
 80079a4:	4311      	orrs	r1, r2
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	6912      	ldr	r2, [r2, #16]
 80079aa:	4311      	orrs	r1, r2
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	6952      	ldr	r2, [r2, #20]
 80079b0:	4311      	orrs	r1, r2
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	6992      	ldr	r2, [r2, #24]
 80079b6:	4311      	orrs	r1, r2
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	69d2      	ldr	r2, [r2, #28]
 80079bc:	4311      	orrs	r1, r2
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	6a12      	ldr	r2, [r2, #32]
 80079c2:	4311      	orrs	r1, r2
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079c8:	4311      	orrs	r1, r2
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80079ce:	4311      	orrs	r1, r2
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80079d4:	4311      	orrs	r1, r2
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079da:	4311      	orrs	r1, r2
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	4319      	orrs	r1, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr
 80079f4:	fff70081 	.word	0xfff70081

080079f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	431a      	orrs	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	051b      	lsls	r3, r3, #20
 8007a36:	431a      	orrs	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	3b02      	subs	r3, #2
 8007a3e:	061b      	lsls	r3, r3, #24
 8007a40:	431a      	orrs	r2, r3
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	3201      	adds	r2, #1
 8007a4c:	4319      	orrs	r1, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bc80      	pop	{r7}
 8007a5e:	4770      	bx	lr

08007a60 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a74:	d11d      	bne.n	8007ab2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a7e:	4b13      	ldr	r3, [pc, #76]	; (8007acc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007a80:	4013      	ands	r3, r2
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	6811      	ldr	r1, [r2, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	6852      	ldr	r2, [r2, #4]
 8007a8a:	0112      	lsls	r2, r2, #4
 8007a8c:	4311      	orrs	r1, r2
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	6892      	ldr	r2, [r2, #8]
 8007a92:	0212      	lsls	r2, r2, #8
 8007a94:	4311      	orrs	r1, r2
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	6992      	ldr	r2, [r2, #24]
 8007a9a:	4311      	orrs	r1, r2
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	68d2      	ldr	r2, [r2, #12]
 8007aa0:	0412      	lsls	r2, r2, #16
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	ea43 0102 	orr.w	r1, r3, r2
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007ab0:	e005      	b.n	8007abe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	cff00000 	.word	0xcff00000

08007ad0 <__cxa_pure_virtual>:
 8007ad0:	b508      	push	{r3, lr}
 8007ad2:	f000 f80d 	bl	8007af0 <_ZSt9terminatev>

08007ad6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007ad6:	b508      	push	{r3, lr}
 8007ad8:	4780      	blx	r0
 8007ada:	f000 f80e 	bl	8007afa <abort>
	...

08007ae0 <_ZSt13get_terminatev>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <_ZSt13get_terminatev+0xc>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	f3bf 8f5b 	dmb	ish
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	20000040 	.word	0x20000040

08007af0 <_ZSt9terminatev>:
 8007af0:	b508      	push	{r3, lr}
 8007af2:	f7ff fff5 	bl	8007ae0 <_ZSt13get_terminatev>
 8007af6:	f7ff ffee 	bl	8007ad6 <_ZN10__cxxabiv111__terminateEPFvvE>

08007afa <abort>:
 8007afa:	2006      	movs	r0, #6
 8007afc:	b508      	push	{r3, lr}
 8007afe:	f000 f85d 	bl	8007bbc <raise>
 8007b02:	2001      	movs	r0, #1
 8007b04:	f7fc f867 	bl	8003bd6 <_exit>

08007b08 <__errno>:
 8007b08:	4b01      	ldr	r3, [pc, #4]	; (8007b10 <__errno+0x8>)
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000044 	.word	0x20000044

08007b14 <__libc_init_array>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	2600      	movs	r6, #0
 8007b18:	4d0c      	ldr	r5, [pc, #48]	; (8007b4c <__libc_init_array+0x38>)
 8007b1a:	4c0d      	ldr	r4, [pc, #52]	; (8007b50 <__libc_init_array+0x3c>)
 8007b1c:	1b64      	subs	r4, r4, r5
 8007b1e:	10a4      	asrs	r4, r4, #2
 8007b20:	42a6      	cmp	r6, r4
 8007b22:	d109      	bne.n	8007b38 <__libc_init_array+0x24>
 8007b24:	f000 f86e 	bl	8007c04 <_init>
 8007b28:	2600      	movs	r6, #0
 8007b2a:	4d0a      	ldr	r5, [pc, #40]	; (8007b54 <__libc_init_array+0x40>)
 8007b2c:	4c0a      	ldr	r4, [pc, #40]	; (8007b58 <__libc_init_array+0x44>)
 8007b2e:	1b64      	subs	r4, r4, r5
 8007b30:	10a4      	asrs	r4, r4, #2
 8007b32:	42a6      	cmp	r6, r4
 8007b34:	d105      	bne.n	8007b42 <__libc_init_array+0x2e>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3c:	4798      	blx	r3
 8007b3e:	3601      	adds	r6, #1
 8007b40:	e7ee      	b.n	8007b20 <__libc_init_array+0xc>
 8007b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b46:	4798      	blx	r3
 8007b48:	3601      	adds	r6, #1
 8007b4a:	e7f2      	b.n	8007b32 <__libc_init_array+0x1e>
 8007b4c:	080082e8 	.word	0x080082e8
 8007b50:	080082e8 	.word	0x080082e8
 8007b54:	080082e8 	.word	0x080082e8
 8007b58:	080082ec 	.word	0x080082ec

08007b5c <memset>:
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	4402      	add	r2, r0
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d100      	bne.n	8007b66 <memset+0xa>
 8007b64:	4770      	bx	lr
 8007b66:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6a:	e7f9      	b.n	8007b60 <memset+0x4>

08007b6c <_raise_r>:
 8007b6c:	291f      	cmp	r1, #31
 8007b6e:	b538      	push	{r3, r4, r5, lr}
 8007b70:	4604      	mov	r4, r0
 8007b72:	460d      	mov	r5, r1
 8007b74:	d904      	bls.n	8007b80 <_raise_r+0x14>
 8007b76:	2316      	movs	r3, #22
 8007b78:	6003      	str	r3, [r0, #0]
 8007b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b82:	b112      	cbz	r2, 8007b8a <_raise_r+0x1e>
 8007b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b88:	b94b      	cbnz	r3, 8007b9e <_raise_r+0x32>
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 f830 	bl	8007bf0 <_getpid_r>
 8007b90:	462a      	mov	r2, r5
 8007b92:	4601      	mov	r1, r0
 8007b94:	4620      	mov	r0, r4
 8007b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b9a:	f000 b817 	b.w	8007bcc <_kill_r>
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d00a      	beq.n	8007bb8 <_raise_r+0x4c>
 8007ba2:	1c59      	adds	r1, r3, #1
 8007ba4:	d103      	bne.n	8007bae <_raise_r+0x42>
 8007ba6:	2316      	movs	r3, #22
 8007ba8:	6003      	str	r3, [r0, #0]
 8007baa:	2001      	movs	r0, #1
 8007bac:	e7e7      	b.n	8007b7e <_raise_r+0x12>
 8007bae:	2400      	movs	r4, #0
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bb6:	4798      	blx	r3
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e7e0      	b.n	8007b7e <_raise_r+0x12>

08007bbc <raise>:
 8007bbc:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <raise+0xc>)
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	f7ff bfd3 	b.w	8007b6c <_raise_r>
 8007bc6:	bf00      	nop
 8007bc8:	20000044 	.word	0x20000044

08007bcc <_kill_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4d06      	ldr	r5, [pc, #24]	; (8007bec <_kill_r+0x20>)
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	f7fb ffec 	bl	8003bb6 <_kill>
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	d102      	bne.n	8007be8 <_kill_r+0x1c>
 8007be2:	682b      	ldr	r3, [r5, #0]
 8007be4:	b103      	cbz	r3, 8007be8 <_kill_r+0x1c>
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
 8007bea:	bf00      	nop
 8007bec:	20000824 	.word	0x20000824

08007bf0 <_getpid_r>:
 8007bf0:	f7fb bfda 	b.w	8003ba8 <_getpid>

08007bf4 <strcpy>:
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bfa:	f803 2b01 	strb.w	r2, [r3], #1
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	d1f9      	bne.n	8007bf6 <strcpy+0x2>
 8007c02:	4770      	bx	lr

08007c04 <_init>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr

08007c10 <_fini>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr
