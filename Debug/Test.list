
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f6c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  08009158  08009158  00019158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098bc  080098bc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c4  080098c4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098cc  080098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080098d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  200000a8  08009978  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  08009978  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001779e  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000478b  00000000  00000000  0003786f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dac6  00000000  00000000  0003e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9c5  00000000  00000000  0005c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d564  00000000  00000000  000779eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104f4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005824  00000000  00000000  00104fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a8 	.word	0x200000a8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800913c 	.word	0x0800913c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000ac 	.word	0x200000ac
 8000224:	0800913c 	.word	0x0800913c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_uldivmod>:
 8000d90:	b953      	cbnz	r3, 8000da8 <__aeabi_uldivmod+0x18>
 8000d92:	b94a      	cbnz	r2, 8000da8 <__aeabi_uldivmod+0x18>
 8000d94:	2900      	cmp	r1, #0
 8000d96:	bf08      	it	eq
 8000d98:	2800      	cmpeq	r0, #0
 8000d9a:	bf1c      	itt	ne
 8000d9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000da0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000da4:	f000 b976 	b.w	8001094 <__aeabi_idiv0>
 8000da8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db0:	f000 f806 	bl	8000dc0 <__udivmoddi4>
 8000db4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dbc:	b004      	add	sp, #16
 8000dbe:	4770      	bx	lr

08000dc0 <__udivmoddi4>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	9e08      	ldr	r6, [sp, #32]
 8000dc6:	460d      	mov	r5, r1
 8000dc8:	4604      	mov	r4, r0
 8000dca:	4688      	mov	r8, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d14d      	bne.n	8000e6c <__udivmoddi4+0xac>
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	4694      	mov	ip, r2
 8000dd4:	d968      	bls.n	8000ea8 <__udivmoddi4+0xe8>
 8000dd6:	fab2 f282 	clz	r2, r2
 8000dda:	b152      	cbz	r2, 8000df2 <__udivmoddi4+0x32>
 8000ddc:	fa01 f302 	lsl.w	r3, r1, r2
 8000de0:	f1c2 0120 	rsb	r1, r2, #32
 8000de4:	fa20 f101 	lsr.w	r1, r0, r1
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	ea41 0803 	orr.w	r8, r1, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000df6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000dfa:	fa1f fe8c 	uxth.w	lr, ip
 8000dfe:	fb01 8817 	mls	r8, r1, r7, r8
 8000e02:	fb07 f00e 	mul.w	r0, r7, lr
 8000e06:	0c23      	lsrs	r3, r4, #16
 8000e08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x66>
 8000e10:	eb1c 0303 	adds.w	r3, ip, r3
 8000e14:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000e18:	f080 811e 	bcs.w	8001058 <__udivmoddi4+0x298>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f240 811b 	bls.w	8001058 <__udivmoddi4+0x298>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4463      	add	r3, ip
 8000e26:	1a1b      	subs	r3, r3, r0
 8000e28:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e2c:	fb01 3310 	mls	r3, r1, r0, r3
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	b2a4      	uxth	r4, r4
 8000e36:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x94>
 8000e3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	f080 8109 	bcs.w	800105c <__udivmoddi4+0x29c>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	f240 8106 	bls.w	800105c <__udivmoddi4+0x29c>
 8000e50:	4464      	add	r4, ip
 8000e52:	3802      	subs	r0, #2
 8000e54:	2100      	movs	r1, #0
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e5e:	b11e      	cbz	r6, 8000e68 <__udivmoddi4+0xa8>
 8000e60:	2300      	movs	r3, #0
 8000e62:	40d4      	lsrs	r4, r2
 8000e64:	e9c6 4300 	strd	r4, r3, [r6]
 8000e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0xc2>
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	f000 80ee 	beq.w	8001052 <__udivmoddi4+0x292>
 8000e76:	2100      	movs	r1, #0
 8000e78:	e9c6 0500 	strd	r0, r5, [r6]
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f183 	clz	r1, r3
 8000e86:	2900      	cmp	r1, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x160>
 8000e8a:	42ab      	cmp	r3, r5
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0xd4>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80fc 	bhi.w	800108c <__udivmoddi4+0x2cc>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb65 0303 	sbc.w	r3, r5, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	4698      	mov	r8, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d0e2      	beq.n	8000e68 <__udivmoddi4+0xa8>
 8000ea2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0xa8>
 8000ea8:	b902      	cbnz	r2, 8000eac <__udivmoddi4+0xec>
 8000eaa:	deff      	udf	#255	; 0xff
 8000eac:	fab2 f282 	clz	r2, r2
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	f040 8091 	bne.w	8000fd8 <__udivmoddi4+0x218>
 8000eb6:	eba1 000c 	sub.w	r0, r1, ip
 8000eba:	2101      	movs	r1, #1
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000ec8:	fb07 0013 	mls	r0, r7, r3, r0
 8000ecc:	0c25      	lsrs	r5, r4, #16
 8000ece:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ed2:	fb0e f003 	mul.w	r0, lr, r3
 8000ed6:	42a8      	cmp	r0, r5
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x12c>
 8000eda:	eb1c 0505 	adds.w	r5, ip, r5
 8000ede:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee2:	d202      	bcs.n	8000eea <__udivmoddi4+0x12a>
 8000ee4:	42a8      	cmp	r0, r5
 8000ee6:	f200 80ce 	bhi.w	8001086 <__udivmoddi4+0x2c6>
 8000eea:	4643      	mov	r3, r8
 8000eec:	1a2d      	subs	r5, r5, r0
 8000eee:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ef2:	fb07 5510 	mls	r5, r7, r0, r5
 8000ef6:	fb0e fe00 	mul.w	lr, lr, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f00:	45a6      	cmp	lr, r4
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x156>
 8000f04:	eb1c 0404 	adds.w	r4, ip, r4
 8000f08:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f0c:	d202      	bcs.n	8000f14 <__udivmoddi4+0x154>
 8000f0e:	45a6      	cmp	lr, r4
 8000f10:	f200 80b6 	bhi.w	8001080 <__udivmoddi4+0x2c0>
 8000f14:	4628      	mov	r0, r5
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f1e:	e79e      	b.n	8000e5e <__udivmoddi4+0x9e>
 8000f20:	f1c1 0720 	rsb	r7, r1, #32
 8000f24:	408b      	lsls	r3, r1
 8000f26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f36:	fbba f8f9 	udiv	r8, sl, r9
 8000f3a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f3e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f42:	408d      	lsls	r5, r1
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	431d      	orrs	r5, r3
 8000f4a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f4e:	fb08 f00e 	mul.w	r0, r8, lr
 8000f52:	0c2c      	lsrs	r4, r5, #16
 8000f54:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f58:	42a0      	cmp	r0, r4
 8000f5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5e:	d90b      	bls.n	8000f78 <__udivmoddi4+0x1b8>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f68:	f080 8088 	bcs.w	800107c <__udivmoddi4+0x2bc>
 8000f6c:	42a0      	cmp	r0, r4
 8000f6e:	f240 8085 	bls.w	800107c <__udivmoddi4+0x2bc>
 8000f72:	f1a8 0802 	sub.w	r8, r8, #2
 8000f76:	4464      	add	r4, ip
 8000f78:	1a24      	subs	r4, r4, r0
 8000f7a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f7e:	fb09 4410 	mls	r4, r9, r0, r4
 8000f82:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f86:	b2ad      	uxth	r5, r5
 8000f88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f8c:	45a6      	cmp	lr, r4
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x1e2>
 8000f90:	eb1c 0404 	adds.w	r4, ip, r4
 8000f94:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f98:	d26c      	bcs.n	8001074 <__udivmoddi4+0x2b4>
 8000f9a:	45a6      	cmp	lr, r4
 8000f9c:	d96a      	bls.n	8001074 <__udivmoddi4+0x2b4>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4464      	add	r4, ip
 8000fa2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fa6:	fba0 9502 	umull	r9, r5, r0, r2
 8000faa:	eba4 040e 	sub.w	r4, r4, lr
 8000fae:	42ac      	cmp	r4, r5
 8000fb0:	46c8      	mov	r8, r9
 8000fb2:	46ae      	mov	lr, r5
 8000fb4:	d356      	bcc.n	8001064 <__udivmoddi4+0x2a4>
 8000fb6:	d053      	beq.n	8001060 <__udivmoddi4+0x2a0>
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d069      	beq.n	8001090 <__udivmoddi4+0x2d0>
 8000fbc:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc0:	eb64 040e 	sbc.w	r4, r4, lr
 8000fc4:	fa22 f301 	lsr.w	r3, r2, r1
 8000fc8:	fa04 f707 	lsl.w	r7, r4, r7
 8000fcc:	431f      	orrs	r7, r3
 8000fce:	40cc      	lsrs	r4, r1
 8000fd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	e747      	b.n	8000e68 <__udivmoddi4+0xa8>
 8000fd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fdc:	f1c2 0120 	rsb	r1, r2, #32
 8000fe0:	fa25 f301 	lsr.w	r3, r5, r1
 8000fe4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fec:	4095      	lsls	r5, r2
 8000fee:	430d      	orrs	r5, r1
 8000ff0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ff4:	fb07 3311 	mls	r3, r7, r1, r3
 8000ff8:	fa1f fe8c 	uxth.w	lr, ip
 8000ffc:	0c28      	lsrs	r0, r5, #16
 8000ffe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001002:	fb01 f30e 	mul.w	r3, r1, lr
 8001006:	4283      	cmp	r3, r0
 8001008:	fa04 f402 	lsl.w	r4, r4, r2
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x260>
 800100e:	eb1c 0000 	adds.w	r0, ip, r0
 8001012:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001016:	d22f      	bcs.n	8001078 <__udivmoddi4+0x2b8>
 8001018:	4283      	cmp	r3, r0
 800101a:	d92d      	bls.n	8001078 <__udivmoddi4+0x2b8>
 800101c:	3902      	subs	r1, #2
 800101e:	4460      	add	r0, ip
 8001020:	1ac0      	subs	r0, r0, r3
 8001022:	fbb0 f3f7 	udiv	r3, r0, r7
 8001026:	fb07 0013 	mls	r0, r7, r3, r0
 800102a:	b2ad      	uxth	r5, r5
 800102c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001030:	fb03 f00e 	mul.w	r0, r3, lr
 8001034:	42a8      	cmp	r0, r5
 8001036:	d908      	bls.n	800104a <__udivmoddi4+0x28a>
 8001038:	eb1c 0505 	adds.w	r5, ip, r5
 800103c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001040:	d216      	bcs.n	8001070 <__udivmoddi4+0x2b0>
 8001042:	42a8      	cmp	r0, r5
 8001044:	d914      	bls.n	8001070 <__udivmoddi4+0x2b0>
 8001046:	3b02      	subs	r3, #2
 8001048:	4465      	add	r5, ip
 800104a:	1a28      	subs	r0, r5, r0
 800104c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001050:	e738      	b.n	8000ec4 <__udivmoddi4+0x104>
 8001052:	4631      	mov	r1, r6
 8001054:	4630      	mov	r0, r6
 8001056:	e707      	b.n	8000e68 <__udivmoddi4+0xa8>
 8001058:	462f      	mov	r7, r5
 800105a:	e6e4      	b.n	8000e26 <__udivmoddi4+0x66>
 800105c:	4618      	mov	r0, r3
 800105e:	e6f9      	b.n	8000e54 <__udivmoddi4+0x94>
 8001060:	454b      	cmp	r3, r9
 8001062:	d2a9      	bcs.n	8000fb8 <__udivmoddi4+0x1f8>
 8001064:	ebb9 0802 	subs.w	r8, r9, r2
 8001068:	eb65 0e0c 	sbc.w	lr, r5, ip
 800106c:	3801      	subs	r0, #1
 800106e:	e7a3      	b.n	8000fb8 <__udivmoddi4+0x1f8>
 8001070:	4643      	mov	r3, r8
 8001072:	e7ea      	b.n	800104a <__udivmoddi4+0x28a>
 8001074:	4628      	mov	r0, r5
 8001076:	e794      	b.n	8000fa2 <__udivmoddi4+0x1e2>
 8001078:	4641      	mov	r1, r8
 800107a:	e7d1      	b.n	8001020 <__udivmoddi4+0x260>
 800107c:	46d0      	mov	r8, sl
 800107e:	e77b      	b.n	8000f78 <__udivmoddi4+0x1b8>
 8001080:	4464      	add	r4, ip
 8001082:	3802      	subs	r0, #2
 8001084:	e747      	b.n	8000f16 <__udivmoddi4+0x156>
 8001086:	3b02      	subs	r3, #2
 8001088:	4465      	add	r5, ip
 800108a:	e72f      	b.n	8000eec <__udivmoddi4+0x12c>
 800108c:	4608      	mov	r0, r1
 800108e:	e706      	b.n	8000e9e <__udivmoddi4+0xde>
 8001090:	4631      	mov	r1, r6
 8001092:	e6e9      	b.n	8000e68 <__udivmoddi4+0xa8>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <_ZN6StringC1EPKc>:
    char str[STRING_LEN];
    int len;
    String(){
        len = 0;
    }
    String(const char* s){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
        len = strlen(s);
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f7ff f8c0 	bl	8000228 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	621a      	str	r2, [r3, #32]
        strcpy(str, s);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fbde 	bl	8008876 <strcpy>
    }
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZN9UIElement17updateAllElementsEv>:
#include "utils.hpp"
#define SHOW_LOCATION 1
UIElement* UIElement::allElements[MAX_UI_ELEMENTS] = {};
uint8_t UIElement::elementNum = 0;

void UIElement::updateAllElements(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
    static bool firstCall = false;
    if (!firstCall){
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <_ZN9UIElement17updateAllElementsEv+0xc4>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01a      	beq.n	800110e <_ZN9UIElement17updateAllElementsEv+0x4a>
        for (int i=0; i<elementNum; i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <_ZN9UIElement17updateAllElementsEv+0xc8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e4:	4293      	cmp	r3, r2
 80010e6:	da0f      	bge.n	8001108 <_ZN9UIElement17updateAllElementsEv+0x44>
            allElements[i]->render();
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <_ZN9UIElement17updateAllElementsEv+0xcc>)
 80010ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010f0:	4927      	ldr	r1, [pc, #156]	; (8001190 <_ZN9UIElement17updateAllElementsEv+0xcc>)
 80010f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4610      	mov	r0, r2
 80010fe:	4798      	blx	r3
        for (int i=0; i<elementNum; i++){
 8001100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001102:	3301      	adds	r3, #1
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001106:	e7e9      	b.n	80010dc <_ZN9UIElement17updateAllElementsEv+0x18>
        }
        firstCall = true;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <_ZN9UIElement17updateAllElementsEv+0xc4>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
    }
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	4920      	ldr	r1, [pc, #128]	; (8001194 <_ZN9UIElement17updateAllElementsEv+0xd0>)
 8001114:	4618      	mov	r0, r3
 8001116:	f004 f939 	bl	800538c <XPT2046_Get_TouchedPoint>
    #if SHOW_LOCATION
    char str[STRING_LEN];
    sprintf(str, "x=%d, y=%d", touch.x, touch.y);
 800111a:	8c3b      	ldrh	r3, [r7, #32]
 800111c:	461a      	mov	r2, r3
 800111e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001120:	4638      	mov	r0, r7
 8001122:	491d      	ldr	r1, [pc, #116]	; (8001198 <_ZN9UIElement17updateAllElementsEv+0xd4>)
 8001124:	f007 fb78 	bl	8008818 <siprintf>
    printToLCD(str, 0);
 8001128:	463a      	mov	r2, r7
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffb1 	bl	8001098 <_ZN6StringC1EPKc>
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f003 ff13 	bl	8004f68 <_Z10printToLCDRK6Stringt>
    #endif
    for (int i=0; i<elementNum; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	64bb      	str	r3, [r7, #72]	; 0x48
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <_ZN9UIElement17updateAllElementsEv+0xc8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114e:	4293      	cmp	r3, r2
 8001150:	da11      	bge.n	8001176 <_ZN9UIElement17updateAllElementsEv+0xb2>
        allElements[i]->update(touch.x, touch.y);
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <_ZN9UIElement17updateAllElementsEv+0xcc>)
 8001154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001156:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800115a:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <_ZN9UIElement17updateAllElementsEv+0xcc>)
 800115c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3304      	adds	r3, #4
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	8c39      	ldrh	r1, [r7, #32]
 800116a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800116c:	4798      	blx	r3
    for (int i=0; i<elementNum; i++){
 800116e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001170:	3301      	adds	r3, #1
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
 8001174:	e7e7      	b.n	8001146 <_ZN9UIElement17updateAllElementsEv+0x82>
    }
    touch.x = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	843b      	strh	r3, [r7, #32]
    touch.y = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	847b      	strh	r3, [r7, #34]	; 0x22
    // Update all UI elements
 800117e:	bf00      	nop
 8001180:	3750      	adds	r7, #80	; 0x50
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000145 	.word	0x20000145
 800118c:	20000144 	.word	0x20000144
 8001190:	200000c4 	.word	0x200000c4
 8001194:	20000008 	.word	0x20000008
 8001198:	08009158 	.word	0x08009158

0800119c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_ADC1_Init+0x74>)
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <MX_ADC1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_ADC1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_ADC1_Init+0x74>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_ADC1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_ADC1_Init+0x74>)
 80011c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_ADC1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_ADC1_Init+0x74>)
 80011da:	f004 f9e7 	bl	80055ac <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011e4:	f001 fc62 	bl	8002aac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011e8:	230c      	movs	r3, #12
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80011f0:	2305      	movs	r3, #5
 80011f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_ADC1_Init+0x74>)
 80011fa:	f004 fac1 	bl	8005780 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001204:	f001 fc52 	bl	8002aac <Error_Handler>
  }

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000148 	.word	0x20000148
 8001214:	40012400 	.word	0x40012400

08001218 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <HAL_ADC_MspInit+0x6c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d121      	bne.n	800127c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_ADC_MspInit+0x70>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <HAL_ADC_MspInit+0x70>)
 800123e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_ADC_MspInit+0x70>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_ADC_MspInit+0x70>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_ADC_MspInit+0x70>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_ADC_MspInit+0x70>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001268:	2304      	movs	r3, #4
 800126a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126c:	2303      	movs	r3, #3
 800126e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_ADC_MspInit+0x74>)
 8001278:	f004 fdc6 	bl	8005e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40012400 	.word	0x40012400
 8001288:	40021000 	.word	0x40021000
 800128c:	40011000 	.word	0x40011000

08001290 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <DEBUG_USART_Config+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <DEBUG_USART_Config+0x50>)
 8001298:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <DEBUG_USART_Config+0x4c>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012bc:	220c      	movs	r2, #12
 80012be:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012c2:	f006 fc08 	bl	8007ad6 <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <DEBUG_USART_Config+0x4c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0220 	orr.w	r2, r2, #32
 80012d4:	60da      	str	r2, [r3, #12]
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000178 	.word	0x20000178
 80012e0:	40013800 	.word	0x40013800

080012e4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_FSMC_Init+0xbc>)
 80012fe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001302:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001306:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <MX_FSMC_Init+0xc0>)
 8001308:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_FSMC_Init+0xbc>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_FSMC_Init+0xbc>)
 800131e:	2210      	movs	r2, #16
 8001320:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_FSMC_Init+0xbc>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_FSMC_Init+0xbc>)
 800133c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_FSMC_Init+0xbc>)
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_FSMC_Init+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800135a:	230f      	movs	r3, #15
 800135c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800135e:	230f      	movs	r3, #15
 8001360:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001362:	23ff      	movs	r3, #255	; 0xff
 8001364:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001366:	230f      	movs	r3, #15
 8001368:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800136a:	2310      	movs	r3, #16
 800136c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800136e:	2311      	movs	r3, #17
 8001370:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <MX_FSMC_Init+0xbc>)
 800137e:	f005 fc03 	bl	8006b88 <HAL_SRAM_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001388:	f001 fb90 	bl	8002aac <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_FSMC_Init+0xc4>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <MX_FSMC_Init+0xc4>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	61d3      	str	r3, [r2, #28]

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001f8 	.word	0x200001f8
 80013a4:	a0000104 	.word	0xa0000104
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_FSMC_MspInit+0x78>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d129      	bne.n	800141c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_FSMC_MspInit+0x78>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_FSMC_MspInit+0x7c>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <HAL_FSMC_MspInit+0x7c>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_FSMC_MspInit+0x7c>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013e6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013ea:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <HAL_FSMC_MspInit+0x80>)
 80013fc:	f004 fd04 	bl	8005e08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001400:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001404:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4619      	mov	r1, r3
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <HAL_FSMC_MspInit+0x84>)
 8001416:	f004 fcf7 	bl	8005e08 <HAL_GPIO_Init>
 800141a:	e000      	b.n	800141e <HAL_FSMC_MspInit+0x72>
    return;
 800141c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000023c 	.word	0x2000023c
 8001428:	40021000 	.word	0x40021000
 800142c:	40011800 	.word	0x40011800
 8001430:	40011400 	.word	0x40011400

08001434 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800143c:	f7ff ffb6 	bl	80013ac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145c:	4b6f      	ldr	r3, [pc, #444]	; (800161c <MX_GPIO_Init+0x1d4>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a6e      	ldr	r2, [pc, #440]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b6c      	ldr	r3, [pc, #432]	; (800161c <MX_GPIO_Init+0x1d4>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	4b69      	ldr	r3, [pc, #420]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a68      	ldr	r2, [pc, #416]	; (800161c <MX_GPIO_Init+0x1d4>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b66      	ldr	r3, [pc, #408]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b63      	ldr	r3, [pc, #396]	; (800161c <MX_GPIO_Init+0x1d4>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a62      	ldr	r2, [pc, #392]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b60      	ldr	r3, [pc, #384]	; (800161c <MX_GPIO_Init+0x1d4>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b5d      	ldr	r3, [pc, #372]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a5c      	ldr	r2, [pc, #368]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b5a      	ldr	r3, [pc, #360]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a56      	ldr	r2, [pc, #344]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b54      	ldr	r3, [pc, #336]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2107      	movs	r1, #7
 80014d8:	4851      	ldr	r0, [pc, #324]	; (8001620 <MX_GPIO_Init+0x1d8>)
 80014da:	f004 fe44 	bl	8006166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	484f      	ldr	r0, [pc, #316]	; (8001620 <MX_GPIO_Init+0x1d8>)
 80014e4:	f004 fe3f 	bl	8006166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2123      	movs	r1, #35	; 0x23
 80014ec:	484d      	ldr	r0, [pc, #308]	; (8001624 <MX_GPIO_Init+0x1dc>)
 80014ee:	f004 fe3a 	bl	8006166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80014f8:	484b      	ldr	r0, [pc, #300]	; (8001628 <MX_GPIO_Init+0x1e0>)
 80014fa:	f004 fe34 	bl	8006166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001504:	4847      	ldr	r0, [pc, #284]	; (8001624 <MX_GPIO_Init+0x1dc>)
 8001506:	f004 fe2e 	bl	8006166 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800150a:	2347      	movs	r3, #71	; 0x47
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	4619      	mov	r1, r3
 8001520:	483f      	ldr	r0, [pc, #252]	; (8001620 <MX_GPIO_Init+0x1d8>)
 8001522:	f004 fc71 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001526:	2308      	movs	r3, #8
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152e:	2301      	movs	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4619      	mov	r1, r3
 8001538:	4839      	ldr	r0, [pc, #228]	; (8001620 <MX_GPIO_Init+0x1d8>)
 800153a:	f004 fc65 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800153e:	2310      	movs	r3, #16
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <MX_GPIO_Init+0x1e4>)
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4619      	mov	r1, r3
 8001550:	4833      	ldr	r0, [pc, #204]	; (8001620 <MX_GPIO_Init+0x1d8>)
 8001552:	f004 fc59 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <MX_GPIO_Init+0x1e8>)
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	4619      	mov	r1, r3
 800156a:	4832      	ldr	r0, [pc, #200]	; (8001634 <MX_GPIO_Init+0x1ec>)
 800156c:	f004 fc4c 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001570:	2301      	movs	r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001574:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <MX_GPIO_Init+0x1e8>)
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001578:	2302      	movs	r3, #2
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	4619      	mov	r1, r3
 8001582:	482d      	ldr	r0, [pc, #180]	; (8001638 <MX_GPIO_Init+0x1f0>)
 8001584:	f004 fc40 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8001588:	f240 1323 	movw	r3, #291	; 0x123
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0318 	add.w	r3, r7, #24
 800159e:	4619      	mov	r1, r3
 80015a0:	4820      	ldr	r0, [pc, #128]	; (8001624 <MX_GPIO_Init+0x1dc>)
 80015a2:	f004 fc31 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4619      	mov	r1, r3
 80015be:	481a      	ldr	r0, [pc, #104]	; (8001628 <MX_GPIO_Init+0x1e0>)
 80015c0:	f004 fc22 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	4619      	mov	r1, r3
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <MX_GPIO_Init+0x1dc>)
 80015de:	f004 fc13 	bl	8005e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2006      	movs	r0, #6
 80015e8:	f004 facf 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015ec:	2006      	movs	r0, #6
 80015ee:	f004 fae8 	bl	8005bc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	200a      	movs	r0, #10
 80015f8:	f004 fac7 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015fc:	200a      	movs	r0, #10
 80015fe:	f004 fae0 	bl	8005bc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2028      	movs	r0, #40	; 0x28
 8001608:	f004 fabf 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800160c:	2028      	movs	r0, #40	; 0x28
 800160e:	f004 fad8 	bl	8005bc2 <HAL_NVIC_EnableIRQ>

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40011800 	.word	0x40011800
 8001624:	40010c00 	.word	0x40010c00
 8001628:	40011400 	.word	0x40011400
 800162c:	10210000 	.word	0x10210000
 8001630:	10110000 	.word	0x10110000
 8001634:	40011000 	.word	0x40011000
 8001638:	40010800 	.word	0x40010800

0800163c <_ZN6StringC1Ei>:
    String(const String& s){
        len = s.len;
        strcpy(str, s.str);
    }
    String(int n){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
        len = sprintf(str, "%d", n);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4906      	ldr	r1, [pc, #24]	; (8001664 <_ZN6StringC1Ei+0x28>)
 800164c:	4618      	mov	r0, r3
 800164e:	f007 f8e3 	bl	8008818 <siprintf>
 8001652:	4602      	mov	r2, r0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	621a      	str	r2, [r3, #32]
    }
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08009164 	.word	0x08009164

08001668 <_ZN8SERVO42C6getCRCEPhh>:
    float stepAngle = 1.8; // degree, depends on motor type, the version we are using is 1.8
    

    

    static uint8_t getCRC(uint8_t instruction[], uint8_t len){
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	da0b      	bge.n	800169c <_ZN8SERVO42C6getCRCEPhh+0x34>
            result+=instruction[i];
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b29a      	uxth	r2, r3
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	4413      	add	r3, r2
 8001692:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	3301      	adds	r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	e7ef      	b.n	800167c <_ZN8SERVO42C6getCRCEPhh+0x14>
        }
        return result & 0xFF;
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	b2db      	uxtb	r3, r3
    }
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
	...

080016ac <_ZN8SERVO42C11receiveUARTEh>:

    // WARNING: remember to check for nullptr, which means receive failed
    uint8_t* receiveUART(uint8_t len){
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
        static uint8_t data[16] = {};
        HAL_UART_Receive(pUART, data, len+1, 50);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	2332      	movs	r3, #50	; 0x32
 80016c6:	4924      	ldr	r1, [pc, #144]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 80016c8:	f006 faeb 	bl	8007ca2 <HAL_UART_Receive>
        uint8_t offset = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
        if (data[0] == address){
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d102      	bne.n	80016e2 <_ZN8SERVO42C11receiveUARTEh+0x36>
            offset = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e007      	b.n	80016f2 <_ZN8SERVO42C11receiveUARTEh+0x46>
        }else if (data[1] == address){
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 80016e4:	785a      	ldrb	r2, [r3, #1]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d101      	bne.n	80016f2 <_ZN8SERVO42C11receiveUARTEh+0x46>
            offset = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
        }

        if (data[len-1] == getCRC(data+offset, len-1)){
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 80016f8:	5cd4      	ldrb	r4, [r2, r3]
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	4a16      	ldr	r2, [pc, #88]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 80016fe:	441a      	add	r2, r3
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	3b01      	subs	r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff ffad 	bl	8001668 <_ZN8SERVO42C6getCRCEPhh>
 800170e:	4603      	mov	r3, r0
 8001710:	429c      	cmp	r4, r3
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d017      	beq.n	800174e <_ZN8SERVO42C11receiveUARTEh+0xa2>
            // printToLCD("Check Success", 3);

            // move forward by the offset
            if (offset == 1){
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d112      	bne.n	800174a <_ZN8SERVO42C11receiveUARTEh+0x9e>
                for (int i=0; i<len; i++){
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	429a      	cmp	r2, r3
 800172e:	da0c      	bge.n	800174a <_ZN8SERVO42C11receiveUARTEh+0x9e>
                    data[i] = data[i+1];
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3301      	adds	r3, #1
 8001734:	4a08      	ldr	r2, [pc, #32]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 8001736:	5cd1      	ldrb	r1, [r2, r3]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4413      	add	r3, r2
 800173e:	460a      	mov	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
                for (int i=0; i<len; i++){
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3301      	adds	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	e7ee      	b.n	8001728 <_ZN8SERVO42C11receiveUARTEh+0x7c>
                }
            }
            return data;
 800174a:	4b03      	ldr	r3, [pc, #12]	; (8001758 <_ZN8SERVO42C11receiveUARTEh+0xac>)
 800174c:	e000      	b.n	8001750 <_ZN8SERVO42C11receiveUARTEh+0xa4>
        }else{
            // printToLCD("Check fail", 3);
            // printToLCD(String(data,9), 7);
            return nullptr;
 800174e:	2300      	movs	r3, #0
        }
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	20000240 	.word	0x20000240

0800175c <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>:
public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART) : address(address), pUART(pUART){}
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	460b      	mov	r3, r1
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	72fb      	strb	r3, [r7, #11]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	7afa      	ldrb	r2, [r7, #11]
 8001774:	711a      	strb	r2, [r3, #4]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	80da      	strh	r2, [r3, #6]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	811a      	strh	r2, [r3, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	829a      	strh	r2, [r3, #20]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	771a      	strb	r2, [r3, #28]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	775a      	strb	r2, [r3, #29]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2203      	movs	r2, #3
 80017ac:	779a      	strb	r2, [r3, #30]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	77da      	strb	r2, [r3, #31]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef+0x6c>)
 80017b8:	621a      	str	r2, [r3, #32]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	3fe66666 	.word	0x3fe66666

080017cc <_ZN8SERVO42C4stepEhhm>:
    }

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step(uint8_t direction, uint8_t speed, uint32_t stepCount){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	72fb      	strb	r3, [r7, #11]
 80017da:	4613      	mov	r3, r2
 80017dc:	72bb      	strb	r3, [r7, #10]
        uint8_t instruction[8] = {};
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
        instruction[0] = address;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	791b      	ldrb	r3, [r3, #4]
 80017ea:	753b      	strb	r3, [r7, #20]
        instruction[1] = 0xfd;
 80017ec:	23fd      	movs	r3, #253	; 0xfd
 80017ee:	757b      	strb	r3, [r7, #21]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	b25a      	sxtb	r2, r3
 80017f6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80017fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b25b      	sxtb	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	75bb      	strb	r3, [r7, #22]
        for (int i=0; i<4; i++){
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b03      	cmp	r3, #3
 8001810:	dc16      	bgt.n	8001840 <_ZN8SERVO42C4stepEhhm+0x74>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	22ff      	movs	r2, #255	; 0xff
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	401a      	ands	r2, r3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	40da      	lsrs	r2, r3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0306 	rsb	r3, r3, #6
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	3320      	adds	r3, #32
 8001832:	443b      	add	r3, r7
 8001834:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i=0; i<4; i++){
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e7e5      	b.n	800180c <_ZN8SERVO42C4stepEhhm+0x40>
        }
        instruction[7] = getCRC(instruction, 8);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2108      	movs	r1, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff0e 	bl	8001668 <_ZN8SERVO42C6getCRCEPhh>
 800184c:	4603      	mov	r3, r0
 800184e:	76fb      	strb	r3, [r7, #27]
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f107 0114 	add.w	r1, r7, #20
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	2208      	movs	r2, #8
 800185c:	f006 f988 	bl	8007b70 <HAL_UART_Transmit>
    }
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN8SERVO42C13stepClockwiseEh>:
    void stepClockwise(uint8_t stepCount){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
        step(0, stepSpeed, stepCount);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7f9a      	ldrb	r2, [r3, #30]
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	2100      	movs	r1, #0
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffa5 	bl	80017cc <_ZN8SERVO42C4stepEhhm>
    }
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZN8SERVO42C20stepCounterClockwiseEh>:
    void stepCounterClockwise(uint8_t stepCount){
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	70fb      	strb	r3, [r7, #3]
        step(1, stepSpeed, stepCount);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7f9a      	ldrb	r2, [r3, #30]
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff94 	bl	80017cc <_ZN8SERVO42C4stepEhhm>
    }
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZN8SERVO42C14receiveEncoderEv>:
        spin(1, speed);
    }

    

    bool receiveEncoder(){ // To test
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
        uint8_t* data = nullptr;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
        while (data==nullptr){
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d12c      	bne.n	8001918 <_ZN8SERVO42C14receiveEncoderEv+0x6c>
            uint8_t instruction[3] = {};
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <_ZN8SERVO42C14receiveEncoderEv+0xbc>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	733b      	strb	r3, [r7, #12]
 80018c4:	f107 030d 	add.w	r3, r7, #13
 80018c8:	2200      	movs	r2, #0
 80018ca:	801a      	strh	r2, [r3, #0]
            instruction[0] = address;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	791b      	ldrb	r3, [r3, #4]
 80018d0:	733b      	strb	r3, [r7, #12]
            instruction[1] = 0x30;
 80018d2:	2330      	movs	r3, #48	; 0x30
 80018d4:	737b      	strb	r3, [r7, #13]
            instruction[2] = getCRC(instruction, 2);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2102      	movs	r1, #2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fec3 	bl	8001668 <_ZN8SERVO42C6getCRCEPhh>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73bb      	strb	r3, [r7, #14]
            HAL_UART_Transmit(pUART, instruction, 3, 50);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	f107 010c 	add.w	r1, r7, #12
 80018ee:	2332      	movs	r3, #50	; 0x32
 80018f0:	2203      	movs	r2, #3
 80018f2:	f006 f93d 	bl	8007b70 <HAL_UART_Transmit>
            data = receiveUART(8);
 80018f6:	2108      	movs	r1, #8
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fed7 	bl	80016ac <_ZN8SERVO42C11receiveUARTEh>
 80018fe:	6378      	str	r0, [r7, #52]	; 0x34
            debugLog("fetching encoder");
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4919      	ldr	r1, [pc, #100]	; (800196c <_ZN8SERVO42C14receiveEncoderEv+0xc0>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fbc6 	bl	8001098 <_ZN6StringC1EPKc>
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fb51 	bl	8004fb8 <_Z8debugLogRK6String>
        while (data==nullptr){
 8001916:	e7cf      	b.n	80018b8 <_ZN8SERVO42C14receiveEncoderEv+0xc>
        }
        encoder = data[5]<<8 | data[6];
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	3305      	adds	r3, #5
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	3306      	adds	r3, #6
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
 800192e:	b29a      	uxth	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	80da      	strh	r2, [r3, #6]
        encoderCarry = data[1]<<24 | data[2]<<16 | data[3]<<8 | data[4];
 8001934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001936:	3301      	adds	r3, #1
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	061a      	lsls	r2, r3, #24
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	3302      	adds	r3, #2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	041b      	lsls	r3, r3, #16
 8001944:	431a      	orrs	r2, r3
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	3303      	adds	r3, #3
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	4313      	orrs	r3, r2
 8001950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001952:	3204      	adds	r2, #4
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
    }
 800195c:	bf00      	nop
 800195e:	4618      	mov	r0, r3
 8001960:	3738      	adds	r7, #56	; 0x38
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	0800917c 	.word	0x0800917c
 800196c:	08009168 	.word	0x08009168

08001970 <_ZN8SERVO42C10getEncoderEv>:
        if (data[2] == getCRC(data, 2)){
            isShaftProtected = data[1]==0x1;
        }
    }

    uint16_t getEncoder(){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
        return encoder;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	88db      	ldrh	r3, [r3, #6]
    }
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
	...

08001988 <_ZN9UIElementC1Etttt>:
    static void updateAllElements();

    uint16_t x, y;
    uint16_t width, height;
protected:
    UIElement(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	817b      	strh	r3, [r7, #10]
 800199a:	460b      	mov	r3, r1
 800199c:	813b      	strh	r3, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <_ZN9UIElementC1Etttt+0x5c>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	601a      	str	r2, [r3, #0]
        this->x = x;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	897a      	ldrh	r2, [r7, #10]
 80019ac:	809a      	strh	r2, [r3, #4]
        this->y = y;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	893a      	ldrh	r2, [r7, #8]
 80019b2:	80da      	strh	r2, [r3, #6]
        this->width = width;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	811a      	strh	r2, [r3, #8]
        this->height = height;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8b3a      	ldrh	r2, [r7, #24]
 80019be:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <_ZN9UIElementC1Etttt+0x60>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	b2d1      	uxtb	r1, r2
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <_ZN9UIElementC1Etttt+0x60>)
 80019ca:	7011      	strb	r1, [r2, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <_ZN9UIElementC1Etttt+0x64>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	08009224 	.word	0x08009224
 80019e8:	20000144 	.word	0x20000144
 80019ec:	200000c4 	.word	0x200000c4

080019f0 <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y){
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	803b      	strh	r3, [r7, #0]
        return x>=this->x && x<=this->x+width && y>=this->y && y<=this->y+height;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	887a      	ldrh	r2, [r7, #2]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d318      	bcc.n	8001a3c <_ZN9UIElement10checkTouchEtt+0x4c>
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	889b      	ldrh	r3, [r3, #4]
 8001a10:	4619      	mov	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	891b      	ldrh	r3, [r3, #8]
 8001a16:	440b      	add	r3, r1
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dc0f      	bgt.n	8001a3c <_ZN9UIElement10checkTouchEtt+0x4c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	88db      	ldrh	r3, [r3, #6]
 8001a20:	883a      	ldrh	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d30a      	bcc.n	8001a3c <_ZN9UIElement10checkTouchEtt+0x4c>
 8001a26:	883a      	ldrh	r2, [r7, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	88db      	ldrh	r3, [r3, #6]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	895b      	ldrh	r3, [r3, #10]
 8001a32:	440b      	add	r3, r1
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dc01      	bgt.n	8001a3c <_ZN9UIElement10checkTouchEtt+0x4c>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <_ZN9UIElement10checkTouchEtt+0x4e>
 8001a3c:	2300      	movs	r3, #0
    }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <_ZN6ButtonC1EttPcPFvPS_iiEtttt>:
    char text[TEXT_CHAR_NUM];
public:
    bool isPressed = false;
    void (*onPressed)(Button* self, int x, int y);

    Button(uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], void (*onPressed)(Button*, int ,int) = nullptr, uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	817b      	strh	r3, [r7, #10]
 8001a56:	4613      	mov	r3, r2
 8001a58:	813b      	strh	r3, [r7, #8]
    : UIElement(x, y, width, height)
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8001a5e:	893a      	ldrh	r2, [r7, #8]
 8001a60:	8979      	ldrh	r1, [r7, #10]
 8001a62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4623      	mov	r3, r4
 8001a68:	f7ff ff8e 	bl	8001988 <_ZN9UIElementC1Etttt>
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <_ZN6ButtonC1EttPcPFvPS_iiEtttt+0x68>)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	819a      	strh	r2, [r3, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    {
        this->initialColor = color;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a84:	81da      	strh	r2, [r3, #14]
        this->color = color;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a8a:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001a90:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3314      	adds	r3, #20
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f006 feec 	bl	8008876 <strcpy>
        this->onPressed = onPressed;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a3a      	ldr	r2, [r7, #32]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	08009214 	.word	0x08009214

08001ab4 <_ZN6Button6renderEv>:

    void render() override
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	8898      	ldrh	r0, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	88d9      	ldrh	r1, [r3, #6]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	891a      	ldrh	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	895b      	ldrh	r3, [r3, #10]
 8001acc:	f000 fda0 	bl	8002610 <LCD_OpenWindow>
        LCD_FillColor(width*height, color);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	891b      	ldrh	r3, [r3, #8]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	895b      	ldrh	r3, [r3, #10]
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	8a1b      	ldrh	r3, [r3, #16]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 fdeb 	bl	80026c2 <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x+width/3, y+height/3, text, color, textColor);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	889a      	ldrh	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	891b      	ldrh	r3, [r3, #8]
 8001af4:	4910      	ldr	r1, [pc, #64]	; (8001b38 <_ZN6Button6renderEv+0x84>)
 8001af6:	fba1 1303 	umull	r1, r3, r1, r3
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	b298      	uxth	r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	88da      	ldrh	r2, [r3, #6]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	895b      	ldrh	r3, [r3, #10]
 8001b0a:	490b      	ldr	r1, [pc, #44]	; (8001b38 <_ZN6Button6renderEv+0x84>)
 8001b0c:	fba1 1303 	umull	r1, r3, r1, r3
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	b299      	uxth	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f103 0214 	add.w	r2, r3, #20
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8a1c      	ldrh	r4, [r3, #16]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	8a5b      	ldrh	r3, [r3, #18]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4623      	mov	r3, r4
 8001b2a:	f000 fef1 	bl	8002910 <LCD_DrawString_Color>
    }
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	aaaaaaab 	.word	0xaaaaaaab

08001b3c <_ZN6Button6updateEtt>:

    
    void update(u_int16_t x, u_int16_t y) override
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y)){
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	883a      	ldrh	r2, [r7, #0]
 8001b50:	8879      	ldrh	r1, [r7, #2]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff4c 	bl	80019f0 <_ZN9UIElement10checkTouchEtt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01a      	beq.n	8001b94 <_ZN6Button6updateEtt+0x58>
            color = YELLOW;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001b64:	821a      	strh	r2, [r3, #16]
            if (!isPressed){
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d016      	beq.n	8001ba4 <_ZN6Button6updateEtt+0x68>
                isPressed = true;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                if (onPressed) onPressed(this,x,y);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00e      	beq.n	8001ba4 <_ZN6Button6updateEtt+0x68>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	8879      	ldrh	r1, [r7, #2]
 8001b8c:	883a      	ldrh	r2, [r7, #0]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
 8001b92:	e007      	b.n	8001ba4 <_ZN6Button6updateEtt+0x68>
            }
        }
        else{
            color = initialColor;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	89da      	ldrh	r2, [r3, #14]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color){
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	899a      	ldrh	r2, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8a1b      	ldrh	r3, [r3, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d008      	beq.n	8001bc2 <_ZN6Button6updateEtt+0x86>
            render();
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
            last_color = color;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	8a1a      	ldrh	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	819a      	strh	r2, [r3, #12]
        }
    }
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <_ZN6SliderC1Etttttt>:
    uint16_t draggerX;
    uint16_t draggerY;

public:

    Slider(
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	817b      	strh	r3, [r7, #10]
 8001bde:	460b      	mov	r3, r1
 8001be0:	813b      	strh	r3, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
        uint16_t y,
        uint16_t maxValue = 0,
        uint16_t width = 10,
        uint16_t height = 130,
        uint16_t barColor = CYAN
    ): UIElement(x, y, width, height)
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	8c3c      	ldrh	r4, [r7, #32]
 8001bea:	893a      	ldrh	r2, [r7, #8]
 8001bec:	8979      	ldrh	r1, [r7, #10]
 8001bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	f7ff fec8 	bl	8001988 <_ZN9UIElementC1Etttt>
 8001bf8:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <_ZN6SliderC1Etttttt+0x74>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2214      	movs	r2, #20
 8001c02:	82da      	strh	r2, [r3, #22]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	761a      	strb	r2, [r3, #24]
    {
        this->maxValue = maxValue;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	829a      	strh	r2, [r3, #20]
        this->barColor = barColor;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c14:	819a      	strh	r2, [r3, #12]
        draggerX = x + width/2;
 8001c16:	8c3b      	ldrh	r3, [r7, #32]
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	835a      	strh	r2, [r3, #26]
        draggerY = y + height/2;
 8001c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	893b      	ldrh	r3, [r7, #8]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	839a      	strh	r2, [r3, #28]

    }
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	08009204 	.word	0x08009204

08001c44 <_ZN6Slider6renderEv>:
    

    void render() override
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    {
        // render bar
        LCD_OpenWindow(x, y, width, height);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8898      	ldrh	r0, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	88d9      	ldrh	r1, [r3, #6]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	891a      	ldrh	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	895b      	ldrh	r3, [r3, #10]
 8001c5c:	f000 fcd8 	bl	8002610 <LCD_OpenWindow>
        LCD_FillColor(width*height, barColor);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	891b      	ldrh	r3, [r3, #8]
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	895b      	ldrh	r3, [r3, #10]
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	899b      	ldrh	r3, [r3, #12]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f000 fd23 	bl	80026c2 <LCD_FillColor>

        // render dragger
        LCD_OpenWindow(x,draggerY,width,draggerRadius);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8898      	ldrh	r0, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	8b99      	ldrh	r1, [r3, #28]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	891a      	ldrh	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	8adb      	ldrh	r3, [r3, #22]
 8001c8c:	f000 fcc0 	bl	8002610 <LCD_OpenWindow>
        LCD_FillColor(width*draggerRadius, RED);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	891b      	ldrh	r3, [r3, #8]
 8001c94:	461a      	mov	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	8adb      	ldrh	r3, [r3, #22]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fd0d 	bl	80026c2 <LCD_FillColor>
    }
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZN6Slider5wrapYEt>:

    uint16_t wrapY(u_int16_t y){
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
        if (y>500) return draggerY; // y=2048 if not touched
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cc2:	d902      	bls.n	8001cca <_ZN6Slider5wrapYEt+0x1a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	8b9b      	ldrh	r3, [r3, #28]
 8001cc8:	e01f      	b.n	8001d0a <_ZN6Slider5wrapYEt+0x5a>
        if (y < this->y) return this->y;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	88db      	ldrh	r3, [r3, #6]
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d202      	bcs.n	8001cda <_ZN6Slider5wrapYEt+0x2a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	88db      	ldrh	r3, [r3, #6]
 8001cd8:	e017      	b.n	8001d0a <_ZN6Slider5wrapYEt+0x5a>
        if (y > this->y+height-draggerRadius) return this->y+height-draggerRadius;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	88db      	ldrh	r3, [r3, #6]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	895b      	ldrh	r3, [r3, #10]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	8ac9      	ldrh	r1, [r1, #22]
 8001cec:	1a5b      	subs	r3, r3, r1
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dd0a      	ble.n	8001d08 <_ZN6Slider5wrapYEt+0x58>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	88da      	ldrh	r2, [r3, #6]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	895b      	ldrh	r3, [r3, #10]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	8adb      	ldrh	r3, [r3, #22]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	e000      	b.n	8001d0a <_ZN6Slider5wrapYEt+0x5a>
        return y;
 8001d08:	887b      	ldrh	r3, [r7, #2]
    }
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_ZN6Slider6updateEtt>:


    
    void update(u_int16_t x, u_int16_t y) override
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	803b      	strh	r3, [r7, #0]
    {
        bool isDraggerTouched;
        if (isDragging){
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e1b      	ldrb	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d03d      	beq.n	8001da8 <_ZN6Slider6updateEtt+0x94>
            draggerY = wrapY(y);
 8001d2c:	883b      	ldrh	r3, [r7, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffbd 	bl	8001cb0 <_ZN6Slider5wrapYEt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	839a      	strh	r2, [r3, #28]
            render();
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
            isDraggerTouched = x>=draggerX-3*draggerRadius && x<=draggerX+3*draggerRadius && y>=draggerY-draggerRadius && y<=draggerY+draggerRadius;
 8001d48:	887a      	ldrh	r2, [r7, #2]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8b5b      	ldrh	r3, [r3, #26]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8adb      	ldrh	r3, [r3, #22]
 8001d54:	4618      	mov	r0, r3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	1ac3      	subs	r3, r0, r3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	db20      	blt.n	8001da2 <_ZN6Slider6updateEtt+0x8e>
 8001d60:	887a      	ldrh	r2, [r7, #2]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	8b5b      	ldrh	r3, [r3, #26]
 8001d66:	4618      	mov	r0, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8adb      	ldrh	r3, [r3, #22]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	460b      	mov	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	4403      	add	r3, r0
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dc13      	bgt.n	8001da2 <_ZN6Slider6updateEtt+0x8e>
 8001d7a:	883a      	ldrh	r2, [r7, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8b9b      	ldrh	r3, [r3, #28]
 8001d80:	4619      	mov	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	8adb      	ldrh	r3, [r3, #22]
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	db0a      	blt.n	8001da2 <_ZN6Slider6updateEtt+0x8e>
 8001d8c:	883a      	ldrh	r2, [r7, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	8b9b      	ldrh	r3, [r3, #28]
 8001d92:	4619      	mov	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8adb      	ldrh	r3, [r3, #22]
 8001d98:	440b      	add	r3, r1
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dc01      	bgt.n	8001da2 <_ZN6Slider6updateEtt+0x8e>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <_ZN6Slider6updateEtt+0x90>
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e027      	b.n	8001df8 <_ZN6Slider6updateEtt+0xe4>
        }
        else{
            isDraggerTouched = x>=draggerX-draggerRadius && x<=draggerX+draggerRadius && y>=draggerY-draggerRadius && y<=draggerY+draggerRadius;
 8001da8:	887a      	ldrh	r2, [r7, #2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	8b5b      	ldrh	r3, [r3, #26]
 8001dae:	4619      	mov	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8adb      	ldrh	r3, [r3, #22]
 8001db4:	1acb      	subs	r3, r1, r3
 8001db6:	429a      	cmp	r2, r3
 8001db8:	db1c      	blt.n	8001df4 <_ZN6Slider6updateEtt+0xe0>
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8b5b      	ldrh	r3, [r3, #26]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8adb      	ldrh	r3, [r3, #22]
 8001dc6:	440b      	add	r3, r1
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dc13      	bgt.n	8001df4 <_ZN6Slider6updateEtt+0xe0>
 8001dcc:	883a      	ldrh	r2, [r7, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8b9b      	ldrh	r3, [r3, #28]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8adb      	ldrh	r3, [r3, #22]
 8001dd8:	1acb      	subs	r3, r1, r3
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	db0a      	blt.n	8001df4 <_ZN6Slider6updateEtt+0xe0>
 8001dde:	883a      	ldrh	r2, [r7, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	8b9b      	ldrh	r3, [r3, #28]
 8001de4:	4619      	mov	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	8adb      	ldrh	r3, [r3, #22]
 8001dea:	440b      	add	r3, r1
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dc01      	bgt.n	8001df4 <_ZN6Slider6updateEtt+0xe0>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <_ZN6Slider6updateEtt+0xe2>
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
        }
        isDragging = isDraggerTouched;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	761a      	strb	r2, [r3, #24]
        value = (draggerY - this->y) * maxValue / height;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	8b9b      	ldrh	r3, [r3, #28]
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	88db      	ldrh	r3, [r3, #6]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	8a92      	ldrh	r2, [r2, #20]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	8952      	ldrh	r2, [r2, #10]
 8001e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe ff64 	bl	8000ce8 <__aeabi_i2f>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]
    }
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <_ZN8TouchPadC1Ettttt>:
    uint16_t dotX;
    uint16_t dotY;
    uint16_t lastDotX = 0;
    uint16_t lastDotY = 0;

    TouchPad(uint16_t x, uint16_t y, uint16_t width = 150, uint16_t height = 150, uint16_t color = CYAN)
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	4608      	mov	r0, r1
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	817b      	strh	r3, [r7, #10]
 8001e42:	460b      	mov	r3, r1
 8001e44:	813b      	strh	r3, [r7, #8]
 8001e46:	4613      	mov	r3, r2
 8001e48:	80fb      	strh	r3, [r7, #6]
    : UIElement(x, y, width, height){
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	88fc      	ldrh	r4, [r7, #6]
 8001e4e:	893a      	ldrh	r2, [r7, #8]
 8001e50:	8979      	ldrh	r1, [r7, #10]
 8001e52:	8c3b      	ldrh	r3, [r7, #32]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4623      	mov	r3, r4
 8001e58:	f7ff fd96 	bl	8001988 <_ZN9UIElementC1Etttt>
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <_ZN8TouchPadC1Ettttt+0x80>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	220a      	movs	r2, #10
 8001e66:	81da      	strh	r2, [r3, #14]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	829a      	strh	r2, [r3, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	82da      	strh	r2, [r3, #22]
        this->x = x;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	897a      	ldrh	r2, [r7, #10]
 8001e78:	809a      	strh	r2, [r3, #4]
        this->y = y;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	893a      	ldrh	r2, [r7, #8]
 8001e7e:	80da      	strh	r2, [r3, #6]
        this->width = width;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	88fa      	ldrh	r2, [r7, #6]
 8001e84:	811a      	strh	r2, [r3, #8]
        this->height = height;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8c3a      	ldrh	r2, [r7, #32]
 8001e8a:	815a      	strh	r2, [r3, #10]
        this->color = color;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e90:	819a      	strh	r2, [r3, #12]
        dotX = width/2;
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	821a      	strh	r2, [r3, #16]
        dotY = height/2;
 8001e9c:	8c3b      	ldrh	r3, [r7, #32]
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	825a      	strh	r2, [r3, #18]
    }
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	080091f4 	.word	0x080091f4

08001eb4 <_ZN8TouchPad6renderEv>:


    void render() override
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    {
        // render background
        LCD_OpenWindow(x, y, width, height);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	8898      	ldrh	r0, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	88d9      	ldrh	r1, [r3, #6]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	891a      	ldrh	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	895b      	ldrh	r3, [r3, #10]
 8001ecc:	f000 fba0 	bl	8002610 <LCD_OpenWindow>
        LCD_FillColor(width*height, color);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	891b      	ldrh	r3, [r3, #8]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	895b      	ldrh	r3, [r3, #10]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	899b      	ldrh	r3, [r3, #12]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 fbeb 	bl	80026c2 <LCD_FillColor>

        // render dot
        renderDot();
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f82c 	bl	8001f4a <_ZN8TouchPad9renderDotEv>
    }
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_ZN8TouchPad8clearDotEv>:

    void clearDot(){
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
        LCD_OpenWindow(x+dotX, y+dotY, dotRadius, dotRadius);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	889a      	ldrh	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8a1b      	ldrh	r3, [r3, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b298      	uxth	r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	88da      	ldrh	r2, [r3, #6]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8a5b      	ldrh	r3, [r3, #18]
 8001f16:	4413      	add	r3, r2
 8001f18:	b299      	uxth	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	89da      	ldrh	r2, [r3, #14]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	89db      	ldrh	r3, [r3, #14]
 8001f22:	f000 fb75 	bl	8002610 <LCD_OpenWindow>
        LCD_FillColor(dotRadius*dotRadius, color);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	89db      	ldrh	r3, [r3, #14]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	89db      	ldrh	r3, [r3, #14]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	899b      	ldrh	r3, [r3, #12]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	f000 fbc0 	bl	80026c2 <LCD_FillColor>
    }
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_ZN8TouchPad9renderDotEv>:

    void renderDot(){
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
        LCD_OpenWindow(x+dotX, y+dotY, dotRadius, dotRadius);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	889a      	ldrh	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8a1b      	ldrh	r3, [r3, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b298      	uxth	r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	88da      	ldrh	r2, [r3, #6]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8a5b      	ldrh	r3, [r3, #18]
 8001f66:	4413      	add	r3, r2
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	89da      	ldrh	r2, [r3, #14]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	89db      	ldrh	r3, [r3, #14]
 8001f72:	f000 fb4d 	bl	8002610 <LCD_OpenWindow>
        LCD_FillColor(dotRadius*dotRadius, RED);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	89db      	ldrh	r3, [r3, #14]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	89db      	ldrh	r3, [r3, #14]
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fb9a 	bl	80026c2 <LCD_FillColor>
    }
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_ZN8TouchPad5wrapXEt>:

    uint16_t wrapX(u_int16_t x){
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]
        if (x>500) return dotX; // x=2048 if not touched
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fa8:	d902      	bls.n	8001fb0 <_ZN8TouchPad5wrapXEt+0x1a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	8a1b      	ldrh	r3, [r3, #16]
 8001fae:	e01f      	b.n	8001ff0 <_ZN8TouchPad5wrapXEt+0x5a>
        if (x < this->x) return this->x;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	887a      	ldrh	r2, [r7, #2]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d202      	bcs.n	8001fc0 <_ZN8TouchPad5wrapXEt+0x2a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	e017      	b.n	8001ff0 <_ZN8TouchPad5wrapXEt+0x5a>
        if (x > this->x+width-dotRadius) return this->x+width-dotRadius;
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	889b      	ldrh	r3, [r3, #4]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	891b      	ldrh	r3, [r3, #8]
 8001fcc:	440b      	add	r3, r1
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	89c9      	ldrh	r1, [r1, #14]
 8001fd2:	1a5b      	subs	r3, r3, r1
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dd0a      	ble.n	8001fee <_ZN8TouchPad5wrapXEt+0x58>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	889a      	ldrh	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	891b      	ldrh	r3, [r3, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	89db      	ldrh	r3, [r3, #14]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	e000      	b.n	8001ff0 <_ZN8TouchPad5wrapXEt+0x5a>
        return x;
 8001fee:	887b      	ldrh	r3, [r7, #2]
    }
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <_ZN8TouchPad5wrapYEt>:

    u_int16_t wrapY(u_int16_t y){
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	807b      	strh	r3, [r7, #2]
        if (y>500) return dotY; // y=2048 if not touched
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800200c:	d902      	bls.n	8002014 <_ZN8TouchPad5wrapYEt+0x1a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	8a5b      	ldrh	r3, [r3, #18]
 8002012:	e01f      	b.n	8002054 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y < this->y) return this->y;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	88db      	ldrh	r3, [r3, #6]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	429a      	cmp	r2, r3
 800201c:	d202      	bcs.n	8002024 <_ZN8TouchPad5wrapYEt+0x2a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	88db      	ldrh	r3, [r3, #6]
 8002022:	e017      	b.n	8002054 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y > this->y+height-dotRadius) return this->y+height-dotRadius;
 8002024:	887a      	ldrh	r2, [r7, #2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	88db      	ldrh	r3, [r3, #6]
 800202a:	4619      	mov	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	895b      	ldrh	r3, [r3, #10]
 8002030:	440b      	add	r3, r1
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	89c9      	ldrh	r1, [r1, #14]
 8002036:	1a5b      	subs	r3, r3, r1
 8002038:	429a      	cmp	r2, r3
 800203a:	dd0a      	ble.n	8002052 <_ZN8TouchPad5wrapYEt+0x58>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	88da      	ldrh	r2, [r3, #6]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	895b      	ldrh	r3, [r3, #10]
 8002044:	4413      	add	r3, r2
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	89db      	ldrh	r3, [r3, #14]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	b29b      	uxth	r3, r3
 8002050:	e000      	b.n	8002054 <_ZN8TouchPad5wrapYEt+0x5a>
        return y;
 8002052:	887b      	ldrh	r3, [r7, #2]
    }
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <_ZN8TouchPad6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	807b      	strh	r3, [r7, #2]
 800206a:	4613      	mov	r3, r2
 800206c:	803b      	strh	r3, [r7, #0]
    {
        if (x>500 || y>500) return;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002074:	d858      	bhi.n	8002128 <_ZN8TouchPad6updateEtt+0xca>
 8002076:	883b      	ldrh	r3, [r7, #0]
 8002078:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800207c:	d854      	bhi.n	8002128 <_ZN8TouchPad6updateEtt+0xca>
        if (x < this->x || x > this->x+width || y < this->y || y > this->y+height) return;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	889b      	ldrh	r3, [r3, #4]
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	429a      	cmp	r2, r3
 8002086:	d351      	bcc.n	800212c <_ZN8TouchPad6updateEtt+0xce>
 8002088:	887a      	ldrh	r2, [r7, #2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	889b      	ldrh	r3, [r3, #4]
 800208e:	4619      	mov	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	891b      	ldrh	r3, [r3, #8]
 8002094:	440b      	add	r3, r1
 8002096:	429a      	cmp	r2, r3
 8002098:	dc48      	bgt.n	800212c <_ZN8TouchPad6updateEtt+0xce>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	88db      	ldrh	r3, [r3, #6]
 800209e:	883a      	ldrh	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d343      	bcc.n	800212c <_ZN8TouchPad6updateEtt+0xce>
 80020a4:	883a      	ldrh	r2, [r7, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	88db      	ldrh	r3, [r3, #6]
 80020aa:	4619      	mov	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	895b      	ldrh	r3, [r3, #10]
 80020b0:	440b      	add	r3, r1
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dc3a      	bgt.n	800212c <_ZN8TouchPad6updateEtt+0xce>
        int _dotX = wrapX(x)-this->x;
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff6b 	bl	8001f96 <_ZN8TouchPad5wrapXEt>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
        int _dotY = wrapY(y)-this->y;
 80020cc:	883b      	ldrh	r3, [r7, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff92 	bl	8001ffa <_ZN8TouchPad5wrapYEt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	88db      	ldrh	r3, [r3, #6]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	60bb      	str	r3, [r7, #8]
        if (lastDotX != _dotX || lastDotY != _dotY){
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8a9b      	ldrh	r3, [r3, #20]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d105      	bne.n	80020fa <_ZN8TouchPad6updateEtt+0x9c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8adb      	ldrh	r3, [r3, #22]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <_ZN8TouchPad6updateEtt+0xd0>
            clearDot();
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fefd 	bl	8001efa <_ZN8TouchPad8clearDotEv>
            dotX = _dotX;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b29a      	uxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	821a      	strh	r2, [r3, #16]
            dotY = _dotY;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	b29a      	uxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	825a      	strh	r2, [r3, #18]
            renderDot();
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff1a 	bl	8001f4a <_ZN8TouchPad9renderDotEv>
            lastDotX = dotX;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8a1a      	ldrh	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	829a      	strh	r2, [r3, #20]
            lastDotY = dotY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	8a5a      	ldrh	r2, [r3, #18]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	82da      	strh	r2, [r3, #22]
 8002126:	e002      	b.n	800212e <_ZN8TouchPad6updateEtt+0xd0>
        if (x>500 || y>500) return;
 8002128:	bf00      	nop
 800212a:	e000      	b.n	800212e <_ZN8TouchPad6updateEtt+0xd0>
        if (x < this->x || x > this->x+width || y < this->y || y > this->y+height) return;
 800212c:	bf00      	nop
        }
    }
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_Z17onTestButtonPressP6Buttonii>:


SERVO42C xServo(0xe0, &huart2);
SERVO42C yServo(0xe1, &huart2);
SERVO42C zServo(0xe2, &huart2);
void onTestButtonPress(Button* button, int x, int y){
 8002134:	b580      	push	{r7, lr}
 8002136:	b096      	sub	sp, #88	; 0x58
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  xServo.receiveEncoder();
 8002140:	480f      	ldr	r0, [pc, #60]	; (8002180 <_Z17onTestButtonPressP6Buttonii+0x4c>)
 8002142:	f7ff fbb3 	bl	80018ac <_ZN8SERVO42C14receiveEncoderEv>
  printToLCD("x Encoder"+String(xServo.getEncoder()), 1);
 8002146:	480e      	ldr	r0, [pc, #56]	; (8002180 <_Z17onTestButtonPressP6Buttonii+0x4c>)
 8002148:	f7ff fc12 	bl	8001970 <_ZN8SERVO42C10getEncoderEv>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fa70 	bl	800163c <_ZN6StringC1Ei>
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002164:	4907      	ldr	r1, [pc, #28]	; (8002184 <_Z17onTestButtonPressP6Buttonii+0x50>)
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fedb 	bl	8004f22 <_ZplPKcRK6String>
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fef8 	bl	8004f68 <_Z10printToLCDRK6Stringt>
}
 8002178:	bf00      	nop
 800217a:	3758      	adds	r7, #88	; 0x58
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000250 	.word	0x20000250
 8002184:	08009180 	.word	0x08009180

08002188 <myfunc>:

void myfunc(){
 8002188:	b580      	push	{r7, lr}
 800218a:	b0ac      	sub	sp, #176	; 0xb0
 800218c:	af06      	add	r7, sp, #24
  // create UI
  Button testButton(150, 50, "Test",onTestButtonPress);
 800218e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002192:	2300      	movs	r3, #0
 8002194:	9304      	str	r3, [sp, #16]
 8002196:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800219a:	9303      	str	r3, [sp, #12]
 800219c:	2332      	movs	r3, #50	; 0x32
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	2355      	movs	r3, #85	; 0x55
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	4b32      	ldr	r3, [pc, #200]	; (8002270 <myfunc+0xe8>)
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <myfunc+0xec>)
 80021aa:	2232      	movs	r2, #50	; 0x32
 80021ac:	2196      	movs	r1, #150	; 0x96
 80021ae:	f7ff fc4b 	bl	8001a48 <_ZN6ButtonC1EttPcPFvPS_iiEtttt>
  Slider testSlider(200,120,100);
 80021b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80021b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	2382      	movs	r3, #130	; 0x82
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	230a      	movs	r3, #10
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2364      	movs	r3, #100	; 0x64
 80021c6:	2278      	movs	r2, #120	; 0x78
 80021c8:	21c8      	movs	r1, #200	; 0xc8
 80021ca:	f7ff fcff 	bl	8001bcc <_ZN6SliderC1Etttttt>
  TouchPad testTouchPad(0, 120);
 80021ce:	f107 0010 	add.w	r0, r7, #16
 80021d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	2396      	movs	r3, #150	; 0x96
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2396      	movs	r3, #150	; 0x96
 80021de:	2278      	movs	r2, #120	; 0x78
 80021e0:	2100      	movs	r1, #0
 80021e2:	f7ff fe25 	bl	8001e30 <_ZN8TouchPadC1Ettttt>
  


  
  strType_XPT2046_Coordinate touch;
  printToLCD("Hello World", 0);
 80021e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ea:	4923      	ldr	r1, [pc, #140]	; (8002278 <myfunc+0xf0>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ff53 	bl	8001098 <_ZN6StringC1EPKc>
 80021f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 feb5 	bl	8004f68 <_Z10printToLCDRK6Stringt>
    // LCD_DrawString(0, 0, str);
    


    
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 80021fe:	2101      	movs	r1, #1
 8002200:	481e      	ldr	r0, [pc, #120]	; (800227c <myfunc+0xf4>)
 8002202:	f003 ff99 	bl	8006138 <HAL_GPIO_ReadPin>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <myfunc+0x96>
      xServo.stepCounterClockwise(10);
 8002216:	210a      	movs	r1, #10
 8002218:	4819      	ldr	r0, [pc, #100]	; (8002280 <myfunc+0xf8>)
 800221a:	f7ff fb36 	bl	800188a <_ZN8SERVO42C20stepCounterClockwiseEh>
    }
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 800221e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002222:	4818      	ldr	r0, [pc, #96]	; (8002284 <myfunc+0xfc>)
 8002224:	f003 ff88 	bl	8006138 <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <myfunc+0xb8>
      xServo.stepClockwise(10);
 8002238:	210a      	movs	r1, #10
 800223a:	4811      	ldr	r0, [pc, #68]	; (8002280 <myfunc+0xf8>)
 800223c:	f7ff fb14 	bl	8001868 <_ZN8SERVO42C13stepClockwiseEh>
    }


    uint8_t data[3] = {};
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <myfunc+0x100>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	723b      	strb	r3, [r7, #8]
 8002246:	f107 0309 	add.w	r3, r7, #9
 800224a:	2200      	movs	r2, #0
 800224c:	801a      	strh	r2, [r3, #0]
    // HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
    char str[3] = {};
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <myfunc+0x100>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	713b      	strb	r3, [r7, #4]
 8002254:	1d7b      	adds	r3, r7, #5
 8002256:	2200      	movs	r2, #0
 8002258:	801a      	strh	r2, [r3, #0]
    sprintf(str, "%02X", data[0]);
 800225a:	7a3b      	ldrb	r3, [r7, #8]
 800225c:	461a      	mov	r2, r3
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	490a      	ldr	r1, [pc, #40]	; (800228c <myfunc+0x104>)
 8002262:	4618      	mov	r0, r3
 8002264:	f002 f868 	bl	8004338 <sprintf_>
    
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); 
    UIElement::updateAllElements();
 8002268:	f7fe ff2c 	bl	80010c4 <_ZN9UIElement17updateAllElementsEv>
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
    // HAL_Delay(500);
  }
 800226c:	e7c7      	b.n	80021fe <myfunc+0x76>
 800226e:	bf00      	nop
 8002270:	08002135 	.word	0x08002135
 8002274:	0800918c 	.word	0x0800918c
 8002278:	08009194 	.word	0x08009194
 800227c:	40010800 	.word	0x40010800
 8002280:	20000250 	.word	0x20000250
 8002284:	40011000 	.word	0x40011000
 8002288:	0800917c 	.word	0x0800917c
 800228c:	080091a0 	.word	0x080091a0

08002290 <_Z41__static_initialization_and_destruction_0ii>:
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d113      	bne.n	80022c8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d10e      	bne.n	80022c8 <_Z41__static_initialization_and_destruction_0ii+0x38>
SERVO42C xServo(0xe0, &huart2);
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022ac:	21e0      	movs	r1, #224	; 0xe0
 80022ae:	4809      	ldr	r0, [pc, #36]	; (80022d4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80022b0:	f7ff fa54 	bl	800175c <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>
SERVO42C yServo(0xe1, &huart2);
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022b6:	21e1      	movs	r1, #225	; 0xe1
 80022b8:	4807      	ldr	r0, [pc, #28]	; (80022d8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80022ba:	f7ff fa4f 	bl	800175c <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>
SERVO42C zServo(0xe2, &huart2);
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022c0:	21e2      	movs	r1, #226	; 0xe2
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80022c4:	f7ff fa4a 	bl	800175c <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2000081c 	.word	0x2000081c
 80022d4:	20000250 	.word	0x20000250
 80022d8:	20000274 	.word	0x20000274
 80022dc:	20000298 	.word	0x20000298

080022e0 <_GLOBAL__sub_I_xServo>:
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7ff ffd1 	bl	8002290 <_Z41__static_initialization_and_destruction_0ii>
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	e002      	b.n	8002300 <Delay+0x10>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f9      	bne.n	80022fa <Delay+0xa>
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 8002316:	2001      	movs	r0, #1
 8002318:	f000 f826 	bl	8002368 <LCD_BackLed_Control>
	LCD_Rst();
 800231c:	f000 f80c 	bl	8002338 <LCD_Rst>
	LCD_REG_Config();
 8002320:	f000 f85c 	bl	80023dc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8002324:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002328:	22f0      	movs	r2, #240	; 0xf0
 800232a:	2100      	movs	r1, #0
 800232c:	2000      	movs	r0, #0
 800232e:	f000 f9e7 	bl	8002700 <LCD_Clear>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	2102      	movs	r1, #2
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <LCD_Rst+0x28>)
 8002342:	f003 ff10 	bl	8006166 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8002346:	4807      	ldr	r0, [pc, #28]	; (8002364 <LCD_Rst+0x2c>)
 8002348:	f7ff ffd2 	bl	80022f0 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	2102      	movs	r1, #2
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <LCD_Rst+0x28>)
 8002352:	f003 ff08 	bl	8006166 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8002356:	4803      	ldr	r0, [pc, #12]	; (8002364 <LCD_Rst+0x2c>)
 8002358:	f7ff ffca 	bl	80022f0 <Delay>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40011800 	.word	0x40011800
 8002364:	0002bffc 	.word	0x0002bffc

08002368 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8002378:	2200      	movs	r2, #0
 800237a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800237e:	4807      	ldr	r0, [pc, #28]	; (800239c <LCD_BackLed_Control+0x34>)
 8002380:	f003 fef1 	bl	8006166 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8002384:	e005      	b.n	8002392 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <LCD_BackLed_Control+0x34>)
 800238e:	f003 feea 	bl	8006166 <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40011400 	.word	0x40011400

080023a0 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80023aa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	8013      	strh	r3, [r2, #0]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <LCD_Write_Data+0x1c>)
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	8013      	strh	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	60020000 	.word	0x60020000

080023dc <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80023e0:	20cf      	movs	r0, #207	; 0xcf
 80023e2:	f7ff ffdd 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7ff ffe8 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80023ec:	2081      	movs	r0, #129	; 0x81
 80023ee:	f7ff ffe5 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80023f2:	2030      	movs	r0, #48	; 0x30
 80023f4:	f7ff ffe2 	bl	80023bc <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80023f8:	20ed      	movs	r0, #237	; 0xed
 80023fa:	f7ff ffd1 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80023fe:	2064      	movs	r0, #100	; 0x64
 8002400:	f7ff ffdc 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8002404:	2003      	movs	r0, #3
 8002406:	f7ff ffd9 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800240a:	2012      	movs	r0, #18
 800240c:	f7ff ffd6 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8002410:	2081      	movs	r0, #129	; 0x81
 8002412:	f7ff ffd3 	bl	80023bc <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8002416:	20e8      	movs	r0, #232	; 0xe8
 8002418:	f7ff ffc2 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800241c:	2085      	movs	r0, #133	; 0x85
 800241e:	f7ff ffcd 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8002422:	2010      	movs	r0, #16
 8002424:	f7ff ffca 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8002428:	2078      	movs	r0, #120	; 0x78
 800242a:	f7ff ffc7 	bl	80023bc <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800242e:	20cb      	movs	r0, #203	; 0xcb
 8002430:	f7ff ffb6 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8002434:	2039      	movs	r0, #57	; 0x39
 8002436:	f7ff ffc1 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800243a:	202c      	movs	r0, #44	; 0x2c
 800243c:	f7ff ffbe 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff ffbb 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8002446:	2034      	movs	r0, #52	; 0x34
 8002448:	f7ff ffb8 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800244c:	2002      	movs	r0, #2
 800244e:	f7ff ffb5 	bl	80023bc <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8002452:	20f7      	movs	r0, #247	; 0xf7
 8002454:	f7ff ffa4 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8002458:	2020      	movs	r0, #32
 800245a:	f7ff ffaf 	bl	80023bc <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800245e:	20ea      	movs	r0, #234	; 0xea
 8002460:	f7ff ff9e 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff ffa9 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800246a:	2000      	movs	r0, #0
 800246c:	f7ff ffa6 	bl	80023bc <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8002470:	20b1      	movs	r0, #177	; 0xb1
 8002472:	f7ff ff95 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff ffa0 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800247c:	201b      	movs	r0, #27
 800247e:	f7ff ff9d 	bl	80023bc <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8002482:	20b6      	movs	r0, #182	; 0xb6
 8002484:	f7ff ff8c 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8002488:	200a      	movs	r0, #10
 800248a:	f7ff ff97 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800248e:	20a2      	movs	r0, #162	; 0xa2
 8002490:	f7ff ff94 	bl	80023bc <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8002494:	20c0      	movs	r0, #192	; 0xc0
 8002496:	f7ff ff83 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800249a:	2035      	movs	r0, #53	; 0x35
 800249c:	f7ff ff8e 	bl	80023bc <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80024a0:	20c1      	movs	r0, #193	; 0xc1
 80024a2:	f7ff ff7d 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80024a6:	2011      	movs	r0, #17
 80024a8:	f7ff ff88 	bl	80023bc <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80024ac:	20c5      	movs	r0, #197	; 0xc5
 80024ae:	f7ff ff77 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80024b2:	2045      	movs	r0, #69	; 0x45
 80024b4:	f7ff ff82 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80024b8:	2045      	movs	r0, #69	; 0x45
 80024ba:	f7ff ff7f 	bl	80023bc <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80024be:	20c7      	movs	r0, #199	; 0xc7
 80024c0:	f7ff ff6e 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80024c4:	20a2      	movs	r0, #162	; 0xa2
 80024c6:	f7ff ff79 	bl	80023bc <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80024ca:	20f2      	movs	r0, #242	; 0xf2
 80024cc:	f7ff ff68 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7ff ff73 	bl	80023bc <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80024d6:	2026      	movs	r0, #38	; 0x26
 80024d8:	f7ff ff62 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80024dc:	2001      	movs	r0, #1
 80024de:	f7ff ff6d 	bl	80023bc <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80024e2:	20e0      	movs	r0, #224	; 0xe0
 80024e4:	f7ff ff5c 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80024e8:	200f      	movs	r0, #15
 80024ea:	f7ff ff67 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80024ee:	2026      	movs	r0, #38	; 0x26
 80024f0:	f7ff ff64 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80024f4:	2024      	movs	r0, #36	; 0x24
 80024f6:	f7ff ff61 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80024fa:	200b      	movs	r0, #11
 80024fc:	f7ff ff5e 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8002500:	200e      	movs	r0, #14
 8002502:	f7ff ff5b 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8002506:	2009      	movs	r0, #9
 8002508:	f7ff ff58 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800250c:	2054      	movs	r0, #84	; 0x54
 800250e:	f7ff ff55 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8002512:	20a8      	movs	r0, #168	; 0xa8
 8002514:	f7ff ff52 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8002518:	2046      	movs	r0, #70	; 0x46
 800251a:	f7ff ff4f 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800251e:	200c      	movs	r0, #12
 8002520:	f7ff ff4c 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8002524:	2017      	movs	r0, #23
 8002526:	f7ff ff49 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800252a:	2009      	movs	r0, #9
 800252c:	f7ff ff46 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8002530:	200f      	movs	r0, #15
 8002532:	f7ff ff43 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002536:	2007      	movs	r0, #7
 8002538:	f7ff ff40 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800253c:	2000      	movs	r0, #0
 800253e:	f7ff ff3d 	bl	80023bc <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8002542:	20e1      	movs	r0, #225	; 0xe1
 8002544:	f7ff ff2c 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff ff37 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800254e:	2019      	movs	r0, #25
 8002550:	f7ff ff34 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002554:	201b      	movs	r0, #27
 8002556:	f7ff ff31 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800255a:	2004      	movs	r0, #4
 800255c:	f7ff ff2e 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8002560:	2010      	movs	r0, #16
 8002562:	f7ff ff2b 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002566:	2007      	movs	r0, #7
 8002568:	f7ff ff28 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800256c:	202a      	movs	r0, #42	; 0x2a
 800256e:	f7ff ff25 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8002572:	2047      	movs	r0, #71	; 0x47
 8002574:	f7ff ff22 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8002578:	2039      	movs	r0, #57	; 0x39
 800257a:	f7ff ff1f 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800257e:	2003      	movs	r0, #3
 8002580:	f7ff ff1c 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002584:	2006      	movs	r0, #6
 8002586:	f7ff ff19 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800258a:	2006      	movs	r0, #6
 800258c:	f7ff ff16 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8002590:	2030      	movs	r0, #48	; 0x30
 8002592:	f7ff ff13 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8002596:	2038      	movs	r0, #56	; 0x38
 8002598:	f7ff ff10 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800259c:	200f      	movs	r0, #15
 800259e:	f7ff ff0d 	bl	80023bc <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80025a2:	2036      	movs	r0, #54	; 0x36
 80025a4:	f7ff fefc 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80025a8:	20c8      	movs	r0, #200	; 0xc8
 80025aa:	f7ff ff07 	bl	80023bc <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80025ae:	202a      	movs	r0, #42	; 0x2a
 80025b0:	f7ff fef6 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff ff01 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7ff fefe 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7ff fefb 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80025c6:	20ef      	movs	r0, #239	; 0xef
 80025c8:	f7ff fef8 	bl	80023bc <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80025cc:	202b      	movs	r0, #43	; 0x2b
 80025ce:	f7ff fee7 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7ff fef2 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff feef 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff feec 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80025e4:	203f      	movs	r0, #63	; 0x3f
 80025e6:	f7ff fee9 	bl	80023bc <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80025ea:	203a      	movs	r0, #58	; 0x3a
 80025ec:	f7ff fed8 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80025f0:	2055      	movs	r0, #85	; 0x55
 80025f2:	f7ff fee3 	bl	80023bc <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80025f6:	2011      	movs	r0, #17
 80025f8:	f7ff fed2 	bl	80023a0 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80025fc:	4803      	ldr	r0, [pc, #12]	; (800260c <LCD_REG_Config+0x230>)
 80025fe:	f7ff fe77 	bl	80022f0 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8002602:	2029      	movs	r0, #41	; 0x29
 8002604:	f7ff fecc 	bl	80023a0 <LCD_Write_Cmd>
	
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	0002bffc 	.word	0x0002bffc

08002610 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4623      	mov	r3, r4
 8002620:	80fb      	strh	r3, [r7, #6]
 8002622:	4603      	mov	r3, r0
 8002624:	80bb      	strh	r3, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	807b      	strh	r3, [r7, #2]
 800262a:	4613      	mov	r3, r2
 800262c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800262e:	202a      	movs	r0, #42	; 0x2a
 8002630:	f7ff feb6 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	b29b      	uxth	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff febe 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	b29b      	uxth	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff feb8 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	4413      	add	r3, r2
 8002652:	3b01      	subs	r3, #1
 8002654:	121b      	asrs	r3, r3, #8
 8002656:	b29b      	uxth	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff feaf 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4413      	add	r3, r2
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	b29b      	uxth	r3, r3
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fea4 	bl	80023bc <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8002674:	202b      	movs	r0, #43	; 0x2b
 8002676:	f7ff fe93 	bl	80023a0 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800267a:	88bb      	ldrh	r3, [r7, #4]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b29b      	uxth	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe9b 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8002686:	88bb      	ldrh	r3, [r7, #4]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	b29b      	uxth	r3, r3
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fe95 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8002692:	88ba      	ldrh	r2, [r7, #4]
 8002694:	883b      	ldrh	r3, [r7, #0]
 8002696:	4413      	add	r3, r2
 8002698:	3b01      	subs	r3, #1
 800269a:	121b      	asrs	r3, r3, #8
 800269c:	b29b      	uxth	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fe8c 	bl	80023bc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80026a4:	88ba      	ldrh	r2, [r7, #4]
 80026a6:	883b      	ldrh	r3, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe81 	bl	80023bc <LCD_Write_Data>
	
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}

080026c2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	f7ff fe64 	bl	80023a0 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e006      	b.n	80026ec <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe6b 	bl	80023bc <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3301      	adds	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d3f4      	bcc.n	80026de <LCD_FillColor+0x1c>
		
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4623      	mov	r3, r4
 8002710:	80fb      	strh	r3, [r7, #6]
 8002712:	4603      	mov	r3, r0
 8002714:	80bb      	strh	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
 800271a:	4613      	mov	r3, r2
 800271c:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <LCD_Clear+0x58>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <LCD_Clear+0x2a>
 8002726:	2300      	movs	r3, #0
 8002728:	e001      	b.n	800272e <LCD_Clear+0x2e>
 800272a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800272e:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8002730:	883b      	ldrh	r3, [r7, #0]
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	88b9      	ldrh	r1, [r7, #4]
 8002736:	88f8      	ldrh	r0, [r7, #6]
 8002738:	f7ff ff6a 	bl	8002610 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	883a      	ldrh	r2, [r7, #0]
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	461a      	mov	r2, r3
 8002746:	89fb      	ldrh	r3, [r7, #14]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f7ff ffb9 	bl	80026c2 <LCD_FillColor>
	
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}
 8002758:	200002bc 	.word	0x200002bc

0800275c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
 8002766:	460b      	mov	r3, r1
 8002768:	80bb      	strh	r3, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <LCD_DrawChar+0xb0>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <LCD_DrawChar+0x20>
 8002776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277a:	e000      	b.n	800277e <LCD_DrawChar+0x22>
 800277c:	2300      	movs	r3, #0
 800277e:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <LCD_DrawChar+0xb0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <LCD_DrawChar+0x30>
 8002788:	2300      	movs	r3, #0
 800278a:	e001      	b.n	8002790 <LCD_DrawChar+0x34>
 800278c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002790:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	3b20      	subs	r3, #32
 8002796:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002798:	88b9      	ldrh	r1, [r7, #4]
 800279a:	88f8      	ldrh	r0, [r7, #6]
 800279c:	2310      	movs	r3, #16
 800279e:	2208      	movs	r2, #8
 80027a0:	f7ff ff36 	bl	8002610 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80027a4:	202c      	movs	r0, #44	; 0x2c
 80027a6:	f7ff fdfb 	bl	80023a0 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80027aa:	2300      	movs	r3, #0
 80027ac:	75bb      	strb	r3, [r7, #22]
 80027ae:	e024      	b.n	80027fa <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	7dbb      	ldrb	r3, [r7, #22]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <LCD_DrawChar+0xb4>)
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	440a      	add	r2, r1
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80027c0:	2300      	movs	r3, #0
 80027c2:	757b      	strb	r3, [r7, #21]
 80027c4:	e013      	b.n	80027ee <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 80027d0:	8a7b      	ldrh	r3, [r7, #18]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fdf2 	bl	80023bc <LCD_Write_Data>
 80027d8:	e003      	b.n	80027e2 <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 80027da:	8a3b      	ldrh	r3, [r7, #16]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fded 	bl	80023bc <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80027e8:	7d7b      	ldrb	r3, [r7, #21]
 80027ea:	3301      	adds	r3, #1
 80027ec:	757b      	strb	r3, [r7, #21]
 80027ee:	7d7b      	ldrb	r3, [r7, #21]
 80027f0:	2b07      	cmp	r3, #7
 80027f2:	d9e8      	bls.n	80027c6 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80027f4:	7dbb      	ldrb	r3, [r7, #22]
 80027f6:	3301      	adds	r3, #1
 80027f8:	75bb      	strb	r3, [r7, #22]
 80027fa:	7dbb      	ldrb	r3, [r7, #22]
 80027fc:	2b0f      	cmp	r3, #15
 80027fe:	d9d7      	bls.n	80027b0 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200002bc 	.word	0x200002bc
 8002810:	0800922c 	.word	0x0800922c

08002814 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	603a      	str	r2, [r7, #0]
 800281e:	80fb      	strh	r3, [r7, #6]
 8002820:	460b      	mov	r3, r1
 8002822:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8002824:	e01c      	b.n	8002860 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	2be8      	cmp	r3, #232	; 0xe8
 800282a:	d904      	bls.n	8002836 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800282c:	2300      	movs	r3, #0
 800282e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8002830:	88bb      	ldrh	r3, [r7, #4]
 8002832:	3310      	adds	r3, #16
 8002834:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002836:	88bb      	ldrh	r3, [r7, #4]
 8002838:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800283c:	d903      	bls.n	8002846 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800283e:	2300      	movs	r3, #0
 8002840:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8002842:	2300      	movs	r3, #0
 8002844:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	88b9      	ldrh	r1, [r7, #4]
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff84 	bl	800275c <LCD_DrawChar>
		
		pStr ++;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	3308      	adds	r3, #8
 800285e:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1de      	bne.n	8002826 <LCD_DrawString+0x12>
		
	}
	
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	4604      	mov	r4, r0
 800287c:	4608      	mov	r0, r1
 800287e:	4611      	mov	r1, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4623      	mov	r3, r4
 8002884:	80fb      	strh	r3, [r7, #6]
 8002886:	4603      	mov	r3, r0
 8002888:	80bb      	strh	r3, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	70fb      	strb	r3, [r7, #3]
 800288e:	4613      	mov	r3, r2
 8002890:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	3b20      	subs	r3, #32
 8002896:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002898:	88b9      	ldrh	r1, [r7, #4]
 800289a:	88f8      	ldrh	r0, [r7, #6]
 800289c:	2310      	movs	r3, #16
 800289e:	2208      	movs	r2, #8
 80028a0:	f7ff feb6 	bl	8002610 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80028a4:	202c      	movs	r0, #44	; 0x2c
 80028a6:	f7ff fd7b 	bl	80023a0 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80028aa:	2300      	movs	r3, #0
 80028ac:	73bb      	strb	r3, [r7, #14]
 80028ae:	e024      	b.n	80028fa <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80028b0:	7b3a      	ldrb	r2, [r7, #12]
 80028b2:	7bbb      	ldrb	r3, [r7, #14]
 80028b4:	4915      	ldr	r1, [pc, #84]	; (800290c <LCD_DrawChar_Color+0x98>)
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	440a      	add	r2, r1
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80028c0:	2300      	movs	r3, #0
 80028c2:	737b      	strb	r3, [r7, #13]
 80028c4:	e013      	b.n	80028ee <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80028d0:	8c3b      	ldrh	r3, [r7, #32]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fd72 	bl	80023bc <LCD_Write_Data>
 80028d8:	e003      	b.n	80028e2 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80028da:	883b      	ldrh	r3, [r7, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fd6d 	bl	80023bc <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80028e8:	7b7b      	ldrb	r3, [r7, #13]
 80028ea:	3301      	adds	r3, #1
 80028ec:	737b      	strb	r3, [r7, #13]
 80028ee:	7b7b      	ldrb	r3, [r7, #13]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d9e8      	bls.n	80028c6 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	3301      	adds	r3, #1
 80028f8:	73bb      	strb	r3, [r7, #14]
 80028fa:	7bbb      	ldrb	r3, [r7, #14]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d9d7      	bls.n	80028b0 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	bf00      	nop
 800290c:	0800922c 	.word	0x0800922c

08002910 <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b087      	sub	sp, #28
 8002914:	af02      	add	r7, sp, #8
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	81fb      	strh	r3, [r7, #14]
 800291e:	460b      	mov	r3, r1
 8002920:	81bb      	strh	r3, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002926:	e01f      	b.n	8002968 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002928:	89fb      	ldrh	r3, [r7, #14]
 800292a:	2be8      	cmp	r3, #232	; 0xe8
 800292c:	d904      	bls.n	8002938 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800292e:	2300      	movs	r3, #0
 8002930:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8002932:	89bb      	ldrh	r3, [r7, #12]
 8002934:	3310      	adds	r3, #16
 8002936:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002938:	89bb      	ldrh	r3, [r7, #12]
 800293a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800293e:	d903      	bls.n	8002948 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002940:	2300      	movs	r3, #0
 8002942:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8002944:	2300      	movs	r3, #0
 8002946:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	88fc      	ldrh	r4, [r7, #6]
 800294e:	89b9      	ldrh	r1, [r7, #12]
 8002950:	89f8      	ldrh	r0, [r7, #14]
 8002952:	8c3b      	ldrh	r3, [r7, #32]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	4623      	mov	r3, r4
 8002958:	f7ff ff8c 	bl	8002874 <LCD_DrawChar_Color>
		
		pStr ++;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3301      	adds	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	3308      	adds	r3, #8
 8002966:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1db      	bne.n	8002928 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}
	...

0800297c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002980:	f002 fdb2 	bl	80054e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002984:	f000 f830 	bl	80029e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002988:	f7fe fd5e 	bl	8001448 <MX_GPIO_Init>
  MX_FSMC_Init();
 800298c:	f7fe fcaa 	bl	80012e4 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002990:	f002 f96c 	bl	8004c6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002994:	f001 ffb2 	bl	80048fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002998:	f001 fffc 	bl	8004994 <MX_TIM3_Init>
  MX_TIM5_Init();
 800299c:	f002 f848 	bl	8004a30 <MX_TIM5_Init>
  MX_TIM1_Init();
 80029a0:	f001 ff06 	bl	80047b0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80029a4:	f7fe fbfa 	bl	800119c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80029a8:	f002 f9b4 	bl	8004d14 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80029ac:	f002 f988 	bl	8004cc0 <MX_USART2_UART_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 80029b0:	2200      	movs	r2, #0
 80029b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <main+0x60>)
 80029b8:	f003 fbd5 	bl	8006166 <HAL_GPIO_WritePin>
	LCD_INIT();
 80029bc:	f7ff fca9 	bl	8002312 <LCD_INIT>
	
	
	DEBUG_USART_Config();
 80029c0:	f7fe fc66 	bl	8001290 <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 80029c4:	f002 f91e 	bl	8004c04 <TIMER_INIT>
	timer_min(1);
 80029c8:	2001      	movs	r0, #1
 80029ca:	f002 f92d 	bl	8004c28 <timer_min>
  myfunc();
 80029ce:	f7ff fbdb 	bl	8002188 <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 80029d2:	4903      	ldr	r1, [pc, #12]	; (80029e0 <main+0x64>)
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <main+0x68>)
 80029d6:	f002 fcd9 	bl	800538c <XPT2046_Get_TouchedPoint>
 80029da:	e7fa      	b.n	80029d2 <main+0x56>
 80029dc:	40011400 	.word	0x40011400
 80029e0:	20000008 	.word	0x20000008
 80029e4:	200002c0 	.word	0x200002c0

080029e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b096      	sub	sp, #88	; 0x58
 80029ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029f2:	2228      	movs	r2, #40	; 0x28
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f005 fec2 	bl	8008780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a32:	2302      	movs	r3, #2
 8002a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a3c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fbc8 	bl	80061dc <HAL_RCC_OscConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002a52:	f000 f82b 	bl	8002aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a56:	230f      	movs	r3, #15
 8002a58:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	2102      	movs	r1, #2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 fe16 	bl	80066a4 <HAL_RCC_ClockConfig>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a7e:	f000 f815 	bl	8002aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002a82:	2303      	movs	r3, #3
 8002a84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 ffc1 	bl	8006a1c <HAL_RCCEx_PeriphCLKConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002aa0:	f000 f804 	bl	8002aac <Error_Handler>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3758      	adds	r7, #88	; 0x58
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d204      	bcs.n	8002ada <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e002      	b.n	8002b14 <_strnlen_s+0x16>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <_strnlen_s+0x28>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	603a      	str	r2, [r7, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f3      	bne.n	8002b0e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1ad3      	subs	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	2b2f      	cmp	r3, #47	; 0x2f
 8002b44:	d904      	bls.n	8002b50 <_is_digit+0x1a>
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	2b39      	cmp	r3, #57	; 0x39
 8002b4a:	d801      	bhi.n	8002b50 <_is_digit+0x1a>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <_is_digit+0x1c>
 8002b50:	2300      	movs	r3, #0
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002b6e:	e00e      	b.n	8002b8e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	1c59      	adds	r1, r3, #1
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4403      	add	r3, r0
 8002b8a:	3b30      	subs	r3, #48	; 0x30
 8002b8c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ffce 	bl	8002b36 <_is_digit>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e7      	bne.n	8002b70 <_atoi+0xe>
  }
  return i;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002baa:	b590      	push	{r4, r7, lr}
 8002bac:	b087      	sub	sp, #28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d125      	bne.n	8002c12 <_out_rev+0x68>
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d120      	bne.n	8002c12 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e00a      	b.n	8002bec <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	1c53      	adds	r3, r2, #1
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	68fc      	ldr	r4, [r7, #12]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	2020      	movs	r0, #32
 8002be4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3f0      	bcc.n	8002bd6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002bf4:	e00d      	b.n	8002c12 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	4413      	add	r3, r2
 8002c02:	7818      	ldrb	r0, [r3, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	1c53      	adds	r3, r2, #1
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	68fc      	ldr	r4, [r7, #12]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	47a0      	blx	r4
  while (len) {
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ee      	bne.n	8002bf6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002c22:	e007      	b.n	8002c34 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	1c53      	adds	r3, r2, #1
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	68fc      	ldr	r4, [r7, #12]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	2020      	movs	r0, #32
 8002c32:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f1      	bhi.n	8002c24 <_out_rev+0x7a>
    }
  }

  return idx;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}

08002c4a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b088      	sub	sp, #32
 8002c4e:	af04      	add	r7, sp, #16
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d136      	bne.n	8002cd0 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d018      	beq.n	8002c9a <_ntoa_format+0x50>
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d013      	beq.n	8002c9a <_ntoa_format+0x50>
 8002c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <_ntoa_format+0x3a>
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <_ntoa_format+0x50>
      width--;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	3b01      	subs	r3, #1
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c8a:	e006      	b.n	8002c9a <_ntoa_format+0x50>
      buf[len++] = '0';
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	61fa      	str	r2, [r7, #28]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4413      	add	r3, r2
 8002c96:	2230      	movs	r2, #48	; 0x30
 8002c98:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d20a      	bcs.n	8002cb8 <_ntoa_format+0x6e>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b1f      	cmp	r3, #31
 8002ca6:	d9f1      	bls.n	8002c8c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ca8:	e006      	b.n	8002cb8 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	61fa      	str	r2, [r7, #28]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	2230      	movs	r2, #48	; 0x30
 8002cb6:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <_ntoa_format+0x86>
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d202      	bcs.n	8002cd0 <_ntoa_format+0x86>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b1f      	cmp	r3, #31
 8002cce:	d9ec      	bls.n	8002caa <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d058      	beq.n	8002d8c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d116      	bne.n	8002d12 <_ntoa_format+0xc8>
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d013      	beq.n	8002d12 <_ntoa_format+0xc8>
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d003      	beq.n	8002cfa <_ntoa_format+0xb0>
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10b      	bne.n	8002d12 <_ntoa_format+0xc8>
      len--;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <_ntoa_format+0xc8>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d102      	bne.n	8002d12 <_ntoa_format+0xc8>
        len--;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d10f      	bne.n	8002d38 <_ntoa_format+0xee>
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <_ntoa_format+0xee>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b1f      	cmp	r3, #31
 8002d26:	d807      	bhi.n	8002d38 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	61fa      	str	r2, [r7, #28]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	2278      	movs	r2, #120	; 0x78
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e01f      	b.n	8002d78 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d10f      	bne.n	8002d5e <_ntoa_format+0x114>
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <_ntoa_format+0x114>
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b1f      	cmp	r3, #31
 8002d4c:	d807      	bhi.n	8002d5e <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	61fa      	str	r2, [r7, #28]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4413      	add	r3, r2
 8002d58:	2258      	movs	r2, #88	; 0x58
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e00c      	b.n	8002d78 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d109      	bne.n	8002d78 <_ntoa_format+0x12e>
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b1f      	cmp	r3, #31
 8002d68:	d806      	bhi.n	8002d78 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	61fa      	str	r2, [r7, #28]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	2262      	movs	r2, #98	; 0x62
 8002d76:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b1f      	cmp	r3, #31
 8002d7c:	d806      	bhi.n	8002d8c <_ntoa_format+0x142>
      buf[len++] = '0';
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	61fa      	str	r2, [r7, #28]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4413      	add	r3, r2
 8002d88:	2230      	movs	r2, #48	; 0x30
 8002d8a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b1f      	cmp	r3, #31
 8002d90:	d824      	bhi.n	8002ddc <_ntoa_format+0x192>
    if (negative) {
 8002d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <_ntoa_format+0x160>
      buf[len++] = '-';
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	61fa      	str	r2, [r7, #28]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4413      	add	r3, r2
 8002da4:	222d      	movs	r2, #45	; 0x2d
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e018      	b.n	8002ddc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	222b      	movs	r2, #43	; 0x2b
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e00b      	b.n	8002ddc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	61fa      	str	r2, [r7, #28]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	2220      	movs	r2, #32
 8002dda:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	9303      	str	r3, [sp, #12]
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff fed9 	bl	8002baa <_out_rev>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b096      	sub	sp, #88	; 0x58
 8002e06:	af08      	add	r7, sp, #32
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	f023 0310 	bic.w	r3, r3, #16
 8002e20:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <_ntoa_long+0x30>
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d032      	beq.n	8002e98 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e36:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e3c:	fb01 f202 	mul.w	r2, r1, r2
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002e46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e4a:	2b09      	cmp	r3, #9
 8002e4c:	d804      	bhi.n	8002e58 <_ntoa_long+0x56>
 8002e4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e52:	3330      	adds	r3, #48	; 0x30
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	e00d      	b.n	8002e74 <_ntoa_long+0x72>
 8002e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <_ntoa_long+0x64>
 8002e62:	2241      	movs	r2, #65	; 0x41
 8002e64:	e000      	b.n	8002e68 <_ntoa_long+0x66>
 8002e66:	2261      	movs	r2, #97	; 0x61
 8002e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3b0a      	subs	r3, #10
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	6379      	str	r1, [r7, #52]	; 0x34
 8002e7a:	3338      	adds	r3, #56	; 0x38
 8002e7c:	443b      	add	r3, r7
 8002e7e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <_ntoa_long+0x96>
 8002e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e94:	2b1f      	cmp	r3, #31
 8002e96:	d9cc      	bls.n	8002e32 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e9a:	9306      	str	r3, [sp, #24]
 8002e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9e:	9305      	str	r3, [sp, #20]
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea2:	9304      	str	r3, [sp, #16]
 8002ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea6:	9303      	str	r3, [sp, #12]
 8002ea8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fec3 	bl	8002c4a <_ntoa_format>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3738      	adds	r7, #56	; 0x38
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b096      	sub	sp, #88	; 0x58
 8002ed2:	af08      	add	r7, sp, #32
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002ee0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	d103      	bne.n	8002ef0 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eea:	f023 0310 	bic.w	r3, r3, #16
 8002eee:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <_ntoa_long_long+0x34>
 8002efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002efe:	4313      	orrs	r3, r2
 8002f00:	d037      	beq.n	8002f72 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002f02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f0a:	f7fd ff41 	bl	8000d90 <__aeabi_uldivmod>
 8002f0e:	4613      	mov	r3, r2
 8002f10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	d804      	bhi.n	8002f26 <_ntoa_long_long+0x58>
 8002f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f20:	3330      	adds	r3, #48	; 0x30
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	e00d      	b.n	8002f42 <_ntoa_long_long+0x74>
 8002f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <_ntoa_long_long+0x66>
 8002f30:	2241      	movs	r2, #65	; 0x41
 8002f32:	e000      	b.n	8002f36 <_ntoa_long_long+0x68>
 8002f34:	2261      	movs	r2, #97	; 0x61
 8002f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f3a:	4413      	add	r3, r2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3b0a      	subs	r3, #10
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	6379      	str	r1, [r7, #52]	; 0x34
 8002f48:	3338      	adds	r3, #56	; 0x38
 8002f4a:	443b      	add	r3, r7
 8002f4c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f58:	f7fd ff1a 	bl	8000d90 <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002f64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	d002      	beq.n	8002f72 <_ntoa_long_long+0xa4>
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6e:	2b1f      	cmp	r3, #31
 8002f70:	d9c7      	bls.n	8002f02 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f76:	9206      	str	r2, [sp, #24]
 8002f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f7a:	9205      	str	r2, [sp, #20]
 8002f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f7e:	9204      	str	r2, [sp, #16]
 8002f80:	9303      	str	r3, [sp, #12]
 8002f82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f86:	9302      	str	r3, [sp, #8]
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff fe56 	bl	8002c4a <_ntoa_format>
 8002f9e:	4603      	mov	r3, r0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3738      	adds	r7, #56	; 0x38
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b09d      	sub	sp, #116	; 0x74
 8002fac:	af06      	add	r7, sp, #24
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002fc6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002fca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fce:	f7fd fd57 	bl	8000a80 <__aeabi_dcmpeq>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fda:	9303      	str	r3, [sp, #12]
 8002fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fde:	9302      	str	r3, [sp, #8]
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <_ftoa+0x248>)
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff fddb 	bl	8002baa <_out_rev>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	e224      	b.n	8003442 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffc:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003000:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003004:	f7fd fd46 	bl	8000a94 <__aeabi_dcmplt>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00f      	beq.n	800302e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800300e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003010:	9303      	str	r3, [sp, #12]
 8003012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003014:	9302      	str	r3, [sp, #8]
 8003016:	2304      	movs	r3, #4
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <_ftoa+0x24c>)
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff fdc0 	bl	8002baa <_out_rev>
 800302a:	4603      	mov	r3, r0
 800302c:	e209      	b.n	8003442 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800302e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003032:	4b71      	ldr	r3, [pc, #452]	; (80031f8 <_ftoa+0x250>)
 8003034:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003038:	f7fd fd4a 	bl	8000ad0 <__aeabi_dcmpgt>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01d      	beq.n	800307e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <_ftoa+0xa8>
 800304c:	4b6b      	ldr	r3, [pc, #428]	; (80031fc <_ftoa+0x254>)
 800304e:	e000      	b.n	8003052 <_ftoa+0xaa>
 8003050:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <_ftoa+0x258>)
 8003052:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003054:	f002 0204 	and.w	r2, r2, #4
 8003058:	2a00      	cmp	r2, #0
 800305a:	d001      	beq.n	8003060 <_ftoa+0xb8>
 800305c:	2204      	movs	r2, #4
 800305e:	e000      	b.n	8003062 <_ftoa+0xba>
 8003060:	2203      	movs	r2, #3
 8003062:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003064:	9103      	str	r1, [sp, #12]
 8003066:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003068:	9102      	str	r1, [sp, #8]
 800306a:	9201      	str	r2, [sp, #4]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fd98 	bl	8002baa <_out_rev>
 800307a:	4603      	mov	r3, r0
 800307c:	e1e1      	b.n	8003442 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800307e:	a358      	add	r3, pc, #352	; (adr r3, 80031e0 <_ftoa+0x238>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003088:	f7fd fd22 	bl	8000ad0 <__aeabi_dcmpgt>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <_ftoa+0xfe>
 8003092:	a355      	add	r3, pc, #340	; (adr r3, 80031e8 <_ftoa+0x240>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800309c:	f7fd fcfa 	bl	8000a94 <__aeabi_dcmplt>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d011      	beq.n	80030ca <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80030a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a8:	9304      	str	r3, [sp, #16]
 80030aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ac:	9303      	str	r3, [sp, #12]
 80030ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030b0:	9302      	str	r3, [sp, #8]
 80030b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80030b6:	e9cd 2300 	strd	r2, r3, [sp]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f9c9 	bl	8003458 <_etoa>
 80030c6:	4603      	mov	r3, r0
 80030c8:	e1bb      	b.n	8003442 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030dc:	f7fd fcda 	bl	8000a94 <__aeabi_dcmplt>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <_ftoa+0x15c>
    negative = true;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 80030ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80030f0:	f04f 0000 	mov.w	r0, #0
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	f7fd f8a2 	bl	8000240 <__aeabi_dsub>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800310e:	2306      	movs	r3, #6
 8003110:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003112:	e00a      	b.n	800312a <_ftoa+0x182>
    buf[len++] = '0';
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	657a      	str	r2, [r7, #84]	; 0x54
 800311a:	3358      	adds	r3, #88	; 0x58
 800311c:	443b      	add	r3, r7
 800311e:	2230      	movs	r2, #48	; 0x30
 8003120:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003126:	3b01      	subs	r3, #1
 8003128:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800312a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312c:	2b1f      	cmp	r3, #31
 800312e:	d802      	bhi.n	8003136 <_ftoa+0x18e>
 8003130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003132:	2b09      	cmp	r3, #9
 8003134:	d8ee      	bhi.n	8003114 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800313a:	f7fd fcd3 	bl	8000ae4 <__aeabi_d2iz>
 800313e:	4603      	mov	r3, r0
 8003140:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8003142:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003144:	f7fd f9ca 	bl	80004dc <__aeabi_i2d>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003150:	f7fd f876 	bl	8000240 <__aeabi_dsub>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	4a29      	ldr	r2, [pc, #164]	; (8003204 <_ftoa+0x25c>)
 800315e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd fa22 	bl	80005b0 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8003174:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003178:	f7fd fcdc 	bl	8000b34 <__aeabi_d2uiz>
 800317c:	4603      	mov	r3, r0
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8003180:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003182:	f7fd f99b 	bl	80004bc <__aeabi_ui2d>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800318e:	f7fd f857 	bl	8000240 <__aeabi_dsub>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <_ftoa+0x260>)
 80031a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031a4:	f7fd fc94 	bl	8000ad0 <__aeabi_dcmpgt>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d02e      	beq.n	800320c <_ftoa+0x264>
    ++frac;
 80031ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b0:	3301      	adds	r3, #1
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80031b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80031b6:	f7fd f981 	bl	80004bc <__aeabi_ui2d>
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <_ftoa+0x25c>)
 80031bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd fc79 	bl	8000abc <__aeabi_dcmpge>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d032      	beq.n	8003236 <_ftoa+0x28e>
      frac = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80031d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d6:	3301      	adds	r3, #1
 80031d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031da:	e02c      	b.n	8003236 <_ftoa+0x28e>
 80031dc:	f3af 8000 	nop.w
 80031e0:	00000000 	.word	0x00000000
 80031e4:	41cdcd65 	.word	0x41cdcd65
 80031e8:	00000000 	.word	0x00000000
 80031ec:	c1cdcd65 	.word	0xc1cdcd65
 80031f0:	080091a8 	.word	0x080091a8
 80031f4:	080091ac 	.word	0x080091ac
 80031f8:	7fefffff 	.word	0x7fefffff
 80031fc:	080091b4 	.word	0x080091b4
 8003200:	080091bc 	.word	0x080091bc
 8003204:	08009820 	.word	0x08009820
 8003208:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	4b8e      	ldr	r3, [pc, #568]	; (800344c <_ftoa+0x4a4>)
 8003212:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003216:	f7fd fc3d 	bl	8000a94 <__aeabi_dcmplt>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <_ftoa+0x288>
 8003226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003232:	3301      	adds	r3, #1
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8003236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003238:	2b00      	cmp	r3, #0
 800323a:	d133      	bne.n	80032a4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800323c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800323e:	f7fd f94d 	bl	80004dc <__aeabi_i2d>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800324a:	f7fc fff9 	bl	8000240 <__aeabi_dsub>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003256:	2301      	movs	r3, #1
 8003258:	461c      	mov	r4, r3
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	4b7b      	ldr	r3, [pc, #492]	; (800344c <_ftoa+0x4a4>)
 8003260:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003264:	f7fd fc16 	bl	8000a94 <__aeabi_dcmplt>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <_ftoa+0x2ca>
 800326e:	2300      	movs	r3, #0
 8003270:	461c      	mov	r4, r3
 8003272:	b2e3      	uxtb	r3, r4
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <_ftoa+0x2ea>
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	4b72      	ldr	r3, [pc, #456]	; (800344c <_ftoa+0x4a4>)
 8003284:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003288:	f7fd fc22 	bl	8000ad0 <__aeabi_dcmpgt>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04c      	beq.n	800332c <_ftoa+0x384>
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d069      	beq.n	8003370 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800329c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329e:	3301      	adds	r3, #1
 80032a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a2:	e065      	b.n	8003370 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 80032a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80032a8:	e01f      	b.n	80032ea <_ftoa+0x342>
      --count;
 80032aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ac:	3b01      	subs	r3, #1
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80032b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80032b2:	4b67      	ldr	r3, [pc, #412]	; (8003450 <_ftoa+0x4a8>)
 80032b4:	fba3 2301 	umull	r2, r3, r3, r1
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	1aca      	subs	r2, r1, r3
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c8:	1c59      	adds	r1, r3, #1
 80032ca:	6579      	str	r1, [r7, #84]	; 0x54
 80032cc:	3230      	adds	r2, #48	; 0x30
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	3358      	adds	r3, #88	; 0x58
 80032d2:	443b      	add	r3, r7
 80032d4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80032d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032da:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <_ftoa+0x4a8>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80032ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ec:	2b1f      	cmp	r3, #31
 80032ee:	d9dc      	bls.n	80032aa <_ftoa+0x302>
 80032f0:	e009      	b.n	8003306 <_ftoa+0x35e>
        break;
 80032f2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80032f4:	e007      	b.n	8003306 <_ftoa+0x35e>
      buf[len++] = '0';
 80032f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	657a      	str	r2, [r7, #84]	; 0x54
 80032fc:	3358      	adds	r3, #88	; 0x58
 80032fe:	443b      	add	r3, r7
 8003300:	2230      	movs	r2, #48	; 0x30
 8003302:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003308:	2b1f      	cmp	r3, #31
 800330a:	d804      	bhi.n	8003316 <_ftoa+0x36e>
 800330c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	647a      	str	r2, [r7, #68]	; 0x44
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ef      	bne.n	80032f6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	2b1f      	cmp	r3, #31
 800331a:	d829      	bhi.n	8003370 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800331c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	657a      	str	r2, [r7, #84]	; 0x54
 8003322:	3358      	adds	r3, #88	; 0x58
 8003324:	443b      	add	r3, r7
 8003326:	222e      	movs	r2, #46	; 0x2e
 8003328:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800332c:	e020      	b.n	8003370 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800332e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003330:	4b48      	ldr	r3, [pc, #288]	; (8003454 <_ftoa+0x4ac>)
 8003332:	fb83 1302 	smull	r1, r3, r3, r2
 8003336:	1099      	asrs	r1, r3, #2
 8003338:	17d3      	asrs	r3, r2, #31
 800333a:	1ac9      	subs	r1, r1, r3
 800333c:	460b      	mov	r3, r1
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	1ad1      	subs	r1, r2, r3
 8003346:	b2ca      	uxtb	r2, r1
 8003348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	6579      	str	r1, [r7, #84]	; 0x54
 800334e:	3230      	adds	r2, #48	; 0x30
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	3358      	adds	r3, #88	; 0x58
 8003354:	443b      	add	r3, r7
 8003356:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800335a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335c:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <_ftoa+0x4ac>)
 800335e:	fb82 1203 	smull	r1, r2, r2, r3
 8003362:	1092      	asrs	r2, r2, #2
 8003364:	17db      	asrs	r3, r3, #31
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003372:	2b1f      	cmp	r3, #31
 8003374:	d9db      	bls.n	800332e <_ftoa+0x386>
 8003376:	e000      	b.n	800337a <_ftoa+0x3d2>
      break;
 8003378:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800337a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d123      	bne.n	80033cc <_ftoa+0x424>
 8003384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01e      	beq.n	80033cc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800338e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003390:	2b00      	cmp	r3, #0
 8003392:	d014      	beq.n	80033be <_ftoa+0x416>
 8003394:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <_ftoa+0x3fe>
 800339c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <_ftoa+0x416>
      width--;
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	3b01      	subs	r3, #1
 80033aa:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80033ac:	e007      	b.n	80033be <_ftoa+0x416>
      buf[len++] = '0';
 80033ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	657a      	str	r2, [r7, #84]	; 0x54
 80033b4:	3358      	adds	r3, #88	; 0x58
 80033b6:	443b      	add	r3, r7
 80033b8:	2230      	movs	r2, #48	; 0x30
 80033ba:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80033be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d202      	bcs.n	80033cc <_ftoa+0x424>
 80033c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c8:	2b1f      	cmp	r3, #31
 80033ca:	d9f0      	bls.n	80033ae <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80033cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ce:	2b1f      	cmp	r3, #31
 80033d0:	d827      	bhi.n	8003422 <_ftoa+0x47a>
    if (negative) {
 80033d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <_ftoa+0x444>
      buf[len++] = '-';
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	657a      	str	r2, [r7, #84]	; 0x54
 80033e0:	3358      	adds	r3, #88	; 0x58
 80033e2:	443b      	add	r3, r7
 80033e4:	222d      	movs	r2, #45	; 0x2d
 80033e6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80033ea:	e01a      	b.n	8003422 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80033ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	657a      	str	r2, [r7, #84]	; 0x54
 80033fc:	3358      	adds	r3, #88	; 0x58
 80033fe:	443b      	add	r3, r7
 8003400:	222b      	movs	r2, #43	; 0x2b
 8003402:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003406:	e00c      	b.n	8003422 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	657a      	str	r2, [r7, #84]	; 0x54
 8003418:	3358      	adds	r3, #88	; 0x58
 800341a:	443b      	add	r3, r7
 800341c:	2220      	movs	r2, #32
 800341e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003424:	9303      	str	r3, [sp, #12]
 8003426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003428:	9302      	str	r3, [sp, #8]
 800342a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fbb5 	bl	8002baa <_out_rev>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	375c      	adds	r7, #92	; 0x5c
 8003446:	46bd      	mov	sp, r7
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	bf00      	nop
 800344c:	3fe00000 	.word	0x3fe00000
 8003450:	cccccccd 	.word	0xcccccccd
 8003454:	66666667 	.word	0x66666667

08003458 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	b09d      	sub	sp, #116	; 0x74
 800345e:	af06      	add	r7, sp, #24
 8003460:	61f8      	str	r0, [r7, #28]
 8003462:	61b9      	str	r1, [r7, #24]
 8003464:	617a      	str	r2, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003468:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800346c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003470:	f7fd fb06 	bl	8000a80 <__aeabi_dcmpeq>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d014      	beq.n	80034a4 <_etoa+0x4c>
 800347a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800347e:	4bc4      	ldr	r3, [pc, #784]	; (8003790 <_etoa+0x338>)
 8003480:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003484:	f7fd fb24 	bl	8000ad0 <__aeabi_dcmpgt>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <_etoa+0x4c>
 800348e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003492:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003496:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800349a:	f7fd fafb 	bl	8000a94 <__aeabi_dcmplt>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d014      	beq.n	80034ce <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80034a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034a8:	9304      	str	r3, [sp, #16]
 80034aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ae:	9303      	str	r3, [sp, #12]
 80034b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034b4:	9302      	str	r3, [sp, #8]
 80034b6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80034ba:	e9cd 2300 	strd	r2, r3, [sp]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	69b9      	ldr	r1, [r7, #24]
 80034c4:	69f8      	ldr	r0, [r7, #28]
 80034c6:	f7ff fd6f 	bl	8002fa8 <_ftoa>
 80034ca:	4603      	mov	r3, r0
 80034cc:	e247      	b.n	800395e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 80034ce:	2301      	movs	r3, #1
 80034d0:	461e      	mov	r6, r3
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034de:	f7fd fad9 	bl	8000a94 <__aeabi_dcmplt>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <_etoa+0x94>
 80034e8:	2300      	movs	r3, #0
 80034ea:	461e      	mov	r6, r3
 80034ec:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 80034f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <_etoa+0xb8>
    value = -value;
 80034f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003502:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800350c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800351c:	2306      	movs	r3, #6
 800351e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003522:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003526:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800352a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	0d0a      	lsrs	r2, r1, #20
 8003538:	2300      	movs	r3, #0
 800353a:	4613      	mov	r3, r2
 800353c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003540:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800354a:	4690      	mov	r8, r2
 800354c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003550:	4644      	mov	r4, r8
 8003552:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003556:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800355a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800355e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003560:	f7fc ffbc 	bl	80004dc <__aeabi_i2d>
 8003564:	a37e      	add	r3, pc, #504	; (adr r3, 8003760 <_etoa+0x308>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fd f821 	bl	80005b0 <__aeabi_dmul>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	a37c      	add	r3, pc, #496	; (adr r3, 8003768 <_etoa+0x310>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fc fe62 	bl	8000244 <__adddf3>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4614      	mov	r4, r2
 8003586:	461d      	mov	r5, r3
 8003588:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <_etoa+0x33c>)
 8003592:	f7fc fe55 	bl	8000240 <__aeabi_dsub>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	a374      	add	r3, pc, #464	; (adr r3, 8003770 <_etoa+0x318>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f7fd f804 	bl	80005b0 <__aeabi_dmul>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fc fe48 	bl	8000244 <__adddf3>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7fd fa92 	bl	8000ae4 <__aeabi_d2iz>
 80035c0:	4603      	mov	r3, r0
 80035c2:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80035c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80035c6:	f7fc ff89 	bl	80004dc <__aeabi_i2d>
 80035ca:	a36b      	add	r3, pc, #428	; (adr r3, 8003778 <_etoa+0x320>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fc ffee 	bl	80005b0 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <_etoa+0x340>)
 80035e2:	f7fc fe2f 	bl	8000244 <__adddf3>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fa79 	bl	8000ae4 <__aeabi_d2iz>
 80035f2:	4603      	mov	r3, r0
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80035f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80035f8:	f7fc ff70 	bl	80004dc <__aeabi_i2d>
 80035fc:	a360      	add	r3, pc, #384	; (adr r3, 8003780 <_etoa+0x328>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f7fc ffd5 	bl	80005b0 <__aeabi_dmul>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4614      	mov	r4, r2
 800360c:	461d      	mov	r5, r3
 800360e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003610:	f7fc ff64 	bl	80004dc <__aeabi_i2d>
 8003614:	a35c      	add	r3, pc, #368	; (adr r3, 8003788 <_etoa+0x330>)
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	f7fc ffc9 	bl	80005b0 <__aeabi_dmul>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fc fe0b 	bl	8000240 <__aeabi_dsub>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003632:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003636:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800363a:	f7fc ffb9 	bl	80005b0 <__aeabi_dmul>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003648:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800364c:	17da      	asrs	r2, r3, #31
 800364e:	469a      	mov	sl, r3
 8003650:	4693      	mov	fp, r2
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800365e:	2200      	movs	r2, #0
 8003660:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003664:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003668:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	f7fc fde8 	bl	8000244 <__adddf3>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4690      	mov	r8, r2
 800367a:	4699      	mov	r9, r3
 800367c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003680:	f04f 0000 	mov.w	r0, #0
 8003684:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003688:	f7fc fdda 	bl	8000240 <__aeabi_dsub>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4692      	mov	sl, r2
 8003692:	469b      	mov	fp, r3
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	4b40      	ldr	r3, [pc, #256]	; (800379c <_etoa+0x344>)
 800369a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800369e:	f7fd f8b1 	bl	8000804 <__aeabi_ddiv>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <_etoa+0x348>)
 80036b0:	f7fc fdc8 	bl	8000244 <__adddf3>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036bc:	f7fd f8a2 	bl	8000804 <__aeabi_ddiv>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <_etoa+0x34c>)
 80036ce:	f7fc fdb9 	bl	8000244 <__adddf3>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036da:	f7fd f893 	bl	8000804 <__aeabi_ddiv>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4650      	mov	r0, sl
 80036e4:	4659      	mov	r1, fp
 80036e6:	f7fc fdad 	bl	8000244 <__adddf3>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4640      	mov	r0, r8
 80036f0:	4649      	mov	r1, r9
 80036f2:	f7fd f887 	bl	8000804 <__aeabi_ddiv>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <_etoa+0x350>)
 8003704:	f7fc fd9e 	bl	8000244 <__adddf3>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4620      	mov	r0, r4
 800370e:	4629      	mov	r1, r5
 8003710:	f7fc ff4e 	bl	80005b0 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800371c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003720:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003724:	f7fd f9b6 	bl	8000a94 <__aeabi_dcmplt>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <_etoa+0x2f2>
    expval--;
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	3b01      	subs	r3, #1
 8003732:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003734:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <_etoa+0x348>)
 800373e:	f7fd f861 	bl	8000804 <__aeabi_ddiv>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800374a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374c:	2b63      	cmp	r3, #99	; 0x63
 800374e:	dc2d      	bgt.n	80037ac <_etoa+0x354>
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003756:	db29      	blt.n	80037ac <_etoa+0x354>
 8003758:	2304      	movs	r3, #4
 800375a:	e028      	b.n	80037ae <_etoa+0x356>
 800375c:	f3af 8000 	nop.w
 8003760:	509f79fb 	.word	0x509f79fb
 8003764:	3fd34413 	.word	0x3fd34413
 8003768:	8b60c8b3 	.word	0x8b60c8b3
 800376c:	3fc68a28 	.word	0x3fc68a28
 8003770:	636f4361 	.word	0x636f4361
 8003774:	3fd287a7 	.word	0x3fd287a7
 8003778:	0979a371 	.word	0x0979a371
 800377c:	400a934f 	.word	0x400a934f
 8003780:	bbb55516 	.word	0xbbb55516
 8003784:	40026bb1 	.word	0x40026bb1
 8003788:	fefa39ef 	.word	0xfefa39ef
 800378c:	3fe62e42 	.word	0x3fe62e42
 8003790:	7fefffff 	.word	0x7fefffff
 8003794:	3ff80000 	.word	0x3ff80000
 8003798:	3fe00000 	.word	0x3fe00000
 800379c:	402c0000 	.word	0x402c0000
 80037a0:	40240000 	.word	0x40240000
 80037a4:	40180000 	.word	0x40180000
 80037a8:	3ff00000 	.word	0x3ff00000
 80037ac:	2305      	movs	r3, #5
 80037ae:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80037b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d03d      	beq.n	8003838 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80037bc:	a36a      	add	r3, pc, #424	; (adr r3, 8003968 <_etoa+0x510>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037c6:	f7fd f979 	bl	8000abc <__aeabi_dcmpge>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d024      	beq.n	800381a <_etoa+0x3c2>
 80037d0:	a367      	add	r3, pc, #412	; (adr r3, 8003970 <_etoa+0x518>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037da:	f7fd f95b 	bl	8000a94 <__aeabi_dcmplt>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <_etoa+0x3c2>
      if ((int)prec > expval) {
 80037e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037ea:	429a      	cmp	r2, r3
 80037ec:	da07      	bge.n	80037fe <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 80037ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80037f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037fc:	e002      	b.n	8003804 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	657b      	str	r3, [r7, #84]	; 0x54
 8003818:	e00e      	b.n	8003838 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800381a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <_etoa+0x3e0>
 8003822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <_etoa+0x3e0>
        --prec;
 800382e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003832:	3b01      	subs	r3, #1
 8003834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800383e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	429a      	cmp	r2, r3
 8003846:	d904      	bls.n	8003852 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800384a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003850:	e001      	b.n	8003856 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <_etoa+0x414>
 8003862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <_etoa+0x42e>
    value /= conv.F;
 8003872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800387a:	f7fc ffc3 	bl	8000804 <__aeabi_ddiv>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800388a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <_etoa+0x44c>
 8003892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800389c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e003      	b.n	80038ac <_etoa+0x454>
 80038a4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80038a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80038ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b4:	9304      	str	r3, [sp, #16]
 80038b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b8:	9303      	str	r3, [sp, #12]
 80038ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038be:	9302      	str	r3, [sp, #8]
 80038c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80038c4:	e9cd 3400 	strd	r3, r4, [sp]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	69b9      	ldr	r1, [r7, #24]
 80038ce:	69f8      	ldr	r0, [r7, #28]
 80038d0:	f7ff fb6a 	bl	8002fa8 <_ftoa>
 80038d4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80038d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d03f      	beq.n	800395c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80038dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <_etoa+0x494>
 80038e8:	2045      	movs	r0, #69	; 0x45
 80038ea:	e000      	b.n	80038ee <_etoa+0x496>
 80038ec:	2065      	movs	r0, #101	; 0x65
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	1c53      	adds	r3, r2, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	69fc      	ldr	r4, [r7, #28]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80038fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bfb8      	it	lt
 8003902:	425b      	neglt	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003908:	0fdb      	lsrs	r3, r3, #31
 800390a:	b2db      	uxtb	r3, r3
 800390c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800390e:	3a01      	subs	r2, #1
 8003910:	2105      	movs	r1, #5
 8003912:	9105      	str	r1, [sp, #20]
 8003914:	9204      	str	r2, [sp, #16]
 8003916:	2200      	movs	r2, #0
 8003918:	9203      	str	r2, [sp, #12]
 800391a:	220a      	movs	r2, #10
 800391c:	9202      	str	r2, [sp, #8]
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	9000      	str	r0, [sp, #0]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	69f8      	ldr	r0, [r7, #28]
 800392a:	f7ff fa6a 	bl	8002e02 <_ntoa_long>
 800392e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00f      	beq.n	800395c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800393c:	e007      	b.n	800394e <_etoa+0x4f6>
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	1c53      	adds	r3, r2, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	69fc      	ldr	r4, [r7, #28]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	2020      	movs	r0, #32
 800394c:	47a0      	blx	r4
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003958:	429a      	cmp	r2, r3
 800395a:	d8f0      	bhi.n	800393e <_etoa+0x4e6>
    }
  }
  return idx;
 800395c:	697b      	ldr	r3, [r7, #20]
}
 800395e:	4618      	mov	r0, r3
 8003960:	375c      	adds	r7, #92	; 0x5c
 8003962:	46bd      	mov	sp, r7
 8003964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003968:	eb1c432d 	.word	0xeb1c432d
 800396c:	3f1a36e2 	.word	0x3f1a36e2
 8003970:	00000000 	.word	0x00000000
 8003974:	412e8480 	.word	0x412e8480

08003978 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	b0a3      	sub	sp, #140	; 0x8c
 800397e:	af0a      	add	r7, sp, #40	; 0x28
 8003980:	6178      	str	r0, [r7, #20]
 8003982:	6139      	str	r1, [r7, #16]
 8003984:	60fa      	str	r2, [r7, #12]
 8003986:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 84ba 	bne.w	8004308 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8003994:	4ba3      	ldr	r3, [pc, #652]	; (8003c24 <_vsnprintf+0x2ac>)
 8003996:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003998:	f000 bcb6 	b.w	8004308 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b25      	cmp	r3, #37	; 0x25
 80039a2:	d00d      	beq.n	80039c0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	7818      	ldrb	r0, [r3, #0]
 80039a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039aa:	1c53      	adds	r3, r2, #1
 80039ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ae:	697c      	ldr	r4, [r7, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6939      	ldr	r1, [r7, #16]
 80039b4:	47a0      	blx	r4
      format++;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60bb      	str	r3, [r7, #8]
      continue;
 80039bc:	f000 bca4 	b.w	8004308 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	3301      	adds	r3, #1
 80039c4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	3b20      	subs	r3, #32
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d857      	bhi.n	8003a84 <_vsnprintf+0x10c>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <_vsnprintf+0x64>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a5d 	.word	0x08003a5d
 80039e0:	08003a85 	.word	0x08003a85
 80039e4:	08003a85 	.word	0x08003a85
 80039e8:	08003a71 	.word	0x08003a71
 80039ec:	08003a85 	.word	0x08003a85
 80039f0:	08003a85 	.word	0x08003a85
 80039f4:	08003a85 	.word	0x08003a85
 80039f8:	08003a85 	.word	0x08003a85
 80039fc:	08003a85 	.word	0x08003a85
 8003a00:	08003a85 	.word	0x08003a85
 8003a04:	08003a85 	.word	0x08003a85
 8003a08:	08003a49 	.word	0x08003a49
 8003a0c:	08003a85 	.word	0x08003a85
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a85 	.word	0x08003a85
 8003a18:	08003a85 	.word	0x08003a85
 8003a1c:	08003a21 	.word	0x08003a21
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	653b      	str	r3, [r7, #80]	; 0x50
 8003a32:	e02a      	b.n	8003a8a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	2301      	movs	r3, #1
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
 8003a46:	e020      	b.n	8003a8a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	2301      	movs	r3, #1
 8003a58:	653b      	str	r3, [r7, #80]	; 0x50
 8003a5a:	e016      	b.n	8003a8a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5e:	f043 0308 	orr.w	r3, r3, #8
 8003a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3301      	adds	r3, #1
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a6e:	e00c      	b.n	8003a8a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a72:	f043 0310 	orr.w	r3, r3, #16
 8003a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	653b      	str	r3, [r7, #80]	; 0x50
 8003a82:	e002      	b.n	8003a8a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003a84:	2300      	movs	r3, #0
 8003a86:	653b      	str	r3, [r7, #80]	; 0x50
 8003a88:	bf00      	nop
      }
    } while (n);
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d19c      	bne.n	80039ca <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f84c 	bl	8002b36 <_is_digit>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff f85a 	bl	8002b62 <_atoi>
 8003aae:	65b8      	str	r0, [r7, #88]	; 0x58
 8003ab0:	e01a      	b.n	8003ae8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab8:	d116      	bne.n	8003ae8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003abe:	1d1a      	adds	r2, r3, #4
 8003ac0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da07      	bge.n	8003ade <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	425b      	negs	r3, r3
 8003ada:	65bb      	str	r3, [r7, #88]	; 0x58
 8003adc:	e001      	b.n	8003ae2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b2e      	cmp	r3, #46	; 0x2e
 8003af2:	d127      	bne.n	8003b44 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003afa:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff f815 	bl	8002b36 <_is_digit>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff f823 	bl	8002b62 <_atoi>
 8003b1c:	6578      	str	r0, [r7, #84]	; 0x54
 8003b1e:	e011      	b.n	8003b44 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b2a      	cmp	r3, #42	; 0x2a
 8003b26:	d10d      	bne.n	8003b44 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b2c:	1d1a      	adds	r2, r3, #4
 8003b2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003b3c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	3b68      	subs	r3, #104	; 0x68
 8003b4a:	2b12      	cmp	r3, #18
 8003b4c:	d866      	bhi.n	8003c1c <_vsnprintf+0x2a4>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <_vsnprintf+0x1dc>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003bc7 	.word	0x08003bc7
 8003b58:	08003c1d 	.word	0x08003c1d
 8003b5c:	08003bfd 	.word	0x08003bfd
 8003b60:	08003c1d 	.word	0x08003c1d
 8003b64:	08003ba1 	.word	0x08003ba1
 8003b68:	08003c1d 	.word	0x08003c1d
 8003b6c:	08003c1d 	.word	0x08003c1d
 8003b70:	08003c1d 	.word	0x08003c1d
 8003b74:	08003c1d 	.word	0x08003c1d
 8003b78:	08003c1d 	.word	0x08003c1d
 8003b7c:	08003c1d 	.word	0x08003c1d
 8003b80:	08003c1d 	.word	0x08003c1d
 8003b84:	08003bed 	.word	0x08003bed
 8003b88:	08003c1d 	.word	0x08003c1d
 8003b8c:	08003c1d 	.word	0x08003c1d
 8003b90:	08003c1d 	.word	0x08003c1d
 8003b94:	08003c1d 	.word	0x08003c1d
 8003b98:	08003c1d 	.word	0x08003c1d
 8003b9c:	08003c0d 	.word	0x08003c0d
      case 'l' :
        flags |= FLAGS_LONG;
 8003ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b6c      	cmp	r3, #108	; 0x6c
 8003bb4:	d134      	bne.n	8003c20 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003bc4:	e02c      	b.n	8003c20 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b68      	cmp	r3, #104	; 0x68
 8003bda:	d125      	bne.n	8003c28 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8003bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003bea:	e01d      	b.n	8003c28 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]
        break;
 8003bfa:	e016      	b.n	8003c2a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c02:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]
        break;
 8003c0a:	e00e      	b.n	8003c2a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c12:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
        break;
 8003c1a:	e006      	b.n	8003c2a <_vsnprintf+0x2b2>
      default :
        break;
 8003c1c:	bf00      	nop
 8003c1e:	e004      	b.n	8003c2a <_vsnprintf+0x2b2>
        break;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <_vsnprintf+0x2b2>
 8003c24:	08002ae5 	.word	0x08002ae5
        break;
 8003c28:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	3b25      	subs	r3, #37	; 0x25
 8003c30:	2b53      	cmp	r3, #83	; 0x53
 8003c32:	f200 835c 	bhi.w	80042ee <_vsnprintf+0x976>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <_vsnprintf+0x2c4>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	080042d7 	.word	0x080042d7
 8003c40:	080042ef 	.word	0x080042ef
 8003c44:	080042ef 	.word	0x080042ef
 8003c48:	080042ef 	.word	0x080042ef
 8003c4c:	080042ef 	.word	0x080042ef
 8003c50:	080042ef 	.word	0x080042ef
 8003c54:	080042ef 	.word	0x080042ef
 8003c58:	080042ef 	.word	0x080042ef
 8003c5c:	080042ef 	.word	0x080042ef
 8003c60:	080042ef 	.word	0x080042ef
 8003c64:	080042ef 	.word	0x080042ef
 8003c68:	080042ef 	.word	0x080042ef
 8003c6c:	080042ef 	.word	0x080042ef
 8003c70:	080042ef 	.word	0x080042ef
 8003c74:	080042ef 	.word	0x080042ef
 8003c78:	080042ef 	.word	0x080042ef
 8003c7c:	080042ef 	.word	0x080042ef
 8003c80:	080042ef 	.word	0x080042ef
 8003c84:	080042ef 	.word	0x080042ef
 8003c88:	080042ef 	.word	0x080042ef
 8003c8c:	080042ef 	.word	0x080042ef
 8003c90:	080042ef 	.word	0x080042ef
 8003c94:	080042ef 	.word	0x080042ef
 8003c98:	080042ef 	.word	0x080042ef
 8003c9c:	080042ef 	.word	0x080042ef
 8003ca0:	080042ef 	.word	0x080042ef
 8003ca4:	080042ef 	.word	0x080042ef
 8003ca8:	080042ef 	.word	0x080042ef
 8003cac:	080042ef 	.word	0x080042ef
 8003cb0:	080042ef 	.word	0x080042ef
 8003cb4:	080042ef 	.word	0x080042ef
 8003cb8:	080042ef 	.word	0x080042ef
 8003cbc:	0800408f 	.word	0x0800408f
 8003cc0:	08004043 	.word	0x08004043
 8003cc4:	0800408f 	.word	0x0800408f
 8003cc8:	080042ef 	.word	0x080042ef
 8003ccc:	080042ef 	.word	0x080042ef
 8003cd0:	080042ef 	.word	0x080042ef
 8003cd4:	080042ef 	.word	0x080042ef
 8003cd8:	080042ef 	.word	0x080042ef
 8003cdc:	080042ef 	.word	0x080042ef
 8003ce0:	080042ef 	.word	0x080042ef
 8003ce4:	080042ef 	.word	0x080042ef
 8003ce8:	080042ef 	.word	0x080042ef
 8003cec:	080042ef 	.word	0x080042ef
 8003cf0:	080042ef 	.word	0x080042ef
 8003cf4:	080042ef 	.word	0x080042ef
 8003cf8:	080042ef 	.word	0x080042ef
 8003cfc:	080042ef 	.word	0x080042ef
 8003d00:	080042ef 	.word	0x080042ef
 8003d04:	080042ef 	.word	0x080042ef
 8003d08:	08003d8d 	.word	0x08003d8d
 8003d0c:	080042ef 	.word	0x080042ef
 8003d10:	080042ef 	.word	0x080042ef
 8003d14:	080042ef 	.word	0x080042ef
 8003d18:	080042ef 	.word	0x080042ef
 8003d1c:	080042ef 	.word	0x080042ef
 8003d20:	080042ef 	.word	0x080042ef
 8003d24:	080042ef 	.word	0x080042ef
 8003d28:	080042ef 	.word	0x080042ef
 8003d2c:	080042ef 	.word	0x080042ef
 8003d30:	08003d8d 	.word	0x08003d8d
 8003d34:	080040fb 	.word	0x080040fb
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	0800408f 	.word	0x0800408f
 8003d40:	08004043 	.word	0x08004043
 8003d44:	0800408f 	.word	0x0800408f
 8003d48:	080042ef 	.word	0x080042ef
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	080042ef 	.word	0x080042ef
 8003d54:	080042ef 	.word	0x080042ef
 8003d58:	080042ef 	.word	0x080042ef
 8003d5c:	080042ef 	.word	0x080042ef
 8003d60:	080042ef 	.word	0x080042ef
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	0800423b 	.word	0x0800423b
 8003d6c:	080042ef 	.word	0x080042ef
 8003d70:	080042ef 	.word	0x080042ef
 8003d74:	08004173 	.word	0x08004173
 8003d78:	080042ef 	.word	0x080042ef
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	080042ef 	.word	0x080042ef
 8003d84:	080042ef 	.word	0x080042ef
 8003d88:	08003d8d 	.word	0x08003d8d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b78      	cmp	r3, #120	; 0x78
 8003d92:	d003      	beq.n	8003d9c <_vsnprintf+0x424>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b58      	cmp	r3, #88	; 0x58
 8003d9a:	d102      	bne.n	8003da2 <_vsnprintf+0x42a>
          base = 16U;
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da0:	e013      	b.n	8003dca <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b6f      	cmp	r3, #111	; 0x6f
 8003da8:	d102      	bne.n	8003db0 <_vsnprintf+0x438>
          base =  8U;
 8003daa:	2308      	movs	r3, #8
 8003dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dae:	e00c      	b.n	8003dca <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b62      	cmp	r3, #98	; 0x62
 8003db6:	d102      	bne.n	8003dbe <_vsnprintf+0x446>
          base =  2U;
 8003db8:	2302      	movs	r3, #2
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbc:	e005      	b.n	8003dca <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003dbe:	230a      	movs	r3, #10
 8003dc0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc4:	f023 0310 	bic.w	r3, r3, #16
 8003dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b58      	cmp	r3, #88	; 0x58
 8003dd0:	d103      	bne.n	8003dda <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8003dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd4:	f043 0320 	orr.w	r3, r3, #32
 8003dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b69      	cmp	r3, #105	; 0x69
 8003de0:	d007      	beq.n	8003df2 <_vsnprintf+0x47a>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d003      	beq.n	8003df2 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dec:	f023 030c 	bic.w	r3, r3, #12
 8003df0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8003dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b69      	cmp	r3, #105	; 0x69
 8003e0a:	d004      	beq.n	8003e16 <_vsnprintf+0x49e>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b64      	cmp	r3, #100	; 0x64
 8003e12:	f040 8098 	bne.w	8003f46 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d031      	beq.n	8003e84 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e24:	3307      	adds	r3, #7
 8003e26:	f023 0307 	bic.w	r3, r3, #7
 8003e2a:	f103 0208 	add.w	r2, r3, #8
 8003e2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da06      	bge.n	8003e50 <_vsnprintf+0x4d8>
 8003e42:	2100      	movs	r1, #0
 8003e44:	f1d2 0800 	rsbs	r8, r2, #0
 8003e48:	eb61 0903 	sbc.w	r9, r1, r3
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	69f9      	ldr	r1, [r7, #28]
 8003e52:	0fc9      	lsrs	r1, r1, #31
 8003e54:	b2c9      	uxtb	r1, r1
 8003e56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003e58:	2400      	movs	r4, #0
 8003e5a:	4682      	mov	sl, r0
 8003e5c:	46a3      	mov	fp, r4
 8003e5e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003e60:	9008      	str	r0, [sp, #32]
 8003e62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003e64:	9007      	str	r0, [sp, #28]
 8003e66:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003e68:	9006      	str	r0, [sp, #24]
 8003e6a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003e6e:	9102      	str	r1, [sp, #8]
 8003e70:	e9cd 2300 	strd	r2, r3, [sp]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e78:	6939      	ldr	r1, [r7, #16]
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f7ff f827 	bl	8002ece <_ntoa_long_long>
 8003e80:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003e82:	e0da      	b.n	800403a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d020      	beq.n	8003ed0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8003e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e92:	1d1a      	adds	r2, r3, #4
 8003e94:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	425b      	neglt	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	0fdb      	lsrs	r3, r3, #31
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eae:	9205      	str	r2, [sp, #20]
 8003eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eb2:	9204      	str	r2, [sp, #16]
 8003eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eb6:	9203      	str	r2, [sp, #12]
 8003eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eba:	9202      	str	r2, [sp, #8]
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	9100      	str	r1, [sp, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7fe ff9b 	bl	8002e02 <_ntoa_long>
 8003ecc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003ece:	e0b4      	b.n	800403a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <_vsnprintf+0x572>
 8003eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ede:	1d1a      	adds	r2, r3, #4
 8003ee0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e012      	b.n	8003f10 <_vsnprintf+0x598>
 8003eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <_vsnprintf+0x58c>
 8003ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef8:	1d1a      	adds	r2, r3, #4
 8003efa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	e005      	b.n	8003f10 <_vsnprintf+0x598>
 8003f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f08:	1d1a      	adds	r2, r3, #4
 8003f0a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bfb8      	it	lt
 8003f18:	425b      	neglt	r3, r3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	0fdb      	lsrs	r3, r3, #31
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f24:	9205      	str	r2, [sp, #20]
 8003f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f28:	9204      	str	r2, [sp, #16]
 8003f2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f2c:	9203      	str	r2, [sp, #12]
 8003f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f30:	9202      	str	r2, [sp, #8]
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	9100      	str	r1, [sp, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f3a:	6939      	ldr	r1, [r7, #16]
 8003f3c:	6978      	ldr	r0, [r7, #20]
 8003f3e:	f7fe ff60 	bl	8002e02 <_ntoa_long>
 8003f42:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003f44:	e079      	b.n	800403a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d022      	beq.n	8003f96 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f54:	3307      	adds	r3, #7
 8003f56:	f023 0307 	bic.w	r3, r3, #7
 8003f5a:	f103 0208 	add.w	r2, r3, #8
 8003f5e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f68:	2000      	movs	r0, #0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f70:	9108      	str	r1, [sp, #32]
 8003f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f74:	9107      	str	r1, [sp, #28]
 8003f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f78:	9106      	str	r1, [sp, #24]
 8003f7a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003f7e:	2100      	movs	r1, #0
 8003f80:	9102      	str	r1, [sp, #8]
 8003f82:	e9cd 2300 	strd	r2, r3, [sp]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f7fe ff9e 	bl	8002ece <_ntoa_long_long>
 8003f92:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003f94:	e051      	b.n	800403a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d018      	beq.n	8003fd2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa4:	1d1a      	adds	r2, r3, #4
 8003fa6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fae:	9205      	str	r2, [sp, #20]
 8003fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fb2:	9204      	str	r2, [sp, #16]
 8003fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fb6:	9203      	str	r2, [sp, #12]
 8003fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	9201      	str	r2, [sp, #4]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	6978      	ldr	r0, [r7, #20]
 8003fca:	f7fe ff1a 	bl	8002e02 <_ntoa_long>
 8003fce:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003fd0:	e033      	b.n	800403a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <_vsnprintf+0x674>
 8003fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e012      	b.n	8004012 <_vsnprintf+0x69a>
 8003fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <_vsnprintf+0x68e>
 8003ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ffa:	1d1a      	adds	r2, r3, #4
 8003ffc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	e005      	b.n	8004012 <_vsnprintf+0x69a>
 8004006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401e:	9303      	str	r3, [sp, #12]
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	9302      	str	r3, [sp, #8]
 8004024:	2300      	movs	r3, #0
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004030:	6939      	ldr	r1, [r7, #16]
 8004032:	6978      	ldr	r0, [r7, #20]
 8004034:	f7fe fee5 	bl	8002e02 <_ntoa_long>
 8004038:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3301      	adds	r3, #1
 800403e:	60bb      	str	r3, [r7, #8]
        break;
 8004040:	e162      	b.n	8004308 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b46      	cmp	r3, #70	; 0x46
 8004048:	d103      	bne.n	8004052 <_vsnprintf+0x6da>
 800404a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404c:	f043 0320 	orr.w	r3, r3, #32
 8004050:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004056:	3307      	adds	r3, #7
 8004058:	f023 0307 	bic.w	r3, r3, #7
 800405c:	f103 0208 	add.w	r2, r3, #8
 8004060:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800406a:	9104      	str	r1, [sp, #16]
 800406c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800406e:	9103      	str	r1, [sp, #12]
 8004070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004072:	9102      	str	r1, [sp, #8]
 8004074:	e9cd 2300 	strd	r2, r3, [sp]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800407c:	6939      	ldr	r1, [r7, #16]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7fe ff92 	bl	8002fa8 <_ftoa>
 8004084:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3301      	adds	r3, #1
 800408a:	60bb      	str	r3, [r7, #8]
        break;
 800408c:	e13c      	b.n	8004308 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b67      	cmp	r3, #103	; 0x67
 8004094:	d003      	beq.n	800409e <_vsnprintf+0x726>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b47      	cmp	r3, #71	; 0x47
 800409c:	d103      	bne.n	80040a6 <_vsnprintf+0x72e>
 800409e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b45      	cmp	r3, #69	; 0x45
 80040ac:	d003      	beq.n	80040b6 <_vsnprintf+0x73e>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b47      	cmp	r3, #71	; 0x47
 80040b4:	d103      	bne.n	80040be <_vsnprintf+0x746>
 80040b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b8:	f043 0320 	orr.w	r3, r3, #32
 80040bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80040be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040c2:	3307      	adds	r3, #7
 80040c4:	f023 0307 	bic.w	r3, r3, #7
 80040c8:	f103 0208 	add.w	r2, r3, #8
 80040cc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80040d6:	9104      	str	r1, [sp, #16]
 80040d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040da:	9103      	str	r1, [sp, #12]
 80040dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040de:	9102      	str	r1, [sp, #8]
 80040e0:	e9cd 2300 	strd	r2, r3, [sp]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e8:	6939      	ldr	r1, [r7, #16]
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f7ff f9b4 	bl	8003458 <_etoa>
 80040f0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60bb      	str	r3, [r7, #8]
        break;
 80040f8:	e106      	b.n	8004308 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80040fa:	2301      	movs	r3, #1
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80040fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10e      	bne.n	8004126 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8004108:	e007      	b.n	800411a <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800410a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800410c:	1c53      	adds	r3, r2, #1
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004110:	697c      	ldr	r4, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6939      	ldr	r1, [r7, #16]
 8004116:	2020      	movs	r0, #32
 8004118:	47a0      	blx	r4
          while (l++ < width) {
 800411a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	647a      	str	r2, [r7, #68]	; 0x44
 8004120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004122:	429a      	cmp	r2, r3
 8004124:	d8f1      	bhi.n	800410a <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b2d8      	uxtb	r0, r3
 8004134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004136:	1c53      	adds	r3, r2, #1
 8004138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800413a:	697c      	ldr	r4, [r7, #20]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6939      	ldr	r1, [r7, #16]
 8004140:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00e      	beq.n	800416a <_vsnprintf+0x7f2>
          while (l++ < width) {
 800414c:	e007      	b.n	800415e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 800414e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004150:	1c53      	adds	r3, r2, #1
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	697c      	ldr	r4, [r7, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6939      	ldr	r1, [r7, #16]
 800415a:	2020      	movs	r0, #32
 800415c:	47a0      	blx	r4
          while (l++ < width) {
 800415e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	647a      	str	r2, [r7, #68]	; 0x44
 8004164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004166:	429a      	cmp	r2, r3
 8004168:	d8f1      	bhi.n	800414e <_vsnprintf+0x7d6>
          }
        }
        format++;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	60bb      	str	r3, [r7, #8]
        break;
 8004170:	e0ca      	b.n	8004308 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004176:	1d1a      	adds	r2, r3, #4
 8004178:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <_vsnprintf+0x812>
 8004186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004188:	e001      	b.n	800418e <_vsnprintf+0x816>
 800418a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800418e:	4619      	mov	r1, r3
 8004190:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004192:	f7fe fcb4 	bl	8002afe <_strnlen_s>
 8004196:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80041a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a6:	4293      	cmp	r3, r2
 80041a8:	bf28      	it	cs
 80041aa:	4613      	movcs	r3, r2
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11a      	bne.n	80041ee <_vsnprintf+0x876>
          while (l++ < width) {
 80041b8:	e007      	b.n	80041ca <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80041ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041bc:	1c53      	adds	r3, r2, #1
 80041be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c0:	697c      	ldr	r4, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6939      	ldr	r1, [r7, #16]
 80041c6:	2020      	movs	r0, #32
 80041c8:	47a0      	blx	r4
          while (l++ < width) {
 80041ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d8f1      	bhi.n	80041ba <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80041d6:	e00a      	b.n	80041ee <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80041d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	643a      	str	r2, [r7, #64]	; 0x40
 80041de:	7818      	ldrb	r0, [r3, #0]
 80041e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e2:	1c53      	adds	r3, r2, #1
 80041e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e6:	697c      	ldr	r4, [r7, #20]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6939      	ldr	r1, [r7, #16]
 80041ec:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80041ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <_vsnprintf+0x892>
 80041f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0eb      	beq.n	80041d8 <_vsnprintf+0x860>
 8004200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	657a      	str	r2, [r7, #84]	; 0x54
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e6      	bne.n	80041d8 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800420a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8004214:	e007      	b.n	8004226 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8004216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004218:	1c53      	adds	r3, r2, #1
 800421a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800421c:	697c      	ldr	r4, [r7, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6939      	ldr	r1, [r7, #16]
 8004222:	2020      	movs	r0, #32
 8004224:	47a0      	blx	r4
          while (l++ < width) {
 8004226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800422c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800422e:	429a      	cmp	r2, r3
 8004230:	d8f1      	bhi.n	8004216 <_vsnprintf+0x89e>
          }
        }
        format++;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3301      	adds	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
        break;
 8004238:	e066      	b.n	8004308 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800423a:	2308      	movs	r3, #8
 800423c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800423e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004240:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004244:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004246:	2300      	movs	r3, #0
 8004248:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800424c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004258:	1d1a      	adds	r2, r3, #4
 800425a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	603a      	str	r2, [r7, #0]
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426a:	9308      	str	r3, [sp, #32]
 800426c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426e:	9307      	str	r3, [sp, #28]
 8004270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004272:	9306      	str	r3, [sp, #24]
 8004274:	f04f 0210 	mov.w	r2, #16
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004280:	2300      	movs	r3, #0
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004288:	e9cd 3400 	strd	r3, r4, [sp]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004290:	6939      	ldr	r1, [r7, #16]
 8004292:	6978      	ldr	r0, [r7, #20]
 8004294:	f7fe fe1b 	bl	8002ece <_ntoa_long_long>
 8004298:	64f8      	str	r0, [r7, #76]	; 0x4c
 800429a:	e018      	b.n	80042ce <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800429c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b4:	9303      	str	r3, [sp, #12]
 80042b6:	2310      	movs	r3, #16
 80042b8:	9302      	str	r3, [sp, #8]
 80042ba:	2300      	movs	r3, #0
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	9200      	str	r2, [sp, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f7fe fd9b 	bl	8002e02 <_ntoa_long>
 80042cc:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
        break;
 80042d4:	e018      	b.n	8004308 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80042d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042d8:	1c53      	adds	r3, r2, #1
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	697c      	ldr	r4, [r7, #20]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6939      	ldr	r1, [r7, #16]
 80042e2:	2025      	movs	r0, #37	; 0x25
 80042e4:	47a0      	blx	r4
        format++;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
        break;
 80042ec:	e00c      	b.n	8004308 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	7818      	ldrb	r0, [r3, #0]
 80042f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042f4:	1c53      	adds	r3, r2, #1
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	697c      	ldr	r4, [r7, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6939      	ldr	r1, [r7, #16]
 80042fe:	47a0      	blx	r4
        format++;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3301      	adds	r3, #1
 8004304:	60bb      	str	r3, [r7, #8]
        break;
 8004306:	bf00      	nop
  while (*format)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f ab45 	bne.w	800399c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <_vsnprintf+0x9a8>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1e5a      	subs	r2, r3, #1
 800431e:	e000      	b.n	8004322 <_vsnprintf+0x9aa>
 8004320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004322:	697c      	ldr	r4, [r7, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6939      	ldr	r1, [r7, #16]
 8004328:	2000      	movs	r0, #0
 800432a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800432c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800432e:	4618      	mov	r0, r3
 8004330:	3764      	adds	r7, #100	; 0x64
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004338 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8004338:	b40e      	push	{r1, r2, r3}
 800433a:	b580      	push	{r7, lr}
 800433c:	b087      	sub	sp, #28
 800433e:	af02      	add	r7, sp, #8
 8004340:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004342:	f107 0320 	add.w	r3, r7, #32
 8004346:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4805      	ldr	r0, [pc, #20]	; (800436c <sprintf_+0x34>)
 8004356:	f7ff fb0f 	bl	8003978 <_vsnprintf>
 800435a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800435c:	68fb      	ldr	r3, [r7, #12]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004368:	b003      	add	sp, #12
 800436a:	4770      	bx	lr
 800436c:	08002ab9 	.word	0x08002ab9

08004370 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004382:	3301      	adds	r3, #1
 8004384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004388:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	429a      	cmp	r2, r3
 8004394:	d009      	beq.n	80043aa <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	79f9      	ldrb	r1, [r7, #7]
 80043a0:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d017      	beq.n	8004406 <Uart_isr+0x52>
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d012      	beq.n	8004406 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <Uart_isr+0xbc>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff ffba 	bl	8004370 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 80043fc:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <Uart_isr+0xc0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	605a      	str	r2, [r3, #4]
        return;
 8004404:	e031      	b.n	800446a <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02c      	beq.n	800446a <Uart_isr+0xb6>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d027      	beq.n	800446a <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <Uart_isr+0xc4>)
 800441c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004420:	4b15      	ldr	r3, [pc, #84]	; (8004478 <Uart_isr+0xc4>)
 8004422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004426:	429a      	cmp	r2, r3
 8004428:	d108      	bne.n	800443c <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004438:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800443a:	e015      	b.n	8004468 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <Uart_isr+0xc4>)
 800443e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004442:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <Uart_isr+0xc4>)
 8004444:	5cd3      	ldrb	r3, [r2, r3]
 8004446:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <Uart_isr+0xc4>)
 800444a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800444e:	3301      	adds	r3, #1
 8004450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004454:	4a08      	ldr	r2, [pc, #32]	; (8004478 <Uart_isr+0xc4>)
 8004456:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	7bba      	ldrb	r2, [r7, #14]
 8004466:	605a      	str	r2, [r3, #4]
    	return;
 8004468:	bf00      	nop
    }
}
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	200006d0 	.word	0x200006d0
 8004474:	20000178 	.word	0x20000178
 8004478:	200002c8 	.word	0x200002c8

0800447c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <HAL_MspInit+0x5c>)
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <HAL_MspInit+0x5c>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6193      	str	r3, [r2, #24]
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_MspInit+0x5c>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_MspInit+0x5c>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <HAL_MspInit+0x5c>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	61d3      	str	r3, [r2, #28]
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <HAL_MspInit+0x5c>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_MspInit+0x60>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <HAL_MspInit+0x60>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40010000 	.word	0x40010000

080044e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044f0:	e7fe      	b.n	80044f0 <HardFault_Handler+0x4>

080044f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044f6:	e7fe      	b.n	80044f6 <MemManage_Handler+0x4>

080044f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044fc:	e7fe      	b.n	80044fc <BusFault_Handler+0x4>

080044fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004502:	e7fe      	b.n	8004502 <UsageFault_Handler+0x4>

08004504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <SysTick_Handler+0x20>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <SysTick_Handler+0x18>
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <SysTick_Handler+0x20>)
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	4b02      	ldr	r3, [pc, #8]	; (8004548 <SysTick_Handler+0x20>)
 800453e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004540:	f001 f818 	bl	8005574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	200002c4 	.word	0x200002c4

0800454c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8004550:	4b08      	ldr	r3, [pc, #32]	; (8004574 <EXTI0_IRQHandler+0x28>)
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <EXTI0_IRQHandler+0x28>)
 800455e:	2201      	movs	r2, #1
 8004560:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8004562:	2001      	movs	r0, #1
 8004564:	f001 fe30 	bl	80061c8 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004568:	2001      	movs	r0, #1
 800456a:	f001 fe15 	bl	8006198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40010400 	.word	0x40010400

08004578 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <EXTI4_IRQHandler+0x2c>)
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <EXTI4_IRQHandler+0x30>)
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <EXTI4_IRQHandler+0x2c>)
 8004590:	2210      	movs	r2, #16
 8004592:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8004594:	2010      	movs	r0, #16
 8004596:	f001 fe17 	bl	80061c8 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800459a:	2010      	movs	r0, #16
 800459c:	f001 fdfc 	bl	8006198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80045a0:	bf00      	nop
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40010400 	.word	0x40010400
 80045a8:	2000089c 	.word	0x2000089c

080045ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <TIM3_IRQHandler+0x3c>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <TIM3_IRQHandler+0x3c>)
 80045ba:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <TIM3_IRQHandler+0x3c>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10c      	bne.n	80045de <TIM3_IRQHandler+0x32>
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <TIM3_IRQHandler+0x40>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d108      	bne.n	80045de <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 80045cc:	4808      	ldr	r0, [pc, #32]	; (80045f0 <TIM3_IRQHandler+0x44>)
 80045ce:	f002 fb64 	bl	8006c9a <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 80045d2:	4807      	ldr	r0, [pc, #28]	; (80045f0 <TIM3_IRQHandler+0x44>)
 80045d4:	f002 fba5 	bl	8006d22 <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <TIM3_IRQHandler+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045de:	4804      	ldr	r0, [pc, #16]	; (80045f0 <TIM3_IRQHandler+0x44>)
 80045e0:	f002 fbfd 	bl	8006dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200007d8 	.word	0x200007d8
 80045ec:	200007d9 	.word	0x200007d9
 80045f0:	20000758 	.word	0x20000758

080045f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <USART1_IRQHandler+0x38>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d107      	bne.n	800461c <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 800460c:	4b07      	ldr	r3, [pc, #28]	; (800462c <USART1_IRQHandler+0x38>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <USART1_IRQHandler+0x3c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	79fa      	ldrb	r2, [r7, #7]
 800461a:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800461c:	4805      	ldr	r0, [pc, #20]	; (8004634 <USART1_IRQHandler+0x40>)
 800461e:	f003 fbe7 	bl	8007df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000178 	.word	0x20000178
 8004630:	200001b8 	.word	0x200001b8
 8004634:	200007dc 	.word	0x200007dc

08004638 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 800463c:	4802      	ldr	r0, [pc, #8]	; (8004648 <USART3_IRQHandler+0x10>)
 800463e:	f7ff feb9 	bl	80043b4 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000085c 	.word	0x2000085c

0800464c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <EXTI15_10_IRQHandler+0x2c>)
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <EXTI15_10_IRQHandler+0x20>
	{
		// extern void debug_alarm_set();
		// debug_alarm_set();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <EXTI15_10_IRQHandler+0x2c>)
 800465e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004662:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8004664:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004668:	f001 fdae 	bl	80061c8 <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800466c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004670:	f001 fd92 	bl	8006198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004674:	bf00      	nop
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40010400 	.word	0x40010400

0800467c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <TIM5_IRQHandler+0x14>)
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004686:	4803      	ldr	r0, [pc, #12]	; (8004694 <TIM5_IRQHandler+0x18>)
 8004688:	f002 fba9 	bl	8006dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000000 	.word	0x20000000
 8004694:	20000798 	.word	0x20000798

08004698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
	return 1;
 800469c:	2301      	movs	r3, #1
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <_kill>:

int _kill(int pid, int sig)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046b0:	f004 f83c 	bl	800872c <__errno>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2216      	movs	r2, #22
 80046b8:	601a      	str	r2, [r3, #0]
	return -1;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_exit>:

void _exit (int status)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80046ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ffe7 	bl	80046a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80046d8:	e7fe      	b.n	80046d8 <_exit+0x12>
	...

080046dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <_sbrk+0x5c>)
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <_sbrk+0x60>)
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <_sbrk+0x64>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <_sbrk+0x64>)
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <_sbrk+0x68>)
 80046fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <_sbrk+0x64>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	429a      	cmp	r2, r3
 800470a:	d207      	bcs.n	800471c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800470c:	f004 f80e 	bl	800872c <__errno>
 8004710:	4603      	mov	r3, r0
 8004712:	220c      	movs	r2, #12
 8004714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800471a:	e009      	b.n	8004730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <_sbrk+0x64>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <_sbrk+0x64>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	4a05      	ldr	r2, [pc, #20]	; (8004740 <_sbrk+0x64>)
 800472c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800472e:	68fb      	ldr	r3, [r7, #12]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20010000 	.word	0x20010000
 800473c:	00000400 	.word	0x00000400
 8004740:	200006d4 	.word	0x200006d4
 8004744:	200008b8 	.word	0x200008b8

08004748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800474c:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <SystemInit+0x5c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <SystemInit+0x5c>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004758:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <SystemInit+0x5c>)
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4911      	ldr	r1, [pc, #68]	; (80047a4 <SystemInit+0x5c>)
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <SystemInit+0x60>)
 8004760:	4013      	ands	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <SystemInit+0x5c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <SystemInit+0x5c>)
 800476a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800476e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004772:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <SystemInit+0x5c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <SystemInit+0x5c>)
 800477a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004780:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <SystemInit+0x5c>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <SystemInit+0x5c>)
 8004786:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800478a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <SystemInit+0x5c>)
 800478e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004792:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SystemInit+0x64>)
 8004796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800479a:	609a      	str	r2, [r3, #8]
#endif 
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr
 80047a4:	40021000 	.word	0x40021000
 80047a8:	f8ff0000 	.word	0xf8ff0000
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b094      	sub	sp, #80	; 0x50
 80047b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047ce:	f107 031c 	add.w	r3, r7, #28
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
 80047d8:	609a      	str	r2, [r3, #8]
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	611a      	str	r2, [r3, #16]
 80047de:	615a      	str	r2, [r3, #20]
 80047e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047e2:	463b      	mov	r3, r7
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
 80047f0:	615a      	str	r2, [r3, #20]
 80047f2:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 80047f4:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <MX_TIM1_Init+0x144>)
 80047f6:	4a40      	ldr	r2, [pc, #256]	; (80048f8 <MX_TIM1_Init+0x148>)
 80047f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80047fa:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <MX_TIM1_Init+0x144>)
 80047fc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8004800:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004802:	4b3c      	ldr	r3, [pc, #240]	; (80048f4 <MX_TIM1_Init+0x144>)
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8004808:	4b3a      	ldr	r3, [pc, #232]	; (80048f4 <MX_TIM1_Init+0x144>)
 800480a:	f240 4265 	movw	r2, #1125	; 0x465
 800480e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004810:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <MX_TIM1_Init+0x144>)
 8004812:	2200      	movs	r2, #0
 8004814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004816:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <MX_TIM1_Init+0x144>)
 8004818:	2200      	movs	r2, #0
 800481a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <MX_TIM1_Init+0x144>)
 800481e:	2200      	movs	r2, #0
 8004820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004822:	4834      	ldr	r0, [pc, #208]	; (80048f4 <MX_TIM1_Init+0x144>)
 8004824:	f002 f9f4 	bl	8006c10 <HAL_TIM_Base_Init>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800482e:	f7fe f93d 	bl	8002aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004838:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800483c:	4619      	mov	r1, r3
 800483e:	482d      	ldr	r0, [pc, #180]	; (80048f4 <MX_TIM1_Init+0x144>)
 8004840:	f002 fc9c 	bl	800717c <HAL_TIM_ConfigClockSource>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800484a:	f7fe f92f 	bl	8002aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800484e:	4829      	ldr	r0, [pc, #164]	; (80048f4 <MX_TIM1_Init+0x144>)
 8004850:	f002 fa91 	bl	8006d76 <HAL_TIM_PWM_Init>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800485a:	f7fe f927 	bl	8002aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004862:	2300      	movs	r3, #0
 8004864:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800486a:	4619      	mov	r1, r3
 800486c:	4821      	ldr	r0, [pc, #132]	; (80048f4 <MX_TIM1_Init+0x144>)
 800486e:	f003 f8dc 	bl	8007a2a <HAL_TIMEx_MasterConfigSynchronization>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8004878:	f7fe f918 	bl	8002aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800487c:	2360      	movs	r3, #96	; 0x60
 800487e:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 8004880:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004884:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004886:	2300      	movs	r3, #0
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800488a:	2300      	movs	r3, #0
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004892:	2300      	movs	r3, #0
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800489a:	f107 031c 	add.w	r3, r7, #28
 800489e:	2200      	movs	r2, #0
 80048a0:	4619      	mov	r1, r3
 80048a2:	4814      	ldr	r0, [pc, #80]	; (80048f4 <MX_TIM1_Init+0x144>)
 80048a4:	f002 fba4 	bl	8006ff0 <HAL_TIM_PWM_ConfigChannel>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80048ae:	f7fe f8fd 	bl	8002aac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048d0:	463b      	mov	r3, r7
 80048d2:	4619      	mov	r1, r3
 80048d4:	4807      	ldr	r0, [pc, #28]	; (80048f4 <MX_TIM1_Init+0x144>)
 80048d6:	f003 f850 	bl	800797a <HAL_TIMEx_ConfigBreakDeadTime>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80048e0:	f7fe f8e4 	bl	8002aac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80048e4:	4803      	ldr	r0, [pc, #12]	; (80048f4 <MX_TIM1_Init+0x144>)
 80048e6:	f000 f959 	bl	8004b9c <HAL_TIM_MspPostInit>

}
 80048ea:	bf00      	nop
 80048ec:	3750      	adds	r7, #80	; 0x50
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200006d8 	.word	0x200006d8
 80048f8:	40012c00 	.word	0x40012c00

080048fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004910:	463b      	mov	r3, r7
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <MX_TIM2_Init+0x94>)
 800491a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800491e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <MX_TIM2_Init+0x94>)
 8004922:	2247      	movs	r2, #71	; 0x47
 8004924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <MX_TIM2_Init+0x94>)
 8004928:	2200      	movs	r2, #0
 800492a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800492c:	4b18      	ldr	r3, [pc, #96]	; (8004990 <MX_TIM2_Init+0x94>)
 800492e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <MX_TIM2_Init+0x94>)
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800493a:	4b15      	ldr	r3, [pc, #84]	; (8004990 <MX_TIM2_Init+0x94>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004940:	4813      	ldr	r0, [pc, #76]	; (8004990 <MX_TIM2_Init+0x94>)
 8004942:	f002 f965 	bl	8006c10 <HAL_TIM_Base_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800494c:	f7fe f8ae 	bl	8002aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4619      	mov	r1, r3
 800495c:	480c      	ldr	r0, [pc, #48]	; (8004990 <MX_TIM2_Init+0x94>)
 800495e:	f002 fc0d 	bl	800717c <HAL_TIM_ConfigClockSource>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004968:	f7fe f8a0 	bl	8002aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800496c:	2300      	movs	r3, #0
 800496e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004974:	463b      	mov	r3, r7
 8004976:	4619      	mov	r1, r3
 8004978:	4805      	ldr	r0, [pc, #20]	; (8004990 <MX_TIM2_Init+0x94>)
 800497a:	f003 f856 	bl	8007a2a <HAL_TIMEx_MasterConfigSynchronization>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004984:	f7fe f892 	bl	8002aac <Error_Handler>
  }

}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000718 	.word	0x20000718

08004994 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a8:	463b      	mov	r3, r7
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80049b0:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049b2:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <MX_TIM3_Init+0x98>)
 80049b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80049b6:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049b8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80049bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049be:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 80049c4:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049c6:	f248 32d5 	movw	r2, #33749	; 0x83d5
 80049ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049cc:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049d8:	4813      	ldr	r0, [pc, #76]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049da:	f002 f919 	bl	8006c10 <HAL_TIM_Base_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80049e4:	f7fe f862 	bl	8002aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4619      	mov	r1, r3
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <MX_TIM3_Init+0x94>)
 80049f6:	f002 fbc1 	bl	800717c <HAL_TIM_ConfigClockSource>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004a00:	f7fe f854 	bl	8002aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a04:	2300      	movs	r3, #0
 8004a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4805      	ldr	r0, [pc, #20]	; (8004a28 <MX_TIM3_Init+0x94>)
 8004a12:	f003 f80a 	bl	8007a2a <HAL_TIMEx_MasterConfigSynchronization>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004a1c:	f7fe f846 	bl	8002aac <Error_Handler>
  }

}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000758 	.word	0x20000758
 8004a2c:	40000400 	.word	0x40000400

08004a30 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	605a      	str	r2, [r3, #4]
 8004a40:	609a      	str	r2, [r3, #8]
 8004a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a44:	463b      	mov	r3, r7
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <MX_TIM5_Init+0x98>)
 8004a50:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a54:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8004a58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a62:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8004a66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004a74:	4813      	ldr	r0, [pc, #76]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a76:	f002 f8cb 	bl	8006c10 <HAL_TIM_Base_Init>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004a80:	f7fe f814 	bl	8002aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	4619      	mov	r1, r3
 8004a90:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004a92:	f002 fb73 	bl	800717c <HAL_TIM_ConfigClockSource>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004a9c:	f7fe f806 	bl	8002aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <MX_TIM5_Init+0x94>)
 8004aae:	f002 ffbc 	bl	8007a2a <HAL_TIMEx_MasterConfigSynchronization>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004ab8:	f7fd fff8 	bl	8002aac <Error_Handler>
  }

}
 8004abc:	bf00      	nop
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000798 	.word	0x20000798
 8004ac8:	40000c00 	.word	0x40000c00

08004acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <HAL_TIM_Base_MspInit+0xc0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10c      	bne.n	8004af8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ade:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	4a2b      	ldr	r2, [pc, #172]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ae8:	6193      	str	r3, [r2, #24]
 8004aea:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004af6:	e044      	b.n	8004b82 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d10c      	bne.n	8004b1c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b02:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	61d3      	str	r3, [r2, #28]
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	693b      	ldr	r3, [r7, #16]
}
 8004b1a:	e032      	b.n	8004b82 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_TIM_Base_MspInit+0xc8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d114      	bne.n	8004b50 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b2c:	f043 0302 	orr.w	r3, r3, #2
 8004b30:	61d3      	str	r3, [r2, #28]
 8004b32:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2100      	movs	r1, #0
 8004b42:	201d      	movs	r0, #29
 8004b44:	f001 f821 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b48:	201d      	movs	r0, #29
 8004b4a:	f001 f83a 	bl	8005bc2 <HAL_NVIC_EnableIRQ>
}
 8004b4e:	e018      	b.n	8004b82 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <HAL_TIM_Base_MspInit+0xcc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d113      	bne.n	8004b82 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b60:	f043 0308 	orr.w	r3, r3, #8
 8004b64:	61d3      	str	r3, [r2, #28]
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <HAL_TIM_Base_MspInit+0xc4>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004b72:	2200      	movs	r2, #0
 8004b74:	2100      	movs	r1, #0
 8004b76:	2032      	movs	r0, #50	; 0x32
 8004b78:	f001 f807 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004b7c:	2032      	movs	r0, #50	; 0x32
 8004b7e:	f001 f820 	bl	8005bc2 <HAL_NVIC_EnableIRQ>
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000c00 	.word	0x40000c00

08004b9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba4:	f107 0310 	add.w	r3, r7, #16
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a10      	ldr	r2, [pc, #64]	; (8004bf8 <HAL_TIM_MspPostInit+0x5c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d118      	bne.n	8004bee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_TIM_MspPostInit+0x60>)
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <HAL_TIM_MspPostInit+0x60>)
 8004bc2:	f043 0304 	orr.w	r3, r3, #4
 8004bc6:	6193      	str	r3, [r2, #24]
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_TIM_MspPostInit+0x60>)
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bde:	2302      	movs	r3, #2
 8004be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be2:	f107 0310 	add.w	r3, r7, #16
 8004be6:	4619      	mov	r1, r3
 8004be8:	4805      	ldr	r0, [pc, #20]	; (8004c00 <HAL_TIM_MspPostInit+0x64>)
 8004bea:	f001 f90d 	bl	8005e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bee:	bf00      	nop
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40010800 	.word	0x40010800

08004c04 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <TIMER_INIT+0x20>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0201 	mvn.w	r2, #1
 8004c10:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8004c12:	4804      	ldr	r0, [pc, #16]	; (8004c24 <TIMER_INIT+0x20>)
 8004c14:	f002 f827 	bl	8006c66 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8004c18:	4802      	ldr	r0, [pc, #8]	; (8004c24 <TIMER_INIT+0x20>)
 8004c1a:	f002 f868 	bl	8006cee <HAL_TIM_Base_Start_IT>
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000798 	.word	0x20000798

08004c28 <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <timer_min+0x38>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0201 	mvn.w	r2, #1
 8004c3a:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <timer_min+0x3c>)
 8004c44:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8004c46:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <timer_min+0x40>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8004c4c:	4804      	ldr	r0, [pc, #16]	; (8004c60 <timer_min+0x38>)
 8004c4e:	f002 f80a 	bl	8006c66 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8004c52:	4803      	ldr	r0, [pc, #12]	; (8004c60 <timer_min+0x38>)
 8004c54:	f002 f84b 	bl	8006cee <HAL_TIM_Base_Start_IT>
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000758 	.word	0x20000758
 8004c64:	200007d8 	.word	0x200007d8
 8004c68:	200007d9 	.word	0x200007d9

08004c6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004c70:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c72:	4a12      	ldr	r2, [pc, #72]	; (8004cbc <MX_USART1_UART_Init+0x50>)
 8004c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c92:	220c      	movs	r2, #12
 8004c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ca2:	4805      	ldr	r0, [pc, #20]	; (8004cb8 <MX_USART1_UART_Init+0x4c>)
 8004ca4:	f002 ff17 	bl	8007ad6 <HAL_UART_Init>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004cae:	f7fd fefd 	bl	8002aac <Error_Handler>
  }

}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200007dc 	.word	0x200007dc
 8004cbc:	40013800 	.word	0x40013800

08004cc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <MX_USART2_UART_Init+0x50>)
 8004cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004cca:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004ccc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004cf6:	4805      	ldr	r0, [pc, #20]	; (8004d0c <MX_USART2_UART_Init+0x4c>)
 8004cf8:	f002 feed 	bl	8007ad6 <HAL_UART_Init>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d02:	f7fd fed3 	bl	8002aac <Error_Handler>
  }

}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	2000081c 	.word	0x2000081c
 8004d10:	40004400 	.word	0x40004400

08004d14 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d1a:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <MX_USART3_UART_Init+0x50>)
 8004d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004d26:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d3a:	220c      	movs	r2, #12
 8004d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d3e:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004d4a:	4805      	ldr	r0, [pc, #20]	; (8004d60 <MX_USART3_UART_Init+0x4c>)
 8004d4c:	f002 fec3 	bl	8007ad6 <HAL_UART_Init>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004d56:	f7fd fea9 	bl	8002aac <Error_Handler>
  }

}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	2000085c 	.word	0x2000085c
 8004d64:	40004800 	.word	0x40004800

08004d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	; 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d70:	f107 0320 	add.w	r3, r7, #32
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a5b      	ldr	r2, [pc, #364]	; (8004ef0 <HAL_UART_MspInit+0x188>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d13a      	bne.n	8004dfe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d88:	4b5a      	ldr	r3, [pc, #360]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	4a59      	ldr	r2, [pc, #356]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d92:	6193      	str	r3, [r2, #24]
 8004d94:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da0:	4b54      	ldr	r3, [pc, #336]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	4a53      	ldr	r2, [pc, #332]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	6193      	str	r3, [r2, #24]
 8004dac:	4b51      	ldr	r3, [pc, #324]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc6:	f107 0320 	add.w	r3, r7, #32
 8004dca:	4619      	mov	r1, r3
 8004dcc:	484a      	ldr	r0, [pc, #296]	; (8004ef8 <HAL_UART_MspInit+0x190>)
 8004dce:	f001 f81b 	bl	8005e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de0:	f107 0320 	add.w	r3, r7, #32
 8004de4:	4619      	mov	r1, r3
 8004de6:	4844      	ldr	r0, [pc, #272]	; (8004ef8 <HAL_UART_MspInit+0x190>)
 8004de8:	f001 f80e 	bl	8005e08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004dec:	2200      	movs	r2, #0
 8004dee:	2100      	movs	r1, #0
 8004df0:	2025      	movs	r0, #37	; 0x25
 8004df2:	f000 feca 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004df6:	2025      	movs	r0, #37	; 0x25
 8004df8:	f000 fee3 	bl	8005bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004dfc:	e074      	b.n	8004ee8 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3e      	ldr	r2, [pc, #248]	; (8004efc <HAL_UART_MspInit+0x194>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d130      	bne.n	8004e6a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e08:	4b3a      	ldr	r3, [pc, #232]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4a39      	ldr	r2, [pc, #228]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e12:	61d3      	str	r3, [r2, #28]
 8004e14:	4b37      	ldr	r3, [pc, #220]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e20:	4b34      	ldr	r3, [pc, #208]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4a33      	ldr	r2, [pc, #204]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e26:	f043 0304 	orr.w	r3, r3, #4
 8004e2a:	6193      	str	r3, [r2, #24]
 8004e2c:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e38:	2304      	movs	r3, #4
 8004e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e40:	2303      	movs	r3, #3
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e44:	f107 0320 	add.w	r3, r7, #32
 8004e48:	4619      	mov	r1, r3
 8004e4a:	482b      	ldr	r0, [pc, #172]	; (8004ef8 <HAL_UART_MspInit+0x190>)
 8004e4c:	f000 ffdc 	bl	8005e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e50:	2308      	movs	r3, #8
 8004e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e54:	2300      	movs	r3, #0
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5c:	f107 0320 	add.w	r3, r7, #32
 8004e60:	4619      	mov	r1, r3
 8004e62:	4825      	ldr	r0, [pc, #148]	; (8004ef8 <HAL_UART_MspInit+0x190>)
 8004e64:	f000 ffd0 	bl	8005e08 <HAL_GPIO_Init>
}
 8004e68:	e03e      	b.n	8004ee8 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART3)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <HAL_UART_MspInit+0x198>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d139      	bne.n	8004ee8 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e74:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e7e:	61d3      	str	r3, [r2, #28]
 8004e80:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e92:	f043 0308 	orr.w	r3, r3, #8
 8004e96:	6193      	str	r3, [r2, #24]
 8004e98:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <HAL_UART_MspInit+0x18c>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb2:	f107 0320 	add.w	r3, r7, #32
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4812      	ldr	r0, [pc, #72]	; (8004f04 <HAL_UART_MspInit+0x19c>)
 8004eba:	f000 ffa5 	bl	8005e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ecc:	f107 0320 	add.w	r3, r7, #32
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	480c      	ldr	r0, [pc, #48]	; (8004f04 <HAL_UART_MspInit+0x19c>)
 8004ed4:	f000 ff98 	bl	8005e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2100      	movs	r1, #0
 8004edc:	2027      	movs	r0, #39	; 0x27
 8004ede:	f000 fe54 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004ee2:	2027      	movs	r0, #39	; 0x27
 8004ee4:	f000 fe6d 	bl	8005bc2 <HAL_NVIC_EnableIRQ>
}
 8004ee8:	bf00      	nop
 8004eea:	3730      	adds	r7, #48	; 0x30
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40010800 	.word	0x40010800
 8004efc:	40004400 	.word	0x40004400
 8004f00:	40004800 	.word	0x40004800
 8004f04:	40010c00 	.word	0x40010c00

08004f08 <_ZN6StringC1Ev>:
    String(){
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
        len = 0;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	621a      	str	r2, [r3, #32]
    }
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr

08004f22 <_ZplPKcRK6String>:
#include "utils.hpp"
extern "C"{
#include "lcdtp.h"
}
String operator+(const char* s, const String& str){
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
    String newStr;
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff ffea 	bl	8004f08 <_ZN6StringC1Ev>
    newStr.len = strlen(s) + str.len;
 8004f34:	68b8      	ldr	r0, [r7, #8]
 8004f36:	f7fb f977 	bl	8000228 <strlen>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	4413      	add	r3, r2
 8004f42:	461a      	mov	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]
    strcpy(newStr.str, s);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f003 fc92 	bl	8008876 <strcpy>
    strcat(newStr.str, str.str);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4611      	mov	r1, r2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f003 fc7d 	bl	8008858 <strcat>
    return newStr;
 8004f5e:	bf00      	nop
};
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_Z10printToLCDRK6Stringt>:
void printToLCD(const String& string, uint16_t row){
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  char str[20];
  sprintf(str, "                   ");
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	490e      	ldr	r1, [pc, #56]	; (8004fb4 <_Z10printToLCDRK6Stringt+0x4c>)
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff f9dc 	bl	8004338 <sprintf_>
  LCD_DrawString(0, row*15, str);
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	461a      	mov	r2, r3
 8004f84:	0112      	lsls	r2, r2, #4
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f107 020c 	add.w	r2, r7, #12
 8004f8e:	4619      	mov	r1, r3
 8004f90:	2000      	movs	r0, #0
 8004f92:	f7fd fc3f 	bl	8002814 <LCD_DrawString>
  LCD_DrawString(0, row*15, string.str);
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7fd fc35 	bl	8002814 <LCD_DrawString>
}
 8004faa:	bf00      	nop
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	080091c0 	.word	0x080091c0

08004fb8 <_Z8debugLogRK6String>:
        sprintf(str, "%02X", arr[i]);
        LCD_DrawString(i*15, row*15, str);
    }
}

void debugLog(const String& string){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    printToLCD(string, 10);
 8004fc0:	210a      	movs	r1, #10
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff ffd0 	bl	8004f68 <_Z10printToLCDRK6Stringt>
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e00a      	b.n	8004ff4 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 8004fde:	230c      	movs	r3, #12
 8004fe0:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8004fe2:	bf00      	nop
 8004fe4:	7afb      	ldrb	r3, [r7, #11]
 8004fe6:	1e5a      	subs	r2, r3, #1
 8004fe8:	72fa      	strb	r2, [r7, #11]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1fa      	bne.n	8004fe4 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3f0      	bcc.n	8004fde <XPT2046_DelayUS+0xe>
			;

	}

}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8005012:	2200      	movs	r2, #0
 8005014:	2104      	movs	r1, #4
 8005016:	481d      	ldr	r0, [pc, #116]	; (800508c <XPT2046_WriteCMD+0x84>)
 8005018:	f001 f8a5 	bl	8006166 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 800501c:	2200      	movs	r2, #0
 800501e:	2101      	movs	r1, #1
 8005020:	481a      	ldr	r0, [pc, #104]	; (800508c <XPT2046_WriteCMD+0x84>)
 8005022:	f001 f8a0 	bl	8006166 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
 800502a:	e027      	b.n	800507c <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800502c:	79fa      	ldrb	r2, [r7, #7]
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	f1c3 0307 	rsb	r3, r3, #7
 8005034:	fa42 f303 	asr.w	r3, r2, r3
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <XPT2046_WriteCMD+0x44>
 8005040:	2201      	movs	r2, #1
 8005042:	2104      	movs	r1, #4
 8005044:	4811      	ldr	r0, [pc, #68]	; (800508c <XPT2046_WriteCMD+0x84>)
 8005046:	f001 f88e 	bl	8006166 <HAL_GPIO_WritePin>
 800504a:	e004      	b.n	8005056 <XPT2046_WriteCMD+0x4e>
 800504c:	2200      	movs	r2, #0
 800504e:	2104      	movs	r1, #4
 8005050:	480e      	ldr	r0, [pc, #56]	; (800508c <XPT2046_WriteCMD+0x84>)
 8005052:	f001 f888 	bl	8006166 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8005056:	2005      	movs	r0, #5
 8005058:	f7ff ffba 	bl	8004fd0 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 800505c:	2201      	movs	r2, #1
 800505e:	2101      	movs	r1, #1
 8005060:	480a      	ldr	r0, [pc, #40]	; (800508c <XPT2046_WriteCMD+0x84>)
 8005062:	f001 f880 	bl	8006166 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8005066:	2005      	movs	r0, #5
 8005068:	f7ff ffb2 	bl	8004fd0 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 800506c:	2200      	movs	r2, #0
 800506e:	2101      	movs	r1, #1
 8005070:	4806      	ldr	r0, [pc, #24]	; (800508c <XPT2046_WriteCMD+0x84>)
 8005072:	f001 f878 	bl	8006166 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	3301      	adds	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b07      	cmp	r3, #7
 8005080:	d9d4      	bls.n	800502c <XPT2046_WriteCMD+0x24>
	}

}
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40011800 	.word	0x40011800

08005090 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8005096:	2300      	movs	r3, #0
 8005098:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 800509a:	2200      	movs	r2, #0
 800509c:	2104      	movs	r1, #4
 800509e:	4819      	ldr	r0, [pc, #100]	; (8005104 <XPT2046_ReadCMD+0x74>)
 80050a0:	f001 f861 	bl	8006166 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80050a4:	2201      	movs	r2, #1
 80050a6:	2101      	movs	r1, #1
 80050a8:	4816      	ldr	r0, [pc, #88]	; (8005104 <XPT2046_ReadCMD+0x74>)
 80050aa:	f001 f85c 	bl	8006166 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 80050ae:	2300      	movs	r3, #0
 80050b0:	71fb      	strb	r3, [r7, #7]
 80050b2:	e01e      	b.n	80050f2 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 80050b4:	2200      	movs	r2, #0
 80050b6:	2101      	movs	r1, #1
 80050b8:	4812      	ldr	r0, [pc, #72]	; (8005104 <XPT2046_ReadCMD+0x74>)
 80050ba:	f001 f854 	bl	8006166 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 80050be:	2108      	movs	r1, #8
 80050c0:	4810      	ldr	r0, [pc, #64]	; (8005104 <XPT2046_ReadCMD+0x74>)
 80050c2:	f001 f839 	bl	8006138 <HAL_GPIO_ReadPin>
 80050c6:	4603      	mov	r3, r0
 80050c8:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	f1c3 030b 	rsb	r3, r3, #11
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	b21a      	sxth	r2, r3
 80050d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050dc:	4313      	orrs	r3, r2
 80050de:	b21b      	sxth	r3, r3
 80050e0:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 80050e2:	2201      	movs	r2, #1
 80050e4:	2101      	movs	r1, #1
 80050e6:	4807      	ldr	r0, [pc, #28]	; (8005104 <XPT2046_ReadCMD+0x74>)
 80050e8:	f001 f83d 	bl	8006166 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	3301      	adds	r3, #1
 80050f0:	71fb      	strb	r3, [r7, #7]
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	2b0b      	cmp	r3, #11
 80050f6:	d9dd      	bls.n	80050b4 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 80050f8:	88bb      	ldrh	r3, [r7, #4]

}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40011800 	.word	0x40011800

08005108 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff77 	bl	8005008 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 800511a:	f7ff ffb9 	bl	8005090 <XPT2046_ReadCMD>
 800511e:	4603      	mov	r3, r0

}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 8005132:	2090      	movs	r0, #144	; 0x90
 8005134:	f7ff ffe8 	bl	8005108 <XPT2046_ReadAdc>
 8005138:	4603      	mov	r3, r0
 800513a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 800513c:	2001      	movs	r0, #1
 800513e:	f7ff ff47 	bl	8004fd0 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 8005142:	20d0      	movs	r0, #208	; 0xd0
 8005144:	f7ff ffe0 	bl	8005108 <XPT2046_ReadAdc>
 8005148:	4603      	mov	r3, r0
 800514a:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	89fa      	ldrh	r2, [r7, #14]
 8005150:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	89ba      	ldrh	r2, [r7, #12]
 8005156:	801a      	strh	r2, [r3, #0]

}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b092      	sub	sp, #72	; 0x48
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8005168:	2300      	movs	r3, #0
 800516a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 800516e:	f107 0308 	add.w	r3, r7, #8
 8005172:	2228      	movs	r2, #40	; 0x28
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f003 fb02 	bl	8008780 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 800517c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005180:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ffce 	bl	8005128 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 800518c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005190:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	3348      	adds	r3, #72	; 0x48
 8005198:	443b      	add	r3, r7
 800519a:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 800519e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051a2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80051a6:	330a      	adds	r3, #10
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	3348      	adds	r3, #72	; 0x48
 80051ac:	443b      	add	r3, r7
 80051ae:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 80051b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051b6:	3301      	adds	r3, #1
 80051b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 80051bc:	2110      	movs	r1, #16
 80051be:	4871      	ldr	r0, [pc, #452]	; (8005384 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80051c0:	f000 ffba 	bl	8006138 <HAL_GPIO_ReadPin>
 80051c4:	4603      	mov	r3, r0
			&& (ucCount < 10));
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <XPT2046_ReadAdc_Smooth_XY+0x72>
 80051ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d9d4      	bls.n	800517c <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 80051d2:	2110      	movs	r1, #16
 80051d4:	486b      	ldr	r0, [pc, #428]	; (8005384 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80051d6:	f000 ffaf 	bl	8006138 <HAL_GPIO_ReadPin>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 80051e0:	4b69      	ldr	r3, [pc, #420]	; (8005388 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 80051e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051ea:	2b0a      	cmp	r3, #10
 80051ec:	f040 80c4 	bne.w	8005378 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 80051f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
 80051f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 80051fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800520a:	e02b      	b.n	8005264 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 800520c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	3348      	adds	r3, #72	; 0x48
 8005214:	443b      	add	r3, r7
 8005216:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800521a:	461a      	mov	r2, r3
 800521c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521e:	4293      	cmp	r3, r2
 8005220:	dd08      	ble.n	8005234 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8005222:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	3348      	adds	r3, #72	; 0x48
 800522a:	443b      	add	r3, r7
 800522c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
 8005232:	e012      	b.n	800525a <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8005234:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	3348      	adds	r3, #72	; 0x48
 800523c:	443b      	add	r3, r7
 800523e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005242:	461a      	mov	r2, r3
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	4293      	cmp	r3, r2
 8005248:	da07      	bge.n	800525a <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 800524a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	3348      	adds	r3, #72	; 0x48
 8005252:	443b      	add	r3, r7
 8005254:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 800525a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800525e:	3301      	adds	r3, #1
 8005260:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005264:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005268:	2b09      	cmp	r3, #9
 800526a:	d9cf      	bls.n	800520c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005272:	e02f      	b.n	80052d4 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8005274:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005278:	330a      	adds	r3, #10
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	3348      	adds	r3, #72	; 0x48
 800527e:	443b      	add	r3, r7
 8005280:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005284:	461a      	mov	r2, r3
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	4293      	cmp	r3, r2
 800528a:	dd09      	ble.n	80052a0 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 800528c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005290:	330a      	adds	r3, #10
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	3348      	adds	r3, #72	; 0x48
 8005296:	443b      	add	r3, r7
 8005298:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
 800529e:	e014      	b.n	80052ca <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 80052a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052a4:	330a      	adds	r3, #10
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	3348      	adds	r3, #72	; 0x48
 80052aa:	443b      	add	r3, r7
 80052ac:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	4293      	cmp	r3, r2
 80052b6:	da08      	bge.n	80052ca <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 80052b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052bc:	330a      	adds	r3, #10
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	3348      	adds	r3, #72	; 0x48
 80052c2:	443b      	add	r3, r7
 80052c4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 80052ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052ce:	3301      	adds	r3, #1
 80052d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80052d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d9cb      	bls.n	8005274 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80052dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052e6:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 80052e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80052f2:	4413      	add	r3, r2
 80052f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80052f8:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 80052fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80052fe:	4413      	add	r3, r2
 8005300:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800530a:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 800530c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005310:	4413      	add	r3, r2
 8005312:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005316:	441a      	add	r2, r3
 8005318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531e:	1ad3      	subs	r3, r2, r3
				>> 3;
 8005320:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8005328:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800532c:	461a      	mov	r2, r3
 800532e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005332:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8005334:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005338:	4413      	add	r3, r2
 800533a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800533e:	4413      	add	r3, r2
 8005340:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8005344:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8005346:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800534a:	4413      	add	r3, r2
 800534c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8005350:	4413      	add	r3, r2
 8005352:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005356:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8005358:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800535c:	4413      	add	r3, r2
 800535e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005362:	441a      	add	r2, r3
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	1ad3      	subs	r3, r2, r3
				>> 3;
 800536c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	805a      	strh	r2, [r3, #2]

		return 1;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8005378:	2300      	movs	r3, #0

}
 800537a:	4618      	mov	r0, r3
 800537c:	3748      	adds	r7, #72	; 0x48
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40011800 	.word	0x40011800
 8005388:	2000089c 	.word	0x2000089c

0800538c <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 800538c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fedd 	bl	8005160 <XPT2046_ReadAdc_Smooth_XY>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d06e      	beq.n	800548a <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80053b2:	893b      	ldrh	r3, [r7, #8]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fb f891 	bl	80004dc <__aeabi_i2d>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fb f8f5 	bl	80005b0 <__aeabi_dmul>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4690      	mov	r8, r2
 80053cc:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fb f880 	bl	80004dc <__aeabi_i2d>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4620      	mov	r0, r4
 80053e2:	4629      	mov	r1, r5
 80053e4:	f7fb f8e4 	bl	80005b0 <__aeabi_dmul>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4640      	mov	r0, r8
 80053ee:	4649      	mov	r1, r9
 80053f0:	f7fa ff28 	bl	8000244 <__adddf3>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005402:	f7fa ff1f 	bl	8000244 <__adddf3>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	f7fb fb91 	bl	8000b34 <__aeabi_d2uiz>
 8005412:	4603      	mov	r3, r0
 8005414:	b29a      	uxth	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005420:	893b      	ldrh	r3, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fb f85a 	bl	80004dc <__aeabi_i2d>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fb f8be 	bl	80005b0 <__aeabi_dmul>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4690      	mov	r8, r2
 800543a:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005442:	897b      	ldrh	r3, [r7, #10]
 8005444:	4618      	mov	r0, r3
 8005446:	f7fb f849 	bl	80004dc <__aeabi_i2d>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fb f8ad 	bl	80005b0 <__aeabi_dmul>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4640      	mov	r0, r8
 800545c:	4649      	mov	r1, r9
 800545e:	f7fa fef1 	bl	8000244 <__adddf3>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005470:	f7fa fee8 	bl	8000244 <__adddf3>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8005478:	4610      	mov	r0, r2
 800547a:	4619      	mov	r1, r3
 800547c:	f7fb fb5a 	bl	8000b34 <__aeabi_d2uiz>
 8005480:	4603      	mov	r3, r0
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	805a      	strh	r2, [r3, #2]
 8005488:	e001      	b.n	800548e <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 800548e:	7bfb      	ldrb	r3, [r7, #15]

}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800549c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800549c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800549e:	e003      	b.n	80054a8 <LoopCopyDataInit>

080054a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80054a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80054a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80054a6:	3104      	adds	r1, #4

080054a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80054a8:	480a      	ldr	r0, [pc, #40]	; (80054d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80054ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80054ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80054b0:	d3f6      	bcc.n	80054a0 <CopyDataInit>
  ldr r2, =_sbss
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80054b4:	e002      	b.n	80054bc <LoopFillZerobss>

080054b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80054b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80054b8:	f842 3b04 	str.w	r3, [r2], #4

080054bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80054bc:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80054be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80054c0:	d3f9      	bcc.n	80054b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054c2:	f7ff f941 	bl	8004748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054c6:	f003 f937 	bl	8008738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80054ca:	f7fd fa57 	bl	800297c <main>
  bx lr
 80054ce:	4770      	bx	lr
  ldr r3, =_sidata
 80054d0:	080098d0 	.word	0x080098d0
  ldr r0, =_sdata
 80054d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80054d8:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 80054dc:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 80054e0:	200008b4 	.word	0x200008b4

080054e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80054e4:	e7fe      	b.n	80054e4 <ADC1_2_IRQHandler>
	...

080054e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <HAL_Init+0x28>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a07      	ldr	r2, [pc, #28]	; (8005510 <HAL_Init+0x28>)
 80054f2:	f043 0310 	orr.w	r3, r3, #16
 80054f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054f8:	2003      	movs	r0, #3
 80054fa:	f000 fb3b 	bl	8005b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054fe:	2000      	movs	r0, #0
 8005500:	f000 f808 	bl	8005514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005504:	f7fe ffba 	bl	800447c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40022000 	.word	0x40022000

08005514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <HAL_InitTick+0x54>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b12      	ldr	r3, [pc, #72]	; (800556c <HAL_InitTick+0x58>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800552a:	fbb3 f3f1 	udiv	r3, r3, r1
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fb53 	bl	8005bde <HAL_SYSTICK_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e00e      	b.n	8005560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d80a      	bhi.n	800555e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005548:	2200      	movs	r2, #0
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	f000 fb1b 	bl	8005b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005554:	4a06      	ldr	r2, [pc, #24]	; (8005570 <HAL_InitTick+0x5c>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000004 	.word	0x20000004
 800556c:	2000003c 	.word	0x2000003c
 8005570:	20000038 	.word	0x20000038

08005574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_IncTick+0x1c>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_IncTick+0x20>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4413      	add	r3, r2
 8005584:	4a03      	ldr	r2, [pc, #12]	; (8005594 <HAL_IncTick+0x20>)
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr
 8005590:	2000003c 	.word	0x2000003c
 8005594:	200008a0 	.word	0x200008a0

08005598 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return uwTick;
 800559c:	4b02      	ldr	r3, [pc, #8]	; (80055a8 <HAL_GetTick+0x10>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	200008a0 	.word	0x200008a0

080055ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0ce      	b.n	800576c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb fe14 	bl	8001218 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9bd 	bl	8005970 <ADC_ConversionStop_Disable>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 80a9 	bne.w	800575a <HAL_ADC_Init+0x1ae>
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 80a5 	bne.w	800575a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	f043 0202 	orr.w	r2, r3, #2
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4951      	ldr	r1, [pc, #324]	; (8005774 <HAL_ADC_Init+0x1c8>)
 800562e:	428b      	cmp	r3, r1
 8005630:	d10a      	bne.n	8005648 <HAL_ADC_Init+0x9c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800563a:	d002      	beq.n	8005642 <HAL_ADC_Init+0x96>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	e004      	b.n	800564c <HAL_ADC_Init+0xa0>
 8005642:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005646:	e001      	b.n	800564c <HAL_ADC_Init+0xa0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800564c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8005654:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005664:	d003      	beq.n	800566e <HAL_ADC_Init+0xc2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d102      	bne.n	8005674 <HAL_ADC_Init+0xc8>
 800566e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005672:	e000      	b.n	8005676 <HAL_ADC_Init+0xca>
 8005674:	2300      	movs	r3, #0
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d119      	bne.n	80056b8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	3b01      	subs	r3, #1
 8005692:	035a      	lsls	r2, r3, #13
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e00b      	b.n	80056b8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	f043 0220 	orr.w	r2, r3, #32
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	f043 0201 	orr.w	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	4b29      	ldr	r3, [pc, #164]	; (8005778 <HAL_ADC_Init+0x1cc>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	430b      	orrs	r3, r1
 80056de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e8:	d003      	beq.n	80056f2 <HAL_ADC_Init+0x146>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d104      	bne.n	80056fc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	051b      	lsls	r3, r3, #20
 80056fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	430a      	orrs	r2, r1
 800570e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_ADC_Init+0x1d0>)
 8005718:	4013      	ands	r3, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d10b      	bne.n	8005738 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	f043 0201 	orr.w	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005736:	e018      	b.n	800576a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	f023 0312 	bic.w	r3, r3, #18
 8005740:	f043 0210 	orr.w	r2, r3, #16
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	f043 0201 	orr.w	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005758:	e007      	b.n	800576a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	f043 0210 	orr.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40013c00 	.word	0x40013c00
 8005778:	ffe1f7fd 	.word	0xffe1f7fd
 800577c:	ff1f0efe 	.word	0xff1f0efe

08005780 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x20>
 800579c:	2302      	movs	r3, #2
 800579e:	e0dc      	b.n	800595a <HAL_ADC_ConfigChannel+0x1da>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	d81c      	bhi.n	80057ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	3b05      	subs	r3, #5
 80057c2:	221f      	movs	r2, #31
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	4019      	ands	r1, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	3b05      	subs	r3, #5
 80057dc:	fa00 f203 	lsl.w	r2, r0, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	635a      	str	r2, [r3, #52]	; 0x34
 80057e8:	e03c      	b.n	8005864 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	d81c      	bhi.n	800582c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	3b23      	subs	r3, #35	; 0x23
 8005804:	221f      	movs	r2, #31
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	4019      	ands	r1, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	3b23      	subs	r3, #35	; 0x23
 800581e:	fa00 f203 	lsl.w	r2, r0, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
 800582a:	e01b      	b.n	8005864 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	3b41      	subs	r3, #65	; 0x41
 800583e:	221f      	movs	r2, #31
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	4019      	ands	r1, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	3b41      	subs	r3, #65	; 0x41
 8005858:	fa00 f203 	lsl.w	r2, r0, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b09      	cmp	r3, #9
 800586a:	d91c      	bls.n	80058a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68d9      	ldr	r1, [r3, #12]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4413      	add	r3, r2
 800587c:	3b1e      	subs	r3, #30
 800587e:	2207      	movs	r2, #7
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	4019      	ands	r1, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	6898      	ldr	r0, [r3, #8]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	3b1e      	subs	r3, #30
 8005898:	fa00 f203 	lsl.w	r2, r0, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	e019      	b.n	80058da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6919      	ldr	r1, [r3, #16]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	2207      	movs	r2, #7
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	4019      	ands	r1, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6898      	ldr	r0, [r3, #8]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	4413      	add	r3, r2
 80058ce:	fa00 f203 	lsl.w	r2, r0, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d003      	beq.n	80058ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80058e6:	2b11      	cmp	r3, #17
 80058e8:	d132      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <HAL_ADC_ConfigChannel+0x1e4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d125      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d126      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005910:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b10      	cmp	r3, #16
 8005918:	d11a      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <HAL_ADC_ConfigChannel+0x1e8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a13      	ldr	r2, [pc, #76]	; (800596c <HAL_ADC_ConfigChannel+0x1ec>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	0c9a      	lsrs	r2, r3, #18
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005930:	e002      	b.n	8005938 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	3b01      	subs	r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f9      	bne.n	8005932 <HAL_ADC_ConfigChannel+0x1b2>
 800593e:	e007      	b.n	8005950 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr
 8005964:	40012400 	.word	0x40012400
 8005968:	20000004 	.word	0x20000004
 800596c:	431bde83 	.word	0x431bde83

08005970 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b01      	cmp	r3, #1
 8005988:	d127      	bne.n	80059da <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800599a:	f7ff fdfd 	bl	8005598 <HAL_GetTick>
 800599e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80059a0:	e014      	b.n	80059cc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80059a2:	f7ff fdf9 	bl	8005598 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d90d      	bls.n	80059cc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	f043 0210 	orr.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f043 0201 	orr.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e007      	b.n	80059dc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d0e3      	beq.n	80059a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <NVIC_SetPriorityGrouping+0x44>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a00:	4013      	ands	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a16:	4a04      	ldr	r2, [pc, #16]	; (8005a28 <NVIC_SetPriorityGrouping+0x44>)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	60d3      	str	r3, [r2, #12]
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <NVIC_GetPriorityGrouping+0x18>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f003 0307 	and.w	r3, r3, #7
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	e000ed00 	.word	0xe000ed00

08005a48 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	f003 021f 	and.w	r2, r3, #31
 8005a58:	4906      	ldr	r1, [pc, #24]	; (8005a74 <NVIC_EnableIRQ+0x2c>)
 8005a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2001      	movs	r0, #1
 8005a62:	fa00 f202 	lsl.w	r2, r0, r2
 8005a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr
 8005a74:	e000e100 	.word	0xe000e100

08005a78 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	6039      	str	r1, [r7, #0]
 8005a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da0b      	bge.n	8005aa4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	490c      	ldr	r1, [pc, #48]	; (8005ac4 <NVIC_SetPriority+0x4c>)
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	0112      	lsls	r2, r2, #4
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005aa2:	e009      	b.n	8005ab8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4907      	ldr	r1, [pc, #28]	; (8005ac8 <NVIC_SetPriority+0x50>)
 8005aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aae:	0112      	lsls	r2, r2, #4
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000ed00 	.word	0xe000ed00
 8005ac8:	e000e100 	.word	0xe000e100

08005acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f1c3 0307 	rsb	r3, r3, #7
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	bf28      	it	cs
 8005aea:	2304      	movcs	r3, #4
 8005aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	3304      	adds	r3, #4
 8005af2:	2b06      	cmp	r3, #6
 8005af4:	d902      	bls.n	8005afc <NVIC_EncodePriority+0x30>
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3b03      	subs	r3, #3
 8005afa:	e000      	b.n	8005afe <NVIC_EncodePriority+0x32>
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43da      	mvns	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	401a      	ands	r2, r3
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	43d9      	mvns	r1, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b24:	4313      	orrs	r3, r2
         );
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3724      	adds	r7, #36	; 0x24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b40:	d301      	bcc.n	8005b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b42:	2301      	movs	r3, #1
 8005b44:	e00f      	b.n	8005b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b46:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <SysTick_Config+0x40>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b4e:	210f      	movs	r1, #15
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b54:	f7ff ff90 	bl	8005a78 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <SysTick_Config+0x40>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b5e:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <SysTick_Config+0x40>)
 8005b60:	2207      	movs	r2, #7
 8005b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	e000e010 	.word	0xe000e010

08005b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff31 	bl	80059e4 <NVIC_SetPriorityGrouping>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	4603      	mov	r3, r0
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
 8005b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b9c:	f7ff ff46 	bl	8005a2c <NVIC_GetPriorityGrouping>
 8005ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	6978      	ldr	r0, [r7, #20]
 8005ba8:	f7ff ff90 	bl	8005acc <NVIC_EncodePriority>
 8005bac:	4602      	mov	r2, r0
 8005bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff ff5f 	bl	8005a78 <NVIC_SetPriority>
}
 8005bba:	bf00      	nop
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	4603      	mov	r3, r0
 8005bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff ff39 	bl	8005a48 <NVIC_EnableIRQ>
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ffa2 	bl	8005b30 <SysTick_Config>
 8005bec:	4603      	mov	r3, r0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d005      	beq.n	8005c1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2204      	movs	r2, #4
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
 8005c18:	e0d6      	b.n	8005dc8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 020e 	bic.w	r2, r2, #14
 8005c28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b64      	ldr	r3, [pc, #400]	; (8005dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d958      	bls.n	8005cf8 <HAL_DMA_Abort_IT+0x100>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a63      	ldr	r2, [pc, #396]	; (8005dd8 <HAL_DMA_Abort_IT+0x1e0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d04f      	beq.n	8005cf0 <HAL_DMA_Abort_IT+0xf8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a61      	ldr	r2, [pc, #388]	; (8005ddc <HAL_DMA_Abort_IT+0x1e4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d048      	beq.n	8005cec <HAL_DMA_Abort_IT+0xf4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a60      	ldr	r2, [pc, #384]	; (8005de0 <HAL_DMA_Abort_IT+0x1e8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d040      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0xee>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5e      	ldr	r2, [pc, #376]	; (8005de4 <HAL_DMA_Abort_IT+0x1ec>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d038      	beq.n	8005ce0 <HAL_DMA_Abort_IT+0xe8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5d      	ldr	r2, [pc, #372]	; (8005de8 <HAL_DMA_Abort_IT+0x1f0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d030      	beq.n	8005cda <HAL_DMA_Abort_IT+0xe2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5b      	ldr	r2, [pc, #364]	; (8005dec <HAL_DMA_Abort_IT+0x1f4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d028      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0xdc>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a53      	ldr	r2, [pc, #332]	; (8005dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d020      	beq.n	8005cce <HAL_DMA_Abort_IT+0xd6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a57      	ldr	r2, [pc, #348]	; (8005df0 <HAL_DMA_Abort_IT+0x1f8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d019      	beq.n	8005cca <HAL_DMA_Abort_IT+0xd2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a56      	ldr	r2, [pc, #344]	; (8005df4 <HAL_DMA_Abort_IT+0x1fc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d012      	beq.n	8005cc6 <HAL_DMA_Abort_IT+0xce>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a54      	ldr	r2, [pc, #336]	; (8005df8 <HAL_DMA_Abort_IT+0x200>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a53      	ldr	r2, [pc, #332]	; (8005dfc <HAL_DMA_Abort_IT+0x204>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d102      	bne.n	8005cba <HAL_DMA_Abort_IT+0xc2>
 8005cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb8:	e01b      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cbe:	e018      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cc4:	e015      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cc6:	2310      	movs	r3, #16
 8005cc8:	e013      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e011      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cd2:	e00e      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005cd8:	e00b      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cde:	e008      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce4:	e005      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cea:	e002      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cec:	2310      	movs	r3, #16
 8005cee:	e000      	b.n	8005cf2 <HAL_DMA_Abort_IT+0xfa>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4a43      	ldr	r2, [pc, #268]	; (8005e00 <HAL_DMA_Abort_IT+0x208>)
 8005cf4:	6053      	str	r3, [r2, #4]
 8005cf6:	e057      	b.n	8005da8 <HAL_DMA_Abort_IT+0x1b0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a36      	ldr	r2, [pc, #216]	; (8005dd8 <HAL_DMA_Abort_IT+0x1e0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04f      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x1aa>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a35      	ldr	r2, [pc, #212]	; (8005ddc <HAL_DMA_Abort_IT+0x1e4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d048      	beq.n	8005d9e <HAL_DMA_Abort_IT+0x1a6>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a33      	ldr	r2, [pc, #204]	; (8005de0 <HAL_DMA_Abort_IT+0x1e8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d040      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x1a0>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a32      	ldr	r2, [pc, #200]	; (8005de4 <HAL_DMA_Abort_IT+0x1ec>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d038      	beq.n	8005d92 <HAL_DMA_Abort_IT+0x19a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a30      	ldr	r2, [pc, #192]	; (8005de8 <HAL_DMA_Abort_IT+0x1f0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d030      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x194>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2f      	ldr	r2, [pc, #188]	; (8005dec <HAL_DMA_Abort_IT+0x1f4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d028      	beq.n	8005d86 <HAL_DMA_Abort_IT+0x18e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a26      	ldr	r2, [pc, #152]	; (8005dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d020      	beq.n	8005d80 <HAL_DMA_Abort_IT+0x188>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <HAL_DMA_Abort_IT+0x1f8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d019      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x184>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <HAL_DMA_Abort_IT+0x1fc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d012      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x180>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <HAL_DMA_Abort_IT+0x200>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00a      	beq.n	8005d72 <HAL_DMA_Abort_IT+0x17a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <HAL_DMA_Abort_IT+0x204>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d102      	bne.n	8005d6c <HAL_DMA_Abort_IT+0x174>
 8005d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d6a:	e01b      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d70:	e018      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d76:	e015      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	e013      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e011      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d84:	e00e      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d8a:	e00b      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d90:	e008      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d96:	e005      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d9c:	e002      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005d9e:	2310      	movs	r3, #16
 8005da0:	e000      	b.n	8005da4 <HAL_DMA_Abort_IT+0x1ac>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <HAL_DMA_Abort_IT+0x20c>)
 8005da6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
    } 
  }
  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40020080 	.word	0x40020080
 8005dd8:	40020008 	.word	0x40020008
 8005ddc:	4002001c 	.word	0x4002001c
 8005de0:	40020030 	.word	0x40020030
 8005de4:	40020044 	.word	0x40020044
 8005de8:	40020058 	.word	0x40020058
 8005dec:	4002006c 	.word	0x4002006c
 8005df0:	40020408 	.word	0x40020408
 8005df4:	4002041c 	.word	0x4002041c
 8005df8:	40020430 	.word	0x40020430
 8005dfc:	40020444 	.word	0x40020444
 8005e00:	40020400 	.word	0x40020400
 8005e04:	40020000 	.word	0x40020000

08005e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b08b      	sub	sp, #44	; 0x2c
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005e26:	2300      	movs	r3, #0
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	e179      	b.n	8006120 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	f040 8168 	bne.w	800611a <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4a96      	ldr	r2, [pc, #600]	; (80060a8 <HAL_GPIO_Init+0x2a0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d05e      	beq.n	8005f12 <HAL_GPIO_Init+0x10a>
 8005e54:	4a94      	ldr	r2, [pc, #592]	; (80060a8 <HAL_GPIO_Init+0x2a0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d875      	bhi.n	8005f46 <HAL_GPIO_Init+0x13e>
 8005e5a:	4a94      	ldr	r2, [pc, #592]	; (80060ac <HAL_GPIO_Init+0x2a4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d058      	beq.n	8005f12 <HAL_GPIO_Init+0x10a>
 8005e60:	4a92      	ldr	r2, [pc, #584]	; (80060ac <HAL_GPIO_Init+0x2a4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d86f      	bhi.n	8005f46 <HAL_GPIO_Init+0x13e>
 8005e66:	4a92      	ldr	r2, [pc, #584]	; (80060b0 <HAL_GPIO_Init+0x2a8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d052      	beq.n	8005f12 <HAL_GPIO_Init+0x10a>
 8005e6c:	4a90      	ldr	r2, [pc, #576]	; (80060b0 <HAL_GPIO_Init+0x2a8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d869      	bhi.n	8005f46 <HAL_GPIO_Init+0x13e>
 8005e72:	4a90      	ldr	r2, [pc, #576]	; (80060b4 <HAL_GPIO_Init+0x2ac>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d04c      	beq.n	8005f12 <HAL_GPIO_Init+0x10a>
 8005e78:	4a8e      	ldr	r2, [pc, #568]	; (80060b4 <HAL_GPIO_Init+0x2ac>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d863      	bhi.n	8005f46 <HAL_GPIO_Init+0x13e>
 8005e7e:	4a8e      	ldr	r2, [pc, #568]	; (80060b8 <HAL_GPIO_Init+0x2b0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d046      	beq.n	8005f12 <HAL_GPIO_Init+0x10a>
 8005e84:	4a8c      	ldr	r2, [pc, #560]	; (80060b8 <HAL_GPIO_Init+0x2b0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d85d      	bhi.n	8005f46 <HAL_GPIO_Init+0x13e>
 8005e8a:	2b12      	cmp	r3, #18
 8005e8c:	d82a      	bhi.n	8005ee4 <HAL_GPIO_Init+0xdc>
 8005e8e:	2b12      	cmp	r3, #18
 8005e90:	d859      	bhi.n	8005f46 <HAL_GPIO_Init+0x13e>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <HAL_GPIO_Init+0x90>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005f13 	.word	0x08005f13
 8005e9c:	08005eed 	.word	0x08005eed
 8005ea0:	08005eff 	.word	0x08005eff
 8005ea4:	08005f41 	.word	0x08005f41
 8005ea8:	08005f47 	.word	0x08005f47
 8005eac:	08005f47 	.word	0x08005f47
 8005eb0:	08005f47 	.word	0x08005f47
 8005eb4:	08005f47 	.word	0x08005f47
 8005eb8:	08005f47 	.word	0x08005f47
 8005ebc:	08005f47 	.word	0x08005f47
 8005ec0:	08005f47 	.word	0x08005f47
 8005ec4:	08005f47 	.word	0x08005f47
 8005ec8:	08005f47 	.word	0x08005f47
 8005ecc:	08005f47 	.word	0x08005f47
 8005ed0:	08005f47 	.word	0x08005f47
 8005ed4:	08005f47 	.word	0x08005f47
 8005ed8:	08005f47 	.word	0x08005f47
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	4a75      	ldr	r2, [pc, #468]	; (80060bc <HAL_GPIO_Init+0x2b4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005eea:	e02c      	b.n	8005f46 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	623b      	str	r3, [r7, #32]
          break;
 8005ef2:	e029      	b.n	8005f48 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	623b      	str	r3, [r7, #32]
          break;
 8005efc:	e024      	b.n	8005f48 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	3308      	adds	r3, #8
 8005f04:	623b      	str	r3, [r7, #32]
          break;
 8005f06:	e01f      	b.n	8005f48 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	330c      	adds	r3, #12
 8005f0e:	623b      	str	r3, [r7, #32]
          break;
 8005f10:	e01a      	b.n	8005f48 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005f1a:	2304      	movs	r3, #4
 8005f1c:	623b      	str	r3, [r7, #32]
          break;
 8005f1e:	e013      	b.n	8005f48 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d105      	bne.n	8005f34 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f28:	2308      	movs	r3, #8
 8005f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	611a      	str	r2, [r3, #16]
          break;
 8005f32:	e009      	b.n	8005f48 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f34:	2308      	movs	r3, #8
 8005f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	615a      	str	r2, [r3, #20]
          break;
 8005f3e:	e003      	b.n	8005f48 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f40:	2300      	movs	r3, #0
 8005f42:	623b      	str	r3, [r7, #32]
          break;
 8005f44:	e000      	b.n	8005f48 <HAL_GPIO_Init+0x140>
          break;
 8005f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2bff      	cmp	r3, #255	; 0xff
 8005f4c:	d801      	bhi.n	8005f52 <HAL_GPIO_Init+0x14a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	e001      	b.n	8005f56 <HAL_GPIO_Init+0x14e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3304      	adds	r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2bff      	cmp	r3, #255	; 0xff
 8005f5c:	d802      	bhi.n	8005f64 <HAL_GPIO_Init+0x15c>
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	e002      	b.n	8005f6a <HAL_GPIO_Init+0x162>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	3b08      	subs	r3, #8
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	210f      	movs	r1, #15
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	fa01 f303 	lsl.w	r3, r1, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	6a39      	ldr	r1, [r7, #32]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80c1 	beq.w	800611a <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f98:	4b49      	ldr	r3, [pc, #292]	; (80060c0 <HAL_GPIO_Init+0x2b8>)
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	4a48      	ldr	r2, [pc, #288]	; (80060c0 <HAL_GPIO_Init+0x2b8>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	6193      	str	r3, [r2, #24]
 8005fa4:	4b46      	ldr	r3, [pc, #280]	; (80060c0 <HAL_GPIO_Init+0x2b8>)
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8005fb0:	4a44      	ldr	r2, [pc, #272]	; (80060c4 <HAL_GPIO_Init+0x2bc>)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fbc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	220f      	movs	r2, #15
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <HAL_GPIO_Init+0x2c0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01f      	beq.n	800601c <HAL_GPIO_Init+0x214>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3b      	ldr	r2, [pc, #236]	; (80060cc <HAL_GPIO_Init+0x2c4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d019      	beq.n	8006018 <HAL_GPIO_Init+0x210>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3a      	ldr	r2, [pc, #232]	; (80060d0 <HAL_GPIO_Init+0x2c8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <HAL_GPIO_Init+0x20c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a39      	ldr	r2, [pc, #228]	; (80060d4 <HAL_GPIO_Init+0x2cc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00d      	beq.n	8006010 <HAL_GPIO_Init+0x208>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a38      	ldr	r2, [pc, #224]	; (80060d8 <HAL_GPIO_Init+0x2d0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d007      	beq.n	800600c <HAL_GPIO_Init+0x204>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a37      	ldr	r2, [pc, #220]	; (80060dc <HAL_GPIO_Init+0x2d4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d101      	bne.n	8006008 <HAL_GPIO_Init+0x200>
 8006004:	2305      	movs	r3, #5
 8006006:	e00a      	b.n	800601e <HAL_GPIO_Init+0x216>
 8006008:	2306      	movs	r3, #6
 800600a:	e008      	b.n	800601e <HAL_GPIO_Init+0x216>
 800600c:	2304      	movs	r3, #4
 800600e:	e006      	b.n	800601e <HAL_GPIO_Init+0x216>
 8006010:	2303      	movs	r3, #3
 8006012:	e004      	b.n	800601e <HAL_GPIO_Init+0x216>
 8006014:	2302      	movs	r3, #2
 8006016:	e002      	b.n	800601e <HAL_GPIO_Init+0x216>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_GPIO_Init+0x216>
 800601c:	2300      	movs	r3, #0
 800601e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006020:	f002 0203 	and.w	r2, r2, #3
 8006024:	0092      	lsls	r2, r2, #2
 8006026:	4093      	lsls	r3, r2
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800602e:	4925      	ldr	r1, [pc, #148]	; (80060c4 <HAL_GPIO_Init+0x2bc>)
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	089b      	lsrs	r3, r3, #2
 8006034:	3302      	adds	r3, #2
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d006      	beq.n	8006056 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006048:	4b25      	ldr	r3, [pc, #148]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4924      	ldr	r1, [pc, #144]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]
 8006054:	e006      	b.n	8006064 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	43db      	mvns	r3, r3
 800605e:	4920      	ldr	r1, [pc, #128]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 8006060:	4013      	ands	r3, r2
 8006062:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d006      	beq.n	800607e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006070:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	491a      	ldr	r1, [pc, #104]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
 800607c:	e006      	b.n	800608c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800607e:	4b18      	ldr	r3, [pc, #96]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	43db      	mvns	r3, r3
 8006086:	4916      	ldr	r1, [pc, #88]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 8006088:	4013      	ands	r3, r2
 800608a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d025      	beq.n	80060e4 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006098:	4b11      	ldr	r3, [pc, #68]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	4910      	ldr	r1, [pc, #64]	; (80060e0 <HAL_GPIO_Init+0x2d8>)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	608b      	str	r3, [r1, #8]
 80060a4:	e025      	b.n	80060f2 <HAL_GPIO_Init+0x2ea>
 80060a6:	bf00      	nop
 80060a8:	10320000 	.word	0x10320000
 80060ac:	10310000 	.word	0x10310000
 80060b0:	10220000 	.word	0x10220000
 80060b4:	10210000 	.word	0x10210000
 80060b8:	10120000 	.word	0x10120000
 80060bc:	10110000 	.word	0x10110000
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40010000 	.word	0x40010000
 80060c8:	40010800 	.word	0x40010800
 80060cc:	40010c00 	.word	0x40010c00
 80060d0:	40011000 	.word	0x40011000
 80060d4:	40011400 	.word	0x40011400
 80060d8:	40011800 	.word	0x40011800
 80060dc:	40011c00 	.word	0x40011c00
 80060e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <HAL_GPIO_Init+0x32c>)
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	43db      	mvns	r3, r3
 80060ec:	4911      	ldr	r1, [pc, #68]	; (8006134 <HAL_GPIO_Init+0x32c>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80060fe:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <HAL_GPIO_Init+0x32c>)
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	490c      	ldr	r1, [pc, #48]	; (8006134 <HAL_GPIO_Init+0x32c>)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	4313      	orrs	r3, r2
 8006108:	60cb      	str	r3, [r1, #12]
 800610a:	e006      	b.n	800611a <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <HAL_GPIO_Init+0x32c>)
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	43db      	mvns	r3, r3
 8006114:	4907      	ldr	r1, [pc, #28]	; (8006134 <HAL_GPIO_Init+0x32c>)
 8006116:	4013      	ands	r3, r2
 8006118:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	3301      	adds	r3, #1
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	2b0f      	cmp	r3, #15
 8006124:	f67f ae82 	bls.w	8005e2c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	372c      	adds	r7, #44	; 0x2c
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr
 8006134:	40010400 	.word	0x40010400

08006138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	887b      	ldrh	r3, [r7, #2]
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e001      	b.n	800615a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	807b      	strh	r3, [r7, #2]
 8006172:	4613      	mov	r3, r2
 8006174:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006176:	787b      	ldrb	r3, [r7, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800617c:	887a      	ldrh	r2, [r7, #2]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006182:	e003      	b.n	800618c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	041a      	lsls	r2, r3, #16
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	611a      	str	r2, [r3, #16]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
	...

08006198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80061a2:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d006      	beq.n	80061bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061ae:	4a05      	ldr	r2, [pc, #20]	; (80061c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f806 	bl	80061c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40010400 	.word	0x40010400

080061c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8087 	beq.w	8006304 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80061f6:	4b92      	ldr	r3, [pc, #584]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d00c      	beq.n	800621c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006202:	4b8f      	ldr	r3, [pc, #572]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 030c 	and.w	r3, r3, #12
 800620a:	2b08      	cmp	r3, #8
 800620c:	d112      	bne.n	8006234 <HAL_RCC_OscConfig+0x58>
 800620e:	4b8c      	ldr	r3, [pc, #560]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621a:	d10b      	bne.n	8006234 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	4b88      	ldr	r3, [pc, #544]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d06c      	beq.n	8006302 <HAL_RCC_OscConfig+0x126>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d168      	bne.n	8006302 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e22d      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d106      	bne.n	800624c <HAL_RCC_OscConfig+0x70>
 800623e:	4b80      	ldr	r3, [pc, #512]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7f      	ldr	r2, [pc, #508]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e02e      	b.n	80062aa <HAL_RCC_OscConfig+0xce>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10c      	bne.n	800626e <HAL_RCC_OscConfig+0x92>
 8006254:	4b7a      	ldr	r3, [pc, #488]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a79      	ldr	r2, [pc, #484]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800625a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	4b77      	ldr	r3, [pc, #476]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a76      	ldr	r2, [pc, #472]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e01d      	b.n	80062aa <HAL_RCC_OscConfig+0xce>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006276:	d10c      	bne.n	8006292 <HAL_RCC_OscConfig+0xb6>
 8006278:	4b71      	ldr	r3, [pc, #452]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a70      	ldr	r2, [pc, #448]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800627e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	4b6e      	ldr	r3, [pc, #440]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a6d      	ldr	r2, [pc, #436]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800628a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	e00b      	b.n	80062aa <HAL_RCC_OscConfig+0xce>
 8006292:	4b6b      	ldr	r3, [pc, #428]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6a      	ldr	r2, [pc, #424]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b68      	ldr	r3, [pc, #416]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a67      	ldr	r2, [pc, #412]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 80062a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d013      	beq.n	80062da <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b2:	f7ff f971 	bl	8005598 <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ba:	f7ff f96d 	bl	8005598 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b64      	cmp	r3, #100	; 0x64
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e1e1      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062cc:	4b5c      	ldr	r3, [pc, #368]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <HAL_RCC_OscConfig+0xde>
 80062d8:	e014      	b.n	8006304 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062da:	f7ff f95d 	bl	8005598 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e2:	f7ff f959 	bl	8005598 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b64      	cmp	r3, #100	; 0x64
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e1cd      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062f4:	4b52      	ldr	r3, [pc, #328]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f0      	bne.n	80062e2 <HAL_RCC_OscConfig+0x106>
 8006300:	e000      	b.n	8006304 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006302:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d063      	beq.n	80063d8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006310:	4b4b      	ldr	r3, [pc, #300]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800631c:	4b48      	ldr	r3, [pc, #288]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	2b08      	cmp	r3, #8
 8006326:	d11c      	bne.n	8006362 <HAL_RCC_OscConfig+0x186>
 8006328:	4b45      	ldr	r3, [pc, #276]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006334:	4b42      	ldr	r3, [pc, #264]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_OscConfig+0x170>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d001      	beq.n	800634c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e1a1      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634c:	4b3c      	ldr	r3, [pc, #240]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4939      	ldr	r1, [pc, #228]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006360:	e03a      	b.n	80063d8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d020      	beq.n	80063ac <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800636a:	4b36      	ldr	r3, [pc, #216]	; (8006444 <HAL_RCC_OscConfig+0x268>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006370:	f7ff f912 	bl	8005598 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006378:	f7ff f90e 	bl	8005598 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e182      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800638a:	4b2d      	ldr	r3, [pc, #180]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006396:	4b2a      	ldr	r3, [pc, #168]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4926      	ldr	r1, [pc, #152]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	600b      	str	r3, [r1, #0]
 80063aa:	e015      	b.n	80063d8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ac:	4b25      	ldr	r3, [pc, #148]	; (8006444 <HAL_RCC_OscConfig+0x268>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b2:	f7ff f8f1 	bl	8005598 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ba:	f7ff f8ed 	bl	8005598 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e161      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063cc:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f0      	bne.n	80063ba <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d039      	beq.n	8006458 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d019      	beq.n	8006420 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ec:	4b16      	ldr	r3, [pc, #88]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f2:	f7ff f8d1 	bl	8005598 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063fa:	f7ff f8cd 	bl	8005598 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e141      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <HAL_RCC_OscConfig+0x264>)
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8006418:	2001      	movs	r0, #1
 800641a:	f000 fadf 	bl	80069dc <RCC_Delay>
 800641e:	e01b      	b.n	8006458 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006420:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7ff f8b7 	bl	8005598 <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800642c:	e00e      	b.n	800644c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800642e:	f7ff f8b3 	bl	8005598 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d907      	bls.n	800644c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e127      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
 8006440:	40021000 	.word	0x40021000
 8006444:	42420000 	.word	0x42420000
 8006448:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	4b92      	ldr	r3, [pc, #584]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ea      	bne.n	800642e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80a6 	beq.w	80065b2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646a:	4b8b      	ldr	r3, [pc, #556]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10d      	bne.n	8006492 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	4b88      	ldr	r3, [pc, #544]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	4a87      	ldr	r2, [pc, #540]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800647c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006480:	61d3      	str	r3, [r2, #28]
 8006482:	4b85      	ldr	r3, [pc, #532]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006492:	4b82      	ldr	r3, [pc, #520]	; (800669c <HAL_RCC_OscConfig+0x4c0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d118      	bne.n	80064d0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649e:	4b7f      	ldr	r3, [pc, #508]	; (800669c <HAL_RCC_OscConfig+0x4c0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a7e      	ldr	r2, [pc, #504]	; (800669c <HAL_RCC_OscConfig+0x4c0>)
 80064a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064aa:	f7ff f875 	bl	8005598 <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b2:	f7ff f871 	bl	8005598 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b64      	cmp	r3, #100	; 0x64
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e0e5      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c4:	4b75      	ldr	r3, [pc, #468]	; (800669c <HAL_RCC_OscConfig+0x4c0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d106      	bne.n	80064e6 <HAL_RCC_OscConfig+0x30a>
 80064d8:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4a6e      	ldr	r2, [pc, #440]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6213      	str	r3, [r2, #32]
 80064e4:	e02d      	b.n	8006542 <HAL_RCC_OscConfig+0x366>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10c      	bne.n	8006508 <HAL_RCC_OscConfig+0x32c>
 80064ee:	4b6a      	ldr	r3, [pc, #424]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	4a69      	ldr	r2, [pc, #420]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	6213      	str	r3, [r2, #32]
 80064fa:	4b67      	ldr	r3, [pc, #412]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	4a66      	ldr	r2, [pc, #408]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006500:	f023 0304 	bic.w	r3, r3, #4
 8006504:	6213      	str	r3, [r2, #32]
 8006506:	e01c      	b.n	8006542 <HAL_RCC_OscConfig+0x366>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2b05      	cmp	r3, #5
 800650e:	d10c      	bne.n	800652a <HAL_RCC_OscConfig+0x34e>
 8006510:	4b61      	ldr	r3, [pc, #388]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	4a60      	ldr	r2, [pc, #384]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006516:	f043 0304 	orr.w	r3, r3, #4
 800651a:	6213      	str	r3, [r2, #32]
 800651c:	4b5e      	ldr	r3, [pc, #376]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	4a5d      	ldr	r2, [pc, #372]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6213      	str	r3, [r2, #32]
 8006528:	e00b      	b.n	8006542 <HAL_RCC_OscConfig+0x366>
 800652a:	4b5b      	ldr	r3, [pc, #364]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	4a5a      	ldr	r2, [pc, #360]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	6213      	str	r3, [r2, #32]
 8006536:	4b58      	ldr	r3, [pc, #352]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	4a57      	ldr	r2, [pc, #348]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800653c:	f023 0304 	bic.w	r3, r3, #4
 8006540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d015      	beq.n	8006576 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800654a:	f7ff f825 	bl	8005598 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006550:	e00a      	b.n	8006568 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7ff f821 	bl	8005598 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006560:	4293      	cmp	r3, r2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e093      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006568:	4b4b      	ldr	r3, [pc, #300]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0ee      	beq.n	8006552 <HAL_RCC_OscConfig+0x376>
 8006574:	e014      	b.n	80065a0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006576:	f7ff f80f 	bl	8005598 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657c:	e00a      	b.n	8006594 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800657e:	f7ff f80b 	bl	8005598 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	f241 3288 	movw	r2, #5000	; 0x1388
 800658c:	4293      	cmp	r3, r2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e07d      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006594:	4b40      	ldr	r3, [pc, #256]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1ee      	bne.n	800657e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d105      	bne.n	80065b2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a6:	4b3c      	ldr	r3, [pc, #240]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	4a3b      	ldr	r2, [pc, #236]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80065ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d069      	beq.n	800668e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065ba:	4b37      	ldr	r3, [pc, #220]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d061      	beq.n	800668a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d146      	bne.n	800665c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ce:	4b34      	ldr	r3, [pc, #208]	; (80066a0 <HAL_RCC_OscConfig+0x4c4>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d4:	f7fe ffe0 	bl	8005598 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065dc:	f7fe ffdc 	bl	8005598 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e050      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ee:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006602:	d108      	bne.n	8006616 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006604:	4b24      	ldr	r3, [pc, #144]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4921      	ldr	r1, [pc, #132]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006612:	4313      	orrs	r3, r2
 8006614:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006616:	4b20      	ldr	r3, [pc, #128]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a19      	ldr	r1, [r3, #32]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	430b      	orrs	r3, r1
 8006628:	491b      	ldr	r1, [pc, #108]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800662a:	4313      	orrs	r3, r2
 800662c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800662e:	4b1c      	ldr	r3, [pc, #112]	; (80066a0 <HAL_RCC_OscConfig+0x4c4>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006634:	f7fe ffb0 	bl	8005598 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800663c:	f7fe ffac 	bl	8005598 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e020      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0x460>
 800665a:	e018      	b.n	800668e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <HAL_RCC_OscConfig+0x4c4>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006662:	f7fe ff99 	bl	8005598 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800666a:	f7fe ff95 	bl	8005598 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e009      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_RCC_OscConfig+0x4bc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f0      	bne.n	800666a <HAL_RCC_OscConfig+0x48e>
 8006688:	e001      	b.n	800668e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000
 800669c:	40007000 	.word	0x40007000
 80066a0:	42420060 	.word	0x42420060

080066a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80066b2:	4b7e      	ldr	r3, [pc, #504]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d910      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066c0:	4b7a      	ldr	r3, [pc, #488]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f023 0207 	bic.w	r2, r3, #7
 80066c8:	4978      	ldr	r1, [pc, #480]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80066d0:	4b76      	ldr	r3, [pc, #472]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d001      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e0e0      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d020      	beq.n	8006730 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066fa:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4a6c      	ldr	r2, [pc, #432]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006700:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006704:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006712:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	4a66      	ldr	r2, [pc, #408]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006718:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800671c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800671e:	4b64      	ldr	r3, [pc, #400]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	4961      	ldr	r1, [pc, #388]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800672c:	4313      	orrs	r3, r2
 800672e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d06a      	beq.n	8006812 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d107      	bne.n	8006754 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006744:	4b5a      	ldr	r3, [pc, #360]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d115      	bne.n	800677c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0a7      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d107      	bne.n	800676c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675c:	4b54      	ldr	r3, [pc, #336]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e09b      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800676c:	4b50      	ldr	r3, [pc, #320]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e093      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800677c:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f023 0203 	bic.w	r2, r3, #3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4949      	ldr	r1, [pc, #292]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800678a:	4313      	orrs	r3, r2
 800678c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800678e:	f7fe ff03 	bl	8005598 <HAL_GetTick>
 8006792:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d112      	bne.n	80067c2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800679e:	f7fe fefb 	bl	8005598 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e077      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80067b4:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f003 030c 	and.w	r3, r3, #12
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d1ee      	bne.n	800679e <HAL_RCC_ClockConfig+0xfa>
 80067c0:	e027      	b.n	8006812 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d11d      	bne.n	8006806 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067cc:	f7fe fee4 	bl	8005598 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e060      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067e2:	4b33      	ldr	r3, [pc, #204]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d1ee      	bne.n	80067cc <HAL_RCC_ClockConfig+0x128>
 80067ee:	e010      	b.n	8006812 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f0:	f7fe fed2 	bl	8005598 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e04e      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006806:	4b2a      	ldr	r3, [pc, #168]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1ee      	bne.n	80067f0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006812:	4b26      	ldr	r3, [pc, #152]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d210      	bcs.n	8006842 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006820:	4b22      	ldr	r3, [pc, #136]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f023 0207 	bic.w	r2, r3, #7
 8006828:	4920      	ldr	r1, [pc, #128]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006830:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <HAL_RCC_ClockConfig+0x208>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d001      	beq.n	8006842 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e030      	b.n	80068a4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d008      	beq.n	8006860 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800684e:	4b18      	ldr	r3, [pc, #96]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	4915      	ldr	r1, [pc, #84]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	490d      	ldr	r1, [pc, #52]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 800687c:	4313      	orrs	r3, r2
 800687e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006880:	f000 f81c 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 8006884:	4602      	mov	r2, r0
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <HAL_RCC_ClockConfig+0x20c>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	4908      	ldr	r1, [pc, #32]	; (80068b4 <HAL_RCC_ClockConfig+0x210>)
 8006892:	5ccb      	ldrb	r3, [r1, r3]
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	4a07      	ldr	r2, [pc, #28]	; (80068b8 <HAL_RCC_ClockConfig+0x214>)
 800689a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800689c:	2000      	movs	r0, #0
 800689e:	f7fe fe39 	bl	8005514 <HAL_InitTick>
  
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40022000 	.word	0x40022000
 80068b0:	40021000 	.word	0x40021000
 80068b4:	08009870 	.word	0x08009870
 80068b8:	20000004 	.word	0x20000004

080068bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	b490      	push	{r4, r7}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068c2:	4b29      	ldr	r3, [pc, #164]	; (8006968 <HAL_RCC_GetSysClockFreq+0xac>)
 80068c4:	1d3c      	adds	r4, r7, #4
 80068c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068cc:	f240 2301 	movw	r3, #513	; 0x201
 80068d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	2300      	movs	r3, #0
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068e6:	4b21      	ldr	r3, [pc, #132]	; (800696c <HAL_RCC_GetSysClockFreq+0xb0>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f003 030c 	and.w	r3, r3, #12
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d002      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x40>
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d003      	beq.n	8006902 <HAL_RCC_GetSysClockFreq+0x46>
 80068fa:	e02b      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068fc:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068fe:	623b      	str	r3, [r7, #32]
      break;
 8006900:	e02b      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	0c9b      	lsrs	r3, r3, #18
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	3328      	adds	r3, #40	; 0x28
 800690c:	443b      	add	r3, r7
 800690e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006912:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d012      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800691e:	4b13      	ldr	r3, [pc, #76]	; (800696c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	0c5b      	lsrs	r3, r3, #17
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	3328      	adds	r3, #40	; 0x28
 800692a:	443b      	add	r3, r7
 800692c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006930:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	4a0e      	ldr	r2, [pc, #56]	; (8006970 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006936:	fb03 f202 	mul.w	r2, r3, r2
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
 8006942:	e004      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006948:	fb02 f303 	mul.w	r3, r2, r3
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	623b      	str	r3, [r7, #32]
      break;
 8006952:	e002      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006956:	623b      	str	r3, [r7, #32]
      break;
 8006958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800695a:	6a3b      	ldr	r3, [r7, #32]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	; 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bc90      	pop	{r4, r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	080091dc 	.word	0x080091dc
 800696c:	40021000 	.word	0x40021000
 8006970:	007a1200 	.word	0x007a1200
 8006974:	003d0900 	.word	0x003d0900

08006978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <HAL_RCC_GetHCLKFreq+0x10>)
 800697e:	681b      	ldr	r3, [r3, #0]
}
 8006980:	4618      	mov	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	20000004 	.word	0x20000004

0800698c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006990:	f7ff fff2 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4903      	ldr	r1, [pc, #12]	; (80069b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
}    
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40021000 	.word	0x40021000
 80069b0:	08009880 	.word	0x08009880

080069b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069b8:	f7ff ffde 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 80069bc:	4602      	mov	r2, r0
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	0adb      	lsrs	r3, r3, #11
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	4903      	ldr	r1, [pc, #12]	; (80069d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069ca:	5ccb      	ldrb	r3, [r1, r3]
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80069d0:	4618      	mov	r0, r3
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000
 80069d8:	08009880 	.word	0x08009880

080069dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <RCC_Delay+0x38>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a0b      	ldr	r2, [pc, #44]	; (8006a18 <RCC_Delay+0x3c>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	0a5b      	lsrs	r3, r3, #9
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80069f8:	bf00      	nop
}
 80069fa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1e5a      	subs	r2, r3, #1
 8006a00:	60fa      	str	r2, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f8      	bne.n	80069f8 <RCC_Delay+0x1c>
}
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000004 	.word	0x20000004
 8006a18:	10624dd3 	.word	0x10624dd3

08006a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d07d      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3c:	4b4f      	ldr	r3, [pc, #316]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10d      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a48:	4b4c      	ldr	r3, [pc, #304]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	4a4b      	ldr	r2, [pc, #300]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a52:	61d3      	str	r3, [r2, #28]
 8006a54:	4b49      	ldr	r3, [pc, #292]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a64:	4b46      	ldr	r3, [pc, #280]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d118      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a70:	4b43      	ldr	r3, [pc, #268]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a42      	ldr	r2, [pc, #264]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a7c:	f7fe fd8c 	bl	8005598 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a82:	e008      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a84:	f7fe fd88 	bl	8005598 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	; 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e06d      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a96:	4b3a      	ldr	r3, [pc, #232]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aa2:	4b36      	ldr	r3, [pc, #216]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d02e      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d027      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ac0:	4b2e      	ldr	r3, [pc, #184]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006aca:	4b2e      	ldr	r3, [pc, #184]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ad0:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ad6:	4a29      	ldr	r2, [pc, #164]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d014      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae6:	f7fe fd57 	bl	8005598 <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aec:	e00a      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aee:	f7fe fd53 	bl	8005598 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e036      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b04:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0ee      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006b10:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	4917      	ldr	r1, [pc, #92]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d105      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b28:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b40:	4b0e      	ldr	r3, [pc, #56]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	490b      	ldr	r1, [pc, #44]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	4904      	ldr	r1, [pc, #16]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	40007000 	.word	0x40007000
 8006b84:	42420440 	.word	0x42420440

08006b88 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e034      	b.n	8006c08 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7fa fc3e 	bl	8001434 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f001 fcaa 	bl	800851c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	f001 fd22 	bl	800861c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6858      	ldr	r0, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	f001 fd4d 	bl	8008684 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	6892      	ldr	r2, [r2, #8]
 8006bf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	6892      	ldr	r2, [r2, #8]
 8006bfe:	f041 0101 	orr.w	r1, r1, #1
 8006c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e01d      	b.n	8006c5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fd ff48 	bl	8004acc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f000 fbac 	bl	80073ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0201 	orr.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6a1a      	ldr	r2, [r3, #32]
 8006cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10f      	bne.n	8006cda <HAL_TIM_Base_Stop+0x40>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a1a      	ldr	r2, [r3, #32]
 8006cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d107      	bne.n	8006cda <HAL_TIM_Base_Stop+0x40>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr

08006cee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0201 	orr.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6a1a      	ldr	r2, [r3, #32]
 8006d40:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10f      	bne.n	8006d6a <HAL_TIM_Base_Stop_IT+0x48>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6a1a      	ldr	r2, [r3, #32]
 8006d50:	f240 4344 	movw	r3, #1092	; 0x444
 8006d54:	4013      	ands	r3, r2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d107      	bne.n	8006d6a <HAL_TIM_Base_Stop_IT+0x48>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e01d      	b.n	8006dc4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f815 	bl	8006dcc <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f000 faf9 	bl	80073ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d122      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d11b      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f06f 0202 	mvn.w	r2, #2
 8006e0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 faa8 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006e26:	e005      	b.n	8006e34 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa9b 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 faaa 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d122      	bne.n	8006e8e <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d11b      	bne.n	8006e8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f06f 0204 	mvn.w	r2, #4
 8006e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fa7e 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006e7a:	e005      	b.n	8006e88 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fa71 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa80 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d122      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d11b      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f06f 0208 	mvn.w	r2, #8
 8006eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa54 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006ece:	e005      	b.n	8006edc <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa47 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa56 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d122      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d11b      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0210 	mvn.w	r2, #16
 8006f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fa2a 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006f22:	e005      	b.n	8006f30 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa1d 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa2c 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d10e      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d107      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f06f 0201 	mvn.w	r2, #1
 8006f5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f9f8 	bl	8007352 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d10e      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b80      	cmp	r3, #128	; 0x80
 8006f7c:	d107      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fd9b 	bl	8007ac4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b40      	cmp	r3, #64	; 0x40
 8006f9a:	d10e      	bne.n	8006fba <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d107      	bne.n	8006fba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f9f0 	bl	800739a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d10e      	bne.n	8006fe6 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d107      	bne.n	8006fe6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f06f 0220 	mvn.w	r2, #32
 8006fde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fd66 	bl	8007ab2 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007006:	2302      	movs	r3, #2
 8007008:	e0b4      	b.n	8007174 <HAL_TIM_PWM_ConfigChannel+0x184>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b0c      	cmp	r3, #12
 800701e:	f200 809f 	bhi.w	8007160 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	0800705d 	.word	0x0800705d
 800702c:	08007161 	.word	0x08007161
 8007030:	08007161 	.word	0x08007161
 8007034:	08007161 	.word	0x08007161
 8007038:	0800709d 	.word	0x0800709d
 800703c:	08007161 	.word	0x08007161
 8007040:	08007161 	.word	0x08007161
 8007044:	08007161 	.word	0x08007161
 8007048:	080070df 	.word	0x080070df
 800704c:	08007161 	.word	0x08007161
 8007050:	08007161 	.word	0x08007161
 8007054:	08007161 	.word	0x08007161
 8007058:	0800711f 	.word	0x0800711f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fa20 	bl	80074a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699a      	ldr	r2, [r3, #24]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0208 	orr.w	r2, r2, #8
 8007076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0204 	bic.w	r2, r2, #4
 8007086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6999      	ldr	r1, [r3, #24]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	619a      	str	r2, [r3, #24]
    }
    break;
 800709a:	e062      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68b9      	ldr	r1, [r7, #8]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fa76 	bl	8007594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6999      	ldr	r1, [r3, #24]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	021a      	lsls	r2, r3, #8
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	619a      	str	r2, [r3, #24]
    }
    break;
 80070dc:	e041      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 facf 	bl	8007688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0208 	orr.w	r2, r2, #8
 80070f8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69da      	ldr	r2, [r3, #28]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0204 	bic.w	r2, r2, #4
 8007108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69d9      	ldr	r1, [r3, #28]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	61da      	str	r2, [r3, #28]
    }
    break;
 800711c:	e021      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fb29 	bl	800777c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69da      	ldr	r2, [r3, #28]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007138:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69d9      	ldr	r1, [r3, #28]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	021a      	lsls	r2, r3, #8
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	61da      	str	r2, [r3, #28]
    }
    break;
 800715e:	e000      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8007160:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIM_ConfigClockSource+0x1c>
 8007194:	2302      	movs	r3, #2
 8007196:	e0d8      	b.n	800734a <HAL_TIM_ConfigClockSource+0x1ce>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d0:	d052      	beq.n	8007278 <HAL_TIM_ConfigClockSource+0xfc>
 80071d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d6:	f200 80ae 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d027      	beq.n	8007230 <HAL_TIM_ConfigClockSource+0xb4>
 80071e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e4:	f200 80a7 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 80071e8:	2b70      	cmp	r3, #112	; 0x70
 80071ea:	d02a      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0xc6>
 80071ec:	2b70      	cmp	r3, #112	; 0x70
 80071ee:	f200 80a2 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 80071f2:	2b60      	cmp	r3, #96	; 0x60
 80071f4:	d063      	beq.n	80072be <HAL_TIM_ConfigClockSource+0x142>
 80071f6:	2b60      	cmp	r3, #96	; 0x60
 80071f8:	f200 809d 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 80071fc:	2b50      	cmp	r3, #80	; 0x50
 80071fe:	d04e      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x122>
 8007200:	2b50      	cmp	r3, #80	; 0x50
 8007202:	f200 8098 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d069      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x162>
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	f200 8093 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 8007210:	2b30      	cmp	r3, #48	; 0x30
 8007212:	f000 8089 	beq.w	8007328 <HAL_TIM_ConfigClockSource+0x1ac>
 8007216:	2b30      	cmp	r3, #48	; 0x30
 8007218:	f200 808d 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 800721c:	2b20      	cmp	r3, #32
 800721e:	d07c      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x19e>
 8007220:	2b20      	cmp	r3, #32
 8007222:	f200 8088 	bhi.w	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d069      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0x182>
 800722a:	2b10      	cmp	r3, #16
 800722c:	d06e      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800722e:	e082      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0207 	bic.w	r2, r2, #7
 800723e:	609a      	str	r2, [r3, #8]
    break;
 8007240:	e07a      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6899      	ldr	r1, [r3, #8]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f000 fb71 	bl	8007938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007264:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800726c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	609a      	str	r2, [r3, #8]
    break;
 8007276:	e05f      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	6899      	ldr	r1, [r3, #8]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f000 fb56 	bl	8007938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800729a:	609a      	str	r2, [r3, #8]
    break;
 800729c:	e04c      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6859      	ldr	r1, [r3, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f000 fac0 	bl	8007830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2150      	movs	r1, #80	; 0x50
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fb1f 	bl	80078fa <TIM_ITRx_SetConfig>
    break;
 80072bc:	e03c      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6859      	ldr	r1, [r3, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f000 fae2 	bl	8007894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2160      	movs	r1, #96	; 0x60
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fb0f 	bl	80078fa <TIM_ITRx_SetConfig>
    break;
 80072dc:	e02c      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6859      	ldr	r1, [r3, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f000 faa0 	bl	8007830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2140      	movs	r1, #64	; 0x40
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 faff 	bl	80078fa <TIM_ITRx_SetConfig>
    break;
 80072fc:	e01c      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2100      	movs	r1, #0
 8007304:	4618      	mov	r0, r3
 8007306:	f000 faf8 	bl	80078fa <TIM_ITRx_SetConfig>
    break;
 800730a:	e015      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2110      	movs	r1, #16
 8007312:	4618      	mov	r0, r3
 8007314:	f000 faf1 	bl	80078fa <TIM_ITRx_SetConfig>
    break;
 8007318:	e00e      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2120      	movs	r1, #32
 8007320:	4618      	mov	r0, r3
 8007322:	f000 faea 	bl	80078fa <TIM_ITRx_SetConfig>
    break;
 8007326:	e007      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2130      	movs	r1, #48	; 0x30
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fae3 	bl	80078fa <TIM_ITRx_SetConfig>
    break;
 8007334:	e000      	b.n	8007338 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8007336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr

08007376 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr

080073ac <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a34      	ldr	r2, [pc, #208]	; (8007494 <TIM_Base_SetConfig+0xe8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d013      	beq.n	80073f0 <TIM_Base_SetConfig+0x44>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a33      	ldr	r2, [pc, #204]	; (8007498 <TIM_Base_SetConfig+0xec>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_Base_SetConfig+0x44>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d6:	d00b      	beq.n	80073f0 <TIM_Base_SetConfig+0x44>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a30      	ldr	r2, [pc, #192]	; (800749c <TIM_Base_SetConfig+0xf0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_Base_SetConfig+0x44>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a2f      	ldr	r2, [pc, #188]	; (80074a0 <TIM_Base_SetConfig+0xf4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_Base_SetConfig+0x44>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a2e      	ldr	r2, [pc, #184]	; (80074a4 <TIM_Base_SetConfig+0xf8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d108      	bne.n	8007402 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a23      	ldr	r2, [pc, #140]	; (8007494 <TIM_Base_SetConfig+0xe8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <TIM_Base_SetConfig+0x86>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a22      	ldr	r2, [pc, #136]	; (8007498 <TIM_Base_SetConfig+0xec>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_Base_SetConfig+0x86>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007418:	d00b      	beq.n	8007432 <TIM_Base_SetConfig+0x86>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1f      	ldr	r2, [pc, #124]	; (800749c <TIM_Base_SetConfig+0xf0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_Base_SetConfig+0x86>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <TIM_Base_SetConfig+0xf4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_Base_SetConfig+0x86>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <TIM_Base_SetConfig+0xf8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800744a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a09      	ldr	r2, [pc, #36]	; (8007494 <TIM_Base_SetConfig+0xe8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d003      	beq.n	800747c <TIM_Base_SetConfig+0xd0>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a08      	ldr	r2, [pc, #32]	; (8007498 <TIM_Base_SetConfig+0xec>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d103      	bne.n	8007484 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	615a      	str	r2, [r3, #20]
}
 800748a:	bf00      	nop
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40013400 	.word	0x40013400
 800749c:	40000400 	.word	0x40000400
 80074a0:	40000800 	.word	0x40000800
 80074a4:	40000c00 	.word	0x40000c00

080074a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f023 0302 	bic.w	r3, r3, #2
 80074fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a20      	ldr	r2, [pc, #128]	; (800758c <TIM_OC1_SetConfig+0xe4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC1_SetConfig+0x70>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a1f      	ldr	r2, [pc, #124]	; (8007590 <TIM_OC1_SetConfig+0xe8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d10c      	bne.n	8007532 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0308 	bic.w	r3, r3, #8
 800751e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 0304 	bic.w	r3, r3, #4
 8007530:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a15      	ldr	r2, [pc, #84]	; (800758c <TIM_OC1_SetConfig+0xe4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_OC1_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a14      	ldr	r2, [pc, #80]	; (8007590 <TIM_OC1_SetConfig+0xe8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d111      	bne.n	8007566 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	621a      	str	r2, [r3, #32]
}
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40012c00 	.word	0x40012c00
 8007590:	40013400 	.word	0x40013400

08007594 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0210 	bic.w	r2, r3, #16
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f023 0320 	bic.w	r3, r3, #32
 80075ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a21      	ldr	r2, [pc, #132]	; (8007680 <TIM_OC2_SetConfig+0xec>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_OC2_SetConfig+0x74>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a20      	ldr	r2, [pc, #128]	; (8007684 <TIM_OC2_SetConfig+0xf0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d10d      	bne.n	8007624 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007622:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a16      	ldr	r2, [pc, #88]	; (8007680 <TIM_OC2_SetConfig+0xec>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC2_SetConfig+0xa0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a15      	ldr	r2, [pc, #84]	; (8007684 <TIM_OC2_SetConfig+0xf0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d113      	bne.n	800765c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800763a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40013400 	.word	0x40013400

08007688 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a21      	ldr	r2, [pc, #132]	; (8007774 <TIM_OC3_SetConfig+0xec>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d003      	beq.n	80076fa <TIM_OC3_SetConfig+0x72>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a20      	ldr	r2, [pc, #128]	; (8007778 <TIM_OC3_SetConfig+0xf0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d10d      	bne.n	8007716 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007714:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a16      	ldr	r2, [pc, #88]	; (8007774 <TIM_OC3_SetConfig+0xec>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d003      	beq.n	8007726 <TIM_OC3_SetConfig+0x9e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a15      	ldr	r2, [pc, #84]	; (8007778 <TIM_OC3_SetConfig+0xf0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d113      	bne.n	800774e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800772c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40013400 	.word	0x40013400

0800777c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077be:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	031b      	lsls	r3, r3, #12
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a11      	ldr	r2, [pc, #68]	; (8007828 <TIM_OC4_SetConfig+0xac>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC4_SetConfig+0x74>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a10      	ldr	r2, [pc, #64]	; (800782c <TIM_OC4_SetConfig+0xb0>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d109      	bne.n	8007804 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	019b      	lsls	r3, r3, #6
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	40012c00 	.word	0x40012c00
 800782c:	40013400 	.word	0x40013400

08007830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f023 030a 	bic.w	r3, r3, #10
 8007874:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	621a      	str	r2, [r3, #32]
}
 800788a:	bf00      	nop
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f023 0210 	bic.w	r2, r3, #16
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	031b      	lsls	r3, r3, #12
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	621a      	str	r2, [r3, #32]
}
 80078f0:	bf00      	nop
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr

080078fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8007918:	887b      	ldrh	r3, [r7, #2]
 800791a:	f043 0307 	orr.w	r3, r3, #7
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	609a      	str	r2, [r3, #8]
}
 800792e:	bf00      	nop
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	021a      	lsls	r2, r3, #8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	431a      	orrs	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4313      	orrs	r3, r2
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	609a      	str	r2, [r3, #8]
}
 8007970:	bf00      	nop
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	bc80      	pop	{r7}
 8007978:	4770      	bx	lr

0800797a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007992:	2302      	movs	r3, #2
 8007994:	e044      	b.n	8007a20 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bc80      	pop	{r7}
 8007a28:	4770      	bx	lr

08007a2a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e032      	b.n	8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a60:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6859      	ldr	r1, [r3, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a82:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6899      	ldr	r1, [r3, #8]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e03f      	b.n	8007b68 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d106      	bne.n	8007b02 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7fd f933 	bl	8004d68 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2224      	movs	r2, #36	; 0x24
 8007b06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b18:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fbe6 	bl	80082ec <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695a      	ldr	r2, [r3, #20]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b3e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b4e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	f040 8083 	bne.w	8007c98 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_UART_Transmit+0x2e>
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e07b      	b.n	8007c9a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_UART_Transmit+0x40>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e074      	b.n	8007c9a <HAL_UART_Transmit+0x12a>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2221      	movs	r2, #33	; 0x21
 8007bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007bc6:	f7fd fce7 	bl	8005598 <HAL_GetTick>
 8007bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	88fa      	ldrh	r2, [r7, #6]
 8007bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	88fa      	ldrh	r2, [r7, #6]
 8007bd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8007bd8:	e042      	b.n	8007c60 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf0:	d122      	bne.n	8007c38 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2180      	movs	r1, #128	; 0x80
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fa0c 	bl	800801a <UART_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e046      	b.n	8007c9a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c1e:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d103      	bne.n	8007c30 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	e017      	b.n	8007c60 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	e013      	b.n	8007c60 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2180      	movs	r1, #128	; 0x80
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 f9e9 	bl	800801a <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e023      	b.n	8007c9a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	60ba      	str	r2, [r7, #8]
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1b7      	bne.n	8007bda <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2200      	movs	r2, #0
 8007c72:	2140      	movs	r1, #64	; 0x40
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f9d0 	bl	800801a <UART_WaitOnFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e00a      	b.n	8007c9a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	e000      	b.n	8007c9a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007c98:	2302      	movs	r3, #2
  }
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b088      	sub	sp, #32
 8007ca6:	af02      	add	r7, sp, #8
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b20      	cmp	r3, #32
 8007cc0:	f040 8090 	bne.w	8007de4 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_UART_Receive+0x2e>
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e088      	b.n	8007de6 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <HAL_UART_Receive+0x40>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	e081      	b.n	8007de6 <HAL_UART_Receive+0x144>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2222      	movs	r2, #34	; 0x22
 8007cf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007cf8:	f7fd fc4e 	bl	8005598 <HAL_GetTick>
 8007cfc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8007d0a:	e05c      	b.n	8007dc6 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d22:	d12b      	bne.n	8007d7c <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2120      	movs	r1, #32
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f973 	bl	800801a <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e053      	b.n	8007de6 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	3302      	adds	r3, #2
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	e030      	b.n	8007dc6 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	e024      	b.n	8007dc6 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2200      	movs	r2, #0
 8007d84:	2120      	movs	r1, #32
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f947 	bl	800801a <UART_WaitOnFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e027      	b.n	8007de6 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d108      	bne.n	8007db0 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6859      	ldr	r1, [r3, #4]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	60ba      	str	r2, [r7, #8]
 8007daa:	b2ca      	uxtb	r2, r1
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e00a      	b.n	8007dc6 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	1c59      	adds	r1, r3, #1
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d19d      	bne.n	8007d0c <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007de4:	2302      	movs	r3, #2
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10d      	bne.n	8007e42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d008      	beq.n	8007e42 <HAL_UART_IRQHandler+0x52>
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9d5 	bl	80081ea <UART_Receive_IT>
      return;
 8007e40:	e0cb      	b.n	8007fda <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80ab 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x1b0>
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <HAL_UART_IRQHandler+0x70>
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80a0 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <HAL_UART_IRQHandler+0x90>
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e78:	f043 0201 	orr.w	r2, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <HAL_UART_IRQHandler+0xb0>
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	f043 0202 	orr.w	r2, r3, #2
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <HAL_UART_IRQHandler+0xd0>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb8:	f043 0204 	orr.w	r2, r3, #4
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <HAL_UART_IRQHandler+0xf0>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	f043 0208 	orr.w	r2, r3, #8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d077      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_UART_IRQHandler+0x112>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f974 	bl	80081ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bf14      	ite	ne
 8007f10:	2301      	movne	r3, #1
 8007f12:	2300      	moveq	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <HAL_UART_IRQHandler+0x13a>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d031      	beq.n	8007f8e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8bf 	bl	80080ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d023      	beq.n	8007f86 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695a      	ldr	r2, [r3, #20]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d013      	beq.n	8007f7e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5a:	4a21      	ldr	r2, [pc, #132]	; (8007fe0 <HAL_UART_IRQHandler+0x1f0>)
 8007f5c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd fe48 	bl	8005bf8 <HAL_DMA_Abort_IT>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d016      	beq.n	8007f9c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7c:	e00e      	b.n	8007f9c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f842 	bl	8008008 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f84:	e00a      	b.n	8007f9c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f83e 	bl	8008008 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8c:	e006      	b.n	8007f9c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f83a 	bl	8008008 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007f9a:	e01d      	b.n	8007fd8 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9c:	bf00      	nop
    return;
 8007f9e:	e01b      	b.n	8007fd8 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d008      	beq.n	8007fbc <HAL_UART_IRQHandler+0x1cc>
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8ab 	bl	8008110 <UART_Transmit_IT>
    return;
 8007fba:	e00e      	b.n	8007fda <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <HAL_UART_IRQHandler+0x1ea>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f8f2 	bl	80081ba <UART_EndTransmit_IT>
    return;
 8007fd6:	e000      	b.n	8007fda <HAL_UART_IRQHandler+0x1ea>
    return;
 8007fd8:	bf00      	nop
  }
}
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	080080e9 	.word	0x080080e9

08007fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr

08007ff6 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	bc80      	pop	{r7}
 8008006:	4770      	bx	lr

08008008 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800802a:	e02c      	b.n	8008086 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008032:	d028      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <UART_WaitOnFlagUntilTimeout+0x30>
 800803a:	f7fd faad 	bl	8005598 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	429a      	cmp	r2, r3
 8008048:	d21d      	bcs.n	8008086 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008058:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695a      	ldr	r2, [r3, #20]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0201 	bic.w	r2, r2, #1
 8008068:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2220      	movs	r2, #32
 8008076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e00f      	b.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4013      	ands	r3, r2
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	429a      	cmp	r2, r3
 8008094:	bf0c      	ite	eq
 8008096:	2301      	moveq	r3, #1
 8008098:	2300      	movne	r3, #0
 800809a:	b2db      	uxtb	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d0c3      	beq.n	800802c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695a      	ldr	r2, [r3, #20]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0201 	bic.w	r2, r2, #1
 80080d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2220      	movs	r2, #32
 80080da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bc80      	pop	{r7}
 80080e6:	4770      	bx	lr

080080e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff ff80 	bl	8008008 <HAL_UART_ErrorCallback>
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b21      	cmp	r3, #33	; 0x21
 8008122:	d144      	bne.n	80081ae <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812c:	d11a      	bne.n	8008164 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008142:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d105      	bne.n	8008158 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	1c9a      	adds	r2, r3, #2
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	621a      	str	r2, [r3, #32]
 8008156:	e00e      	b.n	8008176 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	621a      	str	r2, [r3, #32]
 8008162:	e008      	b.n	8008176 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	1c59      	adds	r1, r3, #1
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6211      	str	r1, [r2, #32]
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29b      	uxth	r3, r3
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4619      	mov	r1, r3
 8008184:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10f      	bne.n	80081aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008198:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e000      	b.n	80081b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80081ae:	2302      	movs	r3, #2
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ff02 	bl	8007fe4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b22      	cmp	r3, #34	; 0x22
 80081fc:	d171      	bne.n	80082e2 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008206:	d123      	bne.n	8008250 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10e      	bne.n	8008234 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008222:	b29a      	uxth	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	629a      	str	r2, [r3, #40]	; 0x28
 8008232:	e029      	b.n	8008288 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	b29b      	uxth	r3, r3
 800823c:	b2db      	uxtb	r3, r3
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	629a      	str	r2, [r3, #40]	; 0x28
 800824e:	e01b      	b.n	8008288 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6858      	ldr	r0, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	1c59      	adds	r1, r3, #1
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6291      	str	r1, [r2, #40]	; 0x28
 8008268:	b2c2      	uxtb	r2, r0
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	e00c      	b.n	8008288 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	b2da      	uxtb	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	1c58      	adds	r0, r3, #1
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	6288      	str	r0, [r1, #40]	; 0x28
 8008280:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29b      	uxth	r3, r3
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	4619      	mov	r1, r3
 8008296:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008298:	2b00      	cmp	r3, #0
 800829a:	d120      	bne.n	80082de <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0220 	bic.w	r2, r2, #32
 80082aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082ba:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695a      	ldr	r2, [r3, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0201 	bic.w	r2, r2, #1
 80082ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff fe8e 	bl	8007ff6 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e002      	b.n	80082e4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	e000      	b.n	80082e4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80082e2:	2302      	movs	r3, #2
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ec:	b5b0      	push	{r4, r5, r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800832e:	f023 030c 	bic.w	r3, r3, #12
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	6812      	ldr	r2, [r2, #0]
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	430b      	orrs	r3, r1
 800833a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a6f      	ldr	r2, [pc, #444]	; (8008514 <UART_SetConfig+0x228>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d16b      	bne.n	8008434 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800835c:	f7fe fb2a 	bl	80069b4 <HAL_RCC_GetPCLK2Freq>
 8008360:	4602      	mov	r2, r0
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009a      	lsls	r2, r3, #2
 800836a:	441a      	add	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	fbb2 f3f3 	udiv	r3, r2, r3
 8008376:	4a68      	ldr	r2, [pc, #416]	; (8008518 <UART_SetConfig+0x22c>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	011c      	lsls	r4, r3, #4
 8008380:	f7fe fb18 	bl	80069b4 <HAL_RCC_GetPCLK2Freq>
 8008384:	4602      	mov	r2, r0
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009a      	lsls	r2, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	fbb2 f5f3 	udiv	r5, r2, r3
 800839a:	f7fe fb0b 	bl	80069b4 <HAL_RCC_GetPCLK2Freq>
 800839e:	4602      	mov	r2, r0
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009a      	lsls	r2, r3, #2
 80083a8:	441a      	add	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b4:	4a58      	ldr	r2, [pc, #352]	; (8008518 <UART_SetConfig+0x22c>)
 80083b6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	2264      	movs	r2, #100	; 0x64
 80083be:	fb02 f303 	mul.w	r3, r2, r3
 80083c2:	1aeb      	subs	r3, r5, r3
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	3332      	adds	r3, #50	; 0x32
 80083c8:	4a53      	ldr	r2, [pc, #332]	; (8008518 <UART_SetConfig+0x22c>)
 80083ca:	fba2 2303 	umull	r2, r3, r2, r3
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083d4:	441c      	add	r4, r3
 80083d6:	f7fe faed 	bl	80069b4 <HAL_RCC_GetPCLK2Freq>
 80083da:	4602      	mov	r2, r0
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009a      	lsls	r2, r3, #2
 80083e4:	441a      	add	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80083f0:	f7fe fae0 	bl	80069b4 <HAL_RCC_GetPCLK2Freq>
 80083f4:	4602      	mov	r2, r0
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009a      	lsls	r2, r3, #2
 80083fe:	441a      	add	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	fbb2 f3f3 	udiv	r3, r2, r3
 800840a:	4a43      	ldr	r2, [pc, #268]	; (8008518 <UART_SetConfig+0x22c>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	2264      	movs	r2, #100	; 0x64
 8008414:	fb02 f303 	mul.w	r3, r2, r3
 8008418:	1aeb      	subs	r3, r5, r3
 800841a:	011b      	lsls	r3, r3, #4
 800841c:	3332      	adds	r3, #50	; 0x32
 800841e:	4a3e      	ldr	r2, [pc, #248]	; (8008518 <UART_SetConfig+0x22c>)
 8008420:	fba2 2303 	umull	r2, r3, r2, r3
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	f003 020f 	and.w	r2, r3, #15
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4422      	add	r2, r4
 8008430:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008432:	e06a      	b.n	800850a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008434:	f7fe faaa 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 8008438:	4602      	mov	r2, r0
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009a      	lsls	r2, r3, #2
 8008442:	441a      	add	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	fbb2 f3f3 	udiv	r3, r2, r3
 800844e:	4a32      	ldr	r2, [pc, #200]	; (8008518 <UART_SetConfig+0x22c>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	011c      	lsls	r4, r3, #4
 8008458:	f7fe fa98 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 800845c:	4602      	mov	r2, r0
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009a      	lsls	r2, r3, #2
 8008466:	441a      	add	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	fbb2 f5f3 	udiv	r5, r2, r3
 8008472:	f7fe fa8b 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 8008476:	4602      	mov	r2, r0
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009a      	lsls	r2, r3, #2
 8008480:	441a      	add	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	fbb2 f3f3 	udiv	r3, r2, r3
 800848c:	4a22      	ldr	r2, [pc, #136]	; (8008518 <UART_SetConfig+0x22c>)
 800848e:	fba2 2303 	umull	r2, r3, r2, r3
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	2264      	movs	r2, #100	; 0x64
 8008496:	fb02 f303 	mul.w	r3, r2, r3
 800849a:	1aeb      	subs	r3, r5, r3
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	3332      	adds	r3, #50	; 0x32
 80084a0:	4a1d      	ldr	r2, [pc, #116]	; (8008518 <UART_SetConfig+0x22c>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	095b      	lsrs	r3, r3, #5
 80084a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084ac:	441c      	add	r4, r3
 80084ae:	f7fe fa6d 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 80084b2:	4602      	mov	r2, r0
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009a      	lsls	r2, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80084c8:	f7fe fa60 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 80084cc:	4602      	mov	r2, r0
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009a      	lsls	r2, r3, #2
 80084d6:	441a      	add	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e2:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <UART_SetConfig+0x22c>)
 80084e4:	fba2 2303 	umull	r2, r3, r2, r3
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	2264      	movs	r2, #100	; 0x64
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
 80084f0:	1aeb      	subs	r3, r5, r3
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	3332      	adds	r3, #50	; 0x32
 80084f6:	4a08      	ldr	r2, [pc, #32]	; (8008518 <UART_SetConfig+0x22c>)
 80084f8:	fba2 2303 	umull	r2, r3, r2, r3
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	f003 020f 	and.w	r2, r3, #15
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4422      	add	r2, r4
 8008508:	609a      	str	r2, [r3, #8]
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bdb0      	pop	{r4, r5, r7, pc}
 8008512:	bf00      	nop
 8008514:	40013800 	.word	0x40013800
 8008518:	51eb851f 	.word	0x51eb851f

0800851c <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	f023 0101 	bic.w	r1, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	2b08      	cmp	r3, #8
 8008544:	d132      	bne.n	80085ac <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008550:	4b31      	ldr	r3, [pc, #196]	; (8008618 <FSMC_NORSRAM_Init+0xfc>)
 8008552:	4013      	ands	r3, r2
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	6851      	ldr	r1, [r2, #4]
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	6892      	ldr	r2, [r2, #8]
 800855c:	4311      	orrs	r1, r2
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	68d2      	ldr	r2, [r2, #12]
 8008562:	4311      	orrs	r1, r2
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	6912      	ldr	r2, [r2, #16]
 8008568:	4311      	orrs	r1, r2
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	6952      	ldr	r2, [r2, #20]
 800856e:	4311      	orrs	r1, r2
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	6992      	ldr	r2, [r2, #24]
 8008574:	4311      	orrs	r1, r2
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	69d2      	ldr	r2, [r2, #28]
 800857a:	4311      	orrs	r1, r2
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	6a12      	ldr	r2, [r2, #32]
 8008580:	4311      	orrs	r1, r2
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008586:	4311      	orrs	r1, r2
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800858c:	4311      	orrs	r1, r2
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008592:	4311      	orrs	r1, r2
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008598:	430a      	orrs	r2, r1
 800859a:	4313      	orrs	r3, r2
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80085aa:	e02f      	b.n	800860c <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085b6:	4b18      	ldr	r3, [pc, #96]	; (8008618 <FSMC_NORSRAM_Init+0xfc>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	6851      	ldr	r1, [r2, #4]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	6892      	ldr	r2, [r2, #8]
 80085c2:	4311      	orrs	r1, r2
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	68d2      	ldr	r2, [r2, #12]
 80085c8:	4311      	orrs	r1, r2
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	6912      	ldr	r2, [r2, #16]
 80085ce:	4311      	orrs	r1, r2
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	6952      	ldr	r2, [r2, #20]
 80085d4:	4311      	orrs	r1, r2
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	6992      	ldr	r2, [r2, #24]
 80085da:	4311      	orrs	r1, r2
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	69d2      	ldr	r2, [r2, #28]
 80085e0:	4311      	orrs	r1, r2
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	6a12      	ldr	r2, [r2, #32]
 80085e6:	4311      	orrs	r1, r2
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085ec:	4311      	orrs	r1, r2
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80085f2:	4311      	orrs	r1, r2
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80085f8:	4311      	orrs	r1, r2
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085fe:	4311      	orrs	r1, r2
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	6812      	ldr	r2, [r2, #0]
 8008604:	4319      	orrs	r1, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr
 8008618:	fff70081 	.word	0xfff70081

0800861c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	1c5a      	adds	r2, r3, #1
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008632:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	431a      	orrs	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	431a      	orrs	r2, r3
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	041b      	lsls	r3, r3, #16
 8008650:	431a      	orrs	r2, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	3b01      	subs	r3, #1
 8008658:	051b      	lsls	r3, r3, #20
 800865a:	431a      	orrs	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	3b02      	subs	r3, #2
 8008662:	061b      	lsls	r3, r3, #24
 8008664:	431a      	orrs	r2, r3
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	4313      	orrs	r3, r2
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	3201      	adds	r2, #1
 8008670:	4319      	orrs	r1, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008698:	d11d      	bne.n	80086d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086a2:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	6811      	ldr	r1, [r2, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	6852      	ldr	r2, [r2, #4]
 80086ae:	0112      	lsls	r2, r2, #4
 80086b0:	4311      	orrs	r1, r2
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	6892      	ldr	r2, [r2, #8]
 80086b6:	0212      	lsls	r2, r2, #8
 80086b8:	4311      	orrs	r1, r2
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	6992      	ldr	r2, [r2, #24]
 80086be:	4311      	orrs	r1, r2
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	68d2      	ldr	r2, [r2, #12]
 80086c4:	0412      	lsls	r2, r2, #16
 80086c6:	430a      	orrs	r2, r1
 80086c8:	ea43 0102 	orr.w	r1, r3, r2
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80086d4:	e005      	b.n	80086e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80086de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	cff00000 	.word	0xcff00000

080086f4 <__cxa_pure_virtual>:
 80086f4:	b508      	push	{r3, lr}
 80086f6:	f000 f80d 	bl	8008714 <_ZSt9terminatev>

080086fa <_ZN10__cxxabiv111__terminateEPFvvE>:
 80086fa:	b508      	push	{r3, lr}
 80086fc:	4780      	blx	r0
 80086fe:	f000 f80e 	bl	800871e <abort>
	...

08008704 <_ZSt13get_terminatev>:
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <_ZSt13get_terminatev+0xc>)
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	f3bf 8f5b 	dmb	ish
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20000040 	.word	0x20000040

08008714 <_ZSt9terminatev>:
 8008714:	b508      	push	{r3, lr}
 8008716:	f7ff fff5 	bl	8008704 <_ZSt13get_terminatev>
 800871a:	f7ff ffee 	bl	80086fa <_ZN10__cxxabiv111__terminateEPFvvE>

0800871e <abort>:
 800871e:	2006      	movs	r0, #6
 8008720:	b508      	push	{r3, lr}
 8008722:	f000 f85d 	bl	80087e0 <raise>
 8008726:	2001      	movs	r0, #1
 8008728:	f7fb ffcd 	bl	80046c6 <_exit>

0800872c <__errno>:
 800872c:	4b01      	ldr	r3, [pc, #4]	; (8008734 <__errno+0x8>)
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000044 	.word	0x20000044

08008738 <__libc_init_array>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	2600      	movs	r6, #0
 800873c:	4d0c      	ldr	r5, [pc, #48]	; (8008770 <__libc_init_array+0x38>)
 800873e:	4c0d      	ldr	r4, [pc, #52]	; (8008774 <__libc_init_array+0x3c>)
 8008740:	1b64      	subs	r4, r4, r5
 8008742:	10a4      	asrs	r4, r4, #2
 8008744:	42a6      	cmp	r6, r4
 8008746:	d109      	bne.n	800875c <__libc_init_array+0x24>
 8008748:	f000 fcf8 	bl	800913c <_init>
 800874c:	2600      	movs	r6, #0
 800874e:	4d0a      	ldr	r5, [pc, #40]	; (8008778 <__libc_init_array+0x40>)
 8008750:	4c0a      	ldr	r4, [pc, #40]	; (800877c <__libc_init_array+0x44>)
 8008752:	1b64      	subs	r4, r4, r5
 8008754:	10a4      	asrs	r4, r4, #2
 8008756:	42a6      	cmp	r6, r4
 8008758:	d105      	bne.n	8008766 <__libc_init_array+0x2e>
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008760:	4798      	blx	r3
 8008762:	3601      	adds	r6, #1
 8008764:	e7ee      	b.n	8008744 <__libc_init_array+0xc>
 8008766:	f855 3b04 	ldr.w	r3, [r5], #4
 800876a:	4798      	blx	r3
 800876c:	3601      	adds	r6, #1
 800876e:	e7f2      	b.n	8008756 <__libc_init_array+0x1e>
 8008770:	080098c4 	.word	0x080098c4
 8008774:	080098c4 	.word	0x080098c4
 8008778:	080098c4 	.word	0x080098c4
 800877c:	080098cc 	.word	0x080098cc

08008780 <memset>:
 8008780:	4603      	mov	r3, r0
 8008782:	4402      	add	r2, r0
 8008784:	4293      	cmp	r3, r2
 8008786:	d100      	bne.n	800878a <memset+0xa>
 8008788:	4770      	bx	lr
 800878a:	f803 1b01 	strb.w	r1, [r3], #1
 800878e:	e7f9      	b.n	8008784 <memset+0x4>

08008790 <_raise_r>:
 8008790:	291f      	cmp	r1, #31
 8008792:	b538      	push	{r3, r4, r5, lr}
 8008794:	4604      	mov	r4, r0
 8008796:	460d      	mov	r5, r1
 8008798:	d904      	bls.n	80087a4 <_raise_r+0x14>
 800879a:	2316      	movs	r3, #22
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087a6:	b112      	cbz	r2, 80087ae <_raise_r+0x1e>
 80087a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087ac:	b94b      	cbnz	r3, 80087c2 <_raise_r+0x32>
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 f830 	bl	8008814 <_getpid_r>
 80087b4:	462a      	mov	r2, r5
 80087b6:	4601      	mov	r1, r0
 80087b8:	4620      	mov	r0, r4
 80087ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087be:	f000 b817 	b.w	80087f0 <_kill_r>
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d00a      	beq.n	80087dc <_raise_r+0x4c>
 80087c6:	1c59      	adds	r1, r3, #1
 80087c8:	d103      	bne.n	80087d2 <_raise_r+0x42>
 80087ca:	2316      	movs	r3, #22
 80087cc:	6003      	str	r3, [r0, #0]
 80087ce:	2001      	movs	r0, #1
 80087d0:	e7e7      	b.n	80087a2 <_raise_r+0x12>
 80087d2:	2400      	movs	r4, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087da:	4798      	blx	r3
 80087dc:	2000      	movs	r0, #0
 80087de:	e7e0      	b.n	80087a2 <_raise_r+0x12>

080087e0 <raise>:
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <raise+0xc>)
 80087e2:	4601      	mov	r1, r0
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f7ff bfd3 	b.w	8008790 <_raise_r>
 80087ea:	bf00      	nop
 80087ec:	20000044 	.word	0x20000044

080087f0 <_kill_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	2300      	movs	r3, #0
 80087f4:	4d06      	ldr	r5, [pc, #24]	; (8008810 <_kill_r+0x20>)
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	4611      	mov	r1, r2
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	f7fb ff52 	bl	80046a6 <_kill>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d102      	bne.n	800880c <_kill_r+0x1c>
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	b103      	cbz	r3, 800880c <_kill_r+0x1c>
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	bd38      	pop	{r3, r4, r5, pc}
 800880e:	bf00      	nop
 8008810:	200008ac 	.word	0x200008ac

08008814 <_getpid_r>:
 8008814:	f7fb bf40 	b.w	8004698 <_getpid>

08008818 <siprintf>:
 8008818:	b40e      	push	{r1, r2, r3}
 800881a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800881e:	b500      	push	{lr}
 8008820:	b09c      	sub	sp, #112	; 0x70
 8008822:	ab1d      	add	r3, sp, #116	; 0x74
 8008824:	9002      	str	r0, [sp, #8]
 8008826:	9006      	str	r0, [sp, #24]
 8008828:	9107      	str	r1, [sp, #28]
 800882a:	9104      	str	r1, [sp, #16]
 800882c:	4808      	ldr	r0, [pc, #32]	; (8008850 <siprintf+0x38>)
 800882e:	4909      	ldr	r1, [pc, #36]	; (8008854 <siprintf+0x3c>)
 8008830:	f853 2b04 	ldr.w	r2, [r3], #4
 8008834:	9105      	str	r1, [sp, #20]
 8008836:	6800      	ldr	r0, [r0, #0]
 8008838:	a902      	add	r1, sp, #8
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	f000 f914 	bl	8008a68 <_svfiprintf_r>
 8008840:	2200      	movs	r2, #0
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	701a      	strb	r2, [r3, #0]
 8008846:	b01c      	add	sp, #112	; 0x70
 8008848:	f85d eb04 	ldr.w	lr, [sp], #4
 800884c:	b003      	add	sp, #12
 800884e:	4770      	bx	lr
 8008850:	20000044 	.word	0x20000044
 8008854:	ffff0208 	.word	0xffff0208

08008858 <strcat>:
 8008858:	4602      	mov	r2, r0
 800885a:	b510      	push	{r4, lr}
 800885c:	7814      	ldrb	r4, [r2, #0]
 800885e:	4613      	mov	r3, r2
 8008860:	3201      	adds	r2, #1
 8008862:	2c00      	cmp	r4, #0
 8008864:	d1fa      	bne.n	800885c <strcat+0x4>
 8008866:	3b01      	subs	r3, #1
 8008868:	f811 2b01 	ldrb.w	r2, [r1], #1
 800886c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008870:	2a00      	cmp	r2, #0
 8008872:	d1f9      	bne.n	8008868 <strcat+0x10>
 8008874:	bd10      	pop	{r4, pc}

08008876 <strcpy>:
 8008876:	4603      	mov	r3, r0
 8008878:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887c:	f803 2b01 	strb.w	r2, [r3], #1
 8008880:	2a00      	cmp	r2, #0
 8008882:	d1f9      	bne.n	8008878 <strcpy+0x2>
 8008884:	4770      	bx	lr
	...

08008888 <sbrk_aligned>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	4e0e      	ldr	r6, [pc, #56]	; (80088c4 <sbrk_aligned+0x3c>)
 800888c:	460c      	mov	r4, r1
 800888e:	6831      	ldr	r1, [r6, #0]
 8008890:	4605      	mov	r5, r0
 8008892:	b911      	cbnz	r1, 800889a <sbrk_aligned+0x12>
 8008894:	f000 fb7e 	bl	8008f94 <_sbrk_r>
 8008898:	6030      	str	r0, [r6, #0]
 800889a:	4621      	mov	r1, r4
 800889c:	4628      	mov	r0, r5
 800889e:	f000 fb79 	bl	8008f94 <_sbrk_r>
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	d00a      	beq.n	80088bc <sbrk_aligned+0x34>
 80088a6:	1cc4      	adds	r4, r0, #3
 80088a8:	f024 0403 	bic.w	r4, r4, #3
 80088ac:	42a0      	cmp	r0, r4
 80088ae:	d007      	beq.n	80088c0 <sbrk_aligned+0x38>
 80088b0:	1a21      	subs	r1, r4, r0
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 fb6e 	bl	8008f94 <_sbrk_r>
 80088b8:	3001      	adds	r0, #1
 80088ba:	d101      	bne.n	80088c0 <sbrk_aligned+0x38>
 80088bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088c0:	4620      	mov	r0, r4
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	200008a8 	.word	0x200008a8

080088c8 <_malloc_r>:
 80088c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088cc:	1ccd      	adds	r5, r1, #3
 80088ce:	f025 0503 	bic.w	r5, r5, #3
 80088d2:	3508      	adds	r5, #8
 80088d4:	2d0c      	cmp	r5, #12
 80088d6:	bf38      	it	cc
 80088d8:	250c      	movcc	r5, #12
 80088da:	2d00      	cmp	r5, #0
 80088dc:	4607      	mov	r7, r0
 80088de:	db01      	blt.n	80088e4 <_malloc_r+0x1c>
 80088e0:	42a9      	cmp	r1, r5
 80088e2:	d905      	bls.n	80088f0 <_malloc_r+0x28>
 80088e4:	230c      	movs	r3, #12
 80088e6:	2600      	movs	r6, #0
 80088e8:	603b      	str	r3, [r7, #0]
 80088ea:	4630      	mov	r0, r6
 80088ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f0:	4e2e      	ldr	r6, [pc, #184]	; (80089ac <_malloc_r+0xe4>)
 80088f2:	f000 fb95 	bl	8009020 <__malloc_lock>
 80088f6:	6833      	ldr	r3, [r6, #0]
 80088f8:	461c      	mov	r4, r3
 80088fa:	bb34      	cbnz	r4, 800894a <_malloc_r+0x82>
 80088fc:	4629      	mov	r1, r5
 80088fe:	4638      	mov	r0, r7
 8008900:	f7ff ffc2 	bl	8008888 <sbrk_aligned>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	4604      	mov	r4, r0
 8008908:	d14d      	bne.n	80089a6 <_malloc_r+0xde>
 800890a:	6834      	ldr	r4, [r6, #0]
 800890c:	4626      	mov	r6, r4
 800890e:	2e00      	cmp	r6, #0
 8008910:	d140      	bne.n	8008994 <_malloc_r+0xcc>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	4631      	mov	r1, r6
 8008916:	4638      	mov	r0, r7
 8008918:	eb04 0803 	add.w	r8, r4, r3
 800891c:	f000 fb3a 	bl	8008f94 <_sbrk_r>
 8008920:	4580      	cmp	r8, r0
 8008922:	d13a      	bne.n	800899a <_malloc_r+0xd2>
 8008924:	6821      	ldr	r1, [r4, #0]
 8008926:	3503      	adds	r5, #3
 8008928:	1a6d      	subs	r5, r5, r1
 800892a:	f025 0503 	bic.w	r5, r5, #3
 800892e:	3508      	adds	r5, #8
 8008930:	2d0c      	cmp	r5, #12
 8008932:	bf38      	it	cc
 8008934:	250c      	movcc	r5, #12
 8008936:	4638      	mov	r0, r7
 8008938:	4629      	mov	r1, r5
 800893a:	f7ff ffa5 	bl	8008888 <sbrk_aligned>
 800893e:	3001      	adds	r0, #1
 8008940:	d02b      	beq.n	800899a <_malloc_r+0xd2>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	442b      	add	r3, r5
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	e00e      	b.n	8008968 <_malloc_r+0xa0>
 800894a:	6822      	ldr	r2, [r4, #0]
 800894c:	1b52      	subs	r2, r2, r5
 800894e:	d41e      	bmi.n	800898e <_malloc_r+0xc6>
 8008950:	2a0b      	cmp	r2, #11
 8008952:	d916      	bls.n	8008982 <_malloc_r+0xba>
 8008954:	1961      	adds	r1, r4, r5
 8008956:	42a3      	cmp	r3, r4
 8008958:	6025      	str	r5, [r4, #0]
 800895a:	bf18      	it	ne
 800895c:	6059      	strne	r1, [r3, #4]
 800895e:	6863      	ldr	r3, [r4, #4]
 8008960:	bf08      	it	eq
 8008962:	6031      	streq	r1, [r6, #0]
 8008964:	5162      	str	r2, [r4, r5]
 8008966:	604b      	str	r3, [r1, #4]
 8008968:	4638      	mov	r0, r7
 800896a:	f104 060b 	add.w	r6, r4, #11
 800896e:	f000 fb5d 	bl	800902c <__malloc_unlock>
 8008972:	f026 0607 	bic.w	r6, r6, #7
 8008976:	1d23      	adds	r3, r4, #4
 8008978:	1af2      	subs	r2, r6, r3
 800897a:	d0b6      	beq.n	80088ea <_malloc_r+0x22>
 800897c:	1b9b      	subs	r3, r3, r6
 800897e:	50a3      	str	r3, [r4, r2]
 8008980:	e7b3      	b.n	80088ea <_malloc_r+0x22>
 8008982:	6862      	ldr	r2, [r4, #4]
 8008984:	42a3      	cmp	r3, r4
 8008986:	bf0c      	ite	eq
 8008988:	6032      	streq	r2, [r6, #0]
 800898a:	605a      	strne	r2, [r3, #4]
 800898c:	e7ec      	b.n	8008968 <_malloc_r+0xa0>
 800898e:	4623      	mov	r3, r4
 8008990:	6864      	ldr	r4, [r4, #4]
 8008992:	e7b2      	b.n	80088fa <_malloc_r+0x32>
 8008994:	4634      	mov	r4, r6
 8008996:	6876      	ldr	r6, [r6, #4]
 8008998:	e7b9      	b.n	800890e <_malloc_r+0x46>
 800899a:	230c      	movs	r3, #12
 800899c:	4638      	mov	r0, r7
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	f000 fb44 	bl	800902c <__malloc_unlock>
 80089a4:	e7a1      	b.n	80088ea <_malloc_r+0x22>
 80089a6:	6025      	str	r5, [r4, #0]
 80089a8:	e7de      	b.n	8008968 <_malloc_r+0xa0>
 80089aa:	bf00      	nop
 80089ac:	200008a4 	.word	0x200008a4

080089b0 <__ssputs_r>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	688e      	ldr	r6, [r1, #8]
 80089b6:	4682      	mov	sl, r0
 80089b8:	429e      	cmp	r6, r3
 80089ba:	460c      	mov	r4, r1
 80089bc:	4690      	mov	r8, r2
 80089be:	461f      	mov	r7, r3
 80089c0:	d838      	bhi.n	8008a34 <__ssputs_r+0x84>
 80089c2:	898a      	ldrh	r2, [r1, #12]
 80089c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089c8:	d032      	beq.n	8008a30 <__ssputs_r+0x80>
 80089ca:	6825      	ldr	r5, [r4, #0]
 80089cc:	6909      	ldr	r1, [r1, #16]
 80089ce:	3301      	adds	r3, #1
 80089d0:	eba5 0901 	sub.w	r9, r5, r1
 80089d4:	6965      	ldr	r5, [r4, #20]
 80089d6:	444b      	add	r3, r9
 80089d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089e0:	106d      	asrs	r5, r5, #1
 80089e2:	429d      	cmp	r5, r3
 80089e4:	bf38      	it	cc
 80089e6:	461d      	movcc	r5, r3
 80089e8:	0553      	lsls	r3, r2, #21
 80089ea:	d531      	bpl.n	8008a50 <__ssputs_r+0xa0>
 80089ec:	4629      	mov	r1, r5
 80089ee:	f7ff ff6b 	bl	80088c8 <_malloc_r>
 80089f2:	4606      	mov	r6, r0
 80089f4:	b950      	cbnz	r0, 8008a0c <__ssputs_r+0x5c>
 80089f6:	230c      	movs	r3, #12
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089fc:	f8ca 3000 	str.w	r3, [sl]
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a06:	81a3      	strh	r3, [r4, #12]
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	464a      	mov	r2, r9
 8008a0e:	6921      	ldr	r1, [r4, #16]
 8008a10:	f000 fade 	bl	8008fd0 <memcpy>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	6126      	str	r6, [r4, #16]
 8008a22:	444e      	add	r6, r9
 8008a24:	6026      	str	r6, [r4, #0]
 8008a26:	463e      	mov	r6, r7
 8008a28:	6165      	str	r5, [r4, #20]
 8008a2a:	eba5 0509 	sub.w	r5, r5, r9
 8008a2e:	60a5      	str	r5, [r4, #8]
 8008a30:	42be      	cmp	r6, r7
 8008a32:	d900      	bls.n	8008a36 <__ssputs_r+0x86>
 8008a34:	463e      	mov	r6, r7
 8008a36:	4632      	mov	r2, r6
 8008a38:	4641      	mov	r1, r8
 8008a3a:	6820      	ldr	r0, [r4, #0]
 8008a3c:	f000 fad6 	bl	8008fec <memmove>
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	2000      	movs	r0, #0
 8008a44:	1b9b      	subs	r3, r3, r6
 8008a46:	60a3      	str	r3, [r4, #8]
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	4433      	add	r3, r6
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	e7db      	b.n	8008a08 <__ssputs_r+0x58>
 8008a50:	462a      	mov	r2, r5
 8008a52:	f000 fb39 	bl	80090c8 <_realloc_r>
 8008a56:	4606      	mov	r6, r0
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1e1      	bne.n	8008a20 <__ssputs_r+0x70>
 8008a5c:	4650      	mov	r0, sl
 8008a5e:	6921      	ldr	r1, [r4, #16]
 8008a60:	f000 faea 	bl	8009038 <_free_r>
 8008a64:	e7c7      	b.n	80089f6 <__ssputs_r+0x46>
	...

08008a68 <_svfiprintf_r>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4698      	mov	r8, r3
 8008a6e:	898b      	ldrh	r3, [r1, #12]
 8008a70:	4607      	mov	r7, r0
 8008a72:	061b      	lsls	r3, r3, #24
 8008a74:	460d      	mov	r5, r1
 8008a76:	4614      	mov	r4, r2
 8008a78:	b09d      	sub	sp, #116	; 0x74
 8008a7a:	d50e      	bpl.n	8008a9a <_svfiprintf_r+0x32>
 8008a7c:	690b      	ldr	r3, [r1, #16]
 8008a7e:	b963      	cbnz	r3, 8008a9a <_svfiprintf_r+0x32>
 8008a80:	2140      	movs	r1, #64	; 0x40
 8008a82:	f7ff ff21 	bl	80088c8 <_malloc_r>
 8008a86:	6028      	str	r0, [r5, #0]
 8008a88:	6128      	str	r0, [r5, #16]
 8008a8a:	b920      	cbnz	r0, 8008a96 <_svfiprintf_r+0x2e>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a94:	e0d1      	b.n	8008c3a <_svfiprintf_r+0x1d2>
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	616b      	str	r3, [r5, #20]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	2320      	movs	r3, #32
 8008aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aa4:	2330      	movs	r3, #48	; 0x30
 8008aa6:	f04f 0901 	mov.w	r9, #1
 8008aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c54 <_svfiprintf_r+0x1ec>
 8008ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	469a      	mov	sl, r3
 8008aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008abe:	b10a      	cbz	r2, 8008ac4 <_svfiprintf_r+0x5c>
 8008ac0:	2a25      	cmp	r2, #37	; 0x25
 8008ac2:	d1f9      	bne.n	8008ab8 <_svfiprintf_r+0x50>
 8008ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac8:	d00b      	beq.n	8008ae2 <_svfiprintf_r+0x7a>
 8008aca:	465b      	mov	r3, fp
 8008acc:	4622      	mov	r2, r4
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff ff6d 	bl	80089b0 <__ssputs_r>
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	f000 80aa 	beq.w	8008c30 <_svfiprintf_r+0x1c8>
 8008adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ade:	445a      	add	r2, fp
 8008ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 80a2 	beq.w	8008c30 <_svfiprintf_r+0x1c8>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af6:	f10a 0a01 	add.w	sl, sl, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b02:	931a      	str	r3, [sp, #104]	; 0x68
 8008b04:	4654      	mov	r4, sl
 8008b06:	2205      	movs	r2, #5
 8008b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0c:	4851      	ldr	r0, [pc, #324]	; (8008c54 <_svfiprintf_r+0x1ec>)
 8008b0e:	f000 fa51 	bl	8008fb4 <memchr>
 8008b12:	9a04      	ldr	r2, [sp, #16]
 8008b14:	b9d8      	cbnz	r0, 8008b4e <_svfiprintf_r+0xe6>
 8008b16:	06d0      	lsls	r0, r2, #27
 8008b18:	bf44      	itt	mi
 8008b1a:	2320      	movmi	r3, #32
 8008b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b20:	0711      	lsls	r1, r2, #28
 8008b22:	bf44      	itt	mi
 8008b24:	232b      	movmi	r3, #43	; 0x2b
 8008b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b30:	d015      	beq.n	8008b5e <_svfiprintf_r+0xf6>
 8008b32:	4654      	mov	r4, sl
 8008b34:	2000      	movs	r0, #0
 8008b36:	f04f 0c0a 	mov.w	ip, #10
 8008b3a:	9a07      	ldr	r2, [sp, #28]
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b42:	3b30      	subs	r3, #48	; 0x30
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d94e      	bls.n	8008be6 <_svfiprintf_r+0x17e>
 8008b48:	b1b0      	cbz	r0, 8008b78 <_svfiprintf_r+0x110>
 8008b4a:	9207      	str	r2, [sp, #28]
 8008b4c:	e014      	b.n	8008b78 <_svfiprintf_r+0x110>
 8008b4e:	eba0 0308 	sub.w	r3, r0, r8
 8008b52:	fa09 f303 	lsl.w	r3, r9, r3
 8008b56:	4313      	orrs	r3, r2
 8008b58:	46a2      	mov	sl, r4
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	e7d2      	b.n	8008b04 <_svfiprintf_r+0x9c>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	9103      	str	r1, [sp, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfbb      	ittet	lt
 8008b6a:	425b      	neglt	r3, r3
 8008b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b70:	9307      	strge	r3, [sp, #28]
 8008b72:	9307      	strlt	r3, [sp, #28]
 8008b74:	bfb8      	it	lt
 8008b76:	9204      	strlt	r2, [sp, #16]
 8008b78:	7823      	ldrb	r3, [r4, #0]
 8008b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b7c:	d10c      	bne.n	8008b98 <_svfiprintf_r+0x130>
 8008b7e:	7863      	ldrb	r3, [r4, #1]
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	d135      	bne.n	8008bf0 <_svfiprintf_r+0x188>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	3402      	adds	r4, #2
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	9203      	str	r2, [sp, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bfb8      	it	lt
 8008b92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008c58 <_svfiprintf_r+0x1f0>
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	7821      	ldrb	r1, [r4, #0]
 8008ba2:	f000 fa07 	bl	8008fb4 <memchr>
 8008ba6:	b140      	cbz	r0, 8008bba <_svfiprintf_r+0x152>
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	eba0 000a 	sub.w	r0, r0, sl
 8008bae:	fa03 f000 	lsl.w	r0, r3, r0
 8008bb2:	9b04      	ldr	r3, [sp, #16]
 8008bb4:	3401      	adds	r4, #1
 8008bb6:	4303      	orrs	r3, r0
 8008bb8:	9304      	str	r3, [sp, #16]
 8008bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbe:	2206      	movs	r2, #6
 8008bc0:	4826      	ldr	r0, [pc, #152]	; (8008c5c <_svfiprintf_r+0x1f4>)
 8008bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bc6:	f000 f9f5 	bl	8008fb4 <memchr>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d038      	beq.n	8008c40 <_svfiprintf_r+0x1d8>
 8008bce:	4b24      	ldr	r3, [pc, #144]	; (8008c60 <_svfiprintf_r+0x1f8>)
 8008bd0:	bb1b      	cbnz	r3, 8008c1a <_svfiprintf_r+0x1b2>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	3307      	adds	r3, #7
 8008bd6:	f023 0307 	bic.w	r3, r3, #7
 8008bda:	3308      	adds	r3, #8
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	4433      	add	r3, r6
 8008be2:	9309      	str	r3, [sp, #36]	; 0x24
 8008be4:	e767      	b.n	8008ab6 <_svfiprintf_r+0x4e>
 8008be6:	460c      	mov	r4, r1
 8008be8:	2001      	movs	r0, #1
 8008bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bee:	e7a5      	b.n	8008b3c <_svfiprintf_r+0xd4>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f04f 0c0a 	mov.w	ip, #10
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	3401      	adds	r4, #1
 8008bfa:	9305      	str	r3, [sp, #20]
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c02:	3a30      	subs	r2, #48	; 0x30
 8008c04:	2a09      	cmp	r2, #9
 8008c06:	d903      	bls.n	8008c10 <_svfiprintf_r+0x1a8>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0c5      	beq.n	8008b98 <_svfiprintf_r+0x130>
 8008c0c:	9105      	str	r1, [sp, #20]
 8008c0e:	e7c3      	b.n	8008b98 <_svfiprintf_r+0x130>
 8008c10:	4604      	mov	r4, r0
 8008c12:	2301      	movs	r3, #1
 8008c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c18:	e7f0      	b.n	8008bfc <_svfiprintf_r+0x194>
 8008c1a:	ab03      	add	r3, sp, #12
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	462a      	mov	r2, r5
 8008c20:	4638      	mov	r0, r7
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <_svfiprintf_r+0x1fc>)
 8008c24:	a904      	add	r1, sp, #16
 8008c26:	f3af 8000 	nop.w
 8008c2a:	1c42      	adds	r2, r0, #1
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	d1d6      	bne.n	8008bde <_svfiprintf_r+0x176>
 8008c30:	89ab      	ldrh	r3, [r5, #12]
 8008c32:	065b      	lsls	r3, r3, #25
 8008c34:	f53f af2c 	bmi.w	8008a90 <_svfiprintf_r+0x28>
 8008c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c3a:	b01d      	add	sp, #116	; 0x74
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	ab03      	add	r3, sp, #12
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	462a      	mov	r2, r5
 8008c46:	4638      	mov	r0, r7
 8008c48:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <_svfiprintf_r+0x1fc>)
 8008c4a:	a904      	add	r1, sp, #16
 8008c4c:	f000 f87c 	bl	8008d48 <_printf_i>
 8008c50:	e7eb      	b.n	8008c2a <_svfiprintf_r+0x1c2>
 8008c52:	bf00      	nop
 8008c54:	08009888 	.word	0x08009888
 8008c58:	0800988e 	.word	0x0800988e
 8008c5c:	08009892 	.word	0x08009892
 8008c60:	00000000 	.word	0x00000000
 8008c64:	080089b1 	.word	0x080089b1

08008c68 <_printf_common>:
 8008c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	4699      	mov	r9, r3
 8008c70:	688a      	ldr	r2, [r1, #8]
 8008c72:	690b      	ldr	r3, [r1, #16]
 8008c74:	4607      	mov	r7, r0
 8008c76:	4293      	cmp	r3, r2
 8008c78:	bfb8      	it	lt
 8008c7a:	4613      	movlt	r3, r2
 8008c7c:	6033      	str	r3, [r6, #0]
 8008c7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c82:	460c      	mov	r4, r1
 8008c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c88:	b10a      	cbz	r2, 8008c8e <_printf_common+0x26>
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	6033      	str	r3, [r6, #0]
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	0699      	lsls	r1, r3, #26
 8008c92:	bf42      	ittt	mi
 8008c94:	6833      	ldrmi	r3, [r6, #0]
 8008c96:	3302      	addmi	r3, #2
 8008c98:	6033      	strmi	r3, [r6, #0]
 8008c9a:	6825      	ldr	r5, [r4, #0]
 8008c9c:	f015 0506 	ands.w	r5, r5, #6
 8008ca0:	d106      	bne.n	8008cb0 <_printf_common+0x48>
 8008ca2:	f104 0a19 	add.w	sl, r4, #25
 8008ca6:	68e3      	ldr	r3, [r4, #12]
 8008ca8:	6832      	ldr	r2, [r6, #0]
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	42ab      	cmp	r3, r5
 8008cae:	dc28      	bgt.n	8008d02 <_printf_common+0x9a>
 8008cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cb4:	1e13      	subs	r3, r2, #0
 8008cb6:	6822      	ldr	r2, [r4, #0]
 8008cb8:	bf18      	it	ne
 8008cba:	2301      	movne	r3, #1
 8008cbc:	0692      	lsls	r2, r2, #26
 8008cbe:	d42d      	bmi.n	8008d1c <_printf_common+0xb4>
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cc8:	47c0      	blx	r8
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d020      	beq.n	8008d10 <_printf_common+0xa8>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	68e5      	ldr	r5, [r4, #12]
 8008cd2:	f003 0306 	and.w	r3, r3, #6
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	bf18      	it	ne
 8008cda:	2500      	movne	r5, #0
 8008cdc:	6832      	ldr	r2, [r6, #0]
 8008cde:	f04f 0600 	mov.w	r6, #0
 8008ce2:	68a3      	ldr	r3, [r4, #8]
 8008ce4:	bf08      	it	eq
 8008ce6:	1aad      	subeq	r5, r5, r2
 8008ce8:	6922      	ldr	r2, [r4, #16]
 8008cea:	bf08      	it	eq
 8008cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	bfc4      	itt	gt
 8008cf4:	1a9b      	subgt	r3, r3, r2
 8008cf6:	18ed      	addgt	r5, r5, r3
 8008cf8:	341a      	adds	r4, #26
 8008cfa:	42b5      	cmp	r5, r6
 8008cfc:	d11a      	bne.n	8008d34 <_printf_common+0xcc>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e008      	b.n	8008d14 <_printf_common+0xac>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4652      	mov	r2, sl
 8008d06:	4649      	mov	r1, r9
 8008d08:	4638      	mov	r0, r7
 8008d0a:	47c0      	blx	r8
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d103      	bne.n	8008d18 <_printf_common+0xb0>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d18:	3501      	adds	r5, #1
 8008d1a:	e7c4      	b.n	8008ca6 <_printf_common+0x3e>
 8008d1c:	2030      	movs	r0, #48	; 0x30
 8008d1e:	18e1      	adds	r1, r4, r3
 8008d20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d2a:	4422      	add	r2, r4
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d32:	e7c5      	b.n	8008cc0 <_printf_common+0x58>
 8008d34:	2301      	movs	r3, #1
 8008d36:	4622      	mov	r2, r4
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	47c0      	blx	r8
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d0e6      	beq.n	8008d10 <_printf_common+0xa8>
 8008d42:	3601      	adds	r6, #1
 8008d44:	e7d9      	b.n	8008cfa <_printf_common+0x92>
	...

08008d48 <_printf_i>:
 8008d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	7e0f      	ldrb	r7, [r1, #24]
 8008d4e:	4691      	mov	r9, r2
 8008d50:	2f78      	cmp	r7, #120	; 0x78
 8008d52:	4680      	mov	r8, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	469a      	mov	sl, r3
 8008d58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d5e:	d807      	bhi.n	8008d70 <_printf_i+0x28>
 8008d60:	2f62      	cmp	r7, #98	; 0x62
 8008d62:	d80a      	bhi.n	8008d7a <_printf_i+0x32>
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	f000 80d9 	beq.w	8008f1c <_printf_i+0x1d4>
 8008d6a:	2f58      	cmp	r7, #88	; 0x58
 8008d6c:	f000 80a4 	beq.w	8008eb8 <_printf_i+0x170>
 8008d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d78:	e03a      	b.n	8008df0 <_printf_i+0xa8>
 8008d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d7e:	2b15      	cmp	r3, #21
 8008d80:	d8f6      	bhi.n	8008d70 <_printf_i+0x28>
 8008d82:	a101      	add	r1, pc, #4	; (adr r1, 8008d88 <_printf_i+0x40>)
 8008d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008df5 	.word	0x08008df5
 8008d90:	08008d71 	.word	0x08008d71
 8008d94:	08008d71 	.word	0x08008d71
 8008d98:	08008d71 	.word	0x08008d71
 8008d9c:	08008d71 	.word	0x08008d71
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008d71 	.word	0x08008d71
 8008da8:	08008d71 	.word	0x08008d71
 8008dac:	08008d71 	.word	0x08008d71
 8008db0:	08008d71 	.word	0x08008d71
 8008db4:	08008f03 	.word	0x08008f03
 8008db8:	08008e25 	.word	0x08008e25
 8008dbc:	08008ee5 	.word	0x08008ee5
 8008dc0:	08008d71 	.word	0x08008d71
 8008dc4:	08008d71 	.word	0x08008d71
 8008dc8:	08008f25 	.word	0x08008f25
 8008dcc:	08008d71 	.word	0x08008d71
 8008dd0:	08008e25 	.word	0x08008e25
 8008dd4:	08008d71 	.word	0x08008d71
 8008dd8:	08008d71 	.word	0x08008d71
 8008ddc:	08008eed 	.word	0x08008eed
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	602a      	str	r2, [r5, #0]
 8008de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0a4      	b.n	8008f3e <_printf_i+0x1f6>
 8008df4:	6820      	ldr	r0, [r4, #0]
 8008df6:	6829      	ldr	r1, [r5, #0]
 8008df8:	0606      	lsls	r6, r0, #24
 8008dfa:	f101 0304 	add.w	r3, r1, #4
 8008dfe:	d50a      	bpl.n	8008e16 <_printf_i+0xce>
 8008e00:	680e      	ldr	r6, [r1, #0]
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	da03      	bge.n	8008e10 <_printf_i+0xc8>
 8008e08:	232d      	movs	r3, #45	; 0x2d
 8008e0a:	4276      	negs	r6, r6
 8008e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e10:	230a      	movs	r3, #10
 8008e12:	485e      	ldr	r0, [pc, #376]	; (8008f8c <_printf_i+0x244>)
 8008e14:	e019      	b.n	8008e4a <_printf_i+0x102>
 8008e16:	680e      	ldr	r6, [r1, #0]
 8008e18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e1c:	602b      	str	r3, [r5, #0]
 8008e1e:	bf18      	it	ne
 8008e20:	b236      	sxthne	r6, r6
 8008e22:	e7ef      	b.n	8008e04 <_printf_i+0xbc>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	6820      	ldr	r0, [r4, #0]
 8008e28:	1d19      	adds	r1, r3, #4
 8008e2a:	6029      	str	r1, [r5, #0]
 8008e2c:	0601      	lsls	r1, r0, #24
 8008e2e:	d501      	bpl.n	8008e34 <_printf_i+0xec>
 8008e30:	681e      	ldr	r6, [r3, #0]
 8008e32:	e002      	b.n	8008e3a <_printf_i+0xf2>
 8008e34:	0646      	lsls	r6, r0, #25
 8008e36:	d5fb      	bpl.n	8008e30 <_printf_i+0xe8>
 8008e38:	881e      	ldrh	r6, [r3, #0]
 8008e3a:	2f6f      	cmp	r7, #111	; 0x6f
 8008e3c:	bf0c      	ite	eq
 8008e3e:	2308      	moveq	r3, #8
 8008e40:	230a      	movne	r3, #10
 8008e42:	4852      	ldr	r0, [pc, #328]	; (8008f8c <_printf_i+0x244>)
 8008e44:	2100      	movs	r1, #0
 8008e46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e4a:	6865      	ldr	r5, [r4, #4]
 8008e4c:	2d00      	cmp	r5, #0
 8008e4e:	bfa8      	it	ge
 8008e50:	6821      	ldrge	r1, [r4, #0]
 8008e52:	60a5      	str	r5, [r4, #8]
 8008e54:	bfa4      	itt	ge
 8008e56:	f021 0104 	bicge.w	r1, r1, #4
 8008e5a:	6021      	strge	r1, [r4, #0]
 8008e5c:	b90e      	cbnz	r6, 8008e62 <_printf_i+0x11a>
 8008e5e:	2d00      	cmp	r5, #0
 8008e60:	d04d      	beq.n	8008efe <_printf_i+0x1b6>
 8008e62:	4615      	mov	r5, r2
 8008e64:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e68:	fb03 6711 	mls	r7, r3, r1, r6
 8008e6c:	5dc7      	ldrb	r7, [r0, r7]
 8008e6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e72:	4637      	mov	r7, r6
 8008e74:	42bb      	cmp	r3, r7
 8008e76:	460e      	mov	r6, r1
 8008e78:	d9f4      	bls.n	8008e64 <_printf_i+0x11c>
 8008e7a:	2b08      	cmp	r3, #8
 8008e7c:	d10b      	bne.n	8008e96 <_printf_i+0x14e>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	07de      	lsls	r6, r3, #31
 8008e82:	d508      	bpl.n	8008e96 <_printf_i+0x14e>
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	6861      	ldr	r1, [r4, #4]
 8008e88:	4299      	cmp	r1, r3
 8008e8a:	bfde      	ittt	le
 8008e8c:	2330      	movle	r3, #48	; 0x30
 8008e8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e92:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008e96:	1b52      	subs	r2, r2, r5
 8008e98:	6122      	str	r2, [r4, #16]
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	f8cd a000 	str.w	sl, [sp]
 8008ea4:	aa03      	add	r2, sp, #12
 8008ea6:	f7ff fedf 	bl	8008c68 <_printf_common>
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d14c      	bne.n	8008f48 <_printf_i+0x200>
 8008eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb2:	b004      	add	sp, #16
 8008eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb8:	4834      	ldr	r0, [pc, #208]	; (8008f8c <_printf_i+0x244>)
 8008eba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ebe:	6829      	ldr	r1, [r5, #0]
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ec6:	6029      	str	r1, [r5, #0]
 8008ec8:	061d      	lsls	r5, r3, #24
 8008eca:	d514      	bpl.n	8008ef6 <_printf_i+0x1ae>
 8008ecc:	07df      	lsls	r7, r3, #31
 8008ece:	bf44      	itt	mi
 8008ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ed4:	6023      	strmi	r3, [r4, #0]
 8008ed6:	b91e      	cbnz	r6, 8008ee0 <_printf_i+0x198>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	f023 0320 	bic.w	r3, r3, #32
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	e7af      	b.n	8008e44 <_printf_i+0xfc>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	f043 0320 	orr.w	r3, r3, #32
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	2378      	movs	r3, #120	; 0x78
 8008eee:	4828      	ldr	r0, [pc, #160]	; (8008f90 <_printf_i+0x248>)
 8008ef0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ef4:	e7e3      	b.n	8008ebe <_printf_i+0x176>
 8008ef6:	0659      	lsls	r1, r3, #25
 8008ef8:	bf48      	it	mi
 8008efa:	b2b6      	uxthmi	r6, r6
 8008efc:	e7e6      	b.n	8008ecc <_printf_i+0x184>
 8008efe:	4615      	mov	r5, r2
 8008f00:	e7bb      	b.n	8008e7a <_printf_i+0x132>
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	6826      	ldr	r6, [r4, #0]
 8008f06:	1d18      	adds	r0, r3, #4
 8008f08:	6961      	ldr	r1, [r4, #20]
 8008f0a:	6028      	str	r0, [r5, #0]
 8008f0c:	0635      	lsls	r5, r6, #24
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	d501      	bpl.n	8008f16 <_printf_i+0x1ce>
 8008f12:	6019      	str	r1, [r3, #0]
 8008f14:	e002      	b.n	8008f1c <_printf_i+0x1d4>
 8008f16:	0670      	lsls	r0, r6, #25
 8008f18:	d5fb      	bpl.n	8008f12 <_printf_i+0x1ca>
 8008f1a:	8019      	strh	r1, [r3, #0]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4615      	mov	r5, r2
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	e7ba      	b.n	8008e9a <_printf_i+0x152>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	2100      	movs	r1, #0
 8008f28:	1d1a      	adds	r2, r3, #4
 8008f2a:	602a      	str	r2, [r5, #0]
 8008f2c:	681d      	ldr	r5, [r3, #0]
 8008f2e:	6862      	ldr	r2, [r4, #4]
 8008f30:	4628      	mov	r0, r5
 8008f32:	f000 f83f 	bl	8008fb4 <memchr>
 8008f36:	b108      	cbz	r0, 8008f3c <_printf_i+0x1f4>
 8008f38:	1b40      	subs	r0, r0, r5
 8008f3a:	6060      	str	r0, [r4, #4]
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	6123      	str	r3, [r4, #16]
 8008f40:	2300      	movs	r3, #0
 8008f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f46:	e7a8      	b.n	8008e9a <_printf_i+0x152>
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	47d0      	blx	sl
 8008f52:	3001      	adds	r0, #1
 8008f54:	d0ab      	beq.n	8008eae <_printf_i+0x166>
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	079b      	lsls	r3, r3, #30
 8008f5a:	d413      	bmi.n	8008f84 <_printf_i+0x23c>
 8008f5c:	68e0      	ldr	r0, [r4, #12]
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	4298      	cmp	r0, r3
 8008f62:	bfb8      	it	lt
 8008f64:	4618      	movlt	r0, r3
 8008f66:	e7a4      	b.n	8008eb2 <_printf_i+0x16a>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	4640      	mov	r0, r8
 8008f70:	47d0      	blx	sl
 8008f72:	3001      	adds	r0, #1
 8008f74:	d09b      	beq.n	8008eae <_printf_i+0x166>
 8008f76:	3501      	adds	r5, #1
 8008f78:	68e3      	ldr	r3, [r4, #12]
 8008f7a:	9903      	ldr	r1, [sp, #12]
 8008f7c:	1a5b      	subs	r3, r3, r1
 8008f7e:	42ab      	cmp	r3, r5
 8008f80:	dcf2      	bgt.n	8008f68 <_printf_i+0x220>
 8008f82:	e7eb      	b.n	8008f5c <_printf_i+0x214>
 8008f84:	2500      	movs	r5, #0
 8008f86:	f104 0619 	add.w	r6, r4, #25
 8008f8a:	e7f5      	b.n	8008f78 <_printf_i+0x230>
 8008f8c:	08009899 	.word	0x08009899
 8008f90:	080098aa 	.word	0x080098aa

08008f94 <_sbrk_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	2300      	movs	r3, #0
 8008f98:	4d05      	ldr	r5, [pc, #20]	; (8008fb0 <_sbrk_r+0x1c>)
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7fb fb9c 	bl	80046dc <_sbrk>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_sbrk_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_sbrk_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	200008ac 	.word	0x200008ac

08008fb4 <memchr>:
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	b2c9      	uxtb	r1, r1
 8008fba:	4402      	add	r2, r0
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	d101      	bne.n	8008fc6 <memchr+0x12>
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e003      	b.n	8008fce <memchr+0x1a>
 8008fc6:	7804      	ldrb	r4, [r0, #0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	428c      	cmp	r4, r1
 8008fcc:	d1f6      	bne.n	8008fbc <memchr+0x8>
 8008fce:	bd10      	pop	{r4, pc}

08008fd0 <memcpy>:
 8008fd0:	440a      	add	r2, r1
 8008fd2:	4291      	cmp	r1, r2
 8008fd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fd8:	d100      	bne.n	8008fdc <memcpy+0xc>
 8008fda:	4770      	bx	lr
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fe2:	4291      	cmp	r1, r2
 8008fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fe8:	d1f9      	bne.n	8008fde <memcpy+0xe>
 8008fea:	bd10      	pop	{r4, pc}

08008fec <memmove>:
 8008fec:	4288      	cmp	r0, r1
 8008fee:	b510      	push	{r4, lr}
 8008ff0:	eb01 0402 	add.w	r4, r1, r2
 8008ff4:	d902      	bls.n	8008ffc <memmove+0x10>
 8008ff6:	4284      	cmp	r4, r0
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	d807      	bhi.n	800900c <memmove+0x20>
 8008ffc:	1e43      	subs	r3, r0, #1
 8008ffe:	42a1      	cmp	r1, r4
 8009000:	d008      	beq.n	8009014 <memmove+0x28>
 8009002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800900a:	e7f8      	b.n	8008ffe <memmove+0x12>
 800900c:	4601      	mov	r1, r0
 800900e:	4402      	add	r2, r0
 8009010:	428a      	cmp	r2, r1
 8009012:	d100      	bne.n	8009016 <memmove+0x2a>
 8009014:	bd10      	pop	{r4, pc}
 8009016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800901a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800901e:	e7f7      	b.n	8009010 <memmove+0x24>

08009020 <__malloc_lock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_lock+0x8>)
 8009022:	f000 b880 	b.w	8009126 <__retarget_lock_acquire_recursive>
 8009026:	bf00      	nop
 8009028:	200008b0 	.word	0x200008b0

0800902c <__malloc_unlock>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__malloc_unlock+0x8>)
 800902e:	f000 b87b 	b.w	8009128 <__retarget_lock_release_recursive>
 8009032:	bf00      	nop
 8009034:	200008b0 	.word	0x200008b0

08009038 <_free_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4605      	mov	r5, r0
 800903c:	2900      	cmp	r1, #0
 800903e:	d040      	beq.n	80090c2 <_free_r+0x8a>
 8009040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009044:	1f0c      	subs	r4, r1, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfb8      	it	lt
 800904a:	18e4      	addlt	r4, r4, r3
 800904c:	f7ff ffe8 	bl	8009020 <__malloc_lock>
 8009050:	4a1c      	ldr	r2, [pc, #112]	; (80090c4 <_free_r+0x8c>)
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	b933      	cbnz	r3, 8009064 <_free_r+0x2c>
 8009056:	6063      	str	r3, [r4, #4]
 8009058:	6014      	str	r4, [r2, #0]
 800905a:	4628      	mov	r0, r5
 800905c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009060:	f7ff bfe4 	b.w	800902c <__malloc_unlock>
 8009064:	42a3      	cmp	r3, r4
 8009066:	d908      	bls.n	800907a <_free_r+0x42>
 8009068:	6820      	ldr	r0, [r4, #0]
 800906a:	1821      	adds	r1, r4, r0
 800906c:	428b      	cmp	r3, r1
 800906e:	bf01      	itttt	eq
 8009070:	6819      	ldreq	r1, [r3, #0]
 8009072:	685b      	ldreq	r3, [r3, #4]
 8009074:	1809      	addeq	r1, r1, r0
 8009076:	6021      	streq	r1, [r4, #0]
 8009078:	e7ed      	b.n	8009056 <_free_r+0x1e>
 800907a:	461a      	mov	r2, r3
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	b10b      	cbz	r3, 8009084 <_free_r+0x4c>
 8009080:	42a3      	cmp	r3, r4
 8009082:	d9fa      	bls.n	800907a <_free_r+0x42>
 8009084:	6811      	ldr	r1, [r2, #0]
 8009086:	1850      	adds	r0, r2, r1
 8009088:	42a0      	cmp	r0, r4
 800908a:	d10b      	bne.n	80090a4 <_free_r+0x6c>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	4401      	add	r1, r0
 8009090:	1850      	adds	r0, r2, r1
 8009092:	4283      	cmp	r3, r0
 8009094:	6011      	str	r1, [r2, #0]
 8009096:	d1e0      	bne.n	800905a <_free_r+0x22>
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4401      	add	r1, r0
 800909e:	6011      	str	r1, [r2, #0]
 80090a0:	6053      	str	r3, [r2, #4]
 80090a2:	e7da      	b.n	800905a <_free_r+0x22>
 80090a4:	d902      	bls.n	80090ac <_free_r+0x74>
 80090a6:	230c      	movs	r3, #12
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	e7d6      	b.n	800905a <_free_r+0x22>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	1821      	adds	r1, r4, r0
 80090b0:	428b      	cmp	r3, r1
 80090b2:	bf01      	itttt	eq
 80090b4:	6819      	ldreq	r1, [r3, #0]
 80090b6:	685b      	ldreq	r3, [r3, #4]
 80090b8:	1809      	addeq	r1, r1, r0
 80090ba:	6021      	streq	r1, [r4, #0]
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	6054      	str	r4, [r2, #4]
 80090c0:	e7cb      	b.n	800905a <_free_r+0x22>
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	200008a4 	.word	0x200008a4

080090c8 <_realloc_r>:
 80090c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090cc:	4680      	mov	r8, r0
 80090ce:	4614      	mov	r4, r2
 80090d0:	460e      	mov	r6, r1
 80090d2:	b921      	cbnz	r1, 80090de <_realloc_r+0x16>
 80090d4:	4611      	mov	r1, r2
 80090d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090da:	f7ff bbf5 	b.w	80088c8 <_malloc_r>
 80090de:	b92a      	cbnz	r2, 80090ec <_realloc_r+0x24>
 80090e0:	f7ff ffaa 	bl	8009038 <_free_r>
 80090e4:	4625      	mov	r5, r4
 80090e6:	4628      	mov	r0, r5
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	f000 f81d 	bl	800912a <_malloc_usable_size_r>
 80090f0:	4284      	cmp	r4, r0
 80090f2:	4607      	mov	r7, r0
 80090f4:	d802      	bhi.n	80090fc <_realloc_r+0x34>
 80090f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090fa:	d812      	bhi.n	8009122 <_realloc_r+0x5a>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4640      	mov	r0, r8
 8009100:	f7ff fbe2 	bl	80088c8 <_malloc_r>
 8009104:	4605      	mov	r5, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	d0ed      	beq.n	80090e6 <_realloc_r+0x1e>
 800910a:	42bc      	cmp	r4, r7
 800910c:	4622      	mov	r2, r4
 800910e:	4631      	mov	r1, r6
 8009110:	bf28      	it	cs
 8009112:	463a      	movcs	r2, r7
 8009114:	f7ff ff5c 	bl	8008fd0 <memcpy>
 8009118:	4631      	mov	r1, r6
 800911a:	4640      	mov	r0, r8
 800911c:	f7ff ff8c 	bl	8009038 <_free_r>
 8009120:	e7e1      	b.n	80090e6 <_realloc_r+0x1e>
 8009122:	4635      	mov	r5, r6
 8009124:	e7df      	b.n	80090e6 <_realloc_r+0x1e>

08009126 <__retarget_lock_acquire_recursive>:
 8009126:	4770      	bx	lr

08009128 <__retarget_lock_release_recursive>:
 8009128:	4770      	bx	lr

0800912a <_malloc_usable_size_r>:
 800912a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800912e:	1f18      	subs	r0, r3, #4
 8009130:	2b00      	cmp	r3, #0
 8009132:	bfbc      	itt	lt
 8009134:	580b      	ldrlt	r3, [r1, r0]
 8009136:	18c0      	addlt	r0, r0, r3
 8009138:	4770      	bx	lr
	...

0800913c <_init>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr

08009148 <_fini>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	bf00      	nop
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr
