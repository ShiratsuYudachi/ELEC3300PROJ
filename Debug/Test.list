
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac5c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bf34  0800ae48  0800ae48  0001ae48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d7c  08016d7c  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  08016d7c  08016d7c  00026d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d84  08016d84  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08016d84  08016d84  00026d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d90  08016d90  00026d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08016d94  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  200000b0  08016e44  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  08016e44  00030d38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d15a  00000000  00000000  000300d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fa7  00000000  00000000  0004d233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  000521e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  000537a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b4e  00000000  00000000  00054b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e58e  00000000  00000000  00075686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f373  00000000  00000000  00093c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122f87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006210  00000000  00000000  00122fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000b0 	.word	0x200000b0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ae2c 	.word	0x0800ae2c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000b4 	.word	0x200000b4
 8000224:	0800ae2c 	.word	0x0800ae2c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_fmul>:
 8000d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d98:	bf1e      	ittt	ne
 8000d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9e:	ea92 0f0c 	teqne	r2, ip
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d06f      	beq.n	8000e88 <__aeabi_fmul+0xf8>
 8000da8:	441a      	add	r2, r3
 8000daa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dae:	0240      	lsls	r0, r0, #9
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000db6:	d01e      	beq.n	8000df6 <__aeabi_fmul+0x66>
 8000db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd0:	bf3e      	ittt	cc
 8000dd2:	0049      	lslcc	r1, r1, #1
 8000dd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd8:	005b      	lslcc	r3, r3, #1
 8000dda:	ea40 0001 	orr.w	r0, r0, r1
 8000dde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de2:	2afd      	cmp	r2, #253	; 0xfd
 8000de4:	d81d      	bhi.n	8000e22 <__aeabi_fmul+0x92>
 8000de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dee:	bf08      	it	eq
 8000df0:	f020 0001 	biceq.w	r0, r0, #1
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfe:	bf08      	it	eq
 8000e00:	0249      	lsleq	r1, r1, #9
 8000e02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0a:	3a7f      	subs	r2, #127	; 0x7f
 8000e0c:	bfc2      	ittt	gt
 8000e0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e16:	4770      	bxgt	lr
 8000e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	3a01      	subs	r2, #1
 8000e22:	dc5d      	bgt.n	8000ee0 <__aeabi_fmul+0x150>
 8000e24:	f112 0f19 	cmn.w	r2, #25
 8000e28:	bfdc      	itt	le
 8000e2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e2e:	4770      	bxle	lr
 8000e30:	f1c2 0200 	rsb	r2, r2, #0
 8000e34:	0041      	lsls	r1, r0, #1
 8000e36:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3a:	f1c2 0220 	rsb	r2, r2, #32
 8000e3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e46:	f140 0000 	adc.w	r0, r0, #0
 8000e4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e4e:	bf08      	it	eq
 8000e50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e54:	4770      	bx	lr
 8000e56:	f092 0f00 	teq	r2, #0
 8000e5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5e:	bf02      	ittt	eq
 8000e60:	0040      	lsleq	r0, r0, #1
 8000e62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e66:	3a01      	subeq	r2, #1
 8000e68:	d0f9      	beq.n	8000e5e <__aeabi_fmul+0xce>
 8000e6a:	ea40 000c 	orr.w	r0, r0, ip
 8000e6e:	f093 0f00 	teq	r3, #0
 8000e72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	bf02      	ittt	eq
 8000e78:	0049      	lsleq	r1, r1, #1
 8000e7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7e:	3b01      	subeq	r3, #1
 8000e80:	d0f9      	beq.n	8000e76 <__aeabi_fmul+0xe6>
 8000e82:	ea41 010c 	orr.w	r1, r1, ip
 8000e86:	e78f      	b.n	8000da8 <__aeabi_fmul+0x18>
 8000e88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	bf18      	it	ne
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d00a      	beq.n	8000eae <__aeabi_fmul+0x11e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1d8      	bne.n	8000e56 <__aeabi_fmul+0xc6>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	4770      	bx	lr
 8000eae:	f090 0f00 	teq	r0, #0
 8000eb2:	bf17      	itett	ne
 8000eb4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb8:	4608      	moveq	r0, r1
 8000eba:	f091 0f00 	teqne	r1, #0
 8000ebe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec2:	d014      	beq.n	8000eee <__aeabi_fmul+0x15e>
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	d101      	bne.n	8000ece <__aeabi_fmul+0x13e>
 8000eca:	0242      	lsls	r2, r0, #9
 8000ecc:	d10f      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000ece:	ea93 0f0c 	teq	r3, ip
 8000ed2:	d103      	bne.n	8000edc <__aeabi_fmul+0x14c>
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	bf18      	it	ne
 8000ed8:	4608      	movne	r0, r1
 8000eda:	d108      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eec:	4770      	bx	lr
 8000eee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_fdiv>:
 8000ef8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000efc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f00:	bf1e      	ittt	ne
 8000f02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f06:	ea92 0f0c 	teqne	r2, ip
 8000f0a:	ea93 0f0c 	teqne	r3, ip
 8000f0e:	d069      	beq.n	8000fe4 <__aeabi_fdiv+0xec>
 8000f10:	eba2 0203 	sub.w	r2, r2, r3
 8000f14:	ea80 0c01 	eor.w	ip, r0, r1
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f1e:	d037      	beq.n	8000f90 <__aeabi_fdiv+0x98>
 8000f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f30:	428b      	cmp	r3, r1
 8000f32:	bf38      	it	cc
 8000f34:	005b      	lslcc	r3, r3, #1
 8000f36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	bf24      	itt	cs
 8000f42:	1a5b      	subcs	r3, r3, r1
 8000f44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5a:	bf24      	itt	cs
 8000f5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f68:	bf24      	itt	cs
 8000f6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	bf18      	it	ne
 8000f76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7a:	d1e0      	bne.n	8000f3e <__aeabi_fdiv+0x46>
 8000f7c:	2afd      	cmp	r2, #253	; 0xfd
 8000f7e:	f63f af50 	bhi.w	8000e22 <__aeabi_fmul+0x92>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f88:	bf08      	it	eq
 8000f8a:	f020 0001 	biceq.w	r0, r0, #1
 8000f8e:	4770      	bx	lr
 8000f90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f98:	327f      	adds	r2, #127	; 0x7f
 8000f9a:	bfc2      	ittt	gt
 8000f9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa4:	4770      	bxgt	lr
 8000fa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	e737      	b.n	8000e22 <__aeabi_fmul+0x92>
 8000fb2:	f092 0f00 	teq	r2, #0
 8000fb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fba:	bf02      	ittt	eq
 8000fbc:	0040      	lsleq	r0, r0, #1
 8000fbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc2:	3a01      	subeq	r2, #1
 8000fc4:	d0f9      	beq.n	8000fba <__aeabi_fdiv+0xc2>
 8000fc6:	ea40 000c 	orr.w	r0, r0, ip
 8000fca:	f093 0f00 	teq	r3, #0
 8000fce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	bf02      	ittt	eq
 8000fd4:	0049      	lsleq	r1, r1, #1
 8000fd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fda:	3b01      	subeq	r3, #1
 8000fdc:	d0f9      	beq.n	8000fd2 <__aeabi_fdiv+0xda>
 8000fde:	ea41 010c 	orr.w	r1, r1, ip
 8000fe2:	e795      	b.n	8000f10 <__aeabi_fdiv+0x18>
 8000fe4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d108      	bne.n	8001000 <__aeabi_fdiv+0x108>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	f47f af7d 	bne.w	8000eee <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	f47f af70 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e776      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001000:	ea93 0f0c 	teq	r3, ip
 8001004:	d104      	bne.n	8001010 <__aeabi_fdiv+0x118>
 8001006:	024b      	lsls	r3, r1, #9
 8001008:	f43f af4c 	beq.w	8000ea4 <__aeabi_fmul+0x114>
 800100c:	4608      	mov	r0, r1
 800100e:	e76e      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001010:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001014:	bf18      	it	ne
 8001016:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101a:	d1ca      	bne.n	8000fb2 <__aeabi_fdiv+0xba>
 800101c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001020:	f47f af5c 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8001024:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001028:	f47f af3c 	bne.w	8000ea4 <__aeabi_fmul+0x114>
 800102c:	e75f      	b.n	8000eee <__aeabi_fmul+0x15e>
 800102e:	bf00      	nop

08001030 <__gesf2>:
 8001030:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001034:	e006      	b.n	8001044 <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__lesf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	e002      	b.n	8001044 <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__cmpsf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001048:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800104c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001054:	bf18      	it	ne
 8001056:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800105a:	d011      	beq.n	8001080 <__cmpsf2+0x40>
 800105c:	b001      	add	sp, #4
 800105e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001062:	bf18      	it	ne
 8001064:	ea90 0f01 	teqne	r0, r1
 8001068:	bf58      	it	pl
 800106a:	ebb2 0003 	subspl.w	r0, r2, r3
 800106e:	bf88      	it	hi
 8001070:	17c8      	asrhi	r0, r1, #31
 8001072:	bf38      	it	cc
 8001074:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001078:	bf18      	it	ne
 800107a:	f040 0001 	orrne.w	r0, r0, #1
 800107e:	4770      	bx	lr
 8001080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001084:	d102      	bne.n	800108c <__cmpsf2+0x4c>
 8001086:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108a:	d105      	bne.n	8001098 <__cmpsf2+0x58>
 800108c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001090:	d1e4      	bne.n	800105c <__cmpsf2+0x1c>
 8001092:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001096:	d0e1      	beq.n	800105c <__cmpsf2+0x1c>
 8001098:	f85d 0b04 	ldr.w	r0, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_cfrcmple>:
 80010a0:	4684      	mov	ip, r0
 80010a2:	4608      	mov	r0, r1
 80010a4:	4661      	mov	r1, ip
 80010a6:	e7ff      	b.n	80010a8 <__aeabi_cfcmpeq>

080010a8 <__aeabi_cfcmpeq>:
 80010a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010aa:	f7ff ffc9 	bl	8001040 <__cmpsf2>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	bf48      	it	mi
 80010b2:	f110 0f00 	cmnmi.w	r0, #0
 80010b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b8 <__aeabi_fcmpeq>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff fff4 	bl	80010a8 <__aeabi_cfcmpeq>
 80010c0:	bf0c      	ite	eq
 80010c2:	2001      	moveq	r0, #1
 80010c4:	2000      	movne	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmplt>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffea 	bl	80010a8 <__aeabi_cfcmpeq>
 80010d4:	bf34      	ite	cc
 80010d6:	2001      	movcc	r0, #1
 80010d8:	2000      	movcs	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmple>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffe0 	bl	80010a8 <__aeabi_cfcmpeq>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpge>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffd2 	bl	80010a0 <__aeabi_cfrcmple>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpgt>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffc8 	bl	80010a0 <__aeabi_cfrcmple>
 8001110:	bf34      	ite	cc
 8001112:	2001      	movcc	r0, #1
 8001114:	2000      	movcs	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpun>:
 800111c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001120:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001124:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x14>
 800112a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800112e:	d108      	bne.n	8001142 <__aeabi_fcmpun+0x26>
 8001130:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001134:	d102      	bne.n	800113c <__aeabi_fcmpun+0x20>
 8001136:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800113a:	d102      	bne.n	8001142 <__aeabi_fcmpun+0x26>
 800113c:	f04f 0000 	mov.w	r0, #0
 8001140:	4770      	bx	lr
 8001142:	f04f 0001 	mov.w	r0, #1
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800119c:	f000 b976 	b.w	800148c <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	9e08      	ldr	r6, [sp, #32]
 80011be:	460d      	mov	r5, r1
 80011c0:	4604      	mov	r4, r0
 80011c2:	4688      	mov	r8, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d14d      	bne.n	8001264 <__udivmoddi4+0xac>
 80011c8:	428a      	cmp	r2, r1
 80011ca:	4694      	mov	ip, r2
 80011cc:	d968      	bls.n	80012a0 <__udivmoddi4+0xe8>
 80011ce:	fab2 f282 	clz	r2, r2
 80011d2:	b152      	cbz	r2, 80011ea <__udivmoddi4+0x32>
 80011d4:	fa01 f302 	lsl.w	r3, r1, r2
 80011d8:	f1c2 0120 	rsb	r1, r2, #32
 80011dc:	fa20 f101 	lsr.w	r1, r0, r1
 80011e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e4:	ea41 0803 	orr.w	r8, r1, r3
 80011e8:	4094      	lsls	r4, r2
 80011ea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011ee:	fbb8 f7f1 	udiv	r7, r8, r1
 80011f2:	fa1f fe8c 	uxth.w	lr, ip
 80011f6:	fb01 8817 	mls	r8, r1, r7, r8
 80011fa:	fb07 f00e 	mul.w	r0, r7, lr
 80011fe:	0c23      	lsrs	r3, r4, #16
 8001200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001204:	4298      	cmp	r0, r3
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x66>
 8001208:	eb1c 0303 	adds.w	r3, ip, r3
 800120c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8001210:	f080 811e 	bcs.w	8001450 <__udivmoddi4+0x298>
 8001214:	4298      	cmp	r0, r3
 8001216:	f240 811b 	bls.w	8001450 <__udivmoddi4+0x298>
 800121a:	3f02      	subs	r7, #2
 800121c:	4463      	add	r3, ip
 800121e:	1a1b      	subs	r3, r3, r0
 8001220:	fbb3 f0f1 	udiv	r0, r3, r1
 8001224:	fb01 3310 	mls	r3, r1, r0, r3
 8001228:	fb00 fe0e 	mul.w	lr, r0, lr
 800122c:	b2a4      	uxth	r4, r4
 800122e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001232:	45a6      	cmp	lr, r4
 8001234:	d90a      	bls.n	800124c <__udivmoddi4+0x94>
 8001236:	eb1c 0404 	adds.w	r4, ip, r4
 800123a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800123e:	f080 8109 	bcs.w	8001454 <__udivmoddi4+0x29c>
 8001242:	45a6      	cmp	lr, r4
 8001244:	f240 8106 	bls.w	8001454 <__udivmoddi4+0x29c>
 8001248:	4464      	add	r4, ip
 800124a:	3802      	subs	r0, #2
 800124c:	2100      	movs	r1, #0
 800124e:	eba4 040e 	sub.w	r4, r4, lr
 8001252:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001256:	b11e      	cbz	r6, 8001260 <__udivmoddi4+0xa8>
 8001258:	2300      	movs	r3, #0
 800125a:	40d4      	lsrs	r4, r2
 800125c:	e9c6 4300 	strd	r4, r3, [r6]
 8001260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001264:	428b      	cmp	r3, r1
 8001266:	d908      	bls.n	800127a <__udivmoddi4+0xc2>
 8001268:	2e00      	cmp	r6, #0
 800126a:	f000 80ee 	beq.w	800144a <__udivmoddi4+0x292>
 800126e:	2100      	movs	r1, #0
 8001270:	e9c6 0500 	strd	r0, r5, [r6]
 8001274:	4608      	mov	r0, r1
 8001276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127a:	fab3 f183 	clz	r1, r3
 800127e:	2900      	cmp	r1, #0
 8001280:	d14a      	bne.n	8001318 <__udivmoddi4+0x160>
 8001282:	42ab      	cmp	r3, r5
 8001284:	d302      	bcc.n	800128c <__udivmoddi4+0xd4>
 8001286:	4282      	cmp	r2, r0
 8001288:	f200 80fc 	bhi.w	8001484 <__udivmoddi4+0x2cc>
 800128c:	1a84      	subs	r4, r0, r2
 800128e:	eb65 0303 	sbc.w	r3, r5, r3
 8001292:	2001      	movs	r0, #1
 8001294:	4698      	mov	r8, r3
 8001296:	2e00      	cmp	r6, #0
 8001298:	d0e2      	beq.n	8001260 <__udivmoddi4+0xa8>
 800129a:	e9c6 4800 	strd	r4, r8, [r6]
 800129e:	e7df      	b.n	8001260 <__udivmoddi4+0xa8>
 80012a0:	b902      	cbnz	r2, 80012a4 <__udivmoddi4+0xec>
 80012a2:	deff      	udf	#255	; 0xff
 80012a4:	fab2 f282 	clz	r2, r2
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	f040 8091 	bne.w	80013d0 <__udivmoddi4+0x218>
 80012ae:	eba1 000c 	sub.w	r0, r1, ip
 80012b2:	2101      	movs	r1, #1
 80012b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b8:	fa1f fe8c 	uxth.w	lr, ip
 80012bc:	fbb0 f3f7 	udiv	r3, r0, r7
 80012c0:	fb07 0013 	mls	r0, r7, r3, r0
 80012c4:	0c25      	lsrs	r5, r4, #16
 80012c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012ca:	fb0e f003 	mul.w	r0, lr, r3
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d908      	bls.n	80012e4 <__udivmoddi4+0x12c>
 80012d2:	eb1c 0505 	adds.w	r5, ip, r5
 80012d6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012da:	d202      	bcs.n	80012e2 <__udivmoddi4+0x12a>
 80012dc:	42a8      	cmp	r0, r5
 80012de:	f200 80ce 	bhi.w	800147e <__udivmoddi4+0x2c6>
 80012e2:	4643      	mov	r3, r8
 80012e4:	1a2d      	subs	r5, r5, r0
 80012e6:	fbb5 f0f7 	udiv	r0, r5, r7
 80012ea:	fb07 5510 	mls	r5, r7, r0, r5
 80012ee:	fb0e fe00 	mul.w	lr, lr, r0
 80012f2:	b2a4      	uxth	r4, r4
 80012f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012f8:	45a6      	cmp	lr, r4
 80012fa:	d908      	bls.n	800130e <__udivmoddi4+0x156>
 80012fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001300:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001304:	d202      	bcs.n	800130c <__udivmoddi4+0x154>
 8001306:	45a6      	cmp	lr, r4
 8001308:	f200 80b6 	bhi.w	8001478 <__udivmoddi4+0x2c0>
 800130c:	4628      	mov	r0, r5
 800130e:	eba4 040e 	sub.w	r4, r4, lr
 8001312:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001316:	e79e      	b.n	8001256 <__udivmoddi4+0x9e>
 8001318:	f1c1 0720 	rsb	r7, r1, #32
 800131c:	408b      	lsls	r3, r1
 800131e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001322:	ea4c 0c03 	orr.w	ip, ip, r3
 8001326:	fa25 fa07 	lsr.w	sl, r5, r7
 800132a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800132e:	fbba f8f9 	udiv	r8, sl, r9
 8001332:	fa20 f307 	lsr.w	r3, r0, r7
 8001336:	fb09 aa18 	mls	sl, r9, r8, sl
 800133a:	408d      	lsls	r5, r1
 800133c:	fa1f fe8c 	uxth.w	lr, ip
 8001340:	431d      	orrs	r5, r3
 8001342:	fa00 f301 	lsl.w	r3, r0, r1
 8001346:	fb08 f00e 	mul.w	r0, r8, lr
 800134a:	0c2c      	lsrs	r4, r5, #16
 800134c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001350:	42a0      	cmp	r0, r4
 8001352:	fa02 f201 	lsl.w	r2, r2, r1
 8001356:	d90b      	bls.n	8001370 <__udivmoddi4+0x1b8>
 8001358:	eb1c 0404 	adds.w	r4, ip, r4
 800135c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001360:	f080 8088 	bcs.w	8001474 <__udivmoddi4+0x2bc>
 8001364:	42a0      	cmp	r0, r4
 8001366:	f240 8085 	bls.w	8001474 <__udivmoddi4+0x2bc>
 800136a:	f1a8 0802 	sub.w	r8, r8, #2
 800136e:	4464      	add	r4, ip
 8001370:	1a24      	subs	r4, r4, r0
 8001372:	fbb4 f0f9 	udiv	r0, r4, r9
 8001376:	fb09 4410 	mls	r4, r9, r0, r4
 800137a:	fb00 fe0e 	mul.w	lr, r0, lr
 800137e:	b2ad      	uxth	r5, r5
 8001380:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001384:	45a6      	cmp	lr, r4
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x1e2>
 8001388:	eb1c 0404 	adds.w	r4, ip, r4
 800138c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001390:	d26c      	bcs.n	800146c <__udivmoddi4+0x2b4>
 8001392:	45a6      	cmp	lr, r4
 8001394:	d96a      	bls.n	800146c <__udivmoddi4+0x2b4>
 8001396:	3802      	subs	r0, #2
 8001398:	4464      	add	r4, ip
 800139a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800139e:	fba0 9502 	umull	r9, r5, r0, r2
 80013a2:	eba4 040e 	sub.w	r4, r4, lr
 80013a6:	42ac      	cmp	r4, r5
 80013a8:	46c8      	mov	r8, r9
 80013aa:	46ae      	mov	lr, r5
 80013ac:	d356      	bcc.n	800145c <__udivmoddi4+0x2a4>
 80013ae:	d053      	beq.n	8001458 <__udivmoddi4+0x2a0>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d069      	beq.n	8001488 <__udivmoddi4+0x2d0>
 80013b4:	ebb3 0208 	subs.w	r2, r3, r8
 80013b8:	eb64 040e 	sbc.w	r4, r4, lr
 80013bc:	fa22 f301 	lsr.w	r3, r2, r1
 80013c0:	fa04 f707 	lsl.w	r7, r4, r7
 80013c4:	431f      	orrs	r7, r3
 80013c6:	40cc      	lsrs	r4, r1
 80013c8:	e9c6 7400 	strd	r7, r4, [r6]
 80013cc:	2100      	movs	r1, #0
 80013ce:	e747      	b.n	8001260 <__udivmoddi4+0xa8>
 80013d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80013d4:	f1c2 0120 	rsb	r1, r2, #32
 80013d8:	fa25 f301 	lsr.w	r3, r5, r1
 80013dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013e0:	fa20 f101 	lsr.w	r1, r0, r1
 80013e4:	4095      	lsls	r5, r2
 80013e6:	430d      	orrs	r5, r1
 80013e8:	fbb3 f1f7 	udiv	r1, r3, r7
 80013ec:	fb07 3311 	mls	r3, r7, r1, r3
 80013f0:	fa1f fe8c 	uxth.w	lr, ip
 80013f4:	0c28      	lsrs	r0, r5, #16
 80013f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013fa:	fb01 f30e 	mul.w	r3, r1, lr
 80013fe:	4283      	cmp	r3, r0
 8001400:	fa04 f402 	lsl.w	r4, r4, r2
 8001404:	d908      	bls.n	8001418 <__udivmoddi4+0x260>
 8001406:	eb1c 0000 	adds.w	r0, ip, r0
 800140a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800140e:	d22f      	bcs.n	8001470 <__udivmoddi4+0x2b8>
 8001410:	4283      	cmp	r3, r0
 8001412:	d92d      	bls.n	8001470 <__udivmoddi4+0x2b8>
 8001414:	3902      	subs	r1, #2
 8001416:	4460      	add	r0, ip
 8001418:	1ac0      	subs	r0, r0, r3
 800141a:	fbb0 f3f7 	udiv	r3, r0, r7
 800141e:	fb07 0013 	mls	r0, r7, r3, r0
 8001422:	b2ad      	uxth	r5, r5
 8001424:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001428:	fb03 f00e 	mul.w	r0, r3, lr
 800142c:	42a8      	cmp	r0, r5
 800142e:	d908      	bls.n	8001442 <__udivmoddi4+0x28a>
 8001430:	eb1c 0505 	adds.w	r5, ip, r5
 8001434:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001438:	d216      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 800143a:	42a8      	cmp	r0, r5
 800143c:	d914      	bls.n	8001468 <__udivmoddi4+0x2b0>
 800143e:	3b02      	subs	r3, #2
 8001440:	4465      	add	r5, ip
 8001442:	1a28      	subs	r0, r5, r0
 8001444:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001448:	e738      	b.n	80012bc <__udivmoddi4+0x104>
 800144a:	4631      	mov	r1, r6
 800144c:	4630      	mov	r0, r6
 800144e:	e707      	b.n	8001260 <__udivmoddi4+0xa8>
 8001450:	462f      	mov	r7, r5
 8001452:	e6e4      	b.n	800121e <__udivmoddi4+0x66>
 8001454:	4618      	mov	r0, r3
 8001456:	e6f9      	b.n	800124c <__udivmoddi4+0x94>
 8001458:	454b      	cmp	r3, r9
 800145a:	d2a9      	bcs.n	80013b0 <__udivmoddi4+0x1f8>
 800145c:	ebb9 0802 	subs.w	r8, r9, r2
 8001460:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001464:	3801      	subs	r0, #1
 8001466:	e7a3      	b.n	80013b0 <__udivmoddi4+0x1f8>
 8001468:	4643      	mov	r3, r8
 800146a:	e7ea      	b.n	8001442 <__udivmoddi4+0x28a>
 800146c:	4628      	mov	r0, r5
 800146e:	e794      	b.n	800139a <__udivmoddi4+0x1e2>
 8001470:	4641      	mov	r1, r8
 8001472:	e7d1      	b.n	8001418 <__udivmoddi4+0x260>
 8001474:	46d0      	mov	r8, sl
 8001476:	e77b      	b.n	8001370 <__udivmoddi4+0x1b8>
 8001478:	4464      	add	r4, ip
 800147a:	3802      	subs	r0, #2
 800147c:	e747      	b.n	800130e <__udivmoddi4+0x156>
 800147e:	3b02      	subs	r3, #2
 8001480:	4465      	add	r5, ip
 8001482:	e72f      	b.n	80012e4 <__udivmoddi4+0x12c>
 8001484:	4608      	mov	r0, r1
 8001486:	e706      	b.n	8001296 <__udivmoddi4+0xde>
 8001488:	4631      	mov	r1, r6
 800148a:	e6e9      	b.n	8001260 <__udivmoddi4+0xa8>

0800148c <__aeabi_idiv0>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <_ZN6Screen6updateEv>:
    touch.y = 0;
    // Update all UI elements
}

void Screen::update() // this replace the original updateAllElements function
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
 8001496:	6078      	str	r0, [r7, #4]
    static bool firstCall = true;
    if (firstCall)
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <_ZN6Screen6updateEv+0x84>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00f      	beq.n	80014c0 <_ZN6Screen6updateEv+0x30>
    {
        LCD_Clear_Color(0, 0, 240, 320, WHITE);
 80014a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014aa:	22f0      	movs	r2, #240	; 0xf0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	f002 f806 	bl	80034c0 <LCD_Clear_Color>
        render();
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f831 	bl	800151c <_ZN6Screen6renderEv>
        // printToLCD("x=   , y=   ", 0);
        firstCall = false;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <_ZN6Screen6updateEv+0x84>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
    }
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4914      	ldr	r1, [pc, #80]	; (8001518 <_ZN6Screen6updateEv+0x88>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 f920 	bl	800670c <XPT2046_Get_TouchedPoint>
    sprintf(str, "x=%d, y=%d", touch.x, touch.y);
    // printToLCD(str, 0);
    // }
    // }
#endif
    for (int i = 0; i < elementNum; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4293      	cmp	r3, r2
 80014dc:	da11      	bge.n	8001502 <_ZN6Screen6updateEv+0x72>
    {
        elements[i]->update(touch.x, touch.y);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3304      	adds	r3, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	8939      	ldrh	r1, [r7, #8]
 80014f6:	897a      	ldrh	r2, [r7, #10]
 80014f8:	4798      	blx	r3
    for (int i = 0; i < elementNum; i++)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	e7e6      	b.n	80014d0 <_ZN6Screen6updateEv+0x40>
    }
    touch.x = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	813b      	strh	r3, [r7, #8]
    touch.y = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	817b      	strh	r3, [r7, #10]
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000000 	.word	0x20000000
 8001518:	20000010 	.word	0x20000010

0800151c <_ZN6Screen6renderEv>:

void Screen::render()
    {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
        for (int i = 0; i < elementNum; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4293      	cmp	r3, r2
 8001534:	da0f      	bge.n	8001556 <_ZN6Screen6renderEv+0x3a>
        {
            elements[i]->render();
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4608      	mov	r0, r1
 800154c:	4798      	blx	r3
        for (int i = 0; i < elementNum; i++)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e7e8      	b.n	8001528 <_ZN6Screen6renderEv+0xc>
        }
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_ZN6StringC1EPKc>:
    char str[STRING_LEN];
    int len;
    String(){
        len = 0;
    }
    String(const char* s){
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
        len = strlen(s);
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f7fe fe5d 	bl	8000228 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(str, s);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f008 fff4 	bl	800a568 <strcpy>
    }
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <_ZN10PulseMotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>:

protected:
    int32_t stepSum = 0;

public:
    PulseMotor(TIM_HandleTypeDef *pTim, uint32_t timChannel, GPIO_TypeDef *pGPIO, uint16_t GPIO_Pin)
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    {
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <_ZN10PulseMotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x4c>)
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2247      	movs	r2, #71	; 0x47
 80015ac:	831a      	strh	r2, [r3, #24]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
        this->pTim = pTim;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	601a      	str	r2, [r3, #0]
        this->timChannel = timChannel;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	605a      	str	r2, [r3, #4]
        this->pGPIO = pGPIO;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	609a      	str	r2, [r3, #8]
        this->GPIO_Pin = GPIO_Pin;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8b3a      	ldrh	r2, [r7, #24]
 80015ca:	819a      	strh	r2, [r3, #12]
    }
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	044aa200 	.word	0x044aa200

080015dc <_ZN10PulseMotor12getFrequencyEv>:

    uint16_t getFrequency()
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    {
        return inputFrequency / (prescaler + 1) / (CounterPeriod + 1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	3301      	adds	r3, #1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	8b12      	ldrh	r2, [r2, #24]
 80015f6:	3201      	adds	r2, #1
 80015f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015fc:	b29b      	uxth	r3, r3
    }
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <_ZN10PulseMotor12setFrequencyEt>:

    // pulse sending frequency
    void setFrequency(uint16_t frequency)
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
    {
        prescaler = inputFrequency / (CounterPeriod + 1) / frequency - 1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	8b12      	ldrh	r2, [r2, #24]
 800161c:	3201      	adds	r2, #1
 800161e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	611a      	str	r2, [r3, #16]
        __HAL_TIM_SET_PRESCALER(pTim, prescaler);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6912      	ldr	r2, [r2, #16]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <_ZN10PulseMotor12setDirectionEh>:

    // direction: 0 or 1
    void setDirection(uint8_t direction)
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
    {
        HAL_GPIO_WritePin(pGPIO, GPIO_Pin, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6898      	ldr	r0, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	8999      	ldrh	r1, [r3, #12]
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_ZN10PulseMotor12setDirectionEh+0x1e>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <_ZN10PulseMotor12setDirectionEh+0x20>
 8001662:	2300      	movs	r3, #0
 8001664:	461a      	mov	r2, r3
 8001666:	f006 faa2 	bl	8007bae <HAL_GPIO_WritePin>
    }
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZN10PulseMotor5pulseEt>:

    void pulse(uint16_t pulseNum)
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
    {
        // PulseDMABuff[pulseNum] = 0;
        HAL_TIM_PWM_Start_DMA(pTim, timChannel, (uint32_t *)PulseDMABuff, pulseNum);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <_ZN10PulseMotor5pulseEt+0x24>)
 800168c:	f007 f958 	bl	8008940 <HAL_TIM_PWM_Start_DMA>
    }
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	0800af1c 	.word	0x0800af1c

0800169c <_ZN10PulseMotor4stepEhm>:
    {
        pulse(pulseNum);
        HAL_Delay((float)pulseNum / getFrequency() * 1000 + 10);
    }

    void step(uint8_t direction, uint32_t stepNum)
 800169c:	b580      	push	{r7, lr}
 800169e:	b096      	sub	sp, #88	; 0x58
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	460b      	mov	r3, r1
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	72fb      	strb	r3, [r7, #11]
    {   
        if (stepNum == 0)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02b      	beq.n	8001708 <_ZN10PulseMotor4stepEhm+0x6c>
        {
            return;
        }
        if (stepNum > DMA_BUFFER_SIZE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f641 3258 	movw	r2, #7000	; 0x1b58
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d90c      	bls.n	80016d4 <_ZN10PulseMotor4stepEhm+0x38>
        {
            printToLCD("StepNum too large", 18);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4914      	ldr	r1, [pc, #80]	; (8001710 <_ZN10PulseMotor4stepEhm+0x74>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff4c 	bl	800155e <_ZN6StringC1EPKc>
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2112      	movs	r1, #18
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 fe07 	bl	80062e0 <_Z10printToLCDRK6Stringt>
            return;
 80016d2:	e01a      	b.n	800170a <_ZN10PulseMotor4stepEhm+0x6e>
        }
        stepSum += direction ? stepNum : -stepNum;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	461a      	mov	r2, r3
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_ZN10PulseMotor4stepEhm+0x4a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	425b      	negs	r3, r3
 80016e4:	e000      	b.n	80016e8 <_ZN10PulseMotor4stepEhm+0x4c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	61da      	str	r2, [r3, #28]
        setDirection(direction);
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	4619      	mov	r1, r3
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff ffa5 	bl	8001644 <_ZN10PulseMotor12setDirectionEh>
        pulse(stepNum);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4619      	mov	r1, r3
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff ffb7 	bl	8001674 <_ZN10PulseMotor5pulseEt>
 8001706:	e000      	b.n	800170a <_ZN10PulseMotor4stepEhm+0x6e>
            return;
 8001708:	bf00      	nop
    }
 800170a:	3758      	adds	r7, #88	; 0x58
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	0800ae48 	.word	0x0800ae48

08001714 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>:
    const int maxDistance = 0; // 264 for x, 146 for z, 适用于用电机驱动丝杆
    uint8_t stepDivision = 1;
    float stepAngle = 1.8; // degree, depends on motor type, the version we are using is 1.8
    float mmPerLap = 2;    // mm, depends on the mechanical structure of 丝杆

    uint32_t getStepCountFromTargetPosition(float targetPosition, uint8_t &direction)
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
    {
        float currentPosition = getPosition();
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f8e5 	bl	80018f0 <_ZN14SERVO42C_Pulse11getPositionEv>
 8001726:	61f8      	str	r0, [r7, #28]
        float error = targetPosition - currentPosition;
 8001728:	69f9      	ldr	r1, [r7, #28]
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f7ff fa26 	bl	8000b7c <__aeabi_fsub>
 8001730:	4603      	mov	r3, r0
 8001732:	61bb      	str	r3, [r7, #24]
        direction = error > 0 ? 1 : 0;
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	69b8      	ldr	r0, [r7, #24]
 800173a:	f7ff fce5 	bl	8001108 <__aeabi_fcmpgt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x34>
 8001744:	2201      	movs	r2, #1
 8001746:	e000      	b.n	800174a <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x36>
 8001748:	2200      	movs	r2, #0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	701a      	strb	r2, [r3, #0]
        error = error > 0 ? error : -error;
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	69b8      	ldr	r0, [r7, #24]
 8001754:	f7ff fcd8 	bl	8001108 <__aeabi_fcmpgt>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x4e>
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	e002      	b.n	8001768 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x54>
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001768:	61bb      	str	r3, [r7, #24]
        uint32_t stepCount = error / (mmPerLap) * (360 / stepAngle) * stepDivision;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	69b8      	ldr	r0, [r7, #24]
 8001772:	f7ff fbc1 	bl	8000ef8 <__aeabi_fdiv>
 8001776:	4603      	mov	r3, r0
 8001778:	461c      	mov	r4, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	4619      	mov	r1, r3
 8001780:	480f      	ldr	r0, [pc, #60]	; (80017c0 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0xac>)
 8001782:	f7ff fbb9 	bl	8000ef8 <__aeabi_fdiv>
 8001786:	4603      	mov	r3, r0
 8001788:	4619      	mov	r1, r3
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fb00 	bl	8000d90 <__aeabi_fmul>
 8001790:	4603      	mov	r3, r0
 8001792:	461c      	mov	r4, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff faa4 	bl	8000ce8 <__aeabi_i2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff faf3 	bl	8000d90 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fccb 	bl	8001148 <__aeabi_f2uiz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	617b      	str	r3, [r7, #20]
        return stepCount;
 80017b6:	697b      	ldr	r3, [r7, #20]
    }
 80017b8:	4618      	mov	r0, r3
 80017ba:	3724      	adds	r7, #36	; 0x24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	43b40000 	.word	0x43b40000

080017c4 <_ZN14SERVO42C_Pulse16frequencyToSpeedEt>:
    {
        float rpm = linearSpeed * 60 / mmPerLap;
        return getSpeedParamOfRPM(rpm);
    }

    float frequencyToSpeed(uint16_t frequency)
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
    {
        // frequency是每秒脉冲数，speed是每秒毫米数
        // 所以需要返回一秒内走过的distance，一秒内的step数就是frequency
        return stepcountToDistance(frequency);
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f833 	bl	8001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 80017da:	4603      	mov	r3, r0
    }
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZN14SERVO42C_Pulse16speedToFrequencyEf>:

    float speedToFrequency(float speed)
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    {
        float rps = speed / mmPerLap;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	6838      	ldr	r0, [r7, #0]
 80017f6:	f7ff fb7f 	bl	8000ef8 <__aeabi_fdiv>
 80017fa:	4603      	mov	r3, r0
 80017fc:	60fb      	str	r3, [r7, #12]
        return rps * 360 / stepAngle * stepDivision;
 80017fe:	490f      	ldr	r1, [pc, #60]	; (800183c <_ZN14SERVO42C_Pulse16speedToFrequencyEf+0x58>)
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fac5 	bl	8000d90 <__aeabi_fmul>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff fb71 	bl	8000ef8 <__aeabi_fdiv>
 8001816:	4603      	mov	r3, r0
 8001818:	461c      	mov	r4, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa61 	bl	8000ce8 <__aeabi_i2f>
 8001826:	4603      	mov	r3, r0
 8001828:	4619      	mov	r1, r3
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff fab0 	bl	8000d90 <__aeabi_fmul>
 8001830:	4603      	mov	r3, r0
    }
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	43b40000 	.word	0x43b40000

08001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>:

public:
    bool stepCompleted = false;
    float stepcountToDistance(uint32_t stepCount)
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    {
        return stepCount / (float)stepDivision * stepAngle / 360 * mmPerLap;
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f7ff fa48 	bl	8000ce0 <__aeabi_ui2f>
 8001850:	4604      	mov	r4, r0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fa41 	bl	8000ce0 <__aeabi_ui2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff fb48 	bl	8000ef8 <__aeabi_fdiv>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff fa8c 	bl	8000d90 <__aeabi_fmul>
 8001878:	4603      	mov	r3, r0
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <_ZN14SERVO42C_Pulse19stepcountToDistanceEm+0x5c>)
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb3b 	bl	8000ef8 <__aeabi_fdiv>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f7ff fa7f 	bl	8000d90 <__aeabi_fmul>
 8001892:	4603      	mov	r3, r0
    }
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	43b40000 	.word	0x43b40000

080018a0 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>:
    
    SERVO42C_Pulse(TIM_HandleTypeDef *pTim, uint32_t timChannel, GPIO_TypeDef *pGPIO, uint16_t GPIO_Pin) : PulseMotor(pTim, timChannel, pGPIO, GPIO_Pin) {}
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	8b3b      	ldrh	r3, [r7, #24]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	f7ff fe67 	bl	800158c <_ZN10PulseMotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x4c>)
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	3fe66666 	.word	0x3fe66666

080018f0 <_ZN14SERVO42C_Pulse11getPositionEv>:

    // position: distance in mm from zero position
    // zero position: where the motor is set
    float getPosition()
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    {
        return (float)stepSum / stepDivision * stepAngle / 360 * mmPerLap;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f9f3 	bl	8000ce8 <__aeabi_i2f>
 8001902:	4604      	mov	r4, r0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f9ec 	bl	8000ce8 <__aeabi_i2f>
 8001910:	4603      	mov	r3, r0
 8001912:	4619      	mov	r1, r3
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff faef 	bl	8000ef8 <__aeabi_fdiv>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	4619      	mov	r1, r3
 8001924:	4610      	mov	r0, r2
 8001926:	f7ff fa33 	bl	8000d90 <__aeabi_fmul>
 800192a:	4603      	mov	r3, r0
 800192c:	4908      	ldr	r1, [pc, #32]	; (8001950 <_ZN14SERVO42C_Pulse11getPositionEv+0x60>)
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fae2 	bl	8000ef8 <__aeabi_fdiv>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f7ff fa26 	bl	8000d90 <__aeabi_fmul>
 8001944:	4603      	mov	r3, r0
    }
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}
 800194e:	bf00      	nop
 8001950:	43b40000 	.word	0x43b40000

08001954 <_ZN14SERVO42C_Pulse8getSpeedEv>:
        uint8_t direction = 0;
        uint32_t stepCount = getStepCountFromTargetPosition(position, direction);
        step(direction, stepCount);
    }

    float getSpeed()
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    {
        return frequencyToSpeed(getFrequency());
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fe3c 	bl	80015dc <_ZN10PulseMotor12getFrequencyEv>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff2b 	bl	80017c4 <_ZN14SERVO42C_Pulse16frequencyToSpeedEt>
 800196e:	4603      	mov	r3, r0
    }
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZN14SERVO42C_Pulse8setSpeedEf>:
    void setSpeed(float speed)
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    {
        if (speed > 0.001)
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f7fe fdbc 	bl	8000500 <__aeabi_f2d>
 8001988:	a30d      	add	r3, pc, #52	; (adr r3, 80019c0 <_ZN14SERVO42C_Pulse8setSpeedEf+0x48>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7ff f89f 	bl	8000ad0 <__aeabi_dcmpgt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d100      	bne.n	800199a <_ZN14SERVO42C_Pulse8setSpeedEf+0x22>
            setFrequency(speedToFrequency(speed));
    }
 8001998:	e00e      	b.n	80019b8 <_ZN14SERVO42C_Pulse8setSpeedEf+0x40>
            setFrequency(speedToFrequency(speed));
 800199a:	687c      	ldr	r4, [r7, #4]
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff20 	bl	80017e4 <_ZN14SERVO42C_Pulse16speedToFrequencyEf>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fbce 	bl	8001148 <__aeabi_f2uiz>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4619      	mov	r1, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fe28 	bl	8001608 <_ZN10PulseMotor12setFrequencyEt>
    }
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019c4:	3f50624d 	.word	0x3f50624d

080019c8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f008 fcb4 	bl	800a356 <sqrtf>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_Z6step3dmhmhmhf>:
SERVO42C_Pulse zPulseMotor(&htim8, TIM_CHANNEL_1, GPIOA, GPIO_PIN_7);

// speed: mm/s
// WARNING: max stepCount = DMA_BUFFER_SIZE for each axis!!!!
void step3d(uint32_t xStepCount, uint8_t xDir, uint32_t yStepCount, uint8_t yDir, uint32_t zStepCount, uint8_t zDir, float speed)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b091      	sub	sp, #68	; 0x44
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	72fb      	strb	r3, [r7, #11]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	72bb      	strb	r3, [r7, #10]
    float xDistance = xPulseMotor.stepcountToDistance(xStepCount);
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	487c      	ldr	r0, [pc, #496]	; (8001c00 <_Z6step3dmhmhmhf+0x208>)
 8001a10:	f7ff ff16 	bl	8001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8001a14:	63f8      	str	r0, [r7, #60]	; 0x3c
    float yDistance = yPulseMotor.stepcountToDistance(yStepCount);
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	487a      	ldr	r0, [pc, #488]	; (8001c04 <_Z6step3dmhmhmhf+0x20c>)
 8001a1a:	f7ff ff11 	bl	8001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8001a1e:	63b8      	str	r0, [r7, #56]	; 0x38
    float zDistance = zPulseMotor.stepcountToDistance(zStepCount);
 8001a20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a22:	4879      	ldr	r0, [pc, #484]	; (8001c08 <_Z6step3dmhmhmhf+0x210>)
 8001a24:	f7ff ff0c 	bl	8001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8001a28:	6378      	str	r0, [r7, #52]	; 0x34
    float linearDistance = sqrt(xDistance * xDistance + yDistance * yDistance + zDistance * zDistance); // mm
 8001a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a2e:	f7ff f9af 	bl	8000d90 <__aeabi_fmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461c      	mov	r4, r3
 8001a36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a3a:	f7ff f9a9 	bl	8000d90 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4619      	mov	r1, r3
 8001a42:	4620      	mov	r0, r4
 8001a44:	f7ff f89c 	bl	8000b80 <__addsf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461c      	mov	r4, r3
 8001a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a50:	f7ff f99e 	bl	8000d90 <__aeabi_fmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff f891 	bl	8000b80 <__addsf3>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ffbd 	bl	80019e0 <_ZSt4sqrtf>
 8001a66:	6338      	str	r0, [r7, #48]	; 0x30
    if (abs(linearDistance) < 0.0001)
 8001a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a6a:	f7ff ffad 	bl	80019c8 <_ZSt3absf>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd45 	bl	8000500 <__aeabi_f2d>
 8001a76:	2301      	movs	r3, #1
 8001a78:	461c      	mov	r4, r3
 8001a7a:	a35d      	add	r3, pc, #372	; (adr r3, 8001bf0 <_Z6step3dmhmhmhf+0x1f8>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7ff f808 	bl	8000a94 <__aeabi_dcmplt>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <_Z6step3dmhmhmhf+0x96>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	b2e3      	uxtb	r3, r4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 80a7 	bne.w	8001be4 <_Z6step3dmhmhmhf+0x1ec>
    {
        return;
    }
    float timeConsumed = linearDistance / speed;
 8001a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a9a:	f7ff fa2d 	bl	8000ef8 <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    float speedX = xPulseMotor.stepcountToDistance(xStepCount) / timeConsumed;
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	4856      	ldr	r0, [pc, #344]	; (8001c00 <_Z6step3dmhmhmhf+0x208>)
 8001aa6:	f7ff fecb 	bl	8001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fa22 	bl	8000ef8 <__aeabi_fdiv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    float speedY = yPulseMotor.stepcountToDistance(yStepCount) / timeConsumed;
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4852      	ldr	r0, [pc, #328]	; (8001c04 <_Z6step3dmhmhmhf+0x20c>)
 8001abc:	f7ff fec0 	bl	8001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fa17 	bl	8000ef8 <__aeabi_fdiv>
 8001aca:	4603      	mov	r3, r0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    float speedZ = zPulseMotor.stepcountToDistance(zStepCount) / timeConsumed;
 8001ace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ad0:	484d      	ldr	r0, [pc, #308]	; (8001c08 <_Z6step3dmhmhmhf+0x210>)
 8001ad2:	f7ff feb5 	bl	8001840 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fa0c 	bl	8000ef8 <__aeabi_fdiv>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	623b      	str	r3, [r7, #32]
    
    float originalSpeedX = xPulseMotor.getSpeed();
 8001ae4:	4846      	ldr	r0, [pc, #280]	; (8001c00 <_Z6step3dmhmhmhf+0x208>)
 8001ae6:	f7ff ff35 	bl	8001954 <_ZN14SERVO42C_Pulse8getSpeedEv>
 8001aea:	61f8      	str	r0, [r7, #28]
    float originalSpeedY = yPulseMotor.getSpeed();
 8001aec:	4845      	ldr	r0, [pc, #276]	; (8001c04 <_Z6step3dmhmhmhf+0x20c>)
 8001aee:	f7ff ff31 	bl	8001954 <_ZN14SERVO42C_Pulse8getSpeedEv>
 8001af2:	61b8      	str	r0, [r7, #24]
    float originalSpeedZ = zPulseMotor.getSpeed();
 8001af4:	4844      	ldr	r0, [pc, #272]	; (8001c08 <_Z6step3dmhmhmhf+0x210>)
 8001af6:	f7ff ff2d 	bl	8001954 <_ZN14SERVO42C_Pulse8getSpeedEv>
 8001afa:	6178      	str	r0, [r7, #20]

    xPulseMotor.setSpeed(speedX);
 8001afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001afe:	4840      	ldr	r0, [pc, #256]	; (8001c00 <_Z6step3dmhmhmhf+0x208>)
 8001b00:	f7ff ff3a 	bl	8001978 <_ZN14SERVO42C_Pulse8setSpeedEf>
    yPulseMotor.setSpeed(speedY);
 8001b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b06:	483f      	ldr	r0, [pc, #252]	; (8001c04 <_Z6step3dmhmhmhf+0x20c>)
 8001b08:	f7ff ff36 	bl	8001978 <_ZN14SERVO42C_Pulse8setSpeedEf>
    zPulseMotor.setSpeed(speedZ);
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	483e      	ldr	r0, [pc, #248]	; (8001c08 <_Z6step3dmhmhmhf+0x210>)
 8001b10:	f7ff ff32 	bl	8001978 <_ZN14SERVO42C_Pulse8setSpeedEf>

    xStepCompleted = xStepCount > 0 ? 0: 1;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <_Z6step3dmhmhmhf+0x214>)
 8001b24:	701a      	strb	r2, [r3, #0]
    yStepCompleted = yStepCount > 0 ? 0: 1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <_Z6step3dmhmhmhf+0x218>)
 8001b36:	701a      	strb	r2, [r3, #0]
    zStepCompleted = zStepCount > 0 ? 0: 1;
 8001b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf0c      	ite	eq
 8001b3e:	2301      	moveq	r3, #1
 8001b40:	2300      	movne	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <_Z6step3dmhmhmhf+0x21c>)
 8001b48:	701a      	strb	r2, [r3, #0]

    xPulseMotor.step(xDir, xStepCount);
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	482b      	ldr	r0, [pc, #172]	; (8001c00 <_Z6step3dmhmhmhf+0x208>)
 8001b52:	f7ff fda3 	bl	800169c <_ZN10PulseMotor4stepEhm>
    yPulseMotor.step(yDir, yStepCount);
 8001b56:	7abb      	ldrb	r3, [r7, #10]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4829      	ldr	r0, [pc, #164]	; (8001c04 <_Z6step3dmhmhmhf+0x20c>)
 8001b5e:	f7ff fd9d 	bl	800169c <_ZN10PulseMotor4stepEhm>
    zPulseMotor.step(zDir, zStepCount);
 8001b62:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001b66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4827      	ldr	r0, [pc, #156]	; (8001c08 <_Z6step3dmhmhmhf+0x210>)
 8001b6c:	f7ff fd96 	bl	800169c <_ZN10PulseMotor4stepEhm>

    
    while (!xStepCompleted || !yStepCompleted || !zStepCompleted)
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <_Z6step3dmhmhmhf+0x214>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0fb      	beq.n	8001b70 <_Z6step3dmhmhmhf+0x178>
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <_Z6step3dmhmhmhf+0x218>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f7      	beq.n	8001b70 <_Z6step3dmhmhmhf+0x178>
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <_Z6step3dmhmhmhf+0x21c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d100      	bne.n	8001b8a <_Z6step3dmhmhmhf+0x192>
 8001b88:	e7f2      	b.n	8001b70 <_Z6step3dmhmhmhf+0x178>
    {
        
    }

    HAL_Delay(5 + (xStepCount + yStepCount + zStepCount) * 0.05);
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	441a      	add	r2, r3
 8001b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b92:	4413      	add	r3, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fc91 	bl	80004bc <__aeabi_ui2d>
 8001b9a:	a317      	add	r3, pc, #92	; (adr r3, 8001bf8 <_Z6step3dmhmhmhf+0x200>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fd06 	bl	80005b0 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <_Z6step3dmhmhmhf+0x220>)
 8001bb2:	f7fe fb47 	bl	8000244 <__adddf3>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe ffb9 	bl	8000b34 <__aeabi_d2uiz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 feb1 	bl	800692c <HAL_Delay>

    // HAL_Delay(timeConsumed * 1000 * 1.2 + 25);// 1.2 is a factor to make sure the motor has enough time to 
    xPulseMotor.setSpeed(originalSpeedX);
 8001bca:	69f9      	ldr	r1, [r7, #28]
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <_Z6step3dmhmhmhf+0x208>)
 8001bce:	f7ff fed3 	bl	8001978 <_ZN14SERVO42C_Pulse8setSpeedEf>
    yPulseMotor.setSpeed(originalSpeedY);
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <_Z6step3dmhmhmhf+0x20c>)
 8001bd6:	f7ff fecf 	bl	8001978 <_ZN14SERVO42C_Pulse8setSpeedEf>
    zPulseMotor.setSpeed(originalSpeedZ); 
 8001bda:	6979      	ldr	r1, [r7, #20]
 8001bdc:	480a      	ldr	r0, [pc, #40]	; (8001c08 <_Z6step3dmhmhmhf+0x210>)
 8001bde:	f7ff fecb 	bl	8001978 <_ZN14SERVO42C_Pulse8setSpeedEf>
 8001be2:	e000      	b.n	8001be6 <_Z6step3dmhmhmhf+0x1ee>
        return;
 8001be4:	bf00      	nop
}
 8001be6:	3744      	adds	r7, #68	; 0x44
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	f3af 8000 	nop.w
 8001bf0:	eb1c432d 	.word	0xeb1c432d
 8001bf4:	3f1a36e2 	.word	0x3f1a36e2
 8001bf8:	9999999a 	.word	0x9999999a
 8001bfc:	3fa99999 	.word	0x3fa99999
 8001c00:	20000150 	.word	0x20000150
 8001c04:	20000184 	.word	0x20000184
 8001c08:	200001b8 	.word	0x200001b8
 8001c0c:	200001ec 	.word	0x200001ec
 8001c10:	200001ed 	.word	0x200001ed
 8001c14:	200001ee 	.word	0x200001ee
 8001c18:	40140000 	.word	0x40140000

08001c1c <_Z13setPosition3dffff>:

    HAL_Delay(timeConsumed * 1000 * 1.2 + 10); ////1.2 is a factor to make sure the motor has enough time to finish the movement
}

void setPosition3d(float x, float y, float z, float speed)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af04      	add	r7, sp, #16
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
    uint8_t xDir = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	74fb      	strb	r3, [r7, #19]
    uint32_t xStepCount = xPulseMotor.getStepCountFromTargetPosition(x, xDir);
 8001c2e:	f107 0313 	add.w	r3, r7, #19
 8001c32:	461a      	mov	r2, r3
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <_Z13setPosition3dffff+0x6c>)
 8001c38:	f7ff fd6c 	bl	8001714 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>
 8001c3c:	61f8      	str	r0, [r7, #28]
    uint8_t yDir = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	74bb      	strb	r3, [r7, #18]
    uint32_t yStepCount = yPulseMotor.getStepCountFromTargetPosition(y, yDir);
 8001c42:	f107 0312 	add.w	r3, r7, #18
 8001c46:	461a      	mov	r2, r3
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	4810      	ldr	r0, [pc, #64]	; (8001c8c <_Z13setPosition3dffff+0x70>)
 8001c4c:	f7ff fd62 	bl	8001714 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>
 8001c50:	61b8      	str	r0, [r7, #24]
    uint8_t zDir = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	747b      	strb	r3, [r7, #17]
    uint32_t zStepCount = zPulseMotor.getStepCountFromTargetPosition(z, zDir);
 8001c56:	f107 0311 	add.w	r3, r7, #17
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	480c      	ldr	r0, [pc, #48]	; (8001c90 <_Z13setPosition3dffff+0x74>)
 8001c60:	f7ff fd58 	bl	8001714 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>
 8001c64:	6178      	str	r0, [r7, #20]
    step3d(xStepCount, xDir, yStepCount, yDir, zStepCount, zDir, speed);
 8001c66:	7cf9      	ldrb	r1, [r7, #19]
 8001c68:	7cb8      	ldrb	r0, [r7, #18]
 8001c6a:	7c7b      	ldrb	r3, [r7, #17]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	9202      	str	r2, [sp, #8]
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	4603      	mov	r3, r0
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	69f8      	ldr	r0, [r7, #28]
 8001c7c:	f7ff febc 	bl	80019f8 <_Z6step3dmhmhmhf>
 8001c80:	bf00      	nop
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000150 	.word	0x20000150
 8001c8c:	20000184 	.word	0x20000184
 8001c90:	200001b8 	.word	0x200001b8

08001c94 <_Z41__static_initialization_and_destruction_0ii>:
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11c      	bne.n	8001cde <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d117      	bne.n	8001cde <_Z41__static_initialization_and_destruction_0ii+0x4a>
SERVO42C_Pulse xPulseMotor(&htim3, TIM_CHANNEL_1, GPIOA, GPIO_PIN_4); // tim, tim channel, dir gpio, dir gpio pin
 8001cae:	2310      	movs	r3, #16
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001cba:	f7ff fdf1 	bl	80018a0 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
SERVO42C_Pulse yPulseMotor(&htim4, TIM_CHANNEL_1, GPIOB, GPIO_PIN_7);
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001cca:	f7ff fde9 	bl	80018a0 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
SERVO42C_Pulse zPulseMotor(&htim8, TIM_CHANNEL_1, GPIOA, GPIO_PIN_7);
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	490a      	ldr	r1, [pc, #40]	; (8001d00 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001cda:	f7ff fde1 	bl	80018a0 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40010800 	.word	0x40010800
 8001cec:	20000a90 	.word	0x20000a90
 8001cf0:	20000150 	.word	0x20000150
 8001cf4:	40010c00 	.word	0x40010c00
 8001cf8:	20000ad0 	.word	0x20000ad0
 8001cfc:	20000184 	.word	0x20000184
 8001d00:	20000b50 	.word	0x20000b50
 8001d04:	200001b8 	.word	0x200001b8

08001d08 <_GLOBAL__sub_I_PulseDMABuff>:
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff ffbf 	bl	8001c94 <_Z41__static_initialization_and_destruction_0ii>
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <MX_ADC1_Init+0x78>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d56:	f004 fe0d 	bl	8006974 <HAL_ADC_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d60:	f001 fd8c 	bl	800387c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d64:	230c      	movs	r3, #12
 8001d66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_ADC1_Init+0x74>)
 8001d76:	f004 fee7 	bl	8006b48 <HAL_ADC_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d80:	f001 fd7c 	bl	800387c <Error_Handler>
  }

}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200001f0 	.word	0x200001f0
 8001d90:	40012400 	.word	0x40012400

08001d94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_ADC_MspInit+0x6c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d121      	bne.n	8001df8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de4:	2304      	movs	r3, #4
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de8:	2303      	movs	r3, #3
 8001dea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4619      	mov	r1, r3
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <HAL_ADC_MspInit+0x74>)
 8001df4:	f005 fd2c 	bl	8007850 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40012400 	.word	0x40012400
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40011000 	.word	0x40011000

08001e0c <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <DEBUG_USART_Config+0x50>)
 8001e14:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e1c:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e38:	220c      	movs	r2, #12
 8001e3a:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e3e:	f007 fdf0 	bl	8009a22 <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <DEBUG_USART_Config+0x4c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	60da      	str	r2, [r3, #12]
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000220 	.word	0x20000220
 8001e5c:	40013800 	.word	0x40013800

08001e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <MX_DMA_Init+0x70>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <MX_DMA_Init+0x70>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6153      	str	r3, [r2, #20]
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MX_DMA_Init+0x70>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_DMA_Init+0x70>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <MX_DMA_Init+0x70>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6153      	str	r3, [r2, #20]
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_DMA_Init+0x70>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	200b      	movs	r0, #11
 8001e9c:	f005 f859 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ea0:	200b      	movs	r0, #11
 8001ea2:	f005 f872 	bl	8006f8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2010      	movs	r0, #16
 8001eac:	f005 f851 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001eb0:	2010      	movs	r0, #16
 8001eb2:	f005 f86a 	bl	8006f8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	203a      	movs	r0, #58	; 0x3a
 8001ebc:	f005 f849 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001ec0:	203a      	movs	r0, #58	; 0x3a
 8001ec2:	f005 f862 	bl	8006f8a <HAL_NVIC_EnableIRQ>

}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	615a      	str	r2, [r3, #20]
 8001eea:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001eee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ef2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001ef6:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <MX_FSMC_Init+0xc0>)
 8001ef8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f0e:	2210      	movs	r2, #16
 8001f10:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001f4e:	230f      	movs	r3, #15
 8001f50:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001f5e:	2311      	movs	r3, #17
 8001f60:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4808      	ldr	r0, [pc, #32]	; (8001f90 <MX_FSMC_Init+0xbc>)
 8001f6e:	f006 fb2f 	bl	80085d0 <HAL_SRAM_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001f78:	f001 fc80 	bl	800387c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_FSMC_Init+0xc4>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <MX_FSMC_Init+0xc4>)
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f86:	61d3      	str	r3, [r2, #28]

}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200002a0 	.word	0x200002a0
 8001f94:	a0000104 	.word	0xa0000104
 8001f98:	40010000 	.word	0x40010000

08001f9c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_FSMC_MspInit+0x78>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d129      	bne.n	800200c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_FSMC_MspInit+0x78>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_FSMC_MspInit+0x7c>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <HAL_FSMC_MspInit+0x7c>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_FSMC_MspInit+0x7c>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001fd6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001fda:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <HAL_FSMC_MspInit+0x80>)
 8001fec:	f005 fc30 	bl	8007850 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ff0:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001ff4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4619      	mov	r1, r3
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <HAL_FSMC_MspInit+0x84>)
 8002006:	f005 fc23 	bl	8007850 <HAL_GPIO_Init>
 800200a:	e000      	b.n	800200e <HAL_FSMC_MspInit+0x72>
    return;
 800200c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200002e4 	.word	0x200002e4
 8002018:	40021000 	.word	0x40021000
 800201c:	40011800 	.word	0x40011800
 8002020:	40011400 	.word	0x40011400

08002024 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800202c:	f7ff ffb6 	bl	8001f9c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	f107 0318 	add.w	r3, r7, #24
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800204c:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <MX_GPIO_Init+0x200>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a79      	ldr	r2, [pc, #484]	; (8002238 <MX_GPIO_Init+0x200>)
 8002052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b77      	ldr	r3, [pc, #476]	; (8002238 <MX_GPIO_Init+0x200>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002064:	4b74      	ldr	r3, [pc, #464]	; (8002238 <MX_GPIO_Init+0x200>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a73      	ldr	r2, [pc, #460]	; (8002238 <MX_GPIO_Init+0x200>)
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b71      	ldr	r3, [pc, #452]	; (8002238 <MX_GPIO_Init+0x200>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b6e      	ldr	r3, [pc, #440]	; (8002238 <MX_GPIO_Init+0x200>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a6d      	ldr	r2, [pc, #436]	; (8002238 <MX_GPIO_Init+0x200>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <MX_GPIO_Init+0x200>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <MX_GPIO_Init+0x200>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a67      	ldr	r2, [pc, #412]	; (8002238 <MX_GPIO_Init+0x200>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b65      	ldr	r3, [pc, #404]	; (8002238 <MX_GPIO_Init+0x200>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ac:	4b62      	ldr	r3, [pc, #392]	; (8002238 <MX_GPIO_Init+0x200>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a61      	ldr	r2, [pc, #388]	; (8002238 <MX_GPIO_Init+0x200>)
 80020b2:	f043 0320 	orr.w	r3, r3, #32
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <MX_GPIO_Init+0x200>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2107      	movs	r1, #7
 80020c8:	485c      	ldr	r0, [pc, #368]	; (800223c <MX_GPIO_Init+0x204>)
 80020ca:	f005 fd70 	bl	8007bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80020ce:	2201      	movs	r2, #1
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	485a      	ldr	r0, [pc, #360]	; (800223c <MX_GPIO_Init+0x204>)
 80020d4:	f005 fd6b 	bl	8007bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XMOTOR_DIR_PIN_Pin|ZMOTOR_DIR_PIN_Pin, GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	2190      	movs	r1, #144	; 0x90
 80020dc:	4858      	ldr	r0, [pc, #352]	; (8002240 <MX_GPIO_Init+0x208>)
 80020de:	f005 fd66 	bl	8007bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 80020e2:	2201      	movs	r2, #1
 80020e4:	2123      	movs	r1, #35	; 0x23
 80020e6:	4857      	ldr	r0, [pc, #348]	; (8002244 <MX_GPIO_Init+0x20c>)
 80020e8:	f005 fd61 	bl	8007bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80020f2:	4855      	ldr	r0, [pc, #340]	; (8002248 <MX_GPIO_Init+0x210>)
 80020f4:	f005 fd5b 	bl	8007bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YMOTOR_DIR_PIN_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 7160 	mov.w	r1, #896	; 0x380
 80020fe:	4851      	ldr	r0, [pc, #324]	; (8002244 <MX_GPIO_Init+0x20c>)
 8002100:	f005 fd55 	bl	8007bae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8002104:	2347      	movs	r3, #71	; 0x47
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002114:	f107 0318 	add.w	r3, r7, #24
 8002118:	4619      	mov	r1, r3
 800211a:	4848      	ldr	r0, [pc, #288]	; (800223c <MX_GPIO_Init+0x204>)
 800211c:	f005 fb98 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002120:	2308      	movs	r3, #8
 8002122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002128:	2301      	movs	r3, #1
 800212a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4619      	mov	r1, r3
 8002132:	4842      	ldr	r0, [pc, #264]	; (800223c <MX_GPIO_Init+0x204>)
 8002134:	f005 fb8c 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002138:	2310      	movs	r3, #16
 800213a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800213c:	4b43      	ldr	r3, [pc, #268]	; (800224c <MX_GPIO_Init+0x214>)
 800213e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002140:	2301      	movs	r3, #1
 8002142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	4619      	mov	r1, r3
 800214a:	483c      	ldr	r0, [pc, #240]	; (800223c <MX_GPIO_Init+0x204>)
 800214c:	f005 fb80 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215e:	f107 0318 	add.w	r3, r7, #24
 8002162:	4619      	mov	r1, r3
 8002164:	483a      	ldr	r0, [pc, #232]	; (8002250 <MX_GPIO_Init+0x218>)
 8002166:	f005 fb73 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <MX_GPIO_Init+0x21c>)
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002172:	2302      	movs	r3, #2
 8002174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 0318 	add.w	r3, r7, #24
 800217a:	4619      	mov	r1, r3
 800217c:	4830      	ldr	r0, [pc, #192]	; (8002240 <MX_GPIO_Init+0x208>)
 800217e:	f005 fb67 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = XMOTOR_DIR_PIN_Pin|ZMOTOR_DIR_PIN_Pin;
 8002182:	2390      	movs	r3, #144	; 0x90
 8002184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002186:	2301      	movs	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2302      	movs	r3, #2
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 0318 	add.w	r3, r7, #24
 8002196:	4619      	mov	r1, r3
 8002198:	4829      	ldr	r0, [pc, #164]	; (8002240 <MX_GPIO_Init+0x208>)
 800219a:	f005 fb59 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_X_Pin;
 800219e:	2320      	movs	r3, #32
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWITCH_X_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 0318 	add.w	r3, r7, #24
 80021ae:	4619      	mov	r1, r3
 80021b0:	4827      	ldr	r0, [pc, #156]	; (8002250 <MX_GPIO_Init+0x218>)
 80021b2:	f005 fb4d 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 80021b6:	f240 1323 	movw	r3, #291	; 0x123
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021bc:	2301      	movs	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	4619      	mov	r1, r3
 80021ce:	481d      	ldr	r0, [pc, #116]	; (8002244 <MX_GPIO_Init+0x20c>)
 80021d0:	f005 fb3e 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4619      	mov	r1, r3
 80021ec:	4816      	ldr	r0, [pc, #88]	; (8002248 <MX_GPIO_Init+0x210>)
 80021ee:	f005 fb2f 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB9 */
  GPIO_InitStruct.Pin = YMOTOR_DIR_PIN_Pin|GPIO_PIN_9;
 80021f2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2302      	movs	r3, #2
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	4619      	mov	r1, r3
 800220a:	480e      	ldr	r0, [pc, #56]	; (8002244 <MX_GPIO_Init+0x20c>)
 800220c:	f005 fb20 	bl	8007850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2006      	movs	r0, #6
 8002216:	f004 fe9c 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800221a:	2006      	movs	r0, #6
 800221c:	f004 feb5 	bl	8006f8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	200a      	movs	r0, #10
 8002226:	f004 fe94 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800222a:	200a      	movs	r0, #10
 800222c:	f004 fead 	bl	8006f8a <HAL_NVIC_EnableIRQ>

}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	40011800 	.word	0x40011800
 8002240:	40010800 	.word	0x40010800
 8002244:	40010c00 	.word	0x40010c00
 8002248:	40011400 	.word	0x40011400
 800224c:	10210000 	.word	0x10210000
 8002250:	40011000 	.word	0x40011000
 8002254:	10110000 	.word	0x10110000

08002258 <_ZN6StringC1Ei>:
    String(const String& s){
        len = s.len;
        strcpy(str, s.str);
    }
    String(int n){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
        len = sprintf(str, "%d", n);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4906      	ldr	r1, [pc, #24]	; (8002280 <_ZN6StringC1Ei+0x28>)
 8002268:	4618      	mov	r0, r3
 800226a:	f008 f95d 	bl	800a528 <siprintf>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	0800ae5c 	.word	0x0800ae5c

08002284 <_ZN6StringC1Em>:
    String(uint8_t n): String((int)n){}
    String(uint16_t n): String((int)n){}
    String(uint32_t n): String((int)n){}
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffe0 	bl	8002258 <_ZN6StringC1Ei>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_ZN10PulseMotor9spinStartEv>:
    void spinStart()
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
        __HAL_TIM_SET_COMPARE(pTim, timChannel, 36);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	601a      	str	r2, [r3, #0]
        HAL_TIM_PWM_Start(pTim, timChannel);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f006 faab 	bl	8008828 <HAL_TIM_PWM_Start>
    }
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_ZN10PulseMotor8spinStopEv>:
    void spinStop()
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
        HAL_TIM_PWM_Stop(pTim, timChannel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f006 facf 	bl	8008890 <HAL_TIM_PWM_Stop>
    }
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <_ZN10PulseMotor8step_infEhm>:
    void step_inf(uint8_t direction, uint32_t stepNum)
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	460b      	mov	r3, r1
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	72fb      	strb	r3, [r7, #11]
        if (stepNum == 0)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d047      	beq.n	80023a0 <_ZN10PulseMotor8step_infEhm+0xa4>
        setDirection(direction);
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	4619      	mov	r1, r3
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff f995 	bl	8001644 <_ZN10PulseMotor12setDirectionEh>
        while (stepNum > 0)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d040      	beq.n	80023a2 <_ZN10PulseMotor8step_infEhm+0xa6>
            uint16_t pulseNum = stepNum < DMA_BUFFER_SIZE ? stepNum : DMA_BUFFER_SIZE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002326:	4293      	cmp	r3, r2
 8002328:	bf28      	it	cs
 800232a:	4613      	movcs	r3, r2
 800232c:	82fb      	strh	r3, [r7, #22]
            stepSum+= direction ? pulseNum : -pulseNum;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <_ZN10PulseMotor8step_infEhm+0x40>
 8002338:	8afb      	ldrh	r3, [r7, #22]
 800233a:	e001      	b.n	8002340 <_ZN10PulseMotor8step_infEhm+0x44>
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	425b      	negs	r3, r3
 8002340:	441a      	add	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	61da      	str	r2, [r3, #28]
            stepNum -= pulseNum;
 8002346:	8afb      	ldrh	r3, [r7, #22]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	607b      	str	r3, [r7, #4]
            pulse(pulseNum);
 800234e:	8afb      	ldrh	r3, [r7, #22]
 8002350:	4619      	mov	r1, r3
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7ff f98e 	bl	8001674 <_ZN10PulseMotor5pulseEt>
            HAL_Delay((float)pulseNum / getFrequency() * 1000+5);
 8002358:	8afb      	ldrh	r3, [r7, #22]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fcc0 	bl	8000ce0 <__aeabi_ui2f>
 8002360:	4604      	mov	r4, r0
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff f93a 	bl	80015dc <_ZN10PulseMotor12getFrequencyEv>
 8002368:	4603      	mov	r3, r0
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fcbc 	bl	8000ce8 <__aeabi_i2f>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	4620      	mov	r0, r4
 8002376:	f7fe fdbf 	bl	8000ef8 <__aeabi_fdiv>
 800237a:	4603      	mov	r3, r0
 800237c:	490a      	ldr	r1, [pc, #40]	; (80023a8 <_ZN10PulseMotor8step_infEhm+0xac>)
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fd06 	bl	8000d90 <__aeabi_fmul>
 8002384:	4603      	mov	r3, r0
 8002386:	4909      	ldr	r1, [pc, #36]	; (80023ac <_ZN10PulseMotor8step_infEhm+0xb0>)
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fbf9 	bl	8000b80 <__addsf3>
 800238e:	4603      	mov	r3, r0
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fed9 	bl	8001148 <__aeabi_f2uiz>
 8002396:	4603      	mov	r3, r0
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fac7 	bl	800692c <HAL_Delay>
        while (stepNum > 0)
 800239e:	e7bc      	b.n	800231a <_ZN10PulseMotor8step_infEhm+0x1e>
            return;
 80023a0:	bf00      	nop
    }
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	447a0000 	.word	0x447a0000
 80023ac:	40a00000 	.word	0x40a00000

080023b0 <_ZN6ScreenC1Ev>:
public:
    UIElement *elements[MAX_UI_ELEMENTS];
    uint8_t elementNum = 0;


    Screen()
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        allScreens[screenNum++] = this;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <_ZN6ScreenC1Ev+0x3c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	b2d1      	uxtb	r1, r2
 80023c8:	4a08      	ldr	r2, [pc, #32]	; (80023ec <_ZN6ScreenC1Ev+0x3c>)
 80023ca:	7011      	strb	r1, [r2, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <_ZN6ScreenC1Ev+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        elementNum = 0;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000370 	.word	0x20000370
 80023f0:	200002f0 	.word	0x200002f0

080023f4 <_ZN9UIElementC1EP6Screentttt>:

    uint16_t x, y;
    uint16_t width, height;

protected:
    UIElement(Screen *screen, uint16_t x, uint16_t y, uint16_t width, uint16_t height)
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4611      	mov	r1, r2
 8002400:	461a      	mov	r2, r3
 8002402:	460b      	mov	r3, r1
 8002404:	80fb      	strh	r3, [r7, #6]
 8002406:	4613      	mov	r3, r2
 8002408:	80bb      	strh	r3, [r7, #4]
    {
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <_ZN9UIElementC1EP6Screentttt+0x70>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]
        this->x = x;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	809a      	strh	r2, [r3, #4]
        this->y = y;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	88ba      	ldrh	r2, [r7, #4]
 800241a:	80da      	strh	r2, [r3, #6]
        this->width = width;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8b3a      	ldrh	r2, [r7, #24]
 8002420:	811a      	strh	r2, [r3, #8]
        this->height = height;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8bba      	ldrh	r2, [r7, #28]
 8002426:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <_ZN9UIElementC1EP6Screentttt+0x74>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	b2d1      	uxtb	r1, r2
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <_ZN9UIElementC1EP6Screentttt+0x74>)
 8002432:	7011      	strb	r1, [r2, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	4a0d      	ldr	r2, [pc, #52]	; (800246c <_ZN9UIElementC1EP6Screentttt+0x78>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        screen->elements[screen->elementNum++] = this;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	b2d1      	uxtb	r1, r2
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
 800244e:	4619      	mov	r1, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	080166e4 	.word	0x080166e4
 8002468:	2000014c 	.word	0x2000014c
 800246c:	200000cc 	.word	0x200000cc

08002470 <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y)
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	803b      	strh	r3, [r7, #0]
    {
        return x >= this->x && x <= this->x + width && y >= this->y && y <= this->y + height;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	887a      	ldrh	r2, [r7, #2]
 8002486:	429a      	cmp	r2, r3
 8002488:	d318      	bcc.n	80024bc <_ZN9UIElement10checkTouchEtt+0x4c>
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	889b      	ldrh	r3, [r3, #4]
 8002490:	4619      	mov	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	891b      	ldrh	r3, [r3, #8]
 8002496:	440b      	add	r3, r1
 8002498:	429a      	cmp	r2, r3
 800249a:	dc0f      	bgt.n	80024bc <_ZN9UIElement10checkTouchEtt+0x4c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	88db      	ldrh	r3, [r3, #6]
 80024a0:	883a      	ldrh	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d30a      	bcc.n	80024bc <_ZN9UIElement10checkTouchEtt+0x4c>
 80024a6:	883a      	ldrh	r2, [r7, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	88db      	ldrh	r3, [r3, #6]
 80024ac:	4619      	mov	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	895b      	ldrh	r3, [r3, #10]
 80024b2:	440b      	add	r3, r1
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dc01      	bgt.n	80024bc <_ZN9UIElement10checkTouchEtt+0x4c>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <_ZN9UIElement10checkTouchEtt+0x4e>
 80024bc:	2300      	movs	r3, #0
    }
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <_ZN6ButtonC1EP6ScreenttPctttt>:
    bool isPressed = false;
    void (*onPressed)() = nullptr;
    void (*whilePressing)() = nullptr;
    void (*onReleased)() = nullptr;

    Button(Screen *screen, uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	460b      	mov	r3, r1
 80024d8:	80fb      	strh	r3, [r7, #6]
 80024da:	4613      	mov	r3, r2
 80024dc:	80bb      	strh	r3, [r7, #4]
        : UIElement(screen, x, y, width, height)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	88b9      	ldrh	r1, [r7, #4]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	8c3b      	ldrh	r3, [r7, #32]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	8bbb      	ldrh	r3, [r7, #28]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	460b      	mov	r3, r1
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	f7ff ff80 	bl	80023f4 <_ZN9UIElementC1EP6Screentttt>
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <_ZN6ButtonC1EP6ScreenttPctttt+0x7c>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	819a      	strh	r2, [r3, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
    {
        this->initialColor = color;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800251e:	81da      	strh	r2, [r3, #14]
        this->color = color;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002524:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800252a:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3314      	adds	r3, #20
 8002530:	69b9      	ldr	r1, [r7, #24]
 8002532:	4618      	mov	r0, r3
 8002534:	f008 f818 	bl	800a568 <strcpy>
    }
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	080166d4 	.word	0x080166d4

08002548 <_ZN6Button6renderEv>:
    void setOnReleased(void (*onReleased)())
    {
        this->onReleased = onReleased;
    }

    void render() override
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af02      	add	r7, sp, #8
 800254e:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8898      	ldrh	r0, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	88d9      	ldrh	r1, [r3, #6]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	891a      	ldrh	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	895b      	ldrh	r3, [r3, #10]
 8002560:	f000 ff08 	bl	8003374 <LCD_OpenWindow>
        LCD_FillColor(width * height, color);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	891b      	ldrh	r3, [r3, #8]
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	895b      	ldrh	r3, [r3, #10]
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8a1b      	ldrh	r3, [r3, #16]
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 ff53 	bl	8003426 <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x + width / 3, y + height / 3, text, color, textColor);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	889a      	ldrh	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	891b      	ldrh	r3, [r3, #8]
 8002588:	4910      	ldr	r1, [pc, #64]	; (80025cc <_ZN6Button6renderEv+0x84>)
 800258a:	fba1 1303 	umull	r1, r3, r1, r3
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	4413      	add	r3, r2
 8002594:	b298      	uxth	r0, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	88da      	ldrh	r2, [r3, #6]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	895b      	ldrh	r3, [r3, #10]
 800259e:	490b      	ldr	r1, [pc, #44]	; (80025cc <_ZN6Button6renderEv+0x84>)
 80025a0:	fba1 1303 	umull	r1, r3, r1, r3
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	b299      	uxth	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f103 0214 	add.w	r2, r3, #20
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8a1c      	ldrh	r4, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8a5b      	ldrh	r3, [r3, #18]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4623      	mov	r3, r4
 80025be:	f001 f87d 	bl	80036bc <LCD_DrawString_Color>
    }
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	aaaaaaab 	.word	0xaaaaaaab

080025d0 <_ZN6Button6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
 80025dc:	4613      	mov	r3, r2
 80025de:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	883a      	ldrh	r2, [r7, #0]
 80025e4:	8879      	ldrh	r1, [r7, #2]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff42 	bl	8002470 <_ZN9UIElement10checkTouchEtt>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00f      	beq.n	8002612 <_ZN6Button6updateEtt+0x42>
        {
            color = YELLOW;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025f8:	821a      	strh	r2, [r3, #16]
            // if (!isPressed)
            //{ // only trigger once
            isPressed = true;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (whilePressing)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <_ZN6Button6updateEtt+0x52>
                whilePressing();
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	4798      	blx	r3
 8002610:	e007      	b.n	8002622 <_ZN6Button6updateEtt+0x52>
            //}
        }
        else
        {
            color = initialColor;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	89da      	ldrh	r2, [r3, #14]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	899a      	ldrh	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8a1b      	ldrh	r3, [r3, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	d023      	beq.n	8002676 <_ZN6Button6updateEtt+0xa6>
        {
            if (isPressed && onPressed)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <_ZN6Button6updateEtt+0x76>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <_ZN6Button6updateEtt+0x76>
            {
                onPressed();
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	4798      	blx	r3
            }
            if (!isPressed && onReleased)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800264c:	f083 0301 	eor.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <_ZN6Button6updateEtt+0x94>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <_ZN6Button6updateEtt+0x94>
                onReleased();
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4798      	blx	r3
            render();
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
            last_color = color;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8a1a      	ldrh	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	819a      	strh	r2, [r3, #12]
        }
    }
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <_ZN6SliderC1EP6Screentttttt>:

    uint16_t draggerX;
    uint16_t draggerY;

public:
    Slider(
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	460b      	mov	r3, r1
 8002690:	80fb      	strh	r3, [r7, #6]
 8002692:	4613      	mov	r3, r2
 8002694:	80bb      	strh	r3, [r7, #4]
        uint16_t x,
        uint16_t y,
        uint16_t maxValue = 0,
        uint16_t width = 10,
        uint16_t height = 130,
        uint16_t barColor = CYAN) : UIElement(screen, x, y, width, height)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	88b9      	ldrh	r1, [r7, #4]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	8c3b      	ldrh	r3, [r7, #32]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	8bbb      	ldrh	r3, [r7, #28]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	460b      	mov	r3, r1
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	f7ff fea4 	bl	80023f4 <_ZN9UIElementC1EP6Screentttt>
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <_ZN6SliderC1EP6Screentttttt+0x74>)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2214      	movs	r2, #20
 80026b6:	82da      	strh	r2, [r3, #22]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	761a      	strb	r2, [r3, #24]
    {
        this->maxValue = maxValue;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8b3a      	ldrh	r2, [r7, #24]
 80026c2:	829a      	strh	r2, [r3, #20]
        this->barColor = barColor;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026c8:	819a      	strh	r2, [r3, #12]
        draggerX = x + width / 2;
 80026ca:	8bbb      	ldrh	r3, [r7, #28]
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4413      	add	r3, r2
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	835a      	strh	r2, [r3, #26]
        draggerY = y + height / 2;
 80026da:	8c3b      	ldrh	r3, [r7, #32]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	839a      	strh	r2, [r3, #28]
    }
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	080166c4 	.word	0x080166c4

080026f8 <_ZN6Slider6renderEv>:

    void render() override
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    {
        // render bar
        LCD_OpenWindow(x, y, width, height);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8898      	ldrh	r0, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	88d9      	ldrh	r1, [r3, #6]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	891a      	ldrh	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	895b      	ldrh	r3, [r3, #10]
 8002710:	f000 fe30 	bl	8003374 <LCD_OpenWindow>
        LCD_FillColor(width * height, barColor);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	891b      	ldrh	r3, [r3, #8]
 8002718:	461a      	mov	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	895b      	ldrh	r3, [r3, #10]
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	899b      	ldrh	r3, [r3, #12]
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 fe7b 	bl	8003426 <LCD_FillColor>

        // render dragger
        LCD_OpenWindow(x, draggerY, width, draggerRadius);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8898      	ldrh	r0, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8b99      	ldrh	r1, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	891a      	ldrh	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8adb      	ldrh	r3, [r3, #22]
 8002740:	f000 fe18 	bl	8003374 <LCD_OpenWindow>
        LCD_FillColor(width * draggerRadius, RED);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	891b      	ldrh	r3, [r3, #8]
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8adb      	ldrh	r3, [r3, #22]
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fe65 	bl	8003426 <LCD_FillColor>
    }
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <_ZN6Slider5wrapYEt>:

    uint16_t wrapY(u_int16_t y)
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
    {
        if (y > 500 || y <= 32)
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002776:	d802      	bhi.n	800277e <_ZN6Slider5wrapYEt+0x1a>
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	2b20      	cmp	r3, #32
 800277c:	d802      	bhi.n	8002784 <_ZN6Slider5wrapYEt+0x20>
            return draggerY; // y=2048 if not touched
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8b9b      	ldrh	r3, [r3, #28]
 8002782:	e01f      	b.n	80027c4 <_ZN6Slider5wrapYEt+0x60>
        if (y < this->y)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	88db      	ldrh	r3, [r3, #6]
 8002788:	887a      	ldrh	r2, [r7, #2]
 800278a:	429a      	cmp	r2, r3
 800278c:	d202      	bcs.n	8002794 <_ZN6Slider5wrapYEt+0x30>
            return this->y;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	88db      	ldrh	r3, [r3, #6]
 8002792:	e017      	b.n	80027c4 <_ZN6Slider5wrapYEt+0x60>
        if (y > this->y + height - draggerRadius)
 8002794:	887a      	ldrh	r2, [r7, #2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	88db      	ldrh	r3, [r3, #6]
 800279a:	4619      	mov	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	895b      	ldrh	r3, [r3, #10]
 80027a0:	440b      	add	r3, r1
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	8ac9      	ldrh	r1, [r1, #22]
 80027a6:	1a5b      	subs	r3, r3, r1
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dd0a      	ble.n	80027c2 <_ZN6Slider5wrapYEt+0x5e>
            return this->y + height - draggerRadius;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	88da      	ldrh	r2, [r3, #6]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	895b      	ldrh	r3, [r3, #10]
 80027b4:	4413      	add	r3, r2
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8adb      	ldrh	r3, [r3, #22]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
 80027c0:	e000      	b.n	80027c4 <_ZN6Slider5wrapYEt+0x60>
        return y;
 80027c2:	887b      	ldrh	r3, [r7, #2]
    }
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <_ZN6Slider6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	807b      	strh	r3, [r7, #2]
 80027da:	4613      	mov	r3, r2
 80027dc:	803b      	strh	r3, [r7, #0]
    {
        bool isDraggerTouched;
        if (isDragging)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7e1b      	ldrb	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d071      	beq.n	80028ca <_ZN6Slider6updateEtt+0xfc>
        {
            LCD_OpenWindow(this->x, draggerY, width, draggerRadius);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8898      	ldrh	r0, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8b99      	ldrh	r1, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	891a      	ldrh	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8adb      	ldrh	r3, [r3, #22]
 80027f6:	f000 fdbd 	bl	8003374 <LCD_OpenWindow>
            LCD_FillColor(width * draggerRadius, CYAN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	891b      	ldrh	r3, [r3, #8]
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8adb      	ldrh	r3, [r3, #22]
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fe0a 	bl	8003426 <LCD_FillColor>
            draggerY = wrapY(y);
 8002812:	883b      	ldrh	r3, [r7, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffa4 	bl	8002764 <_ZN6Slider5wrapYEt>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	839a      	strh	r2, [r3, #28]
            LCD_OpenWindow(this->x, draggerY, width, draggerRadius);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8898      	ldrh	r0, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8b99      	ldrh	r1, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	891a      	ldrh	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8adb      	ldrh	r3, [r3, #22]
 8002834:	f000 fd9e 	bl	8003374 <LCD_OpenWindow>
            LCD_FillColor(width * draggerRadius, RED);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	891b      	ldrh	r3, [r3, #8]
 800283c:	461a      	mov	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8adb      	ldrh	r3, [r3, #22]
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fdeb 	bl	8003426 <LCD_FillColor>
            isDraggerTouched = x >= draggerX - 6 * draggerRadius && x <= draggerX + 6 * draggerRadius && y >= draggerY - 6 * draggerRadius && y <= draggerY + 6 * draggerRadius;
 8002850:	887a      	ldrh	r2, [r7, #2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8b5b      	ldrh	r3, [r3, #26]
 8002856:	4618      	mov	r0, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8adb      	ldrh	r3, [r3, #22]
 800285c:	4619      	mov	r1, r3
 800285e:	460b      	mov	r3, r1
 8002860:	0089      	lsls	r1, r1, #2
 8002862:	1a5b      	subs	r3, r3, r1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4403      	add	r3, r0
 8002868:	429a      	cmp	r2, r3
 800286a:	db2b      	blt.n	80028c4 <_ZN6Slider6updateEtt+0xf6>
 800286c:	887a      	ldrh	r2, [r7, #2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8b5b      	ldrh	r3, [r3, #26]
 8002872:	4618      	mov	r0, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8adb      	ldrh	r3, [r3, #22]
 8002878:	4619      	mov	r1, r3
 800287a:	460b      	mov	r3, r1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	440b      	add	r3, r1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4403      	add	r3, r0
 8002884:	429a      	cmp	r2, r3
 8002886:	dc1d      	bgt.n	80028c4 <_ZN6Slider6updateEtt+0xf6>
 8002888:	883a      	ldrh	r2, [r7, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8b9b      	ldrh	r3, [r3, #28]
 800288e:	4618      	mov	r0, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8adb      	ldrh	r3, [r3, #22]
 8002894:	4619      	mov	r1, r3
 8002896:	460b      	mov	r3, r1
 8002898:	0089      	lsls	r1, r1, #2
 800289a:	1a5b      	subs	r3, r3, r1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4403      	add	r3, r0
 80028a0:	429a      	cmp	r2, r3
 80028a2:	db0f      	blt.n	80028c4 <_ZN6Slider6updateEtt+0xf6>
 80028a4:	883a      	ldrh	r2, [r7, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8b9b      	ldrh	r3, [r3, #28]
 80028aa:	4618      	mov	r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8adb      	ldrh	r3, [r3, #22]
 80028b0:	4619      	mov	r1, r3
 80028b2:	460b      	mov	r3, r1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	440b      	add	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4403      	add	r3, r0
 80028bc:	429a      	cmp	r2, r3
 80028be:	dc01      	bgt.n	80028c4 <_ZN6Slider6updateEtt+0xf6>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <_ZN6Slider6updateEtt+0xf8>
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	e027      	b.n	800291a <_ZN6Slider6updateEtt+0x14c>
        }
        else
        {
            isDraggerTouched = x >= draggerX - draggerRadius && x <= draggerX + draggerRadius && y >= draggerY - draggerRadius && y <= draggerY + draggerRadius;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8b5b      	ldrh	r3, [r3, #26]
 80028d0:	4619      	mov	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	8adb      	ldrh	r3, [r3, #22]
 80028d6:	1acb      	subs	r3, r1, r3
 80028d8:	429a      	cmp	r2, r3
 80028da:	db1c      	blt.n	8002916 <_ZN6Slider6updateEtt+0x148>
 80028dc:	887a      	ldrh	r2, [r7, #2]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8b5b      	ldrh	r3, [r3, #26]
 80028e2:	4619      	mov	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8adb      	ldrh	r3, [r3, #22]
 80028e8:	440b      	add	r3, r1
 80028ea:	429a      	cmp	r2, r3
 80028ec:	dc13      	bgt.n	8002916 <_ZN6Slider6updateEtt+0x148>
 80028ee:	883a      	ldrh	r2, [r7, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8b9b      	ldrh	r3, [r3, #28]
 80028f4:	4619      	mov	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8adb      	ldrh	r3, [r3, #22]
 80028fa:	1acb      	subs	r3, r1, r3
 80028fc:	429a      	cmp	r2, r3
 80028fe:	db0a      	blt.n	8002916 <_ZN6Slider6updateEtt+0x148>
 8002900:	883a      	ldrh	r2, [r7, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8b9b      	ldrh	r3, [r3, #28]
 8002906:	4619      	mov	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8adb      	ldrh	r3, [r3, #22]
 800290c:	440b      	add	r3, r1
 800290e:	429a      	cmp	r2, r3
 8002910:	dc01      	bgt.n	8002916 <_ZN6Slider6updateEtt+0x148>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <_ZN6Slider6updateEtt+0x14a>
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
        }
        isDragging = isDraggerTouched;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	761a      	strb	r2, [r3, #24]
        value = (draggerY - this->y) * maxValue / height;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8b9b      	ldrh	r3, [r3, #28]
 8002924:	461a      	mov	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	88db      	ldrh	r3, [r3, #6]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	8a92      	ldrh	r2, [r2, #20]
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	8952      	ldrh	r2, [r2, #10]
 8002938:	fb93 f3f2 	sdiv	r3, r3, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f9d3 	bl	8000ce8 <__aeabi_i2f>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
    }
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZN6Slider8getValueEv>:
    float getValue()
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    {
        return value / maxValue;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691c      	ldr	r4, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8a9b      	ldrh	r3, [r3, #20]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f9c1 	bl	8000ce8 <__aeabi_i2f>
 8002966:	4603      	mov	r3, r0
 8002968:	4619      	mov	r1, r3
 800296a:	4620      	mov	r0, r4
 800296c:	f7fe fac4 	bl	8000ef8 <__aeabi_fdiv>
 8002970:	4603      	mov	r3, r0
    }
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}
	...

0800297c <_Z16printTargetMotorv>:

// uint32_t PulseDMABuff[2560];

SERVO42C_Pulse *pTargetMotor = &xPulseMotor;
void printTargetMotor()
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b09a      	sub	sp, #104	; 0x68
 8002980:	af00      	add	r7, sp, #0
  char str[32];
  if (pTargetMotor == &xPulseMotor)
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <_Z16printTargetMotorv+0x60>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <_Z16printTargetMotorv+0x64>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d105      	bne.n	8002998 <_Z16printTargetMotorv+0x1c>
  {
    sprintf(str, "Target: X");
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4915      	ldr	r1, [pc, #84]	; (80029e4 <_Z16printTargetMotorv+0x68>)
 8002990:	4618      	mov	r0, r3
 8002992:	f002 fbb9 	bl	8005108 <sprintf_>
 8002996:	e00f      	b.n	80029b8 <_Z16printTargetMotorv+0x3c>
  }
  else if (pTargetMotor == &yPulseMotor)
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <_Z16printTargetMotorv+0x60>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <_Z16printTargetMotorv+0x6c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d105      	bne.n	80029ae <_Z16printTargetMotorv+0x32>
  {
    sprintf(str, "Target: Y");
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	4911      	ldr	r1, [pc, #68]	; (80029ec <_Z16printTargetMotorv+0x70>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fbae 	bl	8005108 <sprintf_>
 80029ac:	e004      	b.n	80029b8 <_Z16printTargetMotorv+0x3c>
  }
  else
  {
    sprintf(str, "Target: Z");
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	490f      	ldr	r1, [pc, #60]	; (80029f0 <_Z16printTargetMotorv+0x74>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 fba8 	bl	8005108 <sprintf_>
  }
  printToLCD(str, 2);
 80029b8:	1d3a      	adds	r2, r7, #4
 80029ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fdcc 	bl	800155e <_ZN6StringC1EPKc>
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fc87 	bl	80062e0 <_Z10printToLCDRK6Stringt>
}
 80029d2:	bf00      	nop
 80029d4:	3768      	adds	r7, #104	; 0x68
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000004 	.word	0x20000004
 80029e0:	20000150 	.word	0x20000150
 80029e4:	0800ae60 	.word	0x0800ae60
 80029e8:	20000184 	.word	0x20000184
 80029ec:	0800ae6c 	.word	0x0800ae6c
 80029f0:	0800ae78 	.word	0x0800ae78

080029f4 <_Z13printPositionv>:

void printPosition()
{
 80029f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f8:	b09e      	sub	sp, #120	; 0x78
 80029fa:	af04      	add	r7, sp, #16
  char str[32];
  sprintf(str, "x=%.1f y=%.1f z=%.1f", xPulseMotor.getPosition(), yPulseMotor.getPosition(), zPulseMotor.getPosition());
 80029fc:	481b      	ldr	r0, [pc, #108]	; (8002a6c <_Z13printPositionv+0x78>)
 80029fe:	f7fe ff77 	bl	80018f0 <_ZN14SERVO42C_Pulse11getPositionEv>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fd7b 	bl	8000500 <__aeabi_f2d>
 8002a0a:	4680      	mov	r8, r0
 8002a0c:	4689      	mov	r9, r1
 8002a0e:	4818      	ldr	r0, [pc, #96]	; (8002a70 <_Z13printPositionv+0x7c>)
 8002a10:	f7fe ff6e 	bl	80018f0 <_ZN14SERVO42C_Pulse11getPositionEv>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fd72 	bl	8000500 <__aeabi_f2d>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	460d      	mov	r5, r1
 8002a20:	4814      	ldr	r0, [pc, #80]	; (8002a74 <_Z13printPositionv+0x80>)
 8002a22:	f7fe ff65 	bl	80018f0 <_ZN14SERVO42C_Pulse11getPositionEv>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd69 	bl	8000500 <__aeabi_f2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	1d38      	adds	r0, r7, #4
 8002a34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a38:	e9cd 4500 	strd	r4, r5, [sp]
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	490d      	ldr	r1, [pc, #52]	; (8002a78 <_Z13printPositionv+0x84>)
 8002a42:	f002 fb61 	bl	8005108 <sprintf_>
  printToLCD(str, 1);
 8002a46:	1d3a      	adds	r2, r7, #4
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fd85 	bl	800155e <_ZN6StringC1EPKc>
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fc40 	bl	80062e0 <_Z10printToLCDRK6Stringt>
}
 8002a60:	bf00      	nop
 8002a62:	3768      	adds	r7, #104	; 0x68
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000150 	.word	0x20000150
 8002a70:	20000184 	.word	0x20000184
 8002a74:	200001b8 	.word	0x200001b8
 8002a78:	0800ae84 	.word	0x0800ae84

08002a7c <_ZZ6myfuncENKUlvE_clEv>:
  xPulseMotor.setFrequency(1000);
  yPulseMotor.setFrequency(1000);
  zPulseMotor.setFrequency(1000);
  printTargetMotor();

  CWButton.onPressed = []()
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  {
    pTargetMotor->setDirection(0);
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <_ZZ6myfuncENKUlvE_clEv+0x28>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fdda 	bl	8001644 <_ZN10PulseMotor12setDirectionEh>
    pTargetMotor->spinStart();
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <_ZZ6myfuncENKUlvE_clEv+0x28>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fc04 	bl	80022a2 <_ZN10PulseMotor9spinStartEv>
  };
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <_ZZ6myfuncENUlvE_4_FUNEv>:
  CWButton.onPressed = []()
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  };
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff ffe5 	bl	8002a7c <_ZZ6myfuncENKUlvE_clEv>
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_ZZ6myfuncENKUlvE_cvPFvvEEv>:
  CWButton.onPressed = []()
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  };
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <_ZZ6myfuncENKUlvE_cvPFvvEEv+0x14>)
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	08002aa9 	.word	0x08002aa9

08002acc <_ZZ6myfuncENKUlvE0_clEv>:
  CWButton.onReleased = []()
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  {
    pTargetMotor->spinStop();
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <_ZZ6myfuncENKUlvE0_clEv+0x1c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fbfe 	bl	80022da <_ZN10PulseMotor8spinStopEv>
  };
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000004 	.word	0x20000004

08002aec <_ZZ6myfuncENUlvE0_4_FUNEv>:
  CWButton.onReleased = []()
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  };
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7ff ffeb 	bl	8002acc <_ZZ6myfuncENKUlvE0_clEv>
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_ZZ6myfuncENKUlvE0_cvPFvvEEv>:
  CWButton.onReleased = []()
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  };
 8002b00:	4b02      	ldr	r3, [pc, #8]	; (8002b0c <_ZZ6myfuncENKUlvE0_cvPFvvEEv+0x14>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	08002aed 	.word	0x08002aed

08002b10 <_ZZ6myfuncENKUlvE1_clEv>:
  CCWButton.onPressed = []()
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  {
    pTargetMotor->setDirection(1);
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <_ZZ6myfuncENKUlvE1_clEv+0x28>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fd90 	bl	8001644 <_ZN10PulseMotor12setDirectionEh>
    pTargetMotor->spinStart();
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <_ZZ6myfuncENKUlvE1_clEv+0x28>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fbba 	bl	80022a2 <_ZN10PulseMotor9spinStartEv>
  };
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000004 	.word	0x20000004

08002b3c <_ZZ6myfuncENUlvE1_4_FUNEv>:
  CCWButton.onPressed = []()
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  };
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff ffe5 	bl	8002b10 <_ZZ6myfuncENKUlvE1_clEv>
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_ZZ6myfuncENKUlvE1_cvPFvvEEv>:
  CCWButton.onPressed = []()
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  };
 8002b50:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <_ZZ6myfuncENKUlvE1_cvPFvvEEv+0x14>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	08002b3d 	.word	0x08002b3d

08002b60 <_ZZ6myfuncENKUlvE2_clEv>:
  CCWButton.onReleased = []()
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  {
    pTargetMotor->spinStop();
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <_ZZ6myfuncENKUlvE2_clEv+0x1c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fbb4 	bl	80022da <_ZN10PulseMotor8spinStopEv>
  };
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000004 	.word	0x20000004

08002b80 <_ZZ6myfuncENUlvE2_4_FUNEv>:
  CCWButton.onReleased = []()
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  };
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff ffeb 	bl	8002b60 <_ZZ6myfuncENKUlvE2_clEv>
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZZ6myfuncENKUlvE2_cvPFvvEEv>:
  CCWButton.onReleased = []()
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  };
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <_ZZ6myfuncENKUlvE2_cvPFvvEEv+0x14>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	08002b81 	.word	0x08002b81

08002ba4 <_ZZ6myfuncENKUlvE3_clEv>:

  switchButton.onPressed = []()
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  {
    if (pTargetMotor == &xPulseMotor)
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <_ZZ6myfuncENKUlvE3_clEv+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <_ZZ6myfuncENKUlvE3_clEv+0x44>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d103      	bne.n	8002bbe <_ZZ6myfuncENKUlvE3_clEv+0x1a>
    {
      pTargetMotor = &yPulseMotor;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <_ZZ6myfuncENKUlvE3_clEv+0x40>)
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <_ZZ6myfuncENKUlvE3_clEv+0x48>)
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e00b      	b.n	8002bd6 <_ZZ6myfuncENKUlvE3_clEv+0x32>
    }
    else if (pTargetMotor == &yPulseMotor)
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <_ZZ6myfuncENKUlvE3_clEv+0x40>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <_ZZ6myfuncENKUlvE3_clEv+0x48>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d103      	bne.n	8002bd0 <_ZZ6myfuncENKUlvE3_clEv+0x2c>
    {
      pTargetMotor = &zPulseMotor;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <_ZZ6myfuncENKUlvE3_clEv+0x40>)
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <_ZZ6myfuncENKUlvE3_clEv+0x4c>)
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e002      	b.n	8002bd6 <_ZZ6myfuncENKUlvE3_clEv+0x32>
    }
    else
    {
      pTargetMotor = &xPulseMotor;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <_ZZ6myfuncENKUlvE3_clEv+0x40>)
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <_ZZ6myfuncENKUlvE3_clEv+0x44>)
 8002bd4:	601a      	str	r2, [r3, #0]
    }
    printTargetMotor();
 8002bd6:	f7ff fed1 	bl	800297c <_Z16printTargetMotorv>
  };
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000004 	.word	0x20000004
 8002be8:	20000150 	.word	0x20000150
 8002bec:	20000184 	.word	0x20000184
 8002bf0:	200001b8 	.word	0x200001b8

08002bf4 <_ZZ6myfuncENUlvE3_4_FUNEv>:
  switchButton.onPressed = []()
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  };
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7ff ffd3 	bl	8002ba4 <_ZZ6myfuncENKUlvE3_clEv>
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZZ6myfuncENKUlvE3_cvPFvvEEv>:
  switchButton.onPressed = []()
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  };
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <_ZZ6myfuncENKUlvE3_cvPFvvEEv+0x14>)
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	08002bf5 	.word	0x08002bf5

08002c18 <_ZZ6myfuncENKUlvE4_clEv>:
  test2Button.onPressed = []()
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  {
    // setPosition3d(testTouchPad.getXRatio()*100, testTouchPad.getYRatio()*100, testSlider.getValue()*100);
    xPulseMotor.step_inf(1, 15000);
 8002c20:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002c24:	2101      	movs	r1, #1
 8002c26:	4803      	ldr	r0, [pc, #12]	; (8002c34 <_ZZ6myfuncENKUlvE4_clEv+0x1c>)
 8002c28:	f7ff fb68 	bl	80022fc <_ZN10PulseMotor8step_infEhm>
  };
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000150 	.word	0x20000150

08002c38 <_ZZ6myfuncENUlvE4_4_FUNEv>:
  test2Button.onPressed = []()
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  };
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff ffeb 	bl	8002c18 <_ZZ6myfuncENKUlvE4_clEv>
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZZ6myfuncENKUlvE4_cvPFvvEEv>:
  test2Button.onPressed = []()
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  };
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <_ZZ6myfuncENKUlvE4_cvPFvvEEv+0x14>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	08002c39 	.word	0x08002c39

08002c5c <_ZZ6myfuncENKUlvE5_clEv>:
  test3Button.onPressed = []()
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    // setPosition3d(25, -25, 0, speed);
    // setPosition3d(25, -25, 10, speed);
    // setPosition3d(25, 0, 10, speed);
    // setPosition3d(25, 0, 0, speed);
    // setPosition3d(25, -50, 0, speed);
    for (float *cmd = (float *)gcode; cmd < (float *)gcode + gcodeLegth * 4; cmd += 4)
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <_ZZ6myfuncENKUlvE5_clEv+0x54>)
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <_ZZ6myfuncENKUlvE5_clEv+0x58>)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d21a      	bcs.n	8002ca6 <_ZZ6myfuncENKUlvE5_clEv+0x4a>
    {
      setPosition3d(cmd[0], cmd[1], cmd[2], cmd[3] / 60.0); // divide by 60 to convert to seconds
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681c      	ldr	r4, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3304      	adds	r3, #4
 8002c78:	681d      	ldr	r5, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	681e      	ldr	r6, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	330c      	adds	r3, #12
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <_ZZ6myfuncENKUlvE5_clEv+0x5c>)
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f935 	bl	8000ef8 <__aeabi_fdiv>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4632      	mov	r2, r6
 8002c92:	4629      	mov	r1, r5
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7fe ffc1 	bl	8001c1c <_Z13setPosition3dffff>
      printPosition();
 8002c9a:	f7ff feab 	bl	80029f4 <_Z13printPositionv>
    for (float *cmd = (float *)gcode; cmd < (float *)gcode + gcodeLegth * 4; cmd += 4)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e7e0      	b.n	8002c68 <_ZZ6myfuncENKUlvE5_clEv+0xc>
    }
  };
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	08011c7c 	.word	0x08011c7c
 8002cb4:	080166bc 	.word	0x080166bc
 8002cb8:	42700000 	.word	0x42700000

08002cbc <_ZZ6myfuncENUlvE5_4_FUNEv>:
  test3Button.onPressed = []()
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  };
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff ffcb 	bl	8002c5c <_ZZ6myfuncENKUlvE5_clEv>
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZZ6myfuncENKUlvE5_cvPFvvEEv>:
  test3Button.onPressed = []()
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  };
 8002cd0:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <_ZZ6myfuncENKUlvE5_cvPFvvEEv+0x14>)
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	08002cbd 	.word	0x08002cbd

08002ce0 <_ZZ6myfuncENKUlvE6_clEv>:
  resetButton.onPressed = []()
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  {
    xPulseMotor.setDirection(0);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4808      	ldr	r0, [pc, #32]	; (8002d0c <_ZZ6myfuncENKUlvE6_clEv+0x2c>)
 8002cec:	f7fe fcaa 	bl	8001644 <_ZN10PulseMotor12setDirectionEh>
    xPulseMotor.spinStart();
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <_ZZ6myfuncENKUlvE6_clEv+0x2c>)
 8002cf2:	f7ff fad6 	bl	80022a2 <_ZN10PulseMotor9spinStartEv>
    yPulseMotor.setDirection(0);
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4805      	ldr	r0, [pc, #20]	; (8002d10 <_ZZ6myfuncENKUlvE6_clEv+0x30>)
 8002cfa:	f7fe fca3 	bl	8001644 <_ZN10PulseMotor12setDirectionEh>
    yPulseMotor.spinStart();
 8002cfe:	4804      	ldr	r0, [pc, #16]	; (8002d10 <_ZZ6myfuncENKUlvE6_clEv+0x30>)
 8002d00:	f7ff facf 	bl	80022a2 <_ZN10PulseMotor9spinStartEv>
    // zPulseMotor.setDirection(0);
    // zPulseMotor.spinStart();
  };
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000150 	.word	0x20000150
 8002d10:	20000184 	.word	0x20000184

08002d14 <_ZZ6myfuncENUlvE6_4_FUNEv>:
  resetButton.onPressed = []()
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  };
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7ff ffe1 	bl	8002ce0 <_ZZ6myfuncENKUlvE6_clEv>
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZZ6myfuncENKUlvE6_cvPFvvEEv>:
  resetButton.onPressed = []()
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  };
 8002d28:	4b02      	ldr	r3, [pc, #8]	; (8002d34 <_ZZ6myfuncENKUlvE6_cvPFvvEEv+0x14>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	08002d15 	.word	0x08002d15

08002d38 <myfunc>:
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0ac      	sub	sp, #176	; 0xb0
 8002d3c:	af00      	add	r7, sp, #0
  xPulseMotor.setFrequency(1000);
 8002d3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d42:	484f      	ldr	r0, [pc, #316]	; (8002e80 <myfunc+0x148>)
 8002d44:	f7fe fc60 	bl	8001608 <_ZN10PulseMotor12setFrequencyEt>
  yPulseMotor.setFrequency(1000);
 8002d48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d4c:	484d      	ldr	r0, [pc, #308]	; (8002e84 <myfunc+0x14c>)
 8002d4e:	f7fe fc5b 	bl	8001608 <_ZN10PulseMotor12setFrequencyEt>
  zPulseMotor.setFrequency(1000);
 8002d52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d56:	484c      	ldr	r0, [pc, #304]	; (8002e88 <myfunc+0x150>)
 8002d58:	f7fe fc56 	bl	8001608 <_ZN10PulseMotor12setFrequencyEt>
  printTargetMotor();
 8002d5c:	f7ff fe0e 	bl	800297c <_Z16printTargetMotorv>
  };
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fea6 	bl	8002ab4 <_ZZ6myfuncENKUlvE_cvPFvvEEv>
 8002d68:	4603      	mov	r3, r0
  CWButton.onPressed = []()
 8002d6a:	4a48      	ldr	r2, [pc, #288]	; (8002e8c <myfunc+0x154>)
 8002d6c:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fec0 	bl	8002af8 <_ZZ6myfuncENKUlvE0_cvPFvvEEv>
 8002d78:	4603      	mov	r3, r0
  CWButton.onReleased = []()
 8002d7a:	4a44      	ldr	r2, [pc, #272]	; (8002e8c <myfunc+0x154>)
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
  };
 8002d7e:	f107 030c 	add.w	r3, r7, #12
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fee0 	bl	8002b48 <_ZZ6myfuncENKUlvE1_cvPFvvEEv>
 8002d88:	4603      	mov	r3, r0
  CCWButton.onPressed = []()
 8002d8a:	4a41      	ldr	r2, [pc, #260]	; (8002e90 <myfunc+0x158>)
 8002d8c:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fefa 	bl	8002b8c <_ZZ6myfuncENKUlvE2_cvPFvvEEv>
 8002d98:	4603      	mov	r3, r0
  CCWButton.onReleased = []()
 8002d9a:	4a3d      	ldr	r2, [pc, #244]	; (8002e90 <myfunc+0x158>)
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
  };
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff2c 	bl	8002c00 <_ZZ6myfuncENKUlvE3_cvPFvvEEv>
 8002da8:	4603      	mov	r3, r0
  switchButton.onPressed = []()
 8002daa:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <myfunc+0x15c>)
 8002dac:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8002dae:	f107 0318 	add.w	r3, r7, #24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff46 	bl	8002c44 <_ZZ6myfuncENKUlvE4_cvPFvvEEv>
 8002db8:	4603      	mov	r3, r0
  test2Button.onPressed = []()
 8002dba:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <myfunc+0x160>)
 8002dbc:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff80 	bl	8002cc8 <_ZZ6myfuncENKUlvE5_cvPFvvEEv>
 8002dc8:	4603      	mov	r3, r0
  test3Button.onPressed = []()
 8002dca:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <myfunc+0x164>)
 8002dcc:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8002dce:	f107 0320 	add.w	r3, r7, #32
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ffa4 	bl	8002d20 <_ZZ6myfuncENKUlvE6_cvPFvvEEv>
 8002dd8:	4603      	mov	r3, r0
  resetButton.onPressed = []()
 8002dda:	4a31      	ldr	r2, [pc, #196]	; (8002ea0 <myfunc+0x168>)
 8002ddc:	6293      	str	r3, [r2, #40]	; 0x28

  strType_XPT2046_Coordinate touch;
  printToLCD("Hello World 1", 1);
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	4930      	ldr	r1, [pc, #192]	; (8002ea4 <myfunc+0x16c>)
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fbba 	bl	800155e <_ZN6StringC1EPKc>
 8002dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 fa75 	bl	80062e0 <_Z10printToLCDRK6Stringt>
  // printToLCD("Aligning Motor Z", 1);
  // zServo.alignAbsolutePosition(0);

  while (1)
  {
    int startTick = HAL_GetTick();
 8002df6:	f003 fd8f 	bl	8006918 <HAL_GetTick>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    // map2d();
    rotateAngleX = xSlider.getValue() * 90;
 8002e00:	4829      	ldr	r0, [pc, #164]	; (8002ea8 <myfunc+0x170>)
 8002e02:	f7ff fda5 	bl	8002950 <_ZN6Slider8getValueEv>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4928      	ldr	r1, [pc, #160]	; (8002eac <myfunc+0x174>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd ffc0 	bl	8000d90 <__aeabi_fmul>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <myfunc+0x178>)
 8002e16:	601a      	str	r2, [r3, #0]
    // rotateAngleY = ySlider.getValue() * 90;
    rotateAngleZ = zSlider.getValue() * 90;
 8002e18:	4826      	ldr	r0, [pc, #152]	; (8002eb4 <myfunc+0x17c>)
 8002e1a:	f7ff fd99 	bl	8002950 <_ZN6Slider8getValueEv>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4922      	ldr	r1, [pc, #136]	; (8002eac <myfunc+0x174>)
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd ffb4 	bl	8000d90 <__aeabi_fmul>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <myfunc+0x180>)
 8002e2e:	601a      	str	r2, [r3, #0]
    // sprintf(str, "%02X", data[0]);

    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

    // UIElement::updateAllElements(); // TODO: change to updateScreen
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8002e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e34:	4821      	ldr	r0, [pc, #132]	; (8002ebc <myfunc+0x184>)
 8002e36:	f004 fea3 	bl	8007b80 <HAL_GPIO_ReadPin>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <myfunc+0x11a>
    {
      mainScreen.update();
 8002e4a:	481d      	ldr	r0, [pc, #116]	; (8002ec0 <myfunc+0x188>)
 8002e4c:	f7fe fb20 	bl	8001490 <_ZN6Screen6updateEv>
 8002e50:	e002      	b.n	8002e58 <myfunc+0x120>
    }
    else
    {
      operationScreen.update();
 8002e52:	481c      	ldr	r0, [pc, #112]	; (8002ec4 <myfunc+0x18c>)
 8002e54:	f7fe fb1c 	bl	8001490 <_ZN6Screen6updateEv>
    }
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
    // HAL_Delay(500);
    debugLog(String(HAL_GetTick() - startTick), 7);
 8002e58:	f003 fd5e 	bl	8006918 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fa0a 	bl	8002284 <_ZN6StringC1Em>
 8002e70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e74:	2107      	movs	r1, #7
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fa5a 	bl	8006330 <_Z8debugLogRK6Stringt>
  }
 8002e7c:	e7bb      	b.n	8002df6 <myfunc+0xbe>
 8002e7e:	bf00      	nop
 8002e80:	20000150 	.word	0x20000150
 8002e84:	20000184 	.word	0x20000184
 8002e88:	200001b8 	.word	0x200001b8
 8002e8c:	20000518 	.word	0x20000518
 8002e90:	200004e4 	.word	0x200004e4
 8002e94:	2000047c 	.word	0x2000047c
 8002e98:	200004b0 	.word	0x200004b0
 8002e9c:	2000054c 	.word	0x2000054c
 8002ea0:	20000580 	.word	0x20000580
 8002ea4:	0800ae9c 	.word	0x0800ae9c
 8002ea8:	200005b4 	.word	0x200005b4
 8002eac:	42b40000 	.word	0x42b40000
 8002eb0:	200002e8 	.word	0x200002e8
 8002eb4:	200005d4 	.word	0x200005d4
 8002eb8:	200002ec 	.word	0x200002ec
 8002ebc:	40011000 	.word	0x40011000
 8002ec0:	20000374 	.word	0x20000374
 8002ec4:	200003f8 	.word	0x200003f8

08002ec8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af06      	add	r7, sp, #24
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f040 8090 	bne.w	8002ffa <_Z41__static_initialization_and_destruction_0ii+0x132>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	f040 808a 	bne.w	8002ffa <_Z41__static_initialization_and_destruction_0ii+0x132>
Screen mainScreen;
 8002ee6:	4847      	ldr	r0, [pc, #284]	; (8003004 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002ee8:	f7ff fa62 	bl	80023b0 <_ZN6ScreenC1Ev>
Screen operationScreen;
 8002eec:	4846      	ldr	r0, [pc, #280]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002eee:	f7ff fa5f 	bl	80023b0 <_ZN6ScreenC1Ev>
Button switchButton(&operationScreen, 170, 50, "Motor?", 40, 40);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9304      	str	r3, [sp, #16]
 8002ef6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002efa:	9303      	str	r3, [sp, #12]
 8002efc:	2328      	movs	r3, #40	; 0x28
 8002efe:	9302      	str	r3, [sp, #8]
 8002f00:	2328      	movs	r3, #40	; 0x28
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2332      	movs	r3, #50	; 0x32
 8002f0a:	22aa      	movs	r2, #170	; 0xaa
 8002f0c:	493e      	ldr	r1, [pc, #248]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002f0e:	4840      	ldr	r0, [pc, #256]	; (8003010 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8002f10:	f7ff fada 	bl	80024c8 <_ZN6ButtonC1EP6ScreenttPctttt>
Button test2Button(&operationScreen, 170, 0, "SetPos", 40, 40);
 8002f14:	2300      	movs	r3, #0
 8002f16:	9304      	str	r3, [sp, #16]
 8002f18:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f1c:	9303      	str	r3, [sp, #12]
 8002f1e:	2328      	movs	r3, #40	; 0x28
 8002f20:	9302      	str	r3, [sp, #8]
 8002f22:	2328      	movs	r3, #40	; 0x28
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	22aa      	movs	r2, #170	; 0xaa
 8002f2e:	4936      	ldr	r1, [pc, #216]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002f30:	4839      	ldr	r0, [pc, #228]	; (8003018 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8002f32:	f7ff fac9 	bl	80024c8 <_ZN6ButtonC1EP6ScreenttPctttt>
Button CCWButton(&operationScreen, 10, 50, "YCCW", 40, 40);
 8002f36:	2300      	movs	r3, #0
 8002f38:	9304      	str	r3, [sp, #16]
 8002f3a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f3e:	9303      	str	r3, [sp, #12]
 8002f40:	2328      	movs	r3, #40	; 0x28
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	2328      	movs	r3, #40	; 0x28
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	4b34      	ldr	r3, [pc, #208]	; (800301c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2332      	movs	r3, #50	; 0x32
 8002f4e:	220a      	movs	r2, #10
 8002f50:	492d      	ldr	r1, [pc, #180]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002f52:	4833      	ldr	r0, [pc, #204]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8002f54:	f7ff fab8 	bl	80024c8 <_ZN6ButtonC1EP6ScreenttPctttt>
Button CWButton(&operationScreen, 65, 50, "YCW", 40, 40);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9304      	str	r3, [sp, #16]
 8002f5c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f60:	9303      	str	r3, [sp, #12]
 8002f62:	2328      	movs	r3, #40	; 0x28
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	2328      	movs	r3, #40	; 0x28
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2332      	movs	r3, #50	; 0x32
 8002f70:	2241      	movs	r2, #65	; 0x41
 8002f72:	4925      	ldr	r1, [pc, #148]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002f74:	482c      	ldr	r0, [pc, #176]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8002f76:	f7ff faa7 	bl	80024c8 <_ZN6ButtonC1EP6ScreenttPctttt>
Button test3Button(&operationScreen, 120, 50, "START", 40, 40);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9304      	str	r3, [sp, #16]
 8002f7e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f82:	9303      	str	r3, [sp, #12]
 8002f84:	2328      	movs	r3, #40	; 0x28
 8002f86:	9302      	str	r3, [sp, #8]
 8002f88:	2328      	movs	r3, #40	; 0x28
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2332      	movs	r3, #50	; 0x32
 8002f92:	2278      	movs	r2, #120	; 0x78
 8002f94:	491c      	ldr	r1, [pc, #112]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002f96:	4826      	ldr	r0, [pc, #152]	; (8003030 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8002f98:	f7ff fa96 	bl	80024c8 <_ZN6ButtonC1EP6ScreenttPctttt>
Button resetButton(&operationScreen, 120, 0, "REST", 40, 40);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9304      	str	r3, [sp, #16]
 8002fa0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002fa4:	9303      	str	r3, [sp, #12]
 8002fa6:	2328      	movs	r3, #40	; 0x28
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	2328      	movs	r3, #40	; 0x28
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	4b21      	ldr	r3, [pc, #132]	; (8003034 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2278      	movs	r2, #120	; 0x78
 8002fb6:	4914      	ldr	r1, [pc, #80]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8002fba:	f7ff fa85 	bl	80024c8 <_ZN6ButtonC1EP6ScreenttPctttt>
Slider xSlider(&mainScreen, 180, 120, 100);
 8002fbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002fc2:	9303      	str	r3, [sp, #12]
 8002fc4:	2382      	movs	r3, #130	; 0x82
 8002fc6:	9302      	str	r3, [sp, #8]
 8002fc8:	230a      	movs	r3, #10
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2364      	movs	r3, #100	; 0x64
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2378      	movs	r3, #120	; 0x78
 8002fd2:	22b4      	movs	r2, #180	; 0xb4
 8002fd4:	490b      	ldr	r1, [pc, #44]	; (8003004 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002fd6:	4819      	ldr	r0, [pc, #100]	; (800303c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8002fd8:	f7ff fb52 	bl	8002680 <_ZN6SliderC1EP6Screentttttt>
Slider zSlider(&mainScreen, 220, 120, 100);
 8002fdc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002fe0:	9303      	str	r3, [sp, #12]
 8002fe2:	2382      	movs	r3, #130	; 0x82
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	230a      	movs	r3, #10
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	2364      	movs	r3, #100	; 0x64
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2378      	movs	r3, #120	; 0x78
 8002ff0:	22dc      	movs	r2, #220	; 0xdc
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002ff4:	4812      	ldr	r0, [pc, #72]	; (8003040 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002ff6:	f7ff fb43 	bl	8002680 <_ZN6SliderC1EP6Screentttttt>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000374 	.word	0x20000374
 8003008:	200003f8 	.word	0x200003f8
 800300c:	0800aeac 	.word	0x0800aeac
 8003010:	2000047c 	.word	0x2000047c
 8003014:	0800aeb4 	.word	0x0800aeb4
 8003018:	200004b0 	.word	0x200004b0
 800301c:	0800aebc 	.word	0x0800aebc
 8003020:	200004e4 	.word	0x200004e4
 8003024:	0800aec4 	.word	0x0800aec4
 8003028:	20000518 	.word	0x20000518
 800302c:	0800aec8 	.word	0x0800aec8
 8003030:	2000054c 	.word	0x2000054c
 8003034:	0800aed0 	.word	0x0800aed0
 8003038:	20000580 	.word	0x20000580
 800303c:	200005b4 	.word	0x200005b4
 8003040:	200005d4 	.word	0x200005d4

08003044 <_GLOBAL__sub_I_scale>:
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
 8003048:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800304c:	2001      	movs	r0, #1
 800304e:	f7ff ff3b 	bl	8002ec8 <_Z41__static_initialization_and_destruction_0ii>
 8003052:	bd80      	pop	{r7, pc}

08003054 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	e002      	b.n	8003064 <Delay+0x10>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3b01      	subs	r3, #1
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f9      	bne.n	800305e <Delay+0xa>
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 800307a:	2001      	movs	r0, #1
 800307c:	f000 f826 	bl	80030cc <LCD_BackLed_Control>
	LCD_Rst();
 8003080:	f000 f80c 	bl	800309c <LCD_Rst>
	LCD_REG_Config();
 8003084:	f000 f85c 	bl	8003140 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8003088:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800308c:	22f0      	movs	r2, #240	; 0xf0
 800308e:	2100      	movs	r1, #0
 8003090:	2000      	movs	r0, #0
 8003092:	f000 f9e7 	bl	8003464 <LCD_Clear>
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <LCD_Rst>:


void LCD_Rst ( void )
{			
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2102      	movs	r1, #2
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <LCD_Rst+0x28>)
 80030a6:	f004 fd82 	bl	8007bae <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80030aa:	4807      	ldr	r0, [pc, #28]	; (80030c8 <LCD_Rst+0x2c>)
 80030ac:	f7ff ffd2 	bl	8003054 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	2102      	movs	r1, #2
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <LCD_Rst+0x28>)
 80030b6:	f004 fd7a 	bl	8007bae <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80030ba:	4803      	ldr	r0, [pc, #12]	; (80030c8 <LCD_Rst+0x2c>)
 80030bc:	f7ff ffca 	bl	8003054 <Delay>
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40011800 	.word	0x40011800
 80030c8:	0002bffc 	.word	0x0002bffc

080030cc <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80030dc:	2200      	movs	r2, #0
 80030de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e2:	4807      	ldr	r0, [pc, #28]	; (8003100 <LCD_BackLed_Control+0x34>)
 80030e4:	f004 fd63 	bl	8007bae <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80030e8:	e005      	b.n	80030f6 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80030ea:	2201      	movs	r2, #1
 80030ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030f0:	4803      	ldr	r0, [pc, #12]	; (8003100 <LCD_BackLed_Control+0x34>)
 80030f2:	f004 fd5c 	bl	8007bae <HAL_GPIO_WritePin>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40011400 	.word	0x40011400

08003104 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800310e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	8013      	strh	r3, [r2, #0]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <LCD_Write_Data+0x1c>)
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	8013      	strh	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	60020000 	.word	0x60020000

08003140 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8003144:	20cf      	movs	r0, #207	; 0xcf
 8003146:	f7ff ffdd 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800314a:	2000      	movs	r0, #0
 800314c:	f7ff ffe8 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8003150:	2081      	movs	r0, #129	; 0x81
 8003152:	f7ff ffe5 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8003156:	2030      	movs	r0, #48	; 0x30
 8003158:	f7ff ffe2 	bl	8003120 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 800315c:	20ed      	movs	r0, #237	; 0xed
 800315e:	f7ff ffd1 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8003162:	2064      	movs	r0, #100	; 0x64
 8003164:	f7ff ffdc 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8003168:	2003      	movs	r0, #3
 800316a:	f7ff ffd9 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800316e:	2012      	movs	r0, #18
 8003170:	f7ff ffd6 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8003174:	2081      	movs	r0, #129	; 0x81
 8003176:	f7ff ffd3 	bl	8003120 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800317a:	20e8      	movs	r0, #232	; 0xe8
 800317c:	f7ff ffc2 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8003180:	2085      	movs	r0, #133	; 0x85
 8003182:	f7ff ffcd 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8003186:	2010      	movs	r0, #16
 8003188:	f7ff ffca 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 800318c:	2078      	movs	r0, #120	; 0x78
 800318e:	f7ff ffc7 	bl	8003120 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8003192:	20cb      	movs	r0, #203	; 0xcb
 8003194:	f7ff ffb6 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8003198:	2039      	movs	r0, #57	; 0x39
 800319a:	f7ff ffc1 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800319e:	202c      	movs	r0, #44	; 0x2c
 80031a0:	f7ff ffbe 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7ff ffbb 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80031aa:	2034      	movs	r0, #52	; 0x34
 80031ac:	f7ff ffb8 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7ff ffb5 	bl	8003120 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80031b6:	20f7      	movs	r0, #247	; 0xf7
 80031b8:	f7ff ffa4 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80031bc:	2020      	movs	r0, #32
 80031be:	f7ff ffaf 	bl	8003120 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80031c2:	20ea      	movs	r0, #234	; 0xea
 80031c4:	f7ff ff9e 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7ff ffa9 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7ff ffa6 	bl	8003120 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80031d4:	20b1      	movs	r0, #177	; 0xb1
 80031d6:	f7ff ff95 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff ffa0 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80031e0:	201b      	movs	r0, #27
 80031e2:	f7ff ff9d 	bl	8003120 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80031e6:	20b6      	movs	r0, #182	; 0xb6
 80031e8:	f7ff ff8c 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80031ec:	200a      	movs	r0, #10
 80031ee:	f7ff ff97 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80031f2:	20a2      	movs	r0, #162	; 0xa2
 80031f4:	f7ff ff94 	bl	8003120 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80031f8:	20c0      	movs	r0, #192	; 0xc0
 80031fa:	f7ff ff83 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80031fe:	2035      	movs	r0, #53	; 0x35
 8003200:	f7ff ff8e 	bl	8003120 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8003204:	20c1      	movs	r0, #193	; 0xc1
 8003206:	f7ff ff7d 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800320a:	2011      	movs	r0, #17
 800320c:	f7ff ff88 	bl	8003120 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8003210:	20c5      	movs	r0, #197	; 0xc5
 8003212:	f7ff ff77 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8003216:	2045      	movs	r0, #69	; 0x45
 8003218:	f7ff ff82 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800321c:	2045      	movs	r0, #69	; 0x45
 800321e:	f7ff ff7f 	bl	8003120 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8003222:	20c7      	movs	r0, #199	; 0xc7
 8003224:	f7ff ff6e 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8003228:	20a2      	movs	r0, #162	; 0xa2
 800322a:	f7ff ff79 	bl	8003120 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800322e:	20f2      	movs	r0, #242	; 0xf2
 8003230:	f7ff ff68 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff ff73 	bl	8003120 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800323a:	2026      	movs	r0, #38	; 0x26
 800323c:	f7ff ff62 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8003240:	2001      	movs	r0, #1
 8003242:	f7ff ff6d 	bl	8003120 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8003246:	20e0      	movs	r0, #224	; 0xe0
 8003248:	f7ff ff5c 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 800324c:	200f      	movs	r0, #15
 800324e:	f7ff ff67 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8003252:	2026      	movs	r0, #38	; 0x26
 8003254:	f7ff ff64 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8003258:	2024      	movs	r0, #36	; 0x24
 800325a:	f7ff ff61 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800325e:	200b      	movs	r0, #11
 8003260:	f7ff ff5e 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8003264:	200e      	movs	r0, #14
 8003266:	f7ff ff5b 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800326a:	2009      	movs	r0, #9
 800326c:	f7ff ff58 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8003270:	2054      	movs	r0, #84	; 0x54
 8003272:	f7ff ff55 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8003276:	20a8      	movs	r0, #168	; 0xa8
 8003278:	f7ff ff52 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 800327c:	2046      	movs	r0, #70	; 0x46
 800327e:	f7ff ff4f 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8003282:	200c      	movs	r0, #12
 8003284:	f7ff ff4c 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8003288:	2017      	movs	r0, #23
 800328a:	f7ff ff49 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800328e:	2009      	movs	r0, #9
 8003290:	f7ff ff46 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8003294:	200f      	movs	r0, #15
 8003296:	f7ff ff43 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800329a:	2007      	movs	r0, #7
 800329c:	f7ff ff40 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7ff ff3d 	bl	8003120 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80032a6:	20e1      	movs	r0, #225	; 0xe1
 80032a8:	f7ff ff2c 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff ff37 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80032b2:	2019      	movs	r0, #25
 80032b4:	f7ff ff34 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80032b8:	201b      	movs	r0, #27
 80032ba:	f7ff ff31 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80032be:	2004      	movs	r0, #4
 80032c0:	f7ff ff2e 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80032c4:	2010      	movs	r0, #16
 80032c6:	f7ff ff2b 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80032ca:	2007      	movs	r0, #7
 80032cc:	f7ff ff28 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80032d0:	202a      	movs	r0, #42	; 0x2a
 80032d2:	f7ff ff25 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80032d6:	2047      	movs	r0, #71	; 0x47
 80032d8:	f7ff ff22 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80032dc:	2039      	movs	r0, #57	; 0x39
 80032de:	f7ff ff1f 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80032e2:	2003      	movs	r0, #3
 80032e4:	f7ff ff1c 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80032e8:	2006      	movs	r0, #6
 80032ea:	f7ff ff19 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80032ee:	2006      	movs	r0, #6
 80032f0:	f7ff ff16 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80032f4:	2030      	movs	r0, #48	; 0x30
 80032f6:	f7ff ff13 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80032fa:	2038      	movs	r0, #56	; 0x38
 80032fc:	f7ff ff10 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8003300:	200f      	movs	r0, #15
 8003302:	f7ff ff0d 	bl	8003120 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8003306:	2036      	movs	r0, #54	; 0x36
 8003308:	f7ff fefc 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 800330c:	20c8      	movs	r0, #200	; 0xc8
 800330e:	f7ff ff07 	bl	8003120 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8003312:	202a      	movs	r0, #42	; 0x2a
 8003314:	f7ff fef6 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003318:	2000      	movs	r0, #0
 800331a:	f7ff ff01 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800331e:	2000      	movs	r0, #0
 8003320:	f7ff fefe 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003324:	2000      	movs	r0, #0
 8003326:	f7ff fefb 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800332a:	20ef      	movs	r0, #239	; 0xef
 800332c:	f7ff fef8 	bl	8003120 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8003330:	202b      	movs	r0, #43	; 0x2b
 8003332:	f7ff fee7 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003336:	2000      	movs	r0, #0
 8003338:	f7ff fef2 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800333c:	2000      	movs	r0, #0
 800333e:	f7ff feef 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8003342:	2001      	movs	r0, #1
 8003344:	f7ff feec 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8003348:	203f      	movs	r0, #63	; 0x3f
 800334a:	f7ff fee9 	bl	8003120 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800334e:	203a      	movs	r0, #58	; 0x3a
 8003350:	f7ff fed8 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8003354:	2055      	movs	r0, #85	; 0x55
 8003356:	f7ff fee3 	bl	8003120 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800335a:	2011      	movs	r0, #17
 800335c:	f7ff fed2 	bl	8003104 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8003360:	4803      	ldr	r0, [pc, #12]	; (8003370 <LCD_REG_Config+0x230>)
 8003362:	f7ff fe77 	bl	8003054 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8003366:	2029      	movs	r0, #41	; 0x29
 8003368:	f7ff fecc 	bl	8003104 <LCD_Write_Cmd>
	
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	0002bffc 	.word	0x0002bffc

08003374 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4604      	mov	r4, r0
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4623      	mov	r3, r4
 8003384:	80fb      	strh	r3, [r7, #6]
 8003386:	4603      	mov	r3, r0
 8003388:	80bb      	strh	r3, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	807b      	strh	r3, [r7, #2]
 800338e:	4613      	mov	r3, r2
 8003390:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8003392:	202a      	movs	r0, #42	; 0x2a
 8003394:	f7ff feb6 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff febe 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff feb8 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	4413      	add	r3, r2
 80033b6:	3b01      	subs	r3, #1
 80033b8:	121b      	asrs	r3, r3, #8
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff feaf 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	4413      	add	r3, r2
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fea4 	bl	8003120 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80033d8:	202b      	movs	r0, #43	; 0x2b
 80033da:	f7ff fe93 	bl	8003104 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80033de:	88bb      	ldrh	r3, [r7, #4]
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fe9b 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80033ea:	88bb      	ldrh	r3, [r7, #4]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fe95 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80033f6:	88ba      	ldrh	r2, [r7, #4]
 80033f8:	883b      	ldrh	r3, [r7, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	3b01      	subs	r3, #1
 80033fe:	121b      	asrs	r3, r3, #8
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fe8c 	bl	8003120 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8003408:	88ba      	ldrh	r2, [r7, #4]
 800340a:	883b      	ldrh	r3, [r7, #0]
 800340c:	4413      	add	r3, r2
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29b      	uxth	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	b29b      	uxth	r3, r3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fe81 	bl	8003120 <LCD_Write_Data>
	
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}

08003426 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8003436:	202c      	movs	r0, #44	; 0x2c
 8003438:	f7ff fe64 	bl	8003104 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e006      	b.n	8003450 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fe6b 	bl	8003120 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3f4      	bcc.n	8003442 <LCD_FillColor+0x1c>
		
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	4604      	mov	r4, r0
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4623      	mov	r3, r4
 8003474:	80fb      	strh	r3, [r7, #6]
 8003476:	4603      	mov	r3, r0
 8003478:	80bb      	strh	r3, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	807b      	strh	r3, [r7, #2]
 800347e:	4613      	mov	r3, r2
 8003480:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <LCD_Clear+0x58>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <LCD_Clear+0x2a>
 800348a:	2300      	movs	r3, #0
 800348c:	e001      	b.n	8003492 <LCD_Clear+0x2e>
 800348e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003492:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8003494:	883b      	ldrh	r3, [r7, #0]
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	88b9      	ldrh	r1, [r7, #4]
 800349a:	88f8      	ldrh	r0, [r7, #6]
 800349c:	f7ff ff6a 	bl	8003374 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	883a      	ldrh	r2, [r7, #0]
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7ff ffb9 	bl	8003426 <LCD_FillColor>
	
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	200005f4 	.word	0x200005f4

080034c0 <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4604      	mov	r4, r0
 80034c8:	4608      	mov	r0, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	80fb      	strh	r3, [r7, #6]
 80034d2:	4603      	mov	r3, r0
 80034d4:	80bb      	strh	r3, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	807b      	strh	r3, [r7, #2]
 80034da:	4613      	mov	r3, r2
 80034dc:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80034de:	883b      	ldrh	r3, [r7, #0]
 80034e0:	887a      	ldrh	r2, [r7, #2]
 80034e2:	88b9      	ldrh	r1, [r7, #4]
 80034e4:	88f8      	ldrh	r0, [r7, #6]
 80034e6:	f7ff ff45 	bl	8003374 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	883a      	ldrh	r2, [r7, #0]
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	8b3b      	ldrh	r3, [r7, #24]
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7ff ff94 	bl	8003426 <LCD_FillColor>
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
	...

08003508 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	80fb      	strh	r3, [r7, #6]
 8003512:	460b      	mov	r3, r1
 8003514:	80bb      	strh	r3, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800351a:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <LCD_DrawChar+0xb0>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <LCD_DrawChar+0x20>
 8003522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003526:	e000      	b.n	800352a <LCD_DrawChar+0x22>
 8003528:	2300      	movs	r3, #0
 800352a:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <LCD_DrawChar+0xb0>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <LCD_DrawChar+0x30>
 8003534:	2300      	movs	r3, #0
 8003536:	e001      	b.n	800353c <LCD_DrawChar+0x34>
 8003538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800353c:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	3b20      	subs	r3, #32
 8003542:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8003544:	88b9      	ldrh	r1, [r7, #4]
 8003546:	88f8      	ldrh	r0, [r7, #6]
 8003548:	2310      	movs	r3, #16
 800354a:	2208      	movs	r2, #8
 800354c:	f7ff ff12 	bl	8003374 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8003550:	202c      	movs	r0, #44	; 0x2c
 8003552:	f7ff fdd7 	bl	8003104 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003556:	2300      	movs	r3, #0
 8003558:	75bb      	strb	r3, [r7, #22]
 800355a:	e024      	b.n	80035a6 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	7dbb      	ldrb	r3, [r7, #22]
 8003560:	4916      	ldr	r1, [pc, #88]	; (80035bc <LCD_DrawChar+0xb4>)
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	440a      	add	r2, r1
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800356c:	2300      	movs	r3, #0
 800356e:	757b      	strb	r3, [r7, #21]
 8003570:	e013      	b.n	800359a <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 800357c:	8a7b      	ldrh	r3, [r7, #18]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fdce 	bl	8003120 <LCD_Write_Data>
 8003584:	e003      	b.n	800358e <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8003586:	8a3b      	ldrh	r3, [r7, #16]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fdc9 	bl	8003120 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003594:	7d7b      	ldrb	r3, [r7, #21]
 8003596:	3301      	adds	r3, #1
 8003598:	757b      	strb	r3, [r7, #21]
 800359a:	7d7b      	ldrb	r3, [r7, #21]
 800359c:	2b07      	cmp	r3, #7
 800359e:	d9e8      	bls.n	8003572 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80035a0:	7dbb      	ldrb	r3, [r7, #22]
 80035a2:	3301      	adds	r3, #1
 80035a4:	75bb      	strb	r3, [r7, #22]
 80035a6:	7dbb      	ldrb	r3, [r7, #22]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d9d7      	bls.n	800355c <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200005f4 	.word	0x200005f4
 80035bc:	080166ec 	.word	0x080166ec

080035c0 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	603a      	str	r2, [r7, #0]
 80035ca:	80fb      	strh	r3, [r7, #6]
 80035cc:	460b      	mov	r3, r1
 80035ce:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80035d0:	e01c      	b.n	800360c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2be8      	cmp	r3, #232	; 0xe8
 80035d6:	d904      	bls.n	80035e2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80035d8:	2300      	movs	r3, #0
 80035da:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80035dc:	88bb      	ldrh	r3, [r7, #4]
 80035de:	3310      	adds	r3, #16
 80035e0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80035e2:	88bb      	ldrh	r3, [r7, #4]
 80035e4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80035e8:	d903      	bls.n	80035f2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80035ea:	2300      	movs	r3, #0
 80035ec:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	88b9      	ldrh	r1, [r7, #4]
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ff84 	bl	8003508 <LCD_DrawChar>
		
		pStr ++;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	3308      	adds	r3, #8
 800360a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1de      	bne.n	80035d2 <LCD_DrawString+0x12>
		
	}
	
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	4604      	mov	r4, r0
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4623      	mov	r3, r4
 8003630:	80fb      	strh	r3, [r7, #6]
 8003632:	4603      	mov	r3, r0
 8003634:	80bb      	strh	r3, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
 800363a:	4613      	mov	r3, r2
 800363c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	3b20      	subs	r3, #32
 8003642:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8003644:	88b9      	ldrh	r1, [r7, #4]
 8003646:	88f8      	ldrh	r0, [r7, #6]
 8003648:	2310      	movs	r3, #16
 800364a:	2208      	movs	r2, #8
 800364c:	f7ff fe92 	bl	8003374 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8003650:	202c      	movs	r0, #44	; 0x2c
 8003652:	f7ff fd57 	bl	8003104 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003656:	2300      	movs	r3, #0
 8003658:	73bb      	strb	r3, [r7, #14]
 800365a:	e024      	b.n	80036a6 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800365c:	7b3a      	ldrb	r2, [r7, #12]
 800365e:	7bbb      	ldrb	r3, [r7, #14]
 8003660:	4915      	ldr	r1, [pc, #84]	; (80036b8 <LCD_DrawChar_Color+0x98>)
 8003662:	0112      	lsls	r2, r2, #4
 8003664:	440a      	add	r2, r1
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800366c:	2300      	movs	r3, #0
 800366e:	737b      	strb	r3, [r7, #13]
 8003670:	e013      	b.n	800369a <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 800367c:	8c3b      	ldrh	r3, [r7, #32]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fd4e 	bl	8003120 <LCD_Write_Data>
 8003684:	e003      	b.n	800368e <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8003686:	883b      	ldrh	r3, [r7, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fd49 	bl	8003120 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003694:	7b7b      	ldrb	r3, [r7, #13]
 8003696:	3301      	adds	r3, #1
 8003698:	737b      	strb	r3, [r7, #13]
 800369a:	7b7b      	ldrb	r3, [r7, #13]
 800369c:	2b07      	cmp	r3, #7
 800369e:	d9e8      	bls.n	8003672 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
 80036a2:	3301      	adds	r3, #1
 80036a4:	73bb      	strb	r3, [r7, #14]
 80036a6:	7bbb      	ldrb	r3, [r7, #14]
 80036a8:	2b0f      	cmp	r3, #15
 80036aa:	d9d7      	bls.n	800365c <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	080166ec 	.word	0x080166ec

080036bc <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b087      	sub	sp, #28
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60ba      	str	r2, [r7, #8]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	81fb      	strh	r3, [r7, #14]
 80036ca:	460b      	mov	r3, r1
 80036cc:	81bb      	strh	r3, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80036d2:	e01f      	b.n	8003714 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80036d4:	89fb      	ldrh	r3, [r7, #14]
 80036d6:	2be8      	cmp	r3, #232	; 0xe8
 80036d8:	d904      	bls.n	80036e4 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80036da:	2300      	movs	r3, #0
 80036dc:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80036de:	89bb      	ldrh	r3, [r7, #12]
 80036e0:	3310      	adds	r3, #16
 80036e2:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80036e4:	89bb      	ldrh	r3, [r7, #12]
 80036e6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80036ea:	d903      	bls.n	80036f4 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80036ec:	2300      	movs	r3, #0
 80036ee:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	88fc      	ldrh	r4, [r7, #6]
 80036fa:	89b9      	ldrh	r1, [r7, #12]
 80036fc:	89f8      	ldrh	r0, [r7, #14]
 80036fe:	8c3b      	ldrh	r3, [r7, #32]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	4623      	mov	r3, r4
 8003704:	f7ff ff8c 	bl	8003620 <LCD_DrawChar_Color>
		
		pStr ++;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	3301      	adds	r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	3308      	adds	r3, #8
 8003712:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1db      	bne.n	80036d4 <LCD_DrawString_Color+0x18>
		
	}
	
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bd90      	pop	{r4, r7, pc}
	...

08003728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800372c:	f003 f89c 	bl	8006868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003730:	f000 f842 	bl	80037b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003734:	f7fe fc80 	bl	8002038 <MX_GPIO_Init>
  MX_DMA_Init();
 8003738:	f7fe fb92 	bl	8001e60 <MX_DMA_Init>
  MX_FSMC_Init();
 800373c:	f7fe fbca 	bl	8001ed4 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003740:	f002 fc6c 	bl	800601c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003744:	f001 fffe 	bl	8005744 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003748:	f002 f870 	bl	800582c <MX_TIM3_Init>
  MX_TIM5_Init();
 800374c:	f002 f95a 	bl	8005a04 <MX_TIM5_Init>
  MX_TIM1_Init();
 8003750:	f001 ff52 	bl	80055f8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003754:	f7fe fae0 	bl	8001d18 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8003758:	f002 fcb4 	bl	80060c4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800375c:	f002 fc88 	bl	8006070 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003760:	f002 f8da 	bl	8005918 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003764:	f002 f99c 	bl	8005aa0 <MX_TIM8_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 8003768:	2200      	movs	r2, #0
 800376a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800376e:	480e      	ldr	r0, [pc, #56]	; (80037a8 <main+0x80>)
 8003770:	f004 fa1d 	bl	8007bae <HAL_GPIO_WritePin>
	LCD_INIT();
 8003774:	f7ff fc7f 	bl	8003076 <LCD_INIT>
	
	
	DEBUG_USART_Config();
 8003778:	f7fe fb48 	bl	8001e0c <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 800377c:	f002 fc1a 	bl	8005fb4 <TIMER_INIT>
	timer_min(1);
 8003780:	2001      	movs	r0, #1
 8003782:	f002 fc29 	bl	8005fd8 <timer_min>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003786:	2108      	movs	r1, #8
 8003788:	4808      	ldr	r0, [pc, #32]	; (80037ac <main+0x84>)
 800378a:	f005 f84d 	bl	8008828 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <main+0x84>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3334      	adds	r3, #52	; 0x34
 8003794:	3308      	adds	r3, #8
 8003796:	220a      	movs	r2, #10
 8003798:	601a      	str	r2, [r3, #0]
  // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  myfunc();
 800379a:	f7ff facd 	bl	8002d38 <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 800379e:	4904      	ldr	r1, [pc, #16]	; (80037b0 <main+0x88>)
 80037a0:	4804      	ldr	r0, [pc, #16]	; (80037b4 <main+0x8c>)
 80037a2:	f002 ffb3 	bl	800670c <XPT2046_Get_TouchedPoint>
 80037a6:	e7fa      	b.n	800379e <main+0x76>
 80037a8:	40011400 	.word	0x40011400
 80037ac:	20000a50 	.word	0x20000a50
 80037b0:	20000010 	.word	0x20000010
 80037b4:	200005f8 	.word	0x200005f8

080037b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b096      	sub	sp, #88	; 0x58
 80037bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037c2:	2228      	movs	r2, #40	; 0x28
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f006 fe62 	bl	800a490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037cc:	f107 031c 	add.w	r3, r7, #28
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	611a      	str	r2, [r3, #16]
 80037ea:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80037ec:	2305      	movs	r3, #5
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037f6:	2300      	movs	r3, #0
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037fa:	2301      	movs	r3, #1
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037fe:	2301      	movs	r3, #1
 8003800:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003802:	2302      	movs	r3, #2
 8003804:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800380a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800380c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003810:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003816:	4618      	mov	r0, r3
 8003818:	f004 fa04 	bl	8007c24 <HAL_RCC_OscConfig>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003822:	f000 f82b 	bl	800387c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003826:	230f      	movs	r3, #15
 8003828:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800382a:	2302      	movs	r3, #2
 800382c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800383c:	f107 031c 	add.w	r3, r7, #28
 8003840:	2102      	movs	r1, #2
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fc52 	bl	80080ec <HAL_RCC_ClockConfig>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800384e:	f000 f815 	bl	800387c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8003852:	2303      	movs	r3, #3
 8003854:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800385a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800385c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003860:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fdfd 	bl	8008464 <HAL_RCCEx_PeriphCLKConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003870:	f000 f804 	bl	800387c <Error_Handler>
  }
}
 8003874:	bf00      	nop
 8003876:	3758      	adds	r7, #88	; 0x58
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4603      	mov	r3, r0
 8003896:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d204      	bcs.n	80038aa <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	701a      	strb	r2, [r3, #0]
  }
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4603      	mov	r3, r0
 80038c2:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e002      	b.n	80038e4 <_strnlen_s+0x16>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <_strnlen_s+0x28>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	1e5a      	subs	r2, r3, #1
 80038f0:	603a      	str	r2, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f3      	bne.n	80038de <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	1ad3      	subs	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	2b2f      	cmp	r3, #47	; 0x2f
 8003914:	d904      	bls.n	8003920 <_is_digit+0x1a>
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b39      	cmp	r3, #57	; 0x39
 800391a:	d801      	bhi.n	8003920 <_is_digit+0x1a>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <_is_digit+0x1c>
 8003920:	2300      	movs	r3, #0
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	b2db      	uxtb	r3, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800393e:	e00e      	b.n	800395e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4618      	mov	r0, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1c59      	adds	r1, r3, #1
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4403      	add	r3, r0
 800395a:	3b30      	subs	r3, #48	; 0x30
 800395c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ffce 	bl	8003906 <_is_digit>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e7      	bne.n	8003940 <_atoi+0xe>
  }
  return i;
 8003970:	68fb      	ldr	r3, [r7, #12]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800397a:	b590      	push	{r4, r7, lr}
 800397c:	b087      	sub	sp, #28
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d125      	bne.n	80039e2 <_out_rev+0x68>
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d120      	bne.n	80039e2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e00a      	b.n	80039bc <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	1c53      	adds	r3, r2, #1
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	68fc      	ldr	r4, [r7, #12]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	2020      	movs	r0, #32
 80039b4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	3301      	adds	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d3f0      	bcc.n	80039a6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80039c4:	e00d      	b.n	80039e2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	3b01      	subs	r3, #1
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	4413      	add	r3, r2
 80039d2:	7818      	ldrb	r0, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	1c53      	adds	r3, r2, #1
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	68fc      	ldr	r4, [r7, #12]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	47a0      	blx	r4
  while (len) {
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ee      	bne.n	80039c6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80039e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80039f2:	e007      	b.n	8003a04 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	1c53      	adds	r3, r2, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	68fc      	ldr	r4, [r7, #12]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	2020      	movs	r0, #32
 8003a02:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d8f1      	bhi.n	80039f4 <_out_rev+0x7a>
    }
  }

  return idx;
 8003a10:	687b      	ldr	r3, [r7, #4]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}

08003a1a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b088      	sub	sp, #32
 8003a1e:	af04      	add	r7, sp, #16
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d136      	bne.n	8003aa0 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d018      	beq.n	8003a6a <_ntoa_format+0x50>
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d013      	beq.n	8003a6a <_ntoa_format+0x50>
 8003a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <_ntoa_format+0x3a>
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <_ntoa_format+0x50>
      width--;
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	3b01      	subs	r3, #1
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a5a:	e006      	b.n	8003a6a <_ntoa_format+0x50>
      buf[len++] = '0';
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	61fa      	str	r2, [r7, #28]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4413      	add	r3, r2
 8003a66:	2230      	movs	r2, #48	; 0x30
 8003a68:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d20a      	bcs.n	8003a88 <_ntoa_format+0x6e>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b1f      	cmp	r3, #31
 8003a76:	d9f1      	bls.n	8003a5c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a78:	e006      	b.n	8003a88 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	61fa      	str	r2, [r7, #28]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4413      	add	r3, r2
 8003a84:	2230      	movs	r2, #48	; 0x30
 8003a86:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <_ntoa_format+0x86>
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d202      	bcs.n	8003aa0 <_ntoa_format+0x86>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b1f      	cmp	r3, #31
 8003a9e:	d9ec      	bls.n	8003a7a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d058      	beq.n	8003b5c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <_ntoa_format+0xc8>
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d013      	beq.n	8003ae2 <_ntoa_format+0xc8>
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d003      	beq.n	8003aca <_ntoa_format+0xb0>
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d10b      	bne.n	8003ae2 <_ntoa_format+0xc8>
      len--;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <_ntoa_format+0xc8>
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d102      	bne.n	8003ae2 <_ntoa_format+0xc8>
        len--;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d10f      	bne.n	8003b08 <_ntoa_format+0xee>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <_ntoa_format+0xee>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b1f      	cmp	r3, #31
 8003af6:	d807      	bhi.n	8003b08 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	61fa      	str	r2, [r7, #28]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4413      	add	r3, r2
 8003b02:	2278      	movs	r2, #120	; 0x78
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e01f      	b.n	8003b48 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d10f      	bne.n	8003b2e <_ntoa_format+0x114>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <_ntoa_format+0x114>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b1f      	cmp	r3, #31
 8003b1c:	d807      	bhi.n	8003b2e <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	2258      	movs	r2, #88	; 0x58
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e00c      	b.n	8003b48 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d109      	bne.n	8003b48 <_ntoa_format+0x12e>
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b1f      	cmp	r3, #31
 8003b38:	d806      	bhi.n	8003b48 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	61fa      	str	r2, [r7, #28]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4413      	add	r3, r2
 8003b44:	2262      	movs	r2, #98	; 0x62
 8003b46:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b1f      	cmp	r3, #31
 8003b4c:	d806      	bhi.n	8003b5c <_ntoa_format+0x142>
      buf[len++] = '0';
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	61fa      	str	r2, [r7, #28]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4413      	add	r3, r2
 8003b58:	2230      	movs	r2, #48	; 0x30
 8003b5a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b1f      	cmp	r3, #31
 8003b60:	d824      	bhi.n	8003bac <_ntoa_format+0x192>
    if (negative) {
 8003b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <_ntoa_format+0x160>
      buf[len++] = '-';
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	61fa      	str	r2, [r7, #28]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	222d      	movs	r2, #45	; 0x2d
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e018      	b.n	8003bac <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	61fa      	str	r2, [r7, #28]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	222b      	movs	r2, #43	; 0x2b
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e00b      	b.n	8003bac <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	61fa      	str	r2, [r7, #28]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	2220      	movs	r2, #32
 8003baa:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	9303      	str	r3, [sp, #12]
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	9302      	str	r3, [sp, #8]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff fed9 	bl	800397a <_out_rev>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b096      	sub	sp, #88	; 0x58
 8003bd6:	af08      	add	r7, sp, #32
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bec:	f023 0310 	bic.w	r3, r3, #16
 8003bf0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <_ntoa_long+0x30>
 8003bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d032      	beq.n	8003c68 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c06:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c0c:	fb01 f202 	mul.w	r2, r1, r2
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c1a:	2b09      	cmp	r3, #9
 8003c1c:	d804      	bhi.n	8003c28 <_ntoa_long+0x56>
 8003c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c22:	3330      	adds	r3, #48	; 0x30
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	e00d      	b.n	8003c44 <_ntoa_long+0x72>
 8003c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <_ntoa_long+0x64>
 8003c32:	2241      	movs	r2, #65	; 0x41
 8003c34:	e000      	b.n	8003c38 <_ntoa_long+0x66>
 8003c36:	2261      	movs	r2, #97	; 0x61
 8003c38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c3c:	4413      	add	r3, r2
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3b0a      	subs	r3, #10
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	6379      	str	r1, [r7, #52]	; 0x34
 8003c4a:	3338      	adds	r3, #56	; 0x38
 8003c4c:	443b      	add	r3, r7
 8003c4e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <_ntoa_long+0x96>
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	2b1f      	cmp	r3, #31
 8003c66:	d9cc      	bls.n	8003c02 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6a:	9306      	str	r3, [sp, #24]
 8003c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6e:	9305      	str	r3, [sp, #20]
 8003c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c72:	9304      	str	r3, [sp, #16]
 8003c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c76:	9303      	str	r3, [sp, #12]
 8003c78:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003c7c:	9302      	str	r3, [sp, #8]
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	f107 0310 	add.w	r3, r7, #16
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fec3 	bl	8003a1a <_ntoa_format>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3738      	adds	r7, #56	; 0x38
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b096      	sub	sp, #88	; 0x58
 8003ca2:	af08      	add	r7, sp, #32
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003cb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d103      	bne.n	8003cc0 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cba:	f023 0310 	bic.w	r3, r3, #16
 8003cbe:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <_ntoa_long_long+0x34>
 8003cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d037      	beq.n	8003d42 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003cd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003cd6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cda:	f7fd fa55 	bl	8001188 <__aeabi_uldivmod>
 8003cde:	4613      	mov	r3, r2
 8003ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d804      	bhi.n	8003cf6 <_ntoa_long_long+0x58>
 8003cec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cf0:	3330      	adds	r3, #48	; 0x30
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	e00d      	b.n	8003d12 <_ntoa_long_long+0x74>
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <_ntoa_long_long+0x66>
 8003d00:	2241      	movs	r2, #65	; 0x41
 8003d02:	e000      	b.n	8003d06 <_ntoa_long_long+0x68>
 8003d04:	2261      	movs	r2, #97	; 0x61
 8003d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d0a:	4413      	add	r3, r2
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	3b0a      	subs	r3, #10
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d14:	1c59      	adds	r1, r3, #1
 8003d16:	6379      	str	r1, [r7, #52]	; 0x34
 8003d18:	3338      	adds	r3, #56	; 0x38
 8003d1a:	443b      	add	r3, r7
 8003d1c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003d28:	f7fd fa2e 	bl	8001188 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003d34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d002      	beq.n	8003d42 <_ntoa_long_long+0xa4>
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	2b1f      	cmp	r3, #31
 8003d40:	d9c7      	bls.n	8003cd2 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d46:	9206      	str	r2, [sp, #24]
 8003d48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d4a:	9205      	str	r2, [sp, #20]
 8003d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d4e:	9204      	str	r2, [sp, #16]
 8003d50:	9303      	str	r3, [sp, #12]
 8003d52:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	f107 0310 	add.w	r3, r7, #16
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fe56 	bl	8003a1a <_ntoa_format>
 8003d6e:	4603      	mov	r3, r0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3738      	adds	r7, #56	; 0x38
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b09d      	sub	sp, #116	; 0x74
 8003d7c:	af06      	add	r7, sp, #24
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003d96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003d9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d9e:	f7fc fe6f 	bl	8000a80 <__aeabi_dcmpeq>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	2303      	movs	r3, #3
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	4b82      	ldr	r3, [pc, #520]	; (8003fc0 <_ftoa+0x248>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fddb 	bl	800397a <_out_rev>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	e224      	b.n	8004212 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dcc:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003dd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dd4:	f7fc fe5e 	bl	8000a94 <__aeabi_dcmplt>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00f      	beq.n	8003dfe <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	9302      	str	r3, [sp, #8]
 8003de6:	2304      	movs	r3, #4
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <_ftoa+0x24c>)
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fdc0 	bl	800397a <_out_rev>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	e209      	b.n	8004212 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e02:	4b71      	ldr	r3, [pc, #452]	; (8003fc8 <_ftoa+0x250>)
 8003e04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e08:	f7fc fe62 	bl	8000ad0 <__aeabi_dcmpgt>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01d      	beq.n	8003e4e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <_ftoa+0xa8>
 8003e1c:	4b6b      	ldr	r3, [pc, #428]	; (8003fcc <_ftoa+0x254>)
 8003e1e:	e000      	b.n	8003e22 <_ftoa+0xaa>
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <_ftoa+0x258>)
 8003e22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e24:	f002 0204 	and.w	r2, r2, #4
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	d001      	beq.n	8003e30 <_ftoa+0xb8>
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	e000      	b.n	8003e32 <_ftoa+0xba>
 8003e30:	2203      	movs	r2, #3
 8003e32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003e34:	9103      	str	r1, [sp, #12]
 8003e36:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e38:	9102      	str	r1, [sp, #8]
 8003e3a:	9201      	str	r2, [sp, #4]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff fd98 	bl	800397a <_out_rev>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	e1e1      	b.n	8004212 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003e4e:	a358      	add	r3, pc, #352	; (adr r3, 8003fb0 <_ftoa+0x238>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e58:	f7fc fe3a 	bl	8000ad0 <__aeabi_dcmpgt>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <_ftoa+0xfe>
 8003e62:	a355      	add	r3, pc, #340	; (adr r3, 8003fb8 <_ftoa+0x240>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e6c:	f7fc fe12 	bl	8000a94 <__aeabi_dcmplt>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7c:	9303      	str	r3, [sp, #12]
 8003e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003e86:	e9cd 2300 	strd	r2, r3, [sp]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9c9 	bl	8004228 <_etoa>
 8003e96:	4603      	mov	r3, r0
 8003e98:	e1bb      	b.n	8004212 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003eac:	f7fc fdf2 	bl	8000a94 <__aeabi_dcmplt>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00e      	beq.n	8003ed4 <_ftoa+0x15c>
    negative = true;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8003ebc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	f7fc f9ba 	bl	8000240 <__aeabi_dsub>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10d      	bne.n	8003efa <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003ede:	2306      	movs	r3, #6
 8003ee0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003ee2:	e00a      	b.n	8003efa <_ftoa+0x182>
    buf[len++] = '0';
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	657a      	str	r2, [r7, #84]	; 0x54
 8003eea:	3358      	adds	r3, #88	; 0x58
 8003eec:	443b      	add	r3, r7
 8003eee:	2230      	movs	r2, #48	; 0x30
 8003ef0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efc:	2b1f      	cmp	r3, #31
 8003efe:	d802      	bhi.n	8003f06 <_ftoa+0x18e>
 8003f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f02:	2b09      	cmp	r3, #9
 8003f04:	d8ee      	bhi.n	8003ee4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f0a:	f7fc fdeb 	bl	8000ae4 <__aeabi_d2iz>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8003f12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f14:	f7fc fae2 	bl	80004dc <__aeabi_i2d>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f20:	f7fc f98e 	bl	8000240 <__aeabi_dsub>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <_ftoa+0x25c>)
 8003f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f7fc fb3a 	bl	80005b0 <__aeabi_dmul>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8003f44:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f48:	f7fc fdf4 	bl	8000b34 <__aeabi_d2uiz>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8003f50:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f52:	f7fc fab3 	bl	80004bc <__aeabi_ui2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f5e:	f7fc f96f 	bl	8000240 <__aeabi_dsub>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <_ftoa+0x260>)
 8003f70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f74:	f7fc fdac 	bl	8000ad0 <__aeabi_dcmpgt>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d02e      	beq.n	8003fdc <_ftoa+0x264>
    ++frac;
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	3301      	adds	r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003f84:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f86:	f7fc fa99 	bl	80004bc <__aeabi_ui2d>
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <_ftoa+0x25c>)
 8003f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc fd91 	bl	8000abc <__aeabi_dcmpge>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d032      	beq.n	8004006 <_ftoa+0x28e>
      frac = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003faa:	e02c      	b.n	8004006 <_ftoa+0x28e>
 8003fac:	f3af 8000 	nop.w
 8003fb0:	00000000 	.word	0x00000000
 8003fb4:	41cdcd65 	.word	0x41cdcd65
 8003fb8:	00000000 	.word	0x00000000
 8003fbc:	c1cdcd65 	.word	0xc1cdcd65
 8003fc0:	0800aed8 	.word	0x0800aed8
 8003fc4:	0800aedc 	.word	0x0800aedc
 8003fc8:	7fefffff 	.word	0x7fefffff
 8003fcc:	0800aee4 	.word	0x0800aee4
 8003fd0:	0800aeec 	.word	0x0800aeec
 8003fd4:	08016ce0 	.word	0x08016ce0
 8003fd8:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	4b8e      	ldr	r3, [pc, #568]	; (800421c <_ftoa+0x4a4>)
 8003fe2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003fe6:	f7fc fd55 	bl	8000a94 <__aeabi_dcmplt>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <_ftoa+0x288>
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004002:	3301      	adds	r3, #1
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8004006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004008:	2b00      	cmp	r3, #0
 800400a:	d133      	bne.n	8004074 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800400c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800400e:	f7fc fa65 	bl	80004dc <__aeabi_i2d>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800401a:	f7fc f911 	bl	8000240 <__aeabi_dsub>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004026:	2301      	movs	r3, #1
 8004028:	461c      	mov	r4, r3
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	4b7b      	ldr	r3, [pc, #492]	; (800421c <_ftoa+0x4a4>)
 8004030:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004034:	f7fc fd2e 	bl	8000a94 <__aeabi_dcmplt>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <_ftoa+0x2ca>
 800403e:	2300      	movs	r3, #0
 8004040:	461c      	mov	r4, r3
 8004042:	b2e3      	uxtb	r3, r4
 8004044:	f083 0301 	eor.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <_ftoa+0x2ea>
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <_ftoa+0x4a4>)
 8004054:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004058:	f7fc fd3a 	bl	8000ad0 <__aeabi_dcmpgt>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d04c      	beq.n	80040fc <_ftoa+0x384>
 8004062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d069      	beq.n	8004140 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406e:	3301      	adds	r3, #1
 8004070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004072:	e065      	b.n	8004140 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 8004074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004076:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004078:	e01f      	b.n	80040ba <_ftoa+0x342>
      --count;
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	3b01      	subs	r3, #1
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8004080:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004082:	4b67      	ldr	r3, [pc, #412]	; (8004220 <_ftoa+0x4a8>)
 8004084:	fba3 2301 	umull	r2, r3, r3, r1
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	1aca      	subs	r2, r1, r3
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	6579      	str	r1, [r7, #84]	; 0x54
 800409c:	3230      	adds	r2, #48	; 0x30
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	3358      	adds	r3, #88	; 0x58
 80040a2:	443b      	add	r3, r7
 80040a4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80040a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040aa:	4a5d      	ldr	r2, [pc, #372]	; (8004220 <_ftoa+0x4a8>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80040ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040bc:	2b1f      	cmp	r3, #31
 80040be:	d9dc      	bls.n	800407a <_ftoa+0x302>
 80040c0:	e009      	b.n	80040d6 <_ftoa+0x35e>
        break;
 80040c2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80040c4:	e007      	b.n	80040d6 <_ftoa+0x35e>
      buf[len++] = '0';
 80040c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	657a      	str	r2, [r7, #84]	; 0x54
 80040cc:	3358      	adds	r3, #88	; 0x58
 80040ce:	443b      	add	r3, r7
 80040d0:	2230      	movs	r2, #48	; 0x30
 80040d2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80040d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d8:	2b1f      	cmp	r3, #31
 80040da:	d804      	bhi.n	80040e6 <_ftoa+0x36e>
 80040dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040de:	1e5a      	subs	r2, r3, #1
 80040e0:	647a      	str	r2, [r7, #68]	; 0x44
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ef      	bne.n	80040c6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	2b1f      	cmp	r3, #31
 80040ea:	d829      	bhi.n	8004140 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80040ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	657a      	str	r2, [r7, #84]	; 0x54
 80040f2:	3358      	adds	r3, #88	; 0x58
 80040f4:	443b      	add	r3, r7
 80040f6:	222e      	movs	r2, #46	; 0x2e
 80040f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80040fc:	e020      	b.n	8004140 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80040fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004100:	4b48      	ldr	r3, [pc, #288]	; (8004224 <_ftoa+0x4ac>)
 8004102:	fb83 1302 	smull	r1, r3, r3, r2
 8004106:	1099      	asrs	r1, r3, #2
 8004108:	17d3      	asrs	r3, r2, #31
 800410a:	1ac9      	subs	r1, r1, r3
 800410c:	460b      	mov	r3, r1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	1ad1      	subs	r1, r2, r3
 8004116:	b2ca      	uxtb	r2, r1
 8004118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411a:	1c59      	adds	r1, r3, #1
 800411c:	6579      	str	r1, [r7, #84]	; 0x54
 800411e:	3230      	adds	r2, #48	; 0x30
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	3358      	adds	r3, #88	; 0x58
 8004124:	443b      	add	r3, r7
 8004126:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	4a3d      	ldr	r2, [pc, #244]	; (8004224 <_ftoa+0x4ac>)
 800412e:	fb82 1203 	smull	r1, r2, r2, r3
 8004132:	1092      	asrs	r2, r2, #2
 8004134:	17db      	asrs	r3, r3, #31
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004142:	2b1f      	cmp	r3, #31
 8004144:	d9db      	bls.n	80040fe <_ftoa+0x386>
 8004146:	e000      	b.n	800414a <_ftoa+0x3d2>
      break;
 8004148:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800414a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d123      	bne.n	800419c <_ftoa+0x424>
 8004154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01e      	beq.n	800419c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800415e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004160:	2b00      	cmp	r3, #0
 8004162:	d014      	beq.n	800418e <_ftoa+0x416>
 8004164:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <_ftoa+0x3fe>
 800416c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <_ftoa+0x416>
      width--;
 8004176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004178:	3b01      	subs	r3, #1
 800417a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800417c:	e007      	b.n	800418e <_ftoa+0x416>
      buf[len++] = '0';
 800417e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	657a      	str	r2, [r7, #84]	; 0x54
 8004184:	3358      	adds	r3, #88	; 0x58
 8004186:	443b      	add	r3, r7
 8004188:	2230      	movs	r2, #48	; 0x30
 800418a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800418e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004192:	429a      	cmp	r2, r3
 8004194:	d202      	bcs.n	800419c <_ftoa+0x424>
 8004196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004198:	2b1f      	cmp	r3, #31
 800419a:	d9f0      	bls.n	800417e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	2b1f      	cmp	r3, #31
 80041a0:	d827      	bhi.n	80041f2 <_ftoa+0x47a>
    if (negative) {
 80041a2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <_ftoa+0x444>
      buf[len++] = '-';
 80041aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	657a      	str	r2, [r7, #84]	; 0x54
 80041b0:	3358      	adds	r3, #88	; 0x58
 80041b2:	443b      	add	r3, r7
 80041b4:	222d      	movs	r2, #45	; 0x2d
 80041b6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80041ba:	e01a      	b.n	80041f2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80041bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	657a      	str	r2, [r7, #84]	; 0x54
 80041cc:	3358      	adds	r3, #88	; 0x58
 80041ce:	443b      	add	r3, r7
 80041d0:	222b      	movs	r2, #43	; 0x2b
 80041d2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80041d6:	e00c      	b.n	80041f2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80041d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <_ftoa+0x47a>
      buf[len++] = ' ';
 80041e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	657a      	str	r2, [r7, #84]	; 0x54
 80041e8:	3358      	adds	r3, #88	; 0x58
 80041ea:	443b      	add	r3, r7
 80041ec:	2220      	movs	r2, #32
 80041ee:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80041f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	f107 0310 	add.w	r3, r7, #16
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff fbb5 	bl	800397a <_out_rev>
 8004210:	4603      	mov	r3, r0
}
 8004212:	4618      	mov	r0, r3
 8004214:	375c      	adds	r7, #92	; 0x5c
 8004216:	46bd      	mov	sp, r7
 8004218:	bd90      	pop	{r4, r7, pc}
 800421a:	bf00      	nop
 800421c:	3fe00000 	.word	0x3fe00000
 8004220:	cccccccd 	.word	0xcccccccd
 8004224:	66666667 	.word	0x66666667

08004228 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422c:	b09d      	sub	sp, #116	; 0x74
 800422e:	af06      	add	r7, sp, #24
 8004230:	61f8      	str	r0, [r7, #28]
 8004232:	61b9      	str	r1, [r7, #24]
 8004234:	617a      	str	r2, [r7, #20]
 8004236:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004238:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800423c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004240:	f7fc fc1e 	bl	8000a80 <__aeabi_dcmpeq>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <_etoa+0x4c>
 800424a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800424e:	4bc4      	ldr	r3, [pc, #784]	; (8004560 <_etoa+0x338>)
 8004250:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004254:	f7fc fc3c 	bl	8000ad0 <__aeabi_dcmpgt>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <_etoa+0x4c>
 800425e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004262:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800426a:	f7fc fc13 	bl	8000a94 <__aeabi_dcmplt>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d014      	beq.n	800429e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004284:	9302      	str	r3, [sp, #8]
 8004286:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800428a:	e9cd 2300 	strd	r2, r3, [sp]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	69b9      	ldr	r1, [r7, #24]
 8004294:	69f8      	ldr	r0, [r7, #28]
 8004296:	f7ff fd6f 	bl	8003d78 <_ftoa>
 800429a:	4603      	mov	r3, r0
 800429c:	e247      	b.n	800472e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 800429e:	2301      	movs	r3, #1
 80042a0:	461e      	mov	r6, r3
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ae:	f7fc fbf1 	bl	8000a94 <__aeabi_dcmplt>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <_etoa+0x94>
 80042b8:	2300      	movs	r3, #0
 80042ba:	461e      	mov	r6, r3
 80042bc:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 80042c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <_etoa+0xb8>
    value = -value;
 80042c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042dc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80042e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80042ec:	2306      	movs	r3, #6
 80042ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80042f2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80042f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80042fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	0d0a      	lsrs	r2, r1, #20
 8004308:	2300      	movs	r3, #0
 800430a:	4613      	mov	r3, r2
 800430c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004310:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800431a:	4690      	mov	r8, r2
 800431c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8004320:	4644      	mov	r4, r8
 8004322:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8004326:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800432a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800432e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004330:	f7fc f8d4 	bl	80004dc <__aeabi_i2d>
 8004334:	a37e      	add	r3, pc, #504	; (adr r3, 8004530 <_etoa+0x308>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fc f939 	bl	80005b0 <__aeabi_dmul>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	a37c      	add	r3, pc, #496	; (adr r3, 8004538 <_etoa+0x310>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fb ff7a 	bl	8000244 <__adddf3>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4614      	mov	r4, r2
 8004356:	461d      	mov	r5, r3
 8004358:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	4b80      	ldr	r3, [pc, #512]	; (8004564 <_etoa+0x33c>)
 8004362:	f7fb ff6d 	bl	8000240 <__aeabi_dsub>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4610      	mov	r0, r2
 800436c:	4619      	mov	r1, r3
 800436e:	a374      	add	r3, pc, #464	; (adr r3, 8004540 <_etoa+0x318>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc f91c 	bl	80005b0 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4620      	mov	r0, r4
 800437e:	4629      	mov	r1, r5
 8004380:	f7fb ff60 	bl	8000244 <__adddf3>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f7fc fbaa 	bl	8000ae4 <__aeabi_d2iz>
 8004390:	4603      	mov	r3, r0
 8004392:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004394:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004396:	f7fc f8a1 	bl	80004dc <__aeabi_i2d>
 800439a:	a36b      	add	r3, pc, #428	; (adr r3, 8004548 <_etoa+0x320>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fc f906 	bl	80005b0 <__aeabi_dmul>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	4b6d      	ldr	r3, [pc, #436]	; (8004568 <_etoa+0x340>)
 80043b2:	f7fb ff47 	bl	8000244 <__adddf3>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	f7fc fb91 	bl	8000ae4 <__aeabi_d2iz>
 80043c2:	4603      	mov	r3, r0
 80043c4:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80043c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80043c8:	f7fc f888 	bl	80004dc <__aeabi_i2d>
 80043cc:	a360      	add	r3, pc, #384	; (adr r3, 8004550 <_etoa+0x328>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fc f8ed 	bl	80005b0 <__aeabi_dmul>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4614      	mov	r4, r2
 80043dc:	461d      	mov	r5, r3
 80043de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80043e0:	f7fc f87c 	bl	80004dc <__aeabi_i2d>
 80043e4:	a35c      	add	r3, pc, #368	; (adr r3, 8004558 <_etoa+0x330>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fc f8e1 	bl	80005b0 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7fb ff23 	bl	8000240 <__aeabi_dsub>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8004402:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004406:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800440a:	f7fc f8d1 	bl	80005b0 <__aeabi_dmul>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004418:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800441c:	17da      	asrs	r2, r3, #31
 800441e:	469a      	mov	sl, r3
 8004420:	4693      	mov	fp, r2
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800442e:	2200      	movs	r2, #0
 8004430:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004434:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004438:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	f7fb ff00 	bl	8000244 <__adddf3>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4690      	mov	r8, r2
 800444a:	4699      	mov	r9, r3
 800444c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004450:	f04f 0000 	mov.w	r0, #0
 8004454:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004458:	f7fb fef2 	bl	8000240 <__aeabi_dsub>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4692      	mov	sl, r2
 8004462:	469b      	mov	fp, r3
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	4b40      	ldr	r3, [pc, #256]	; (800456c <_etoa+0x344>)
 800446a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800446e:	f7fc f9c9 	bl	8000804 <__aeabi_ddiv>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	4b3c      	ldr	r3, [pc, #240]	; (8004570 <_etoa+0x348>)
 8004480:	f7fb fee0 	bl	8000244 <__adddf3>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800448c:	f7fc f9ba 	bl	8000804 <__aeabi_ddiv>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <_etoa+0x34c>)
 800449e:	f7fb fed1 	bl	8000244 <__adddf3>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80044aa:	f7fc f9ab 	bl	8000804 <__aeabi_ddiv>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4650      	mov	r0, sl
 80044b4:	4659      	mov	r1, fp
 80044b6:	f7fb fec5 	bl	8000244 <__adddf3>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4640      	mov	r0, r8
 80044c0:	4649      	mov	r1, r9
 80044c2:	f7fc f99f 	bl	8000804 <__aeabi_ddiv>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	4b29      	ldr	r3, [pc, #164]	; (8004578 <_etoa+0x350>)
 80044d4:	f7fb feb6 	bl	8000244 <__adddf3>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4620      	mov	r0, r4
 80044de:	4629      	mov	r1, r5
 80044e0:	f7fc f866 	bl	80005b0 <__aeabi_dmul>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80044ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044f4:	f7fc face 	bl	8000a94 <__aeabi_dcmplt>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <_etoa+0x2f2>
    expval--;
 80044fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004500:	3b01      	subs	r3, #1
 8004502:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8004504:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	4b18      	ldr	r3, [pc, #96]	; (8004570 <_etoa+0x348>)
 800450e:	f7fc f979 	bl	8000804 <__aeabi_ddiv>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800451a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451c:	2b63      	cmp	r3, #99	; 0x63
 800451e:	dc2d      	bgt.n	800457c <_etoa+0x354>
 8004520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004522:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004526:	db29      	blt.n	800457c <_etoa+0x354>
 8004528:	2304      	movs	r3, #4
 800452a:	e028      	b.n	800457e <_etoa+0x356>
 800452c:	f3af 8000 	nop.w
 8004530:	509f79fb 	.word	0x509f79fb
 8004534:	3fd34413 	.word	0x3fd34413
 8004538:	8b60c8b3 	.word	0x8b60c8b3
 800453c:	3fc68a28 	.word	0x3fc68a28
 8004540:	636f4361 	.word	0x636f4361
 8004544:	3fd287a7 	.word	0x3fd287a7
 8004548:	0979a371 	.word	0x0979a371
 800454c:	400a934f 	.word	0x400a934f
 8004550:	bbb55516 	.word	0xbbb55516
 8004554:	40026bb1 	.word	0x40026bb1
 8004558:	fefa39ef 	.word	0xfefa39ef
 800455c:	3fe62e42 	.word	0x3fe62e42
 8004560:	7fefffff 	.word	0x7fefffff
 8004564:	3ff80000 	.word	0x3ff80000
 8004568:	3fe00000 	.word	0x3fe00000
 800456c:	402c0000 	.word	0x402c0000
 8004570:	40240000 	.word	0x40240000
 8004574:	40180000 	.word	0x40180000
 8004578:	3ff00000 	.word	0x3ff00000
 800457c:	2305      	movs	r3, #5
 800457e:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004588:	2b00      	cmp	r3, #0
 800458a:	d03d      	beq.n	8004608 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800458c:	a36a      	add	r3, pc, #424	; (adr r3, 8004738 <_etoa+0x510>)
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004596:	f7fc fa91 	bl	8000abc <__aeabi_dcmpge>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d024      	beq.n	80045ea <_etoa+0x3c2>
 80045a0:	a367      	add	r3, pc, #412	; (adr r3, 8004740 <_etoa+0x518>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045aa:	f7fc fa73 	bl	8000a94 <__aeabi_dcmplt>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01a      	beq.n	80045ea <_etoa+0x3c2>
      if ((int)prec > expval) {
 80045b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045ba:	429a      	cmp	r2, r3
 80045bc:	da07      	bge.n	80045ce <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 80045be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80045c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045cc:	e002      	b.n	80045d4 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80045d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	657b      	str	r3, [r7, #84]	; 0x54
 80045e8:	e00e      	b.n	8004608 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80045ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <_etoa+0x3e0>
 80045f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <_etoa+0x3e0>
        --prec;
 80045fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004602:	3b01      	subs	r3, #1
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800460e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004614:	429a      	cmp	r2, r3
 8004616:	d904      	bls.n	8004622 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800461a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004620:	e001      	b.n	8004626 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <_etoa+0x414>
 8004632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800463c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <_etoa+0x42e>
    value /= conv.F;
 8004642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800464a:	f7fc f8db 	bl	8000804 <__aeabi_ddiv>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800465a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <_etoa+0x44c>
 8004662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800466c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e003      	b.n	800467c <_etoa+0x454>
 8004674:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004678:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800467c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	9303      	str	r3, [sp, #12]
 800468a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800468e:	9302      	str	r3, [sp, #8]
 8004690:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004694:	e9cd 3400 	strd	r3, r4, [sp]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	69f8      	ldr	r0, [r7, #28]
 80046a0:	f7ff fb6a 	bl	8003d78 <_ftoa>
 80046a4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80046a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03f      	beq.n	800472c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80046ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <_etoa+0x494>
 80046b8:	2045      	movs	r0, #69	; 0x45
 80046ba:	e000      	b.n	80046be <_etoa+0x496>
 80046bc:	2065      	movs	r0, #101	; 0x65
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	1c53      	adds	r3, r2, #1
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	69fc      	ldr	r4, [r7, #28]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80046cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfb8      	it	lt
 80046d2:	425b      	neglt	r3, r3
 80046d4:	4618      	mov	r0, r3
 80046d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d8:	0fdb      	lsrs	r3, r3, #31
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046de:	3a01      	subs	r2, #1
 80046e0:	2105      	movs	r1, #5
 80046e2:	9105      	str	r1, [sp, #20]
 80046e4:	9204      	str	r2, [sp, #16]
 80046e6:	2200      	movs	r2, #0
 80046e8:	9203      	str	r2, [sp, #12]
 80046ea:	220a      	movs	r2, #10
 80046ec:	9202      	str	r2, [sp, #8]
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	69b9      	ldr	r1, [r7, #24]
 80046f8:	69f8      	ldr	r0, [r7, #28]
 80046fa:	f7ff fa6a 	bl	8003bd2 <_ntoa_long>
 80046fe:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00f      	beq.n	800472c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800470c:	e007      	b.n	800471e <_etoa+0x4f6>
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	1c53      	adds	r3, r2, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	69fc      	ldr	r4, [r7, #28]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	2020      	movs	r0, #32
 800471c:	47a0      	blx	r4
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004728:	429a      	cmp	r2, r3
 800472a:	d8f0      	bhi.n	800470e <_etoa+0x4e6>
    }
  }
  return idx;
 800472c:	697b      	ldr	r3, [r7, #20]
}
 800472e:	4618      	mov	r0, r3
 8004730:	375c      	adds	r7, #92	; 0x5c
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004738:	eb1c432d 	.word	0xeb1c432d
 800473c:	3f1a36e2 	.word	0x3f1a36e2
 8004740:	00000000 	.word	0x00000000
 8004744:	412e8480 	.word	0x412e8480

08004748 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	b0a3      	sub	sp, #140	; 0x8c
 800474e:	af0a      	add	r7, sp, #40	; 0x28
 8004750:	6178      	str	r0, [r7, #20]
 8004752:	6139      	str	r1, [r7, #16]
 8004754:	60fa      	str	r2, [r7, #12]
 8004756:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 84ba 	bne.w	80050d8 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8004764:	4ba3      	ldr	r3, [pc, #652]	; (80049f4 <_vsnprintf+0x2ac>)
 8004766:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004768:	f000 bcb6 	b.w	80050d8 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b25      	cmp	r3, #37	; 0x25
 8004772:	d00d      	beq.n	8004790 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	7818      	ldrb	r0, [r3, #0]
 8004778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800477a:	1c53      	adds	r3, r2, #1
 800477c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477e:	697c      	ldr	r4, [r7, #20]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6939      	ldr	r1, [r7, #16]
 8004784:	47a0      	blx	r4
      format++;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3301      	adds	r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
      continue;
 800478c:	f000 bca4 	b.w	80050d8 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	3301      	adds	r3, #1
 8004794:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	3b20      	subs	r3, #32
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d857      	bhi.n	8004854 <_vsnprintf+0x10c>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <_vsnprintf+0x64>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	0800482d 	.word	0x0800482d
 80047b0:	08004855 	.word	0x08004855
 80047b4:	08004855 	.word	0x08004855
 80047b8:	08004841 	.word	0x08004841
 80047bc:	08004855 	.word	0x08004855
 80047c0:	08004855 	.word	0x08004855
 80047c4:	08004855 	.word	0x08004855
 80047c8:	08004855 	.word	0x08004855
 80047cc:	08004855 	.word	0x08004855
 80047d0:	08004855 	.word	0x08004855
 80047d4:	08004855 	.word	0x08004855
 80047d8:	08004819 	.word	0x08004819
 80047dc:	08004855 	.word	0x08004855
 80047e0:	08004805 	.word	0x08004805
 80047e4:	08004855 	.word	0x08004855
 80047e8:	08004855 	.word	0x08004855
 80047ec:	080047f1 	.word	0x080047f1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80047f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	2301      	movs	r3, #1
 8004800:	653b      	str	r3, [r7, #80]	; 0x50
 8004802:	e02a      	b.n	800485a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	3301      	adds	r3, #1
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	2301      	movs	r3, #1
 8004814:	653b      	str	r3, [r7, #80]	; 0x50
 8004816:	e020      	b.n	800485a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481a:	f043 0304 	orr.w	r3, r3, #4
 800481e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3301      	adds	r3, #1
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	2301      	movs	r3, #1
 8004828:	653b      	str	r3, [r7, #80]	; 0x50
 800482a:	e016      	b.n	800485a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800482c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482e:	f043 0308 	orr.w	r3, r3, #8
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	3301      	adds	r3, #1
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	2301      	movs	r3, #1
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
 800483e:	e00c      	b.n	800485a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004842:	f043 0310 	orr.w	r3, r3, #16
 8004846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	3301      	adds	r3, #1
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	2301      	movs	r3, #1
 8004850:	653b      	str	r3, [r7, #80]	; 0x50
 8004852:	e002      	b.n	800485a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004854:	2300      	movs	r3, #0
 8004856:	653b      	str	r3, [r7, #80]	; 0x50
 8004858:	bf00      	nop
      }
    } while (n);
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	2b00      	cmp	r3, #0
 800485e:	d19c      	bne.n	800479a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff f84c 	bl	8003906 <_is_digit>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff f85a 	bl	8003932 <_atoi>
 800487e:	65b8      	str	r0, [r7, #88]	; 0x58
 8004880:	e01a      	b.n	80048b8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b2a      	cmp	r3, #42	; 0x2a
 8004888:	d116      	bne.n	80048b8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800488a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	2b00      	cmp	r3, #0
 800489c:	da07      	bge.n	80048ae <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800489e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a0:	f043 0302 	orr.w	r3, r3, #2
 80048a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	425b      	negs	r3, r3
 80048aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ac:	e001      	b.n	80048b2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b2e      	cmp	r3, #46	; 0x2e
 80048c2:	d127      	bne.n	8004914 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80048c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ca:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff f815 	bl	8003906 <_is_digit>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80048e2:	f107 0308 	add.w	r3, r7, #8
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff f823 	bl	8003932 <_atoi>
 80048ec:	6578      	str	r0, [r7, #84]	; 0x54
 80048ee:	e011      	b.n	8004914 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b2a      	cmp	r3, #42	; 0x2a
 80048f6:	d10d      	bne.n	8004914 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80048f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048fc:	1d1a      	adds	r2, r3, #4
 80048fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800490c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3301      	adds	r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	3b68      	subs	r3, #104	; 0x68
 800491a:	2b12      	cmp	r3, #18
 800491c:	d866      	bhi.n	80049ec <_vsnprintf+0x2a4>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <_vsnprintf+0x1dc>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004997 	.word	0x08004997
 8004928:	080049ed 	.word	0x080049ed
 800492c:	080049cd 	.word	0x080049cd
 8004930:	080049ed 	.word	0x080049ed
 8004934:	08004971 	.word	0x08004971
 8004938:	080049ed 	.word	0x080049ed
 800493c:	080049ed 	.word	0x080049ed
 8004940:	080049ed 	.word	0x080049ed
 8004944:	080049ed 	.word	0x080049ed
 8004948:	080049ed 	.word	0x080049ed
 800494c:	080049ed 	.word	0x080049ed
 8004950:	080049ed 	.word	0x080049ed
 8004954:	080049bd 	.word	0x080049bd
 8004958:	080049ed 	.word	0x080049ed
 800495c:	080049ed 	.word	0x080049ed
 8004960:	080049ed 	.word	0x080049ed
 8004964:	080049ed 	.word	0x080049ed
 8004968:	080049ed 	.word	0x080049ed
 800496c:	080049dd 	.word	0x080049dd
      case 'l' :
        flags |= FLAGS_LONG;
 8004970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	3301      	adds	r3, #1
 800497c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b6c      	cmp	r3, #108	; 0x6c
 8004984:	d134      	bne.n	80049f0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800498c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	3301      	adds	r3, #1
 8004992:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004994:	e02c      	b.n	80049f0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	3301      	adds	r3, #1
 80049a2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b68      	cmp	r3, #104	; 0x68
 80049aa:	d125      	bne.n	80049f8 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80049ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80049ba:	e01d      	b.n	80049f8 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80049bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60bb      	str	r3, [r7, #8]
        break;
 80049ca:	e016      	b.n	80049fa <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80049cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
        break;
 80049da:	e00e      	b.n	80049fa <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80049dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60bb      	str	r3, [r7, #8]
        break;
 80049ea:	e006      	b.n	80049fa <_vsnprintf+0x2b2>
      default :
        break;
 80049ec:	bf00      	nop
 80049ee:	e004      	b.n	80049fa <_vsnprintf+0x2b2>
        break;
 80049f0:	bf00      	nop
 80049f2:	e002      	b.n	80049fa <_vsnprintf+0x2b2>
 80049f4:	080038b5 	.word	0x080038b5
        break;
 80049f8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	3b25      	subs	r3, #37	; 0x25
 8004a00:	2b53      	cmp	r3, #83	; 0x53
 8004a02:	f200 835c 	bhi.w	80050be <_vsnprintf+0x976>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <_vsnprintf+0x2c4>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	080050a7 	.word	0x080050a7
 8004a10:	080050bf 	.word	0x080050bf
 8004a14:	080050bf 	.word	0x080050bf
 8004a18:	080050bf 	.word	0x080050bf
 8004a1c:	080050bf 	.word	0x080050bf
 8004a20:	080050bf 	.word	0x080050bf
 8004a24:	080050bf 	.word	0x080050bf
 8004a28:	080050bf 	.word	0x080050bf
 8004a2c:	080050bf 	.word	0x080050bf
 8004a30:	080050bf 	.word	0x080050bf
 8004a34:	080050bf 	.word	0x080050bf
 8004a38:	080050bf 	.word	0x080050bf
 8004a3c:	080050bf 	.word	0x080050bf
 8004a40:	080050bf 	.word	0x080050bf
 8004a44:	080050bf 	.word	0x080050bf
 8004a48:	080050bf 	.word	0x080050bf
 8004a4c:	080050bf 	.word	0x080050bf
 8004a50:	080050bf 	.word	0x080050bf
 8004a54:	080050bf 	.word	0x080050bf
 8004a58:	080050bf 	.word	0x080050bf
 8004a5c:	080050bf 	.word	0x080050bf
 8004a60:	080050bf 	.word	0x080050bf
 8004a64:	080050bf 	.word	0x080050bf
 8004a68:	080050bf 	.word	0x080050bf
 8004a6c:	080050bf 	.word	0x080050bf
 8004a70:	080050bf 	.word	0x080050bf
 8004a74:	080050bf 	.word	0x080050bf
 8004a78:	080050bf 	.word	0x080050bf
 8004a7c:	080050bf 	.word	0x080050bf
 8004a80:	080050bf 	.word	0x080050bf
 8004a84:	080050bf 	.word	0x080050bf
 8004a88:	080050bf 	.word	0x080050bf
 8004a8c:	08004e5f 	.word	0x08004e5f
 8004a90:	08004e13 	.word	0x08004e13
 8004a94:	08004e5f 	.word	0x08004e5f
 8004a98:	080050bf 	.word	0x080050bf
 8004a9c:	080050bf 	.word	0x080050bf
 8004aa0:	080050bf 	.word	0x080050bf
 8004aa4:	080050bf 	.word	0x080050bf
 8004aa8:	080050bf 	.word	0x080050bf
 8004aac:	080050bf 	.word	0x080050bf
 8004ab0:	080050bf 	.word	0x080050bf
 8004ab4:	080050bf 	.word	0x080050bf
 8004ab8:	080050bf 	.word	0x080050bf
 8004abc:	080050bf 	.word	0x080050bf
 8004ac0:	080050bf 	.word	0x080050bf
 8004ac4:	080050bf 	.word	0x080050bf
 8004ac8:	080050bf 	.word	0x080050bf
 8004acc:	080050bf 	.word	0x080050bf
 8004ad0:	080050bf 	.word	0x080050bf
 8004ad4:	080050bf 	.word	0x080050bf
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	080050bf 	.word	0x080050bf
 8004ae0:	080050bf 	.word	0x080050bf
 8004ae4:	080050bf 	.word	0x080050bf
 8004ae8:	080050bf 	.word	0x080050bf
 8004aec:	080050bf 	.word	0x080050bf
 8004af0:	080050bf 	.word	0x080050bf
 8004af4:	080050bf 	.word	0x080050bf
 8004af8:	080050bf 	.word	0x080050bf
 8004afc:	080050bf 	.word	0x080050bf
 8004b00:	08004b5d 	.word	0x08004b5d
 8004b04:	08004ecb 	.word	0x08004ecb
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004e5f 	.word	0x08004e5f
 8004b10:	08004e13 	.word	0x08004e13
 8004b14:	08004e5f 	.word	0x08004e5f
 8004b18:	080050bf 	.word	0x080050bf
 8004b1c:	08004b5d 	.word	0x08004b5d
 8004b20:	080050bf 	.word	0x080050bf
 8004b24:	080050bf 	.word	0x080050bf
 8004b28:	080050bf 	.word	0x080050bf
 8004b2c:	080050bf 	.word	0x080050bf
 8004b30:	080050bf 	.word	0x080050bf
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	0800500b 	.word	0x0800500b
 8004b3c:	080050bf 	.word	0x080050bf
 8004b40:	080050bf 	.word	0x080050bf
 8004b44:	08004f43 	.word	0x08004f43
 8004b48:	080050bf 	.word	0x080050bf
 8004b4c:	08004b5d 	.word	0x08004b5d
 8004b50:	080050bf 	.word	0x080050bf
 8004b54:	080050bf 	.word	0x080050bf
 8004b58:	08004b5d 	.word	0x08004b5d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b78      	cmp	r3, #120	; 0x78
 8004b62:	d003      	beq.n	8004b6c <_vsnprintf+0x424>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b58      	cmp	r3, #88	; 0x58
 8004b6a:	d102      	bne.n	8004b72 <_vsnprintf+0x42a>
          base = 16U;
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b70:	e013      	b.n	8004b9a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b6f      	cmp	r3, #111	; 0x6f
 8004b78:	d102      	bne.n	8004b80 <_vsnprintf+0x438>
          base =  8U;
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b7e:	e00c      	b.n	8004b9a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b62      	cmp	r3, #98	; 0x62
 8004b86:	d102      	bne.n	8004b8e <_vsnprintf+0x446>
          base =  2U;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b8c:	e005      	b.n	8004b9a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8004b8e:	230a      	movs	r3, #10
 8004b90:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b94:	f023 0310 	bic.w	r3, r3, #16
 8004b98:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b58      	cmp	r3, #88	; 0x58
 8004ba0:	d103      	bne.n	8004baa <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba4:	f043 0320 	orr.w	r3, r3, #32
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b69      	cmp	r3, #105	; 0x69
 8004bb0:	d007      	beq.n	8004bc2 <_vsnprintf+0x47a>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d003      	beq.n	8004bc2 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bbc:	f023 030c 	bic.w	r3, r3, #12
 8004bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8004bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b69      	cmp	r3, #105	; 0x69
 8004bda:	d004      	beq.n	8004be6 <_vsnprintf+0x49e>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b64      	cmp	r3, #100	; 0x64
 8004be2:	f040 8098 	bne.w	8004d16 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d031      	beq.n	8004c54 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf4:	3307      	adds	r3, #7
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	f103 0208 	add.w	r2, r3, #8
 8004bfe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da06      	bge.n	8004c20 <_vsnprintf+0x4d8>
 8004c12:	2100      	movs	r1, #0
 8004c14:	f1d2 0800 	rsbs	r8, r2, #0
 8004c18:	eb61 0903 	sbc.w	r9, r1, r3
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	464b      	mov	r3, r9
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	0fc9      	lsrs	r1, r1, #31
 8004c24:	b2c9      	uxtb	r1, r1
 8004c26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004c28:	2400      	movs	r4, #0
 8004c2a:	4682      	mov	sl, r0
 8004c2c:	46a3      	mov	fp, r4
 8004c2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004c30:	9008      	str	r0, [sp, #32]
 8004c32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004c34:	9007      	str	r0, [sp, #28]
 8004c36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c38:	9006      	str	r0, [sp, #24]
 8004c3a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004c3e:	9102      	str	r1, [sp, #8]
 8004c40:	e9cd 2300 	strd	r2, r3, [sp]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c48:	6939      	ldr	r1, [r7, #16]
 8004c4a:	6978      	ldr	r0, [r7, #20]
 8004c4c:	f7ff f827 	bl	8003c9e <_ntoa_long_long>
 8004c50:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004c52:	e0da      	b.n	8004e0a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8004c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bfb8      	it	lt
 8004c72:	425b      	neglt	r3, r3
 8004c74:	4619      	mov	r1, r3
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	0fdb      	lsrs	r3, r3, #31
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c7e:	9205      	str	r2, [sp, #20]
 8004c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c82:	9204      	str	r2, [sp, #16]
 8004c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c86:	9203      	str	r2, [sp, #12]
 8004c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8a:	9202      	str	r2, [sp, #8]
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	9100      	str	r1, [sp, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c94:	6939      	ldr	r1, [r7, #16]
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f7fe ff9b 	bl	8003bd2 <_ntoa_long>
 8004c9c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004c9e:	e0b4      	b.n	8004e0a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <_vsnprintf+0x572>
 8004caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e012      	b.n	8004ce0 <_vsnprintf+0x598>
 8004cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <_vsnprintf+0x58c>
 8004cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cc8:	1d1a      	adds	r2, r3, #4
 8004cca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	b21b      	sxth	r3, r3
 8004cd2:	e005      	b.n	8004ce0 <_vsnprintf+0x598>
 8004cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfb8      	it	lt
 8004ce8:	425b      	neglt	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	0fdb      	lsrs	r3, r3, #31
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cf4:	9205      	str	r2, [sp, #20]
 8004cf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cf8:	9204      	str	r2, [sp, #16]
 8004cfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cfc:	9203      	str	r2, [sp, #12]
 8004cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d00:	9202      	str	r2, [sp, #8]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	9100      	str	r1, [sp, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d0a:	6939      	ldr	r1, [r7, #16]
 8004d0c:	6978      	ldr	r0, [r7, #20]
 8004d0e:	f7fe ff60 	bl	8003bd2 <_ntoa_long>
 8004d12:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004d14:	e079      	b.n	8004e0a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d022      	beq.n	8004d66 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d24:	3307      	adds	r3, #7
 8004d26:	f023 0307 	bic.w	r3, r3, #7
 8004d2a:	f103 0208 	add.w	r2, r3, #8
 8004d2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d38:	2000      	movs	r0, #0
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004d40:	9108      	str	r1, [sp, #32]
 8004d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d44:	9107      	str	r1, [sp, #28]
 8004d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d48:	9106      	str	r1, [sp, #24]
 8004d4a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8004d4e:	2100      	movs	r1, #0
 8004d50:	9102      	str	r1, [sp, #8]
 8004d52:	e9cd 2300 	strd	r2, r3, [sp]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d5a:	6939      	ldr	r1, [r7, #16]
 8004d5c:	6978      	ldr	r0, [r7, #20]
 8004d5e:	f7fe ff9e 	bl	8003c9e <_ntoa_long_long>
 8004d62:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004d64:	e051      	b.n	8004e0a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d018      	beq.n	8004da2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d74:	1d1a      	adds	r2, r3, #4
 8004d76:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d7e:	9205      	str	r2, [sp, #20]
 8004d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d82:	9204      	str	r2, [sp, #16]
 8004d84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d86:	9203      	str	r2, [sp, #12]
 8004d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d8a:	9202      	str	r2, [sp, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	9201      	str	r2, [sp, #4]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d96:	6939      	ldr	r1, [r7, #16]
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	f7fe ff1a 	bl	8003bd2 <_ntoa_long>
 8004d9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004da0:	e033      	b.n	8004e0a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <_vsnprintf+0x674>
 8004dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e012      	b.n	8004de2 <_vsnprintf+0x69a>
 8004dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <_vsnprintf+0x68e>
 8004dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	e005      	b.n	8004de2 <_vsnprintf+0x69a>
 8004dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de6:	9305      	str	r3, [sp, #20]
 8004de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dee:	9303      	str	r3, [sp, #12]
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	9302      	str	r3, [sp, #8]
 8004df4:	2300      	movs	r3, #0
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e00:	6939      	ldr	r1, [r7, #16]
 8004e02:	6978      	ldr	r0, [r7, #20]
 8004e04:	f7fe fee5 	bl	8003bd2 <_ntoa_long>
 8004e08:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60bb      	str	r3, [r7, #8]
        break;
 8004e10:	e162      	b.n	80050d8 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b46      	cmp	r3, #70	; 0x46
 8004e18:	d103      	bne.n	8004e22 <_vsnprintf+0x6da>
 8004e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1c:	f043 0320 	orr.w	r3, r3, #32
 8004e20:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e26:	3307      	adds	r3, #7
 8004e28:	f023 0307 	bic.w	r3, r3, #7
 8004e2c:	f103 0208 	add.w	r2, r3, #8
 8004e30:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e3a:	9104      	str	r1, [sp, #16]
 8004e3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e3e:	9103      	str	r1, [sp, #12]
 8004e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e42:	9102      	str	r1, [sp, #8]
 8004e44:	e9cd 2300 	strd	r2, r3, [sp]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e4c:	6939      	ldr	r1, [r7, #16]
 8004e4e:	6978      	ldr	r0, [r7, #20]
 8004e50:	f7fe ff92 	bl	8003d78 <_ftoa>
 8004e54:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60bb      	str	r3, [r7, #8]
        break;
 8004e5c:	e13c      	b.n	80050d8 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b67      	cmp	r3, #103	; 0x67
 8004e64:	d003      	beq.n	8004e6e <_vsnprintf+0x726>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b47      	cmp	r3, #71	; 0x47
 8004e6c:	d103      	bne.n	8004e76 <_vsnprintf+0x72e>
 8004e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e74:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b45      	cmp	r3, #69	; 0x45
 8004e7c:	d003      	beq.n	8004e86 <_vsnprintf+0x73e>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b47      	cmp	r3, #71	; 0x47
 8004e84:	d103      	bne.n	8004e8e <_vsnprintf+0x746>
 8004e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e88:	f043 0320 	orr.w	r3, r3, #32
 8004e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e92:	3307      	adds	r3, #7
 8004e94:	f023 0307 	bic.w	r3, r3, #7
 8004e98:	f103 0208 	add.w	r2, r3, #8
 8004e9c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004ea6:	9104      	str	r1, [sp, #16]
 8004ea8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eaa:	9103      	str	r1, [sp, #12]
 8004eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eae:	9102      	str	r1, [sp, #8]
 8004eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eb8:	6939      	ldr	r1, [r7, #16]
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7ff f9b4 	bl	8004228 <_etoa>
 8004ec0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60bb      	str	r3, [r7, #8]
        break;
 8004ec8:	e106      	b.n	80050d8 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10e      	bne.n	8004ef6 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8004ed8:	e007      	b.n	8004eea <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8004eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004edc:	1c53      	adds	r3, r2, #1
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee0:	697c      	ldr	r4, [r7, #20]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6939      	ldr	r1, [r7, #16]
 8004ee6:	2020      	movs	r0, #32
 8004ee8:	47a0      	blx	r4
          while (l++ < width) {
 8004eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	647a      	str	r2, [r7, #68]	; 0x44
 8004ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d8f1      	bhi.n	8004eda <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	b2d8      	uxtb	r0, r3
 8004f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f06:	1c53      	adds	r3, r2, #1
 8004f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0a:	697c      	ldr	r4, [r7, #20]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6939      	ldr	r1, [r7, #16]
 8004f10:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <_vsnprintf+0x7f2>
          while (l++ < width) {
 8004f1c:	e007      	b.n	8004f2e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8004f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f20:	1c53      	adds	r3, r2, #1
 8004f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f24:	697c      	ldr	r4, [r7, #20]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6939      	ldr	r1, [r7, #16]
 8004f2a:	2020      	movs	r0, #32
 8004f2c:	47a0      	blx	r4
          while (l++ < width) {
 8004f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	647a      	str	r2, [r7, #68]	; 0x44
 8004f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d8f1      	bhi.n	8004f1e <_vsnprintf+0x7d6>
          }
        }
        format++;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
        break;
 8004f40:	e0ca      	b.n	80050d8 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <_vsnprintf+0x812>
 8004f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f58:	e001      	b.n	8004f5e <_vsnprintf+0x816>
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004f62:	f7fe fcb4 	bl	80038ce <_strnlen_s>
 8004f66:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 8004f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f76:	4293      	cmp	r3, r2
 8004f78:	bf28      	it	cs
 8004f7a:	4613      	movcs	r3, r2
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11a      	bne.n	8004fbe <_vsnprintf+0x876>
          while (l++ < width) {
 8004f88:	e007      	b.n	8004f9a <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8004f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f8c:	1c53      	adds	r3, r2, #1
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	697c      	ldr	r4, [r7, #20]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6939      	ldr	r1, [r7, #16]
 8004f96:	2020      	movs	r0, #32
 8004f98:	47a0      	blx	r4
          while (l++ < width) {
 8004f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d8f1      	bhi.n	8004f8a <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004fa6:	e00a      	b.n	8004fbe <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	643a      	str	r2, [r7, #64]	; 0x40
 8004fae:	7818      	ldrb	r0, [r3, #0]
 8004fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb2:	1c53      	adds	r3, r2, #1
 8004fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb6:	697c      	ldr	r4, [r7, #20]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6939      	ldr	r1, [r7, #16]
 8004fbc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <_vsnprintf+0x892>
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0eb      	beq.n	8004fa8 <_vsnprintf+0x860>
 8004fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd2:	1e5a      	subs	r2, r3, #1
 8004fd4:	657a      	str	r2, [r7, #84]	; 0x54
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e6      	bne.n	8004fa8 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8004fe4:	e007      	b.n	8004ff6 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8004fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fe8:	1c53      	adds	r3, r2, #1
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	697c      	ldr	r4, [r7, #20]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6939      	ldr	r1, [r7, #16]
 8004ff2:	2020      	movs	r0, #32
 8004ff4:	47a0      	blx	r4
          while (l++ < width) {
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d8f1      	bhi.n	8004fe6 <_vsnprintf+0x89e>
          }
        }
        format++;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3301      	adds	r3, #1
 8005006:	60bb      	str	r3, [r7, #8]
        break;
 8005008:	e066      	b.n	80050d8 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800500a:	2308      	movs	r3, #8
 800500c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800500e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005010:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005014:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800501c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005020:	2b00      	cmp	r3, #0
 8005022:	d023      	beq.n	800506c <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005028:	1d1a      	adds	r2, r3, #4
 800502a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	2300      	movs	r3, #0
 8005034:	603a      	str	r2, [r7, #0]
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503a:	9308      	str	r3, [sp, #32]
 800503c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800503e:	9307      	str	r3, [sp, #28]
 8005040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005042:	9306      	str	r3, [sp, #24]
 8005044:	f04f 0210 	mov.w	r2, #16
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005050:	2300      	movs	r3, #0
 8005052:	9302      	str	r3, [sp, #8]
 8005054:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005058:	e9cd 3400 	strd	r3, r4, [sp]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005060:	6939      	ldr	r1, [r7, #16]
 8005062:	6978      	ldr	r0, [r7, #20]
 8005064:	f7fe fe1b 	bl	8003c9e <_ntoa_long_long>
 8005068:	64f8      	str	r0, [r7, #76]	; 0x4c
 800506a:	e018      	b.n	800509e <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800506c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507c:	9305      	str	r3, [sp, #20]
 800507e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005080:	9304      	str	r3, [sp, #16]
 8005082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005084:	9303      	str	r3, [sp, #12]
 8005086:	2310      	movs	r3, #16
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	2300      	movs	r3, #0
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	9200      	str	r2, [sp, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005094:	6939      	ldr	r1, [r7, #16]
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	f7fe fd9b 	bl	8003bd2 <_ntoa_long>
 800509c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3301      	adds	r3, #1
 80050a2:	60bb      	str	r3, [r7, #8]
        break;
 80050a4:	e018      	b.n	80050d8 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80050a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a8:	1c53      	adds	r3, r2, #1
 80050aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ac:	697c      	ldr	r4, [r7, #20]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6939      	ldr	r1, [r7, #16]
 80050b2:	2025      	movs	r0, #37	; 0x25
 80050b4:	47a0      	blx	r4
        format++;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60bb      	str	r3, [r7, #8]
        break;
 80050bc:	e00c      	b.n	80050d8 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	7818      	ldrb	r0, [r3, #0]
 80050c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050c4:	1c53      	adds	r3, r2, #1
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	697c      	ldr	r4, [r7, #20]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6939      	ldr	r1, [r7, #16]
 80050ce:	47a0      	blx	r4
        format++;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]
        break;
 80050d6:	bf00      	nop
  while (*format)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f47f ab45 	bne.w	800476c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80050e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <_vsnprintf+0x9a8>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1e5a      	subs	r2, r3, #1
 80050ee:	e000      	b.n	80050f2 <_vsnprintf+0x9aa>
 80050f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050f2:	697c      	ldr	r4, [r7, #20]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6939      	ldr	r1, [r7, #16]
 80050f8:	2000      	movs	r0, #0
 80050fa:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3764      	adds	r7, #100	; 0x64
 8005102:	46bd      	mov	sp, r7
 8005104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005108 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8005108:	b40e      	push	{r1, r2, r3}
 800510a:	b580      	push	{r7, lr}
 800510c:	b087      	sub	sp, #28
 800510e:	af02      	add	r7, sp, #8
 8005110:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8005112:	f107 0320 	add.w	r3, r7, #32
 8005116:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4805      	ldr	r0, [pc, #20]	; (800513c <sprintf_+0x34>)
 8005126:	f7ff fb0f 	bl	8004748 <_vsnprintf>
 800512a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800512c:	68fb      	ldr	r3, [r7, #12]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005138:	b003      	add	sp, #12
 800513a:	4770      	bx	lr
 800513c:	08003889 	.word	0x08003889

08005140 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005152:	3301      	adds	r3, #1
 8005154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005158:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	d009      	beq.n	800517a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	79f9      	ldrb	r1, [r7, #7]
 8005170:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d017      	beq.n	80051d6 <Uart_isr+0x52>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d012      	beq.n	80051d6 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <Uart_isr+0xbc>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff ffba 	bl	8005140 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 80051cc:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <Uart_isr+0xc0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	605a      	str	r2, [r3, #4]
        return;
 80051d4:	e031      	b.n	800523a <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d02c      	beq.n	800523a <Uart_isr+0xb6>
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d027      	beq.n	800523a <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80051ea:	4b17      	ldr	r3, [pc, #92]	; (8005248 <Uart_isr+0xc4>)
 80051ec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80051f0:	4b15      	ldr	r3, [pc, #84]	; (8005248 <Uart_isr+0xc4>)
 80051f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d108      	bne.n	800520c <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005208:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800520a:	e015      	b.n	8005238 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <Uart_isr+0xc4>)
 800520e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <Uart_isr+0xc4>)
 8005214:	5cd3      	ldrb	r3, [r2, r3]
 8005216:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <Uart_isr+0xc4>)
 800521a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800521e:	3301      	adds	r3, #1
 8005220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005224:	4a08      	ldr	r2, [pc, #32]	; (8005248 <Uart_isr+0xc4>)
 8005226:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	7bba      	ldrb	r2, [r7, #14]
 8005236:	605a      	str	r2, [r3, #4]
    	return;
 8005238:	bf00      	nop
    }
}
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000a08 	.word	0x20000a08
 8005244:	20000220 	.word	0x20000220
 8005248:	20000600 	.word	0x20000600

0800524c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_MspInit+0x5c>)
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <HAL_MspInit+0x5c>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6193      	str	r3, [r2, #24]
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_MspInit+0x5c>)
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <HAL_MspInit+0x5c>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4a0e      	ldr	r2, [pc, #56]	; (80052a8 <HAL_MspInit+0x5c>)
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	61d3      	str	r3, [r2, #28]
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_MspInit+0x5c>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <HAL_MspInit+0x60>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	4a04      	ldr	r2, [pc, #16]	; (80052ac <HAL_MspInit+0x60>)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40010000 	.word	0x40010000

080052b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052c0:	e7fe      	b.n	80052c0 <HardFault_Handler+0x4>

080052c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052c6:	e7fe      	b.n	80052c6 <MemManage_Handler+0x4>

080052c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052cc:	e7fe      	b.n	80052cc <BusFault_Handler+0x4>

080052ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052d2:	e7fe      	b.n	80052d2 <UsageFault_Handler+0x4>

080052d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <SysTick_Handler+0x20>)
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <SysTick_Handler+0x18>
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <SysTick_Handler+0x20>)
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	4b02      	ldr	r3, [pc, #8]	; (8005318 <SysTick_Handler+0x20>)
 800530e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005310:	f001 faf0 	bl	80068f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005314:	bf00      	nop
 8005316:	bd80      	pop	{r7, pc}
 8005318:	200005fc 	.word	0x200005fc

0800531c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8005320:	4b08      	ldr	r3, [pc, #32]	; (8005344 <EXTI0_IRQHandler+0x28>)
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <EXTI0_IRQHandler+0x28>)
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8005332:	2001      	movs	r0, #1
 8005334:	f002 fc6c 	bl	8007c10 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005338:	2001      	movs	r0, #1
 800533a:	f002 fc51 	bl	8007be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40010400 	.word	0x40010400

08005348 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <EXTI4_IRQHandler+0x2c>)
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <EXTI4_IRQHandler+0x30>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <EXTI4_IRQHandler+0x2c>)
 8005360:	2210      	movs	r2, #16
 8005362:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8005364:	2010      	movs	r0, #16
 8005366:	f002 fc53 	bl	8007c10 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800536a:	2010      	movs	r0, #16
 800536c:	f002 fc38 	bl	8007be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005370:	bf00      	nop
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40010400 	.word	0x40010400
 8005378:	20000d20 	.word	0x20000d20

0800537c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8005380:	2100      	movs	r1, #0
 8005382:	4809      	ldr	r0, [pc, #36]	; (80053a8 <DMA1_Channel1_IRQHandler+0x2c>)
 8005384:	f003 fbbe 	bl	8008b04 <HAL_TIM_PWM_Stop_DMA>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <DMA1_Channel1_IRQHandler+0x2c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005390:	2100      	movs	r1, #0
 8005392:	4805      	ldr	r0, [pc, #20]	; (80053a8 <DMA1_Channel1_IRQHandler+0x2c>)
 8005394:	f003 fa48 	bl	8008828 <HAL_TIM_PWM_Start>
  yStepCompleted = 1;
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <DMA1_Channel1_IRQHandler+0x30>)
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800539e:	4804      	ldr	r0, [pc, #16]	; (80053b0 <DMA1_Channel1_IRQHandler+0x34>)
 80053a0:	f001 ffec 	bl	800737c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000ad0 	.word	0x20000ad0
 80053ac:	200001ed 	.word	0x200001ed
 80053b0:	20000bd4 	.word	0x20000bd4

080053b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80053b8:	2100      	movs	r1, #0
 80053ba:	4809      	ldr	r0, [pc, #36]	; (80053e0 <DMA1_Channel6_IRQHandler+0x2c>)
 80053bc:	f003 fba2 	bl	8008b04 <HAL_TIM_PWM_Stop_DMA>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <DMA1_Channel6_IRQHandler+0x2c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2200      	movs	r2, #0
 80053c6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80053c8:	2100      	movs	r1, #0
 80053ca:	4805      	ldr	r0, [pc, #20]	; (80053e0 <DMA1_Channel6_IRQHandler+0x2c>)
 80053cc:	f003 fa2c 	bl	8008828 <HAL_TIM_PWM_Start>
  xStepCompleted = 1;
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <DMA1_Channel6_IRQHandler+0x30>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80053d6:	4804      	ldr	r0, [pc, #16]	; (80053e8 <DMA1_Channel6_IRQHandler+0x34>)
 80053d8:	f001 ffd0 	bl	800737c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80053dc:	bf00      	nop
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000a90 	.word	0x20000a90
 80053e4:	200001ec 	.word	0x200001ec
 80053e8:	20000b90 	.word	0x20000b90

080053ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <TIM3_IRQHandler+0x3c>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <TIM3_IRQHandler+0x3c>)
 80053fa:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <TIM3_IRQHandler+0x3c>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10c      	bne.n	800541e <TIM3_IRQHandler+0x32>
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <TIM3_IRQHandler+0x40>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d108      	bne.n	800541e <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 800540c:	4808      	ldr	r0, [pc, #32]	; (8005430 <TIM3_IRQHandler+0x44>)
 800540e:	f003 f968 	bl	80086e2 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8005412:	4807      	ldr	r0, [pc, #28]	; (8005430 <TIM3_IRQHandler+0x44>)
 8005414:	f003 f9a9 	bl	800876a <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <TIM3_IRQHandler+0x40>)
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800541e:	4804      	ldr	r0, [pc, #16]	; (8005430 <TIM3_IRQHandler+0x44>)
 8005420:	f003 fc0e 	bl	8008c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005424:	bf00      	nop
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000c5c 	.word	0x20000c5c
 800542c:	20000c5d 	.word	0x20000c5d
 8005430:	20000a90 	.word	0x20000a90

08005434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 800543a:	2301      	movs	r3, #1
 800543c:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <USART1_IRQHandler+0x38>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b20      	cmp	r3, #32
 800544a:	d107      	bne.n	800545c <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 800544c:	4b07      	ldr	r3, [pc, #28]	; (800546c <USART1_IRQHandler+0x38>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <USART1_IRQHandler+0x3c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	79fa      	ldrb	r2, [r7, #7]
 800545a:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800545c:	4805      	ldr	r0, [pc, #20]	; (8005474 <USART1_IRQHandler+0x40>)
 800545e:	f004 fb2d 	bl	8009abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000220 	.word	0x20000220
 8005470:	20000260 	.word	0x20000260
 8005474:	20000c60 	.word	0x20000c60

08005478 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 800547c:	4802      	ldr	r0, [pc, #8]	; (8005488 <USART3_IRQHandler+0x10>)
 800547e:	f7ff fe81 	bl	8005184 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000ce0 	.word	0x20000ce0

0800548c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <TIM5_IRQHandler+0x14>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005496:	4803      	ldr	r0, [pc, #12]	; (80054a4 <TIM5_IRQHandler+0x18>)
 8005498:	f003 fbd2 	bl	8008c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800549c:	bf00      	nop
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000008 	.word	0x20000008
 80054a4:	20000b10 	.word	0x20000b10

080054a8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 80054ac:	2100      	movs	r1, #0
 80054ae:	4809      	ldr	r0, [pc, #36]	; (80054d4 <DMA2_Channel3_IRQHandler+0x2c>)
 80054b0:	f003 fb28 	bl	8008b04 <HAL_TIM_PWM_Stop_DMA>
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <DMA2_Channel3_IRQHandler+0x2c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2200      	movs	r2, #0
 80054ba:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80054bc:	2100      	movs	r1, #0
 80054be:	4805      	ldr	r0, [pc, #20]	; (80054d4 <DMA2_Channel3_IRQHandler+0x2c>)
 80054c0:	f003 f9b2 	bl	8008828 <HAL_TIM_PWM_Start>
  zStepCompleted = 1;
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <DMA2_Channel3_IRQHandler+0x30>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80054ca:	4804      	ldr	r0, [pc, #16]	; (80054dc <DMA2_Channel3_IRQHandler+0x34>)
 80054cc:	f001 ff56 	bl	800737c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80054d0:	bf00      	nop
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000b50 	.word	0x20000b50
 80054d8:	200001ee 	.word	0x200001ee
 80054dc:	20000c18 	.word	0x20000c18

080054e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
	return 1;
 80054e4:	2301      	movs	r3, #1
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <_kill>:

int _kill(int pid, int sig)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80054f8:	f004 ffa0 	bl	800a43c <__errno>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2216      	movs	r2, #22
 8005500:	601a      	str	r2, [r3, #0]
	return -1;
 8005502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <_exit>:

void _exit (int status)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ffe7 	bl	80054ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8005520:	e7fe      	b.n	8005520 <_exit+0x12>
	...

08005524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800552c:	4a14      	ldr	r2, [pc, #80]	; (8005580 <_sbrk+0x5c>)
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <_sbrk+0x60>)
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <_sbrk+0x64>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <_sbrk+0x64>)
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <_sbrk+0x68>)
 8005544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <_sbrk+0x64>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	429a      	cmp	r2, r3
 8005552:	d207      	bcs.n	8005564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005554:	f004 ff72 	bl	800a43c <__errno>
 8005558:	4603      	mov	r3, r0
 800555a:	220c      	movs	r2, #12
 800555c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800555e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005562:	e009      	b.n	8005578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <_sbrk+0x64>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <_sbrk+0x64>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4413      	add	r3, r2
 8005572:	4a05      	ldr	r2, [pc, #20]	; (8005588 <_sbrk+0x64>)
 8005574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005576:	68fb      	ldr	r3, [r7, #12]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20010000 	.word	0x20010000
 8005584:	00000400 	.word	0x00000400
 8005588:	20000a0c 	.word	0x20000a0c
 800558c:	20000d38 	.word	0x20000d38

08005590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005594:	4b15      	ldr	r3, [pc, #84]	; (80055ec <SystemInit+0x5c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a14      	ldr	r2, [pc, #80]	; (80055ec <SystemInit+0x5c>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <SystemInit+0x5c>)
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4911      	ldr	r1, [pc, #68]	; (80055ec <SystemInit+0x5c>)
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <SystemInit+0x60>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <SystemInit+0x5c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0e      	ldr	r2, [pc, #56]	; (80055ec <SystemInit+0x5c>)
 80055b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <SystemInit+0x5c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <SystemInit+0x5c>)
 80055c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80055c8:	4b08      	ldr	r3, [pc, #32]	; (80055ec <SystemInit+0x5c>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a07      	ldr	r2, [pc, #28]	; (80055ec <SystemInit+0x5c>)
 80055ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80055d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <SystemInit+0x5c>)
 80055d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80055da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <SystemInit+0x64>)
 80055de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	40021000 	.word	0x40021000
 80055f0:	f8ff0000 	.word	0xf8ff0000
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b094      	sub	sp, #80	; 0x50
 80055fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800560c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005616:	f107 031c 	add.w	r3, r7, #28
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	609a      	str	r2, [r3, #8]
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	611a      	str	r2, [r3, #16]
 8005626:	615a      	str	r2, [r3, #20]
 8005628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800562a:	463b      	mov	r3, r7
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	611a      	str	r2, [r3, #16]
 8005638:	615a      	str	r2, [r3, #20]
 800563a:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 800563c:	4b3f      	ldr	r3, [pc, #252]	; (800573c <MX_TIM1_Init+0x144>)
 800563e:	4a40      	ldr	r2, [pc, #256]	; (8005740 <MX_TIM1_Init+0x148>)
 8005640:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8005642:	4b3e      	ldr	r3, [pc, #248]	; (800573c <MX_TIM1_Init+0x144>)
 8005644:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005648:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800564a:	4b3c      	ldr	r3, [pc, #240]	; (800573c <MX_TIM1_Init+0x144>)
 800564c:	2200      	movs	r2, #0
 800564e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8005650:	4b3a      	ldr	r3, [pc, #232]	; (800573c <MX_TIM1_Init+0x144>)
 8005652:	f240 4265 	movw	r2, #1125	; 0x465
 8005656:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005658:	4b38      	ldr	r3, [pc, #224]	; (800573c <MX_TIM1_Init+0x144>)
 800565a:	2200      	movs	r2, #0
 800565c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800565e:	4b37      	ldr	r3, [pc, #220]	; (800573c <MX_TIM1_Init+0x144>)
 8005660:	2200      	movs	r2, #0
 8005662:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005664:	4b35      	ldr	r3, [pc, #212]	; (800573c <MX_TIM1_Init+0x144>)
 8005666:	2200      	movs	r2, #0
 8005668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800566a:	4834      	ldr	r0, [pc, #208]	; (800573c <MX_TIM1_Init+0x144>)
 800566c:	f002 fff4 	bl	8008658 <HAL_TIM_Base_Init>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8005676:	f7fe f901 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800567a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800567e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005684:	4619      	mov	r1, r3
 8005686:	482d      	ldr	r0, [pc, #180]	; (800573c <MX_TIM1_Init+0x144>)
 8005688:	f003 fca8 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8005692:	f7fe f8f3 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005696:	4829      	ldr	r0, [pc, #164]	; (800573c <MX_TIM1_Init+0x144>)
 8005698:	f003 f891 	bl	80087be <HAL_TIM_PWM_Init>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80056a2:	f7fe f8eb 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056a6:	2300      	movs	r3, #0
 80056a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056b2:	4619      	mov	r1, r3
 80056b4:	4821      	ldr	r0, [pc, #132]	; (800573c <MX_TIM1_Init+0x144>)
 80056b6:	f004 f95e 	bl	8009976 <HAL_TIMEx_MasterConfigSynchronization>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80056c0:	f7fe f8dc 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056c4:	2360      	movs	r3, #96	; 0x60
 80056c6:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 80056c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80056cc:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056d2:	2300      	movs	r3, #0
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056e2:	f107 031c 	add.w	r3, r7, #28
 80056e6:	2200      	movs	r2, #0
 80056e8:	4619      	mov	r1, r3
 80056ea:	4814      	ldr	r0, [pc, #80]	; (800573c <MX_TIM1_Init+0x144>)
 80056ec:	f003 fbb0 	bl	8008e50 <HAL_TIM_PWM_ConfigChannel>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80056f6:	f7fe f8c1 	bl	800387c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80056fa:	2300      	movs	r3, #0
 80056fc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800570e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005712:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005718:	463b      	mov	r3, r7
 800571a:	4619      	mov	r1, r3
 800571c:	4807      	ldr	r0, [pc, #28]	; (800573c <MX_TIM1_Init+0x144>)
 800571e:	f004 f8d2 	bl	80098c6 <HAL_TIMEx_ConfigBreakDeadTime>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8005728:	f7fe f8a8 	bl	800387c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800572c:	4803      	ldr	r0, [pc, #12]	; (800573c <MX_TIM1_Init+0x144>)
 800572e:	f000 fb77 	bl	8005e20 <HAL_TIM_MspPostInit>

}
 8005732:	bf00      	nop
 8005734:	3750      	adds	r7, #80	; 0x50
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000a10 	.word	0x20000a10
 8005740:	40012c00 	.word	0x40012c00

08005744 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	; 0x38
 8005748:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800574a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005758:	f107 0320 	add.w	r3, r7, #32
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	60da      	str	r2, [r3, #12]
 800576e:	611a      	str	r2, [r3, #16]
 8005770:	615a      	str	r2, [r3, #20]
 8005772:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005774:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <MX_TIM2_Init+0xe4>)
 8005776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800577a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800577c:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <MX_TIM2_Init+0xe4>)
 800577e:	2247      	movs	r2, #71	; 0x47
 8005780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005782:	4b29      	ldr	r3, [pc, #164]	; (8005828 <MX_TIM2_Init+0xe4>)
 8005784:	2200      	movs	r2, #0
 8005786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <MX_TIM2_Init+0xe4>)
 800578a:	2264      	movs	r2, #100	; 0x64
 800578c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <MX_TIM2_Init+0xe4>)
 8005790:	2200      	movs	r2, #0
 8005792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005794:	4b24      	ldr	r3, [pc, #144]	; (8005828 <MX_TIM2_Init+0xe4>)
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800579a:	4823      	ldr	r0, [pc, #140]	; (8005828 <MX_TIM2_Init+0xe4>)
 800579c:	f002 ff5c 	bl	8008658 <HAL_TIM_Base_Init>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80057a6:	f7fe f869 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057b4:	4619      	mov	r1, r3
 80057b6:	481c      	ldr	r0, [pc, #112]	; (8005828 <MX_TIM2_Init+0xe4>)
 80057b8:	f003 fc10 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80057c2:	f7fe f85b 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80057c6:	4818      	ldr	r0, [pc, #96]	; (8005828 <MX_TIM2_Init+0xe4>)
 80057c8:	f002 fff9 	bl	80087be <HAL_TIM_PWM_Init>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80057d2:	f7fe f853 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057d6:	2300      	movs	r3, #0
 80057d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057da:	2300      	movs	r3, #0
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057de:	f107 0320 	add.w	r3, r7, #32
 80057e2:	4619      	mov	r1, r3
 80057e4:	4810      	ldr	r0, [pc, #64]	; (8005828 <MX_TIM2_Init+0xe4>)
 80057e6:	f004 f8c6 	bl	8009976 <HAL_TIMEx_MasterConfigSynchronization>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80057f0:	f7fe f844 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057f4:	2360      	movs	r3, #96	; 0x60
 80057f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80057f8:	2332      	movs	r3, #50	; 0x32
 80057fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	2208      	movs	r2, #8
 8005808:	4619      	mov	r1, r3
 800580a:	4807      	ldr	r0, [pc, #28]	; (8005828 <MX_TIM2_Init+0xe4>)
 800580c:	f003 fb20 	bl	8008e50 <HAL_TIM_PWM_ConfigChannel>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8005816:	f7fe f831 	bl	800387c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800581a:	4803      	ldr	r0, [pc, #12]	; (8005828 <MX_TIM2_Init+0xe4>)
 800581c:	f000 fb00 	bl	8005e20 <HAL_TIM_MspPostInit>

}
 8005820:	bf00      	nop
 8005822:	3738      	adds	r7, #56	; 0x38
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000a50 	.word	0x20000a50

0800582c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08e      	sub	sp, #56	; 0x38
 8005830:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	609a      	str	r2, [r3, #8]
 800583e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005840:	f107 0320 	add.w	r3, r7, #32
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	611a      	str	r2, [r3, #16]
 8005858:	615a      	str	r2, [r3, #20]
 800585a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <MX_TIM3_Init+0xe4>)
 800585e:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <MX_TIM3_Init+0xe8>)
 8005860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8005862:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <MX_TIM3_Init+0xe4>)
 8005864:	f242 720f 	movw	r2, #9999	; 0x270f
 8005868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800586a:	4b29      	ldr	r3, [pc, #164]	; (8005910 <MX_TIM3_Init+0xe4>)
 800586c:	2200      	movs	r2, #0
 800586e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 72-1;
 8005870:	4b27      	ldr	r3, [pc, #156]	; (8005910 <MX_TIM3_Init+0xe4>)
 8005872:	2247      	movs	r2, #71	; 0x47
 8005874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <MX_TIM3_Init+0xe4>)
 8005878:	2200      	movs	r2, #0
 800587a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800587c:	4b24      	ldr	r3, [pc, #144]	; (8005910 <MX_TIM3_Init+0xe4>)
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005882:	4823      	ldr	r0, [pc, #140]	; (8005910 <MX_TIM3_Init+0xe4>)
 8005884:	f002 fee8 	bl	8008658 <HAL_TIM_Base_Init>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800588e:	f7fd fff5 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800589c:	4619      	mov	r1, r3
 800589e:	481c      	ldr	r0, [pc, #112]	; (8005910 <MX_TIM3_Init+0xe4>)
 80058a0:	f003 fb9c 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80058aa:	f7fd ffe7 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80058ae:	4818      	ldr	r0, [pc, #96]	; (8005910 <MX_TIM3_Init+0xe4>)
 80058b0:	f002 ff85 	bl	80087be <HAL_TIM_PWM_Init>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80058ba:	f7fd ffdf 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058be:	2300      	movs	r3, #0
 80058c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80058c6:	f107 0320 	add.w	r3, r7, #32
 80058ca:	4619      	mov	r1, r3
 80058cc:	4810      	ldr	r0, [pc, #64]	; (8005910 <MX_TIM3_Init+0xe4>)
 80058ce:	f004 f852 	bl	8009976 <HAL_TIMEx_MasterConfigSynchronization>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80058d8:	f7fd ffd0 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058dc:	2360      	movs	r3, #96	; 0x60
 80058de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 80058e0:	2324      	movs	r3, #36	; 0x24
 80058e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	2200      	movs	r2, #0
 80058f0:	4619      	mov	r1, r3
 80058f2:	4807      	ldr	r0, [pc, #28]	; (8005910 <MX_TIM3_Init+0xe4>)
 80058f4:	f003 faac 	bl	8008e50 <HAL_TIM_PWM_ConfigChannel>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80058fe:	f7fd ffbd 	bl	800387c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005902:	4803      	ldr	r0, [pc, #12]	; (8005910 <MX_TIM3_Init+0xe4>)
 8005904:	f000 fa8c 	bl	8005e20 <HAL_TIM_MspPostInit>

}
 8005908:	bf00      	nop
 800590a:	3738      	adds	r7, #56	; 0x38
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000a90 	.word	0x20000a90
 8005914:	40000400 	.word	0x40000400

08005918 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	; 0x38
 800591c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800591e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	605a      	str	r2, [r3, #4]
 8005928:	609a      	str	r2, [r3, #8]
 800592a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800592c:	f107 0320 	add.w	r3, r7, #32
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	611a      	str	r2, [r3, #16]
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8005948:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <MX_TIM4_Init+0xe4>)
 800594a:	4a2d      	ldr	r2, [pc, #180]	; (8005a00 <MX_TIM4_Init+0xe8>)
 800594c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800594e:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <MX_TIM4_Init+0xe4>)
 8005950:	f242 720f 	movw	r2, #9999	; 0x270f
 8005954:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005956:	4b29      	ldr	r3, [pc, #164]	; (80059fc <MX_TIM4_Init+0xe4>)
 8005958:	2200      	movs	r2, #0
 800595a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 72-1;
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <MX_TIM4_Init+0xe4>)
 800595e:	2247      	movs	r2, #71	; 0x47
 8005960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005962:	4b26      	ldr	r3, [pc, #152]	; (80059fc <MX_TIM4_Init+0xe4>)
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005968:	4b24      	ldr	r3, [pc, #144]	; (80059fc <MX_TIM4_Init+0xe4>)
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800596e:	4823      	ldr	r0, [pc, #140]	; (80059fc <MX_TIM4_Init+0xe4>)
 8005970:	f002 fe72 	bl	8008658 <HAL_TIM_Base_Init>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800597a:	f7fd ff7f 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800597e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005988:	4619      	mov	r1, r3
 800598a:	481c      	ldr	r0, [pc, #112]	; (80059fc <MX_TIM4_Init+0xe4>)
 800598c:	f003 fb26 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005996:	f7fd ff71 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800599a:	4818      	ldr	r0, [pc, #96]	; (80059fc <MX_TIM4_Init+0xe4>)
 800599c:	f002 ff0f 	bl	80087be <HAL_TIM_PWM_Init>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80059a6:	f7fd ff69 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80059b2:	f107 0320 	add.w	r3, r7, #32
 80059b6:	4619      	mov	r1, r3
 80059b8:	4810      	ldr	r0, [pc, #64]	; (80059fc <MX_TIM4_Init+0xe4>)
 80059ba:	f003 ffdc 	bl	8009976 <HAL_TIMEx_MasterConfigSynchronization>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80059c4:	f7fd ff5a 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059c8:	2360      	movs	r3, #96	; 0x60
 80059ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 80059cc:	2324      	movs	r3, #36	; 0x24
 80059ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059d8:	1d3b      	adds	r3, r7, #4
 80059da:	2200      	movs	r2, #0
 80059dc:	4619      	mov	r1, r3
 80059de:	4807      	ldr	r0, [pc, #28]	; (80059fc <MX_TIM4_Init+0xe4>)
 80059e0:	f003 fa36 	bl	8008e50 <HAL_TIM_PWM_ConfigChannel>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80059ea:	f7fd ff47 	bl	800387c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80059ee:	4803      	ldr	r0, [pc, #12]	; (80059fc <MX_TIM4_Init+0xe4>)
 80059f0:	f000 fa16 	bl	8005e20 <HAL_TIM_MspPostInit>

}
 80059f4:	bf00      	nop
 80059f6:	3738      	adds	r7, #56	; 0x38
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000ad0 	.word	0x20000ad0
 8005a00:	40000800 	.word	0x40000800

08005a04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a0a:	f107 0308 	add.w	r3, r7, #8
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	609a      	str	r2, [r3, #8]
 8005a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a18:	463b      	mov	r3, r7
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <MX_TIM5_Init+0x98>)
 8005a24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a28:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005a2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a2e:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8005a34:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a36:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8005a3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a3c:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005a48:	4813      	ldr	r0, [pc, #76]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a4a:	f002 fe05 	bl	8008658 <HAL_TIM_Base_Init>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005a54:	f7fd ff12 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005a5e:	f107 0308 	add.w	r3, r7, #8
 8005a62:	4619      	mov	r1, r3
 8005a64:	480c      	ldr	r0, [pc, #48]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a66:	f003 fab9 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005a70:	f7fd ff04 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4805      	ldr	r0, [pc, #20]	; (8005a98 <MX_TIM5_Init+0x94>)
 8005a82:	f003 ff78 	bl	8009976 <HAL_TIMEx_MasterConfigSynchronization>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005a8c:	f7fd fef6 	bl	800387c <Error_Handler>
  }

}
 8005a90:	bf00      	nop
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000b10 	.word	0x20000b10
 8005a9c:	40000c00 	.word	0x40000c00

08005aa0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b094      	sub	sp, #80	; 0x50
 8005aa4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
 8005ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005abe:	f107 031c 	add.w	r3, r7, #28
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	609a      	str	r2, [r3, #8]
 8005aca:	60da      	str	r2, [r3, #12]
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	615a      	str	r2, [r3, #20]
 8005ad0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]
 8005ae0:	615a      	str	r2, [r3, #20]
 8005ae2:	619a      	str	r2, [r3, #24]

  htim8.Instance = TIM8;
 8005ae4:	4b3e      	ldr	r3, [pc, #248]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005ae6:	4a3f      	ldr	r2, [pc, #252]	; (8005be4 <MX_TIM8_Init+0x144>)
 8005ae8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10000-1;
 8005aea:	4b3d      	ldr	r3, [pc, #244]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005aec:	f242 720f 	movw	r2, #9999	; 0x270f
 8005af0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af2:	4b3b      	ldr	r3, [pc, #236]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 72-1;
 8005af8:	4b39      	ldr	r3, [pc, #228]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005afa:	2247      	movs	r2, #71	; 0x47
 8005afc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005afe:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005b04:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b0a:	4b35      	ldr	r3, [pc, #212]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005b10:	4833      	ldr	r0, [pc, #204]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b12:	f002 fda1 	bl	8008658 <HAL_TIM_Base_Init>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 8005b1c:	f7fd feae 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b24:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005b26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	482c      	ldr	r0, [pc, #176]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b2e:	f003 fa55 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8005b38:	f7fd fea0 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005b3c:	4828      	ldr	r0, [pc, #160]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b3e:	f002 fe3e 	bl	80087be <HAL_TIM_PWM_Init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_TIM8_Init+0xac>
  {
    Error_Handler();
 8005b48:	f7fd fe98 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005b54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4821      	ldr	r0, [pc, #132]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b5c:	f003 ff0b 	bl	8009976 <HAL_TIMEx_MasterConfigSynchronization>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8005b66:	f7fd fe89 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b6a:	2360      	movs	r3, #96	; 0x60
 8005b6c:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 36;
 8005b6e:	2324      	movs	r3, #36	; 0x24
 8005b70:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b76:	2300      	movs	r3, #0
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b82:	2300      	movs	r3, #0
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b86:	f107 031c 	add.w	r3, r7, #28
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4814      	ldr	r0, [pc, #80]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005b90:	f003 f95e 	bl	8008e50 <HAL_TIM_PWM_ConfigChannel>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8005b9a:	f7fd fe6f 	bl	800387c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4807      	ldr	r0, [pc, #28]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005bc2:	f003 fe80 	bl	80098c6 <HAL_TIMEx_ConfigBreakDeadTime>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8005bcc:	f7fd fe56 	bl	800387c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8005bd0:	4803      	ldr	r0, [pc, #12]	; (8005be0 <MX_TIM8_Init+0x140>)
 8005bd2:	f000 f925 	bl	8005e20 <HAL_TIM_MspPostInit>

}
 8005bd6:	bf00      	nop
 8005bd8:	3750      	adds	r7, #80	; 0x50
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000b50 	.word	0x20000b50
 8005be4:	40013400 	.word	0x40013400

08005be8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7e      	ldr	r2, [pc, #504]	; (8005df0 <HAL_TIM_Base_MspInit+0x208>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10c      	bne.n	8005c14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bfa:	4b7e      	ldr	r3, [pc, #504]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	4a7d      	ldr	r2, [pc, #500]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c04:	6193      	str	r3, [r2, #24]
 8005c06:	4b7b      	ldr	r3, [pc, #492]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	69fb      	ldr	r3, [r7, #28]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005c12:	e0e9      	b.n	8005de8 <HAL_TIM_Base_MspInit+0x200>
  else if(tim_baseHandle->Instance==TIM2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1c:	d10c      	bne.n	8005c38 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c1e:	4b75      	ldr	r3, [pc, #468]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4a74      	ldr	r2, [pc, #464]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	61d3      	str	r3, [r2, #28]
 8005c2a:	4b72      	ldr	r3, [pc, #456]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	69bb      	ldr	r3, [r7, #24]
}
 8005c36:	e0d7      	b.n	8005de8 <HAL_TIM_Base_MspInit+0x200>
  else if(tim_baseHandle->Instance==TIM3)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a6e      	ldr	r2, [pc, #440]	; (8005df8 <HAL_TIM_Base_MspInit+0x210>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d143      	bne.n	8005cca <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c42:	4b6c      	ldr	r3, [pc, #432]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	4a6b      	ldr	r2, [pc, #428]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	61d3      	str	r3, [r2, #28]
 8005c4e:	4b69      	ldr	r3, [pc, #420]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8005c5a:	4b68      	ldr	r3, [pc, #416]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c5c:	4a68      	ldr	r2, [pc, #416]	; (8005e00 <HAL_TIM_Base_MspInit+0x218>)
 8005c5e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c60:	4b66      	ldr	r3, [pc, #408]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c62:	2210      	movs	r2, #16
 8005c64:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c66:	4b65      	ldr	r3, [pc, #404]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8005c6c:	4b63      	ldr	r3, [pc, #396]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c6e:	2280      	movs	r2, #128	; 0x80
 8005c70:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c72:	4b62      	ldr	r3, [pc, #392]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c78:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c7a:	4b60      	ldr	r3, [pc, #384]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c80:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8005c82:	4b5e      	ldr	r3, [pc, #376]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005c88:	4b5c      	ldr	r3, [pc, #368]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c8a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005c8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8005c90:	485a      	ldr	r0, [pc, #360]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005c92:	f001 f995 	bl	8006fc0 <HAL_DMA_Init>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_TIM_Base_MspInit+0xb8>
      Error_Handler();
 8005c9c:	f7fd fdee 	bl	800387c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a56      	ldr	r2, [pc, #344]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ca6:	4a55      	ldr	r2, [pc, #340]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a53      	ldr	r2, [pc, #332]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8005cb2:	4a52      	ldr	r2, [pc, #328]	; (8005dfc <HAL_TIM_Base_MspInit+0x214>)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2100      	movs	r1, #0
 8005cbc:	201d      	movs	r0, #29
 8005cbe:	f001 f948 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005cc2:	201d      	movs	r0, #29
 8005cc4:	f001 f961 	bl	8006f8a <HAL_NVIC_EnableIRQ>
}
 8005cc8:	e08e      	b.n	8005de8 <HAL_TIM_Base_MspInit+0x200>
  else if(tim_baseHandle->Instance==TIM4)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a4d      	ldr	r2, [pc, #308]	; (8005e04 <HAL_TIM_Base_MspInit+0x21c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d135      	bne.n	8005d40 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005cd4:	4b47      	ldr	r3, [pc, #284]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	4a46      	ldr	r2, [pc, #280]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005cda:	f043 0304 	orr.w	r3, r3, #4
 8005cde:	61d3      	str	r3, [r2, #28]
 8005ce0:	4b44      	ldr	r3, [pc, #272]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8005cec:	4b46      	ldr	r3, [pc, #280]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005cee:	4a47      	ldr	r2, [pc, #284]	; (8005e0c <HAL_TIM_Base_MspInit+0x224>)
 8005cf0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cf2:	4b45      	ldr	r3, [pc, #276]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cf8:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005cfe:	4b42      	ldr	r3, [pc, #264]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d00:	2280      	movs	r2, #128	; 0x80
 8005d02:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d04:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d0c:	4b3e      	ldr	r3, [pc, #248]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d12:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8005d14:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005d20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8005d22:	4839      	ldr	r0, [pc, #228]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d24:	f001 f94c 	bl	8006fc0 <HAL_DMA_Init>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_TIM_Base_MspInit+0x14a>
      Error_Handler();
 8005d2e:	f7fd fda5 	bl	800387c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a34      	ldr	r2, [pc, #208]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d36:	625a      	str	r2, [r3, #36]	; 0x24
 8005d38:	4a33      	ldr	r2, [pc, #204]	; (8005e08 <HAL_TIM_Base_MspInit+0x220>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005d3e:	e053      	b.n	8005de8 <HAL_TIM_Base_MspInit+0x200>
  else if(tim_baseHandle->Instance==TIM5)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a32      	ldr	r2, [pc, #200]	; (8005e10 <HAL_TIM_Base_MspInit+0x228>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d114      	bne.n	8005d74 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d4a:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005d50:	f043 0308 	orr.w	r3, r3, #8
 8005d54:	61d3      	str	r3, [r2, #28]
 8005d56:	4b27      	ldr	r3, [pc, #156]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005d62:	2200      	movs	r2, #0
 8005d64:	2100      	movs	r1, #0
 8005d66:	2032      	movs	r0, #50	; 0x32
 8005d68:	f001 f8f3 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005d6c:	2032      	movs	r0, #50	; 0x32
 8005d6e:	f001 f90c 	bl	8006f8a <HAL_NVIC_EnableIRQ>
}
 8005d72:	e039      	b.n	8005de8 <HAL_TIM_Base_MspInit+0x200>
  else if(tim_baseHandle->Instance==TIM8)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a26      	ldr	r2, [pc, #152]	; (8005e14 <HAL_TIM_Base_MspInit+0x22c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d134      	bne.n	8005de8 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	4a1c      	ldr	r2, [pc, #112]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005d84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d88:	6193      	str	r3, [r2, #24]
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <HAL_TIM_Base_MspInit+0x20c>)
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	60bb      	str	r3, [r7, #8]
 8005d94:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8005d96:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005d98:	4a20      	ldr	r2, [pc, #128]	; (8005e1c <HAL_TIM_Base_MspInit+0x234>)
 8005d9a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d9c:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005d9e:	2210      	movs	r2, #16
 8005da0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005da2:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005da8:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005dae:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db4:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dbc:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005dc4:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005dc6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005dca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8005dcc:	4812      	ldr	r0, [pc, #72]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005dce:	f001 f8f7 	bl	8006fc0 <HAL_DMA_Init>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_TIM_Base_MspInit+0x1f4>
      Error_Handler();
 8005dd8:	f7fd fd50 	bl	800387c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24
 8005de2:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <HAL_TIM_Base_MspInit+0x230>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005de8:	bf00      	nop
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40021000 	.word	0x40021000
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	20000b90 	.word	0x20000b90
 8005e00:	4002006c 	.word	0x4002006c
 8005e04:	40000800 	.word	0x40000800
 8005e08:	20000bd4 	.word	0x20000bd4
 8005e0c:	40020008 	.word	0x40020008
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40013400 	.word	0x40013400
 8005e18:	20000c18 	.word	0x20000c18
 8005e1c:	40020430 	.word	0x40020430

08005e20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08c      	sub	sp, #48	; 0x30
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e28:	f107 031c 	add.w	r3, r7, #28
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a55      	ldr	r2, [pc, #340]	; (8005f90 <HAL_TIM_MspPostInit+0x170>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d119      	bne.n	8005e74 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e40:	4b54      	ldr	r3, [pc, #336]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4a53      	ldr	r2, [pc, #332]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	6193      	str	r3, [r2, #24]
 8005e4c:	4b51      	ldr	r3, [pc, #324]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e62:	2302      	movs	r3, #2
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e66:	f107 031c 	add.w	r3, r7, #28
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	484a      	ldr	r0, [pc, #296]	; (8005f98 <HAL_TIM_MspPostInit+0x178>)
 8005e6e:	f001 fcef 	bl	8007850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005e72:	e089      	b.n	8005f88 <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM2)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7c:	d12b      	bne.n	8005ed6 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e7e:	4b45      	ldr	r3, [pc, #276]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	4a44      	ldr	r2, [pc, #272]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005e84:	f043 0308 	orr.w	r3, r3, #8
 8005e88:	6193      	str	r3, [r2, #24]
 8005e8a:	4b42      	ldr	r3, [pc, #264]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea4:	f107 031c 	add.w	r3, r7, #28
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	483c      	ldr	r0, [pc, #240]	; (8005f9c <HAL_TIM_MspPostInit+0x17c>)
 8005eac:	f001 fcd0 	bl	8007850 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8005eb0:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_TIM_MspPostInit+0x180>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ece:	4a34      	ldr	r2, [pc, #208]	; (8005fa0 <HAL_TIM_MspPostInit+0x180>)
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	6053      	str	r3, [r2, #4]
}
 8005ed4:	e058      	b.n	8005f88 <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM3)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a32      	ldr	r2, [pc, #200]	; (8005fa4 <HAL_TIM_MspPostInit+0x184>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d118      	bne.n	8005f12 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ee0:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	4a2b      	ldr	r2, [pc, #172]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005ee6:	f043 0304 	orr.w	r3, r3, #4
 8005eea:	6193      	str	r3, [r2, #24]
 8005eec:	4b29      	ldr	r3, [pc, #164]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efc:	2302      	movs	r3, #2
 8005efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f00:	2302      	movs	r3, #2
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f04:	f107 031c 	add.w	r3, r7, #28
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4823      	ldr	r0, [pc, #140]	; (8005f98 <HAL_TIM_MspPostInit+0x178>)
 8005f0c:	f001 fca0 	bl	8007850 <HAL_GPIO_Init>
}
 8005f10:	e03a      	b.n	8005f88 <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM4)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <HAL_TIM_MspPostInit+0x188>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d118      	bne.n	8005f4e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005f22:	f043 0308 	orr.w	r3, r3, #8
 8005f26:	6193      	str	r3, [r2, #24]
 8005f28:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f40:	f107 031c 	add.w	r3, r7, #28
 8005f44:	4619      	mov	r1, r3
 8005f46:	4815      	ldr	r0, [pc, #84]	; (8005f9c <HAL_TIM_MspPostInit+0x17c>)
 8005f48:	f001 fc82 	bl	8007850 <HAL_GPIO_Init>
}
 8005f4c:	e01c      	b.n	8005f88 <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM8)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a16      	ldr	r2, [pc, #88]	; (8005fac <HAL_TIM_MspPostInit+0x18c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d117      	bne.n	8005f88 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f58:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	4a0d      	ldr	r2, [pc, #52]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005f5e:	f043 0310 	orr.w	r3, r3, #16
 8005f62:	6193      	str	r3, [r2, #24]
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_TIM_MspPostInit+0x174>)
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f70:	2340      	movs	r3, #64	; 0x40
 8005f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f74:	2302      	movs	r3, #2
 8005f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f7c:	f107 031c 	add.w	r3, r7, #28
 8005f80:	4619      	mov	r1, r3
 8005f82:	480b      	ldr	r0, [pc, #44]	; (8005fb0 <HAL_TIM_MspPostInit+0x190>)
 8005f84:	f001 fc64 	bl	8007850 <HAL_GPIO_Init>
}
 8005f88:	bf00      	nop
 8005f8a:	3730      	adds	r7, #48	; 0x30
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40010800 	.word	0x40010800
 8005f9c:	40010c00 	.word	0x40010c00
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40011000 	.word	0x40011000

08005fb4 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8005fb8:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <TIMER_INIT+0x20>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0201 	mvn.w	r2, #1
 8005fc0:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8005fc2:	4804      	ldr	r0, [pc, #16]	; (8005fd4 <TIMER_INIT+0x20>)
 8005fc4:	f002 fb73 	bl	80086ae <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8005fc8:	4802      	ldr	r0, [pc, #8]	; (8005fd4 <TIMER_INIT+0x20>)
 8005fca:	f002 fbb4 	bl	8008736 <HAL_TIM_Base_Start_IT>
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000b10 	.word	0x20000b10

08005fd8 <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <timer_min+0x38>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f06f 0201 	mvn.w	r2, #1
 8005fea:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	4b08      	ldr	r3, [pc, #32]	; (8006014 <timer_min+0x3c>)
 8005ff4:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <timer_min+0x40>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8005ffc:	4804      	ldr	r0, [pc, #16]	; (8006010 <timer_min+0x38>)
 8005ffe:	f002 fb56 	bl	80086ae <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8006002:	4803      	ldr	r0, [pc, #12]	; (8006010 <timer_min+0x38>)
 8006004:	f002 fb97 	bl	8008736 <HAL_TIM_Base_Start_IT>
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000a90 	.word	0x20000a90
 8006014:	20000c5c 	.word	0x20000c5c
 8006018:	20000c5d 	.word	0x20000c5d

0800601c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006022:	4a12      	ldr	r2, [pc, #72]	; (800606c <MX_USART1_UART_Init+0x50>)
 8006024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006026:	4b10      	ldr	r3, [pc, #64]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800602c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800602e:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006030:	2200      	movs	r2, #0
 8006032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006036:	2200      	movs	r2, #0
 8006038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 800603c:	2200      	movs	r2, #0
 800603e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006042:	220c      	movs	r2, #12
 8006044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006046:	4b08      	ldr	r3, [pc, #32]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006048:	2200      	movs	r2, #0
 800604a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 800604e:	2200      	movs	r2, #0
 8006050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006052:	4805      	ldr	r0, [pc, #20]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006054:	f003 fce5 	bl	8009a22 <HAL_UART_Init>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800605e:	f7fd fc0d 	bl	800387c <Error_Handler>
  }

}
 8006062:	bf00      	nop
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000c60 	.word	0x20000c60
 800606c:	40013800 	.word	0x40013800

08006070 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006074:	4b11      	ldr	r3, [pc, #68]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 8006076:	4a12      	ldr	r2, [pc, #72]	; (80060c0 <MX_USART2_UART_Init+0x50>)
 8006078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 800607c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8006080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006082:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 8006084:	2200      	movs	r2, #0
 8006086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 800608a:	2200      	movs	r2, #0
 800608c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800608e:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 8006090:	2200      	movs	r2, #0
 8006092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 8006096:	220c      	movs	r2, #12
 8006098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800609a:	4b08      	ldr	r3, [pc, #32]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 800609c:	2200      	movs	r2, #0
 800609e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060a6:	4805      	ldr	r0, [pc, #20]	; (80060bc <MX_USART2_UART_Init+0x4c>)
 80060a8:	f003 fcbb 	bl	8009a22 <HAL_UART_Init>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80060b2:	f7fd fbe3 	bl	800387c <Error_Handler>
  }

}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000ca0 	.word	0x20000ca0
 80060c0:	40004400 	.word	0x40004400

080060c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80060c8:	4b11      	ldr	r3, [pc, #68]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060ca:	4a12      	ldr	r2, [pc, #72]	; (8006114 <MX_USART3_UART_Init+0x50>)
 80060cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80060d6:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060de:	2200      	movs	r2, #0
 80060e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060ea:	220c      	movs	r2, #12
 80060ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ee:	4b08      	ldr	r3, [pc, #32]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80060fa:	4805      	ldr	r0, [pc, #20]	; (8006110 <MX_USART3_UART_Init+0x4c>)
 80060fc:	f003 fc91 	bl	8009a22 <HAL_UART_Init>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006106:	f7fd fbb9 	bl	800387c <Error_Handler>
  }

}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000ce0 	.word	0x20000ce0
 8006114:	40004800 	.word	0x40004800

08006118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	; 0x38
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	609a      	str	r2, [r3, #8]
 800612c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a64      	ldr	r2, [pc, #400]	; (80062c4 <HAL_UART_MspInit+0x1ac>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d13a      	bne.n	80061ae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006138:	4b63      	ldr	r3, [pc, #396]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	4a62      	ldr	r2, [pc, #392]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 800613e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006142:	6193      	str	r3, [r2, #24]
 8006144:	4b60      	ldr	r3, [pc, #384]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006150:	4b5d      	ldr	r3, [pc, #372]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	4a5c      	ldr	r2, [pc, #368]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 8006156:	f043 0304 	orr.w	r3, r3, #4
 800615a:	6193      	str	r3, [r2, #24]
 800615c:	4b5a      	ldr	r3, [pc, #360]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616e:	2302      	movs	r3, #2
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006172:	2303      	movs	r3, #3
 8006174:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617a:	4619      	mov	r1, r3
 800617c:	4853      	ldr	r0, [pc, #332]	; (80062cc <HAL_UART_MspInit+0x1b4>)
 800617e:	f001 fb67 	bl	8007850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006188:	2300      	movs	r3, #0
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618c:	2300      	movs	r3, #0
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006194:	4619      	mov	r1, r3
 8006196:	484d      	ldr	r0, [pc, #308]	; (80062cc <HAL_UART_MspInit+0x1b4>)
 8006198:	f001 fb5a 	bl	8007850 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800619c:	2200      	movs	r2, #0
 800619e:	2100      	movs	r1, #0
 80061a0:	2025      	movs	r0, #37	; 0x25
 80061a2:	f000 fed6 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80061a6:	2025      	movs	r0, #37	; 0x25
 80061a8:	f000 feef 	bl	8006f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80061ac:	e086      	b.n	80062bc <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a47      	ldr	r2, [pc, #284]	; (80062d0 <HAL_UART_MspInit+0x1b8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d130      	bne.n	800621a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	4a42      	ldr	r2, [pc, #264]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 80061be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c2:	61d3      	str	r3, [r2, #28]
 80061c4:	4b40      	ldr	r3, [pc, #256]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d0:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	4a3c      	ldr	r2, [pc, #240]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 80061d6:	f043 0304 	orr.w	r3, r3, #4
 80061da:	6193      	str	r3, [r2, #24]
 80061dc:	4b3a      	ldr	r3, [pc, #232]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80061e8:	2304      	movs	r3, #4
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ec:	2302      	movs	r3, #2
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061f0:	2303      	movs	r3, #3
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061f8:	4619      	mov	r1, r3
 80061fa:	4834      	ldr	r0, [pc, #208]	; (80062cc <HAL_UART_MspInit+0x1b4>)
 80061fc:	f001 fb28 	bl	8007850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006200:	2308      	movs	r3, #8
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006204:	2300      	movs	r3, #0
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006208:	2300      	movs	r3, #0
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800620c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006210:	4619      	mov	r1, r3
 8006212:	482e      	ldr	r0, [pc, #184]	; (80062cc <HAL_UART_MspInit+0x1b4>)
 8006214:	f001 fb1c 	bl	8007850 <HAL_GPIO_Init>
}
 8006218:	e050      	b.n	80062bc <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART3)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2d      	ldr	r2, [pc, #180]	; (80062d4 <HAL_UART_MspInit+0x1bc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d14b      	bne.n	80062bc <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006224:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 800622a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800622e:	61d3      	str	r3, [r2, #28]
 8006230:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800623c:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 8006242:	f043 0310 	orr.w	r3, r3, #16
 8006246:	6193      	str	r3, [r2, #24]
 8006248:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <HAL_UART_MspInit+0x1b0>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800625a:	2302      	movs	r3, #2
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800625e:	2303      	movs	r3, #3
 8006260:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006266:	4619      	mov	r1, r3
 8006268:	481b      	ldr	r0, [pc, #108]	; (80062d8 <HAL_UART_MspInit+0x1c0>)
 800626a:	f001 faf1 	bl	8007850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800626e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006274:	2300      	movs	r3, #0
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006278:	2300      	movs	r3, #0
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800627c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006280:	4619      	mov	r1, r3
 8006282:	4815      	ldr	r0, [pc, #84]	; (80062d8 <HAL_UART_MspInit+0x1c0>)
 8006284:	f001 fae4 	bl	8007850 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <HAL_UART_MspInit+0x1c4>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
 8006296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006298:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	f043 0310 	orr.w	r3, r3, #16
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
 80062a6:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <HAL_UART_MspInit+0x1c4>)
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80062ac:	2200      	movs	r2, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	2027      	movs	r0, #39	; 0x27
 80062b2:	f000 fe4e 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80062b6:	2027      	movs	r0, #39	; 0x27
 80062b8:	f000 fe67 	bl	8006f8a <HAL_NVIC_EnableIRQ>
}
 80062bc:	bf00      	nop
 80062be:	3738      	adds	r7, #56	; 0x38
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40013800 	.word	0x40013800
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40010800 	.word	0x40010800
 80062d0:	40004400 	.word	0x40004400
 80062d4:	40004800 	.word	0x40004800
 80062d8:	40011000 	.word	0x40011000
 80062dc:	40010000 	.word	0x40010000

080062e0 <_Z10printToLCDRK6Stringt>:
    newStr.len = strlen(s) + str.len;
    strcpy(newStr.str, s);
    strcat(newStr.str, str.str);
    return newStr;
};
void printToLCD(const String& string, uint16_t row){
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	807b      	strh	r3, [r7, #2]
  char str[20];
  sprintf(str, "                   ");
 80062ec:	f107 030c 	add.w	r3, r7, #12
 80062f0:	490e      	ldr	r1, [pc, #56]	; (800632c <_Z10printToLCDRK6Stringt+0x4c>)
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe ff08 	bl	8005108 <sprintf_>
  LCD_DrawString(0, row*15, str);
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	461a      	mov	r2, r3
 80062fc:	0112      	lsls	r2, r2, #4
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	b29b      	uxth	r3, r3
 8006302:	f107 020c 	add.w	r2, r7, #12
 8006306:	4619      	mov	r1, r3
 8006308:	2000      	movs	r0, #0
 800630a:	f7fd f959 	bl	80035c0 <LCD_DrawString>
  LCD_DrawString(0, row*15, string.str);
 800630e:	887b      	ldrh	r3, [r7, #2]
 8006310:	461a      	mov	r2, r3
 8006312:	0112      	lsls	r2, r2, #4
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	b29b      	uxth	r3, r3
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4619      	mov	r1, r3
 800631c:	2000      	movs	r0, #0
 800631e:	f7fd f94f 	bl	80035c0 <LCD_DrawString>
}
 8006322:	bf00      	nop
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	0800aef0 	.word	0x0800aef0

08006330 <_Z8debugLogRK6Stringt>:
        sprintf(str, "%02X", arr[i]);
        LCD_DrawString(i*15, row*15, str);
    }
}

void debugLog(const String& string, uint16_t row){
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	807b      	strh	r3, [r7, #2]
    printToLCD(string, row);
 800633c:	887b      	ldrh	r3, [r7, #2]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff ffcd 	bl	80062e0 <_Z10printToLCDRK6Stringt>
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e00a      	b.n	8006372 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 800635c:	230c      	movs	r3, #12
 800635e:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8006360:	bf00      	nop
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	72fa      	strb	r2, [r7, #11]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1fa      	bne.n	8006362 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	429a      	cmp	r2, r3
 8006378:	d3f0      	bcc.n	800635c <XPT2046_DelayUS+0xe>
			;

	}

}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr
	...

08006388 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8006392:	2200      	movs	r2, #0
 8006394:	2104      	movs	r1, #4
 8006396:	481d      	ldr	r0, [pc, #116]	; (800640c <XPT2046_WriteCMD+0x84>)
 8006398:	f001 fc09 	bl	8007bae <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 800639c:	2200      	movs	r2, #0
 800639e:	2101      	movs	r1, #1
 80063a0:	481a      	ldr	r0, [pc, #104]	; (800640c <XPT2046_WriteCMD+0x84>)
 80063a2:	f001 fc04 	bl	8007bae <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]
 80063aa:	e027      	b.n	80063fc <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80063ac:	79fa      	ldrb	r2, [r7, #7]
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	f1c3 0307 	rsb	r3, r3, #7
 80063b4:	fa42 f303 	asr.w	r3, r2, r3
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <XPT2046_WriteCMD+0x44>
 80063c0:	2201      	movs	r2, #1
 80063c2:	2104      	movs	r1, #4
 80063c4:	4811      	ldr	r0, [pc, #68]	; (800640c <XPT2046_WriteCMD+0x84>)
 80063c6:	f001 fbf2 	bl	8007bae <HAL_GPIO_WritePin>
 80063ca:	e004      	b.n	80063d6 <XPT2046_WriteCMD+0x4e>
 80063cc:	2200      	movs	r2, #0
 80063ce:	2104      	movs	r1, #4
 80063d0:	480e      	ldr	r0, [pc, #56]	; (800640c <XPT2046_WriteCMD+0x84>)
 80063d2:	f001 fbec 	bl	8007bae <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80063d6:	2005      	movs	r0, #5
 80063d8:	f7ff ffb9 	bl	800634e <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 80063dc:	2201      	movs	r2, #1
 80063de:	2101      	movs	r1, #1
 80063e0:	480a      	ldr	r0, [pc, #40]	; (800640c <XPT2046_WriteCMD+0x84>)
 80063e2:	f001 fbe4 	bl	8007bae <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80063e6:	2005      	movs	r0, #5
 80063e8:	f7ff ffb1 	bl	800634e <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80063ec:	2200      	movs	r2, #0
 80063ee:	2101      	movs	r1, #1
 80063f0:	4806      	ldr	r0, [pc, #24]	; (800640c <XPT2046_WriteCMD+0x84>)
 80063f2:	f001 fbdc 	bl	8007bae <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	3301      	adds	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b07      	cmp	r3, #7
 8006400:	d9d4      	bls.n	80063ac <XPT2046_WriteCMD+0x24>
	}

}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40011800 	.word	0x40011800

08006410 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8006416:	2300      	movs	r3, #0
 8006418:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 800641a:	2200      	movs	r2, #0
 800641c:	2104      	movs	r1, #4
 800641e:	4819      	ldr	r0, [pc, #100]	; (8006484 <XPT2046_ReadCMD+0x74>)
 8006420:	f001 fbc5 	bl	8007bae <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8006424:	2201      	movs	r2, #1
 8006426:	2101      	movs	r1, #1
 8006428:	4816      	ldr	r0, [pc, #88]	; (8006484 <XPT2046_ReadCMD+0x74>)
 800642a:	f001 fbc0 	bl	8007bae <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 800642e:	2300      	movs	r3, #0
 8006430:	71fb      	strb	r3, [r7, #7]
 8006432:	e01e      	b.n	8006472 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8006434:	2200      	movs	r2, #0
 8006436:	2101      	movs	r1, #1
 8006438:	4812      	ldr	r0, [pc, #72]	; (8006484 <XPT2046_ReadCMD+0x74>)
 800643a:	f001 fbb8 	bl	8007bae <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 800643e:	2108      	movs	r1, #8
 8006440:	4810      	ldr	r0, [pc, #64]	; (8006484 <XPT2046_ReadCMD+0x74>)
 8006442:	f001 fb9d 	bl	8007b80 <HAL_GPIO_ReadPin>
 8006446:	4603      	mov	r3, r0
 8006448:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 800644a:	887a      	ldrh	r2, [r7, #2]
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	f1c3 030b 	rsb	r3, r3, #11
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	b21a      	sxth	r2, r3
 8006458:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800645c:	4313      	orrs	r3, r2
 800645e:	b21b      	sxth	r3, r3
 8006460:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8006462:	2201      	movs	r2, #1
 8006464:	2101      	movs	r1, #1
 8006466:	4807      	ldr	r0, [pc, #28]	; (8006484 <XPT2046_ReadCMD+0x74>)
 8006468:	f001 fba1 	bl	8007bae <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	3301      	adds	r3, #1
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b0b      	cmp	r3, #11
 8006476:	d9dd      	bls.n	8006434 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8006478:	88bb      	ldrh	r3, [r7, #4]

}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40011800 	.word	0x40011800

08006488 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff77 	bl	8006388 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 800649a:	f7ff ffb9 	bl	8006410 <XPT2046_ReadCMD>
 800649e:	4603      	mov	r3, r0

}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 80064b2:	2090      	movs	r0, #144	; 0x90
 80064b4:	f7ff ffe8 	bl	8006488 <XPT2046_ReadAdc>
 80064b8:	4603      	mov	r3, r0
 80064ba:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 80064bc:	2001      	movs	r0, #1
 80064be:	f7ff ff46 	bl	800634e <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 80064c2:	20d0      	movs	r0, #208	; 0xd0
 80064c4:	f7ff ffe0 	bl	8006488 <XPT2046_ReadAdc>
 80064c8:	4603      	mov	r3, r0
 80064ca:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	89fa      	ldrh	r2, [r7, #14]
 80064d0:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	89ba      	ldrh	r2, [r7, #12]
 80064d6:	801a      	strh	r2, [r3, #0]

}
 80064d8:	bf00      	nop
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b092      	sub	sp, #72	; 0x48
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 80064ee:	f107 0308 	add.w	r3, r7, #8
 80064f2:	2228      	movs	r2, #40	; 0x28
 80064f4:	2100      	movs	r1, #0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f003 ffca 	bl	800a490 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 80064fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006500:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff ffce 	bl	80064a8 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 800650c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006510:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	3348      	adds	r3, #72	; 0x48
 8006518:	443b      	add	r3, r7
 800651a:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 800651e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006522:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8006526:	330a      	adds	r3, #10
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	3348      	adds	r3, #72	; 0x48
 800652c:	443b      	add	r3, r7
 800652e:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8006532:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006536:	3301      	adds	r3, #1
 8006538:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 800653c:	2110      	movs	r1, #16
 800653e:	4871      	ldr	r0, [pc, #452]	; (8006704 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006540:	f001 fb1e 	bl	8007b80 <HAL_GPIO_ReadPin>
 8006544:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <XPT2046_ReadAdc_Smooth_XY+0x72>
 800654a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800654e:	2b09      	cmp	r3, #9
 8006550:	d9d4      	bls.n	80064fc <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8006552:	2110      	movs	r1, #16
 8006554:	486b      	ldr	r0, [pc, #428]	; (8006704 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006556:	f001 fb13 	bl	8007b80 <HAL_GPIO_ReadPin>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8006560:	4b69      	ldr	r3, [pc, #420]	; (8006708 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8006566:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800656a:	2b0a      	cmp	r3, #10
 800656c:	f040 80c4 	bne.w	80066f8 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8006570:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006574:	643b      	str	r3, [r7, #64]	; 0x40
 8006576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 800657a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800657e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800658a:	e02b      	b.n	80065e4 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 800658c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	3348      	adds	r3, #72	; 0x48
 8006594:	443b      	add	r3, r7
 8006596:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800659a:	461a      	mov	r2, r3
 800659c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800659e:	4293      	cmp	r3, r2
 80065a0:	dd08      	ble.n	80065b4 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 80065a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	3348      	adds	r3, #72	; 0x48
 80065aa:	443b      	add	r3, r7
 80065ac:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065b0:	643b      	str	r3, [r7, #64]	; 0x40
 80065b2:	e012      	b.n	80065da <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 80065b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	3348      	adds	r3, #72	; 0x48
 80065bc:	443b      	add	r3, r7
 80065be:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065c2:	461a      	mov	r2, r3
 80065c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c6:	4293      	cmp	r3, r2
 80065c8:	da07      	bge.n	80065da <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 80065ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	3348      	adds	r3, #72	; 0x48
 80065d2:	443b      	add	r3, r7
 80065d4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 80065da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065de:	3301      	adds	r3, #1
 80065e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80065e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065e8:	2b09      	cmp	r3, #9
 80065ea:	d9cf      	bls.n	800658c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80065f2:	e02f      	b.n	8006654 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 80065f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065f8:	330a      	adds	r3, #10
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	3348      	adds	r3, #72	; 0x48
 80065fe:	443b      	add	r3, r7
 8006600:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006604:	461a      	mov	r2, r3
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	4293      	cmp	r3, r2
 800660a:	dd09      	ble.n	8006620 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 800660c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006610:	330a      	adds	r3, #10
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	3348      	adds	r3, #72	; 0x48
 8006616:	443b      	add	r3, r7
 8006618:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800661c:	63bb      	str	r3, [r7, #56]	; 0x38
 800661e:	e014      	b.n	800664a <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8006620:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006624:	330a      	adds	r3, #10
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	3348      	adds	r3, #72	; 0x48
 800662a:	443b      	add	r3, r7
 800662c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006630:	461a      	mov	r2, r3
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	4293      	cmp	r3, r2
 8006636:	da08      	bge.n	800664a <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8006638:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800663c:	330a      	adds	r3, #10
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	3348      	adds	r3, #72	; 0x48
 8006642:	443b      	add	r3, r7
 8006644:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 800664a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800664e:	3301      	adds	r3, #1
 8006650:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006654:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006658:	2b09      	cmp	r3, #9
 800665a:	d9cb      	bls.n	80065f4 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 800665c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006660:	461a      	mov	r2, r3
 8006662:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006666:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8006668:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006672:	4413      	add	r3, r2
 8006674:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006678:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 800667a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800667e:	4413      	add	r3, r2
 8006680:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006684:	4413      	add	r3, r2
 8006686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800668a:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 800668c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006690:	4413      	add	r3, r2
 8006692:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006696:	441a      	add	r2, r3
 8006698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669e:	1ad3      	subs	r3, r2, r3
				>> 3;
 80066a0:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 80066a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80066ac:	461a      	mov	r2, r3
 80066ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80066b2:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 80066b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80066b8:	4413      	add	r3, r2
 80066ba:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80066be:	4413      	add	r3, r2
 80066c0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80066c4:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 80066c6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80066ca:	4413      	add	r3, r2
 80066cc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80066d0:	4413      	add	r3, r2
 80066d2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80066d6:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 80066d8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80066dc:	4413      	add	r3, r2
 80066de:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80066e2:	441a      	add	r2, r3
 80066e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	1ad3      	subs	r3, r2, r3
				>> 3;
 80066ec:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	805a      	strh	r2, [r3, #2]

		return 1;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 80066f8:	2300      	movs	r3, #0

}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3748      	adds	r7, #72	; 0x48
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40011800 	.word	0x40011800
 8006708:	20000d20 	.word	0x20000d20

0800670c <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 800670c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8006718:	2301      	movs	r3, #1
 800671a:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fedd 	bl	80064e0 <XPT2046_ReadAdc_Smooth_XY>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d06e      	beq.n	800680a <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006732:	893b      	ldrh	r3, [r7, #8]
 8006734:	4618      	mov	r0, r3
 8006736:	f7f9 fed1 	bl	80004dc <__aeabi_i2d>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7f9 ff35 	bl	80005b0 <__aeabi_dmul>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4690      	mov	r8, r2
 800674c:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006754:	897b      	ldrh	r3, [r7, #10]
 8006756:	4618      	mov	r0, r3
 8006758:	f7f9 fec0 	bl	80004dc <__aeabi_i2d>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4620      	mov	r0, r4
 8006762:	4629      	mov	r1, r5
 8006764:	f7f9 ff24 	bl	80005b0 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4640      	mov	r0, r8
 800676e:	4649      	mov	r1, r9
 8006770:	f7f9 fd68 	bl	8000244 <__adddf3>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4610      	mov	r0, r2
 800677a:	4619      	mov	r1, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006782:	f7f9 fd5f 	bl	8000244 <__adddf3>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
 800678e:	f7fa f9d1 	bl	8000b34 <__aeabi_d2uiz>
 8006792:	4603      	mov	r3, r0
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80067a0:	893b      	ldrh	r3, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7f9 fe9a 	bl	80004dc <__aeabi_i2d>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f7f9 fefe 	bl	80005b0 <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4690      	mov	r8, r2
 80067ba:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80067c2:	897b      	ldrh	r3, [r7, #10]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7f9 fe89 	bl	80004dc <__aeabi_i2d>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 feed 	bl	80005b0 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4640      	mov	r0, r8
 80067dc:	4649      	mov	r1, r9
 80067de:	f7f9 fd31 	bl	8000244 <__adddf3>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4610      	mov	r0, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80067f0:	f7f9 fd28 	bl	8000244 <__adddf3>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	f7fa f99a 	bl	8000b34 <__aeabi_d2uiz>
 8006800:	4603      	mov	r3, r0
 8006802:	b29a      	uxth	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	805a      	strh	r2, [r3, #2]
 8006808:	e001      	b.n	800680e <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 800680e:	7bfb      	ldrb	r3, [r7, #15]

}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800681c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800681c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800681e:	e003      	b.n	8006828 <LoopCopyDataInit>

08006820 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006822:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006824:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006826:	3104      	adds	r1, #4

08006828 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006828:	480a      	ldr	r0, [pc, #40]	; (8006854 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800682c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800682e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006830:	d3f6      	bcc.n	8006820 <CopyDataInit>
  ldr r2, =_sbss
 8006832:	4a0a      	ldr	r2, [pc, #40]	; (800685c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006834:	e002      	b.n	800683c <LoopFillZerobss>

08006836 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006836:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006838:	f842 3b04 	str.w	r3, [r2], #4

0800683c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800683c:	4b08      	ldr	r3, [pc, #32]	; (8006860 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800683e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006840:	d3f9      	bcc.n	8006836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006842:	f7fe fea5 	bl	8005590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006846:	f003 fdff 	bl	800a448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800684a:	f7fc ff6d 	bl	8003728 <main>
  bx lr
 800684e:	4770      	bx	lr
  ldr r3, =_sidata
 8006850:	08016d94 	.word	0x08016d94
  ldr r0, =_sdata
 8006854:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006858:	200000b0 	.word	0x200000b0
  ldr r2, =_sbss
 800685c:	200000b0 	.word	0x200000b0
  ldr r3, = _ebss
 8006860:	20000d38 	.word	0x20000d38

08006864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006864:	e7fe      	b.n	8006864 <ADC1_2_IRQHandler>
	...

08006868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800686c:	4b08      	ldr	r3, [pc, #32]	; (8006890 <HAL_Init+0x28>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a07      	ldr	r2, [pc, #28]	; (8006890 <HAL_Init+0x28>)
 8006872:	f043 0310 	orr.w	r3, r3, #16
 8006876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006878:	2003      	movs	r0, #3
 800687a:	f000 fb5f 	bl	8006f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800687e:	2000      	movs	r0, #0
 8006880:	f000 f808 	bl	8006894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006884:	f7fe fce2 	bl	800524c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40022000 	.word	0x40022000

08006894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800689c:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <HAL_InitTick+0x54>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_InitTick+0x58>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	4619      	mov	r1, r3
 80068a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fb77 	bl	8006fa6 <HAL_SYSTICK_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e00e      	b.n	80068e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b0f      	cmp	r3, #15
 80068c6:	d80a      	bhi.n	80068de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068c8:	2200      	movs	r2, #0
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d0:	f000 fb3f 	bl	8006f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068d4:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <HAL_InitTick+0x5c>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	2000000c 	.word	0x2000000c
 80068ec:	20000044 	.word	0x20000044
 80068f0:	20000040 	.word	0x20000040

080068f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <HAL_IncTick+0x1c>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b05      	ldr	r3, [pc, #20]	; (8006914 <HAL_IncTick+0x20>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4413      	add	r3, r2
 8006904:	4a03      	ldr	r2, [pc, #12]	; (8006914 <HAL_IncTick+0x20>)
 8006906:	6013      	str	r3, [r2, #0]
}
 8006908:	bf00      	nop
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr
 8006910:	20000044 	.word	0x20000044
 8006914:	20000d24 	.word	0x20000d24

08006918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return uwTick;
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <HAL_GetTick+0x10>)
 800691e:	681b      	ldr	r3, [r3, #0]
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	20000d24 	.word	0x20000d24

0800692c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006934:	f7ff fff0 	bl	8006918 <HAL_GetTick>
 8006938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006944:	d005      	beq.n	8006952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <HAL_Delay+0x44>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006952:	bf00      	nop
 8006954:	f7ff ffe0 	bl	8006918 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	429a      	cmp	r2, r3
 8006962:	d8f7      	bhi.n	8006954 <HAL_Delay+0x28>
  {
  }
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000044 	.word	0x20000044

08006974 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e0ce      	b.n	8006b34 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fb f9ee 	bl	8001d94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9bd 	bl	8006d38 <ADC_ConversionStop_Disable>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 80a9 	bne.w	8006b22 <HAL_ADC_Init+0x1ae>
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 80a5 	bne.w	8006b22 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80069e0:	f023 0302 	bic.w	r3, r3, #2
 80069e4:	f043 0202 	orr.w	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4951      	ldr	r1, [pc, #324]	; (8006b3c <HAL_ADC_Init+0x1c8>)
 80069f6:	428b      	cmp	r3, r1
 80069f8:	d10a      	bne.n	8006a10 <HAL_ADC_Init+0x9c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a02:	d002      	beq.n	8006a0a <HAL_ADC_Init+0x96>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	e004      	b.n	8006a14 <HAL_ADC_Init+0xa0>
 8006a0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a0e:	e001      	b.n	8006a14 <HAL_ADC_Init+0xa0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8006a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2c:	d003      	beq.n	8006a36 <HAL_ADC_Init+0xc2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d102      	bne.n	8006a3c <HAL_ADC_Init+0xc8>
 8006a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a3a:	e000      	b.n	8006a3e <HAL_ADC_Init+0xca>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d119      	bne.n	8006a80 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	035a      	lsls	r2, r3, #13
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	e00b      	b.n	8006a80 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	f043 0220 	orr.w	r2, r3, #32
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	f043 0201 	orr.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	4b29      	ldr	r3, [pc, #164]	; (8006b40 <HAL_ADC_Init+0x1cc>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab0:	d003      	beq.n	8006aba <HAL_ADC_Init+0x146>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d104      	bne.n	8006ac4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	051b      	lsls	r3, r3, #20
 8006ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <HAL_ADC_Init+0x1d0>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d10b      	bne.n	8006b00 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	f043 0201 	orr.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006afe:	e018      	b.n	8006b32 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	f023 0312 	bic.w	r3, r3, #18
 8006b08:	f043 0210 	orr.w	r2, r3, #16
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	f043 0201 	orr.w	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b20:	e007      	b.n	8006b32 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	f043 0210 	orr.w	r2, r3, #16
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40013c00 	.word	0x40013c00
 8006b40:	ffe1f7fd 	.word	0xffe1f7fd
 8006b44:	ff1f0efe 	.word	0xff1f0efe

08006b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_ADC_ConfigChannel+0x20>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e0dc      	b.n	8006d22 <HAL_ADC_ConfigChannel+0x1da>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d81c      	bhi.n	8006bb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	3b05      	subs	r3, #5
 8006b8a:	221f      	movs	r2, #31
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	4019      	ands	r1, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3b05      	subs	r3, #5
 8006ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	635a      	str	r2, [r3, #52]	; 0x34
 8006bb0:	e03c      	b.n	8006c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b0c      	cmp	r3, #12
 8006bb8:	d81c      	bhi.n	8006bf4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	3b23      	subs	r3, #35	; 0x23
 8006bcc:	221f      	movs	r2, #31
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	4019      	ands	r1, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	3b23      	subs	r3, #35	; 0x23
 8006be6:	fa00 f203 	lsl.w	r2, r0, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8006bf2:	e01b      	b.n	8006c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	3b41      	subs	r3, #65	; 0x41
 8006c06:	221f      	movs	r2, #31
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	4019      	ands	r1, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3b41      	subs	r3, #65	; 0x41
 8006c20:	fa00 f203 	lsl.w	r2, r0, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b09      	cmp	r3, #9
 8006c32:	d91c      	bls.n	8006c6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68d9      	ldr	r1, [r3, #12]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4413      	add	r3, r2
 8006c44:	3b1e      	subs	r3, #30
 8006c46:	2207      	movs	r2, #7
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	4019      	ands	r1, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	6898      	ldr	r0, [r3, #8]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3b1e      	subs	r3, #30
 8006c60:	fa00 f203 	lsl.w	r2, r0, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	e019      	b.n	8006ca2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6919      	ldr	r1, [r3, #16]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
 8006c7e:	2207      	movs	r2, #7
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	4019      	ands	r1, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	6898      	ldr	r0, [r3, #8]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4613      	mov	r3, r2
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	fa00 f203 	lsl.w	r2, r0, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d003      	beq.n	8006cb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006cae:	2b11      	cmp	r3, #17
 8006cb0:	d132      	bne.n	8006d18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1d      	ldr	r2, [pc, #116]	; (8006d2c <HAL_ADC_ConfigChannel+0x1e4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d125      	bne.n	8006d08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d126      	bne.n	8006d18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006cd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d11a      	bne.n	8006d18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <HAL_ADC_ConfigChannel+0x1e8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a13      	ldr	r2, [pc, #76]	; (8006d34 <HAL_ADC_ConfigChannel+0x1ec>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	0c9a      	lsrs	r2, r3, #18
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006cf8:	e002      	b.n	8006d00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f9      	bne.n	8006cfa <HAL_ADC_ConfigChannel+0x1b2>
 8006d06:	e007      	b.n	8006d18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0c:	f043 0220 	orr.w	r2, r3, #32
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr
 8006d2c:	40012400 	.word	0x40012400
 8006d30:	2000000c 	.word	0x2000000c
 8006d34:	431bde83 	.word	0x431bde83

08006d38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d127      	bne.n	8006da2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0201 	bic.w	r2, r2, #1
 8006d60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d62:	f7ff fdd9 	bl	8006918 <HAL_GetTick>
 8006d66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006d68:	e014      	b.n	8006d94 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d6a:	f7ff fdd5 	bl	8006918 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d90d      	bls.n	8006d94 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f043 0210 	orr.w	r2, r3, #16
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	f043 0201 	orr.w	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e007      	b.n	8006da4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d0e3      	beq.n	8006d6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <NVIC_SetPriorityGrouping+0x44>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dc8:	4013      	ands	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dde:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <NVIC_SetPriorityGrouping+0x44>)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	60d3      	str	r3, [r2, #12]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	e000ed00 	.word	0xe000ed00

08006df4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <NVIC_GetPriorityGrouping+0x18>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	f003 0307 	and.w	r3, r3, #7
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	e000ed00 	.word	0xe000ed00

08006e10 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	f003 021f 	and.w	r2, r3, #31
 8006e20:	4906      	ldr	r1, [pc, #24]	; (8006e3c <NVIC_EnableIRQ+0x2c>)
 8006e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	2001      	movs	r0, #1
 8006e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr
 8006e3c:	e000e100 	.word	0xe000e100

08006e40 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	da0b      	bge.n	8006e6c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	490c      	ldr	r1, [pc, #48]	; (8006e8c <NVIC_SetPriority+0x4c>)
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	3b04      	subs	r3, #4
 8006e62:	0112      	lsls	r2, r2, #4
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	440b      	add	r3, r1
 8006e68:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e6a:	e009      	b.n	8006e80 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	4907      	ldr	r1, [pc, #28]	; (8006e90 <NVIC_SetPriority+0x50>)
 8006e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e76:	0112      	lsls	r2, r2, #4
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	e000ed00 	.word	0xe000ed00
 8006e90:	e000e100 	.word	0xe000e100

08006e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b089      	sub	sp, #36	; 0x24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f1c3 0307 	rsb	r3, r3, #7
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	bf28      	it	cs
 8006eb2:	2304      	movcs	r3, #4
 8006eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2b06      	cmp	r3, #6
 8006ebc:	d902      	bls.n	8006ec4 <NVIC_EncodePriority+0x30>
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3b03      	subs	r3, #3
 8006ec2:	e000      	b.n	8006ec6 <NVIC_EncodePriority+0x32>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	43da      	mvns	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee6:	43d9      	mvns	r1, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eec:	4313      	orrs	r3, r2
         );
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3724      	adds	r7, #36	; 0x24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f08:	d301      	bcc.n	8006f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e00f      	b.n	8006f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f0e:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <SysTick_Config+0x40>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f16:	210f      	movs	r1, #15
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f1c:	f7ff ff90 	bl	8006e40 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <SysTick_Config+0x40>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f26:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <SysTick_Config+0x40>)
 8006f28:	2207      	movs	r2, #7
 8006f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	e000e010 	.word	0xe000e010

08006f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff ff31 	bl	8006dac <NVIC_SetPriorityGrouping>
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b086      	sub	sp, #24
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	4603      	mov	r3, r0
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f64:	f7ff ff46 	bl	8006df4 <NVIC_GetPriorityGrouping>
 8006f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	6978      	ldr	r0, [r7, #20]
 8006f70:	f7ff ff90 	bl	8006e94 <NVIC_EncodePriority>
 8006f74:	4602      	mov	r2, r0
 8006f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff ff5f 	bl	8006e40 <NVIC_SetPriority>
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	4603      	mov	r3, r0
 8006f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff ff39 	bl	8006e10 <NVIC_EnableIRQ>
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff ffa2 	bl	8006ef8 <SysTick_Config>
 8006fb4:	4603      	mov	r3, r0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e059      	b.n	800708a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4b2d      	ldr	r3, [pc, #180]	; (8007094 <HAL_DMA_Init+0xd4>)
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d80f      	bhi.n	8007002 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	; (8007098 <HAL_DMA_Init+0xd8>)
 8006fea:	4413      	add	r3, r2
 8006fec:	4a2b      	ldr	r2, [pc, #172]	; (800709c <HAL_DMA_Init+0xdc>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	009a      	lsls	r2, r3, #2
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a28      	ldr	r2, [pc, #160]	; (80070a0 <HAL_DMA_Init+0xe0>)
 8006ffe:	63da      	str	r2, [r3, #60]	; 0x3c
 8007000:	e00e      	b.n	8007020 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	4b26      	ldr	r3, [pc, #152]	; (80070a4 <HAL_DMA_Init+0xe4>)
 800700a:	4413      	add	r3, r2
 800700c:	4a23      	ldr	r2, [pc, #140]	; (800709c <HAL_DMA_Init+0xdc>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	009a      	lsls	r2, r3, #2
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <HAL_DMA_Init+0xe8>)
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007036:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800703a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800705c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	40020407 	.word	0x40020407
 8007098:	bffdfff8 	.word	0xbffdfff8
 800709c:	cccccccd 	.word	0xcccccccd
 80070a0:	40020000 	.word	0x40020000
 80070a4:	bffdfbf8 	.word	0xbffdfbf8
 80070a8:	40020400 	.word	0x40020400

080070ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_DMA_Start_IT+0x20>
 80070c8:	2302      	movs	r3, #2
 80070ca:	e04a      	b.n	8007162 <HAL_DMA_Start_IT+0xb6>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d13a      	bne.n	8007154 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2202      	movs	r2, #2
 80070e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fb76 	bl	80077f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 020e 	orr.w	r2, r2, #14
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e00f      	b.n	8007142 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0204 	bic.w	r2, r2, #4
 8007130:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 020a 	orr.w	r2, r2, #10
 8007140:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0201 	orr.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e005      	b.n	8007160 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800715c:	2302      	movs	r3, #2
 800715e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800717e:	2b02      	cmp	r3, #2
 8007180:	d005      	beq.n	800718e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2204      	movs	r2, #4
 8007186:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
 800718c:	e0d6      	b.n	800733c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 020e 	bic.w	r2, r2, #14
 800719c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0201 	bic.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	4b64      	ldr	r3, [pc, #400]	; (8007348 <HAL_DMA_Abort_IT+0x1dc>)
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d958      	bls.n	800726c <HAL_DMA_Abort_IT+0x100>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a63      	ldr	r2, [pc, #396]	; (800734c <HAL_DMA_Abort_IT+0x1e0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d04f      	beq.n	8007264 <HAL_DMA_Abort_IT+0xf8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a61      	ldr	r2, [pc, #388]	; (8007350 <HAL_DMA_Abort_IT+0x1e4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d048      	beq.n	8007260 <HAL_DMA_Abort_IT+0xf4>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a60      	ldr	r2, [pc, #384]	; (8007354 <HAL_DMA_Abort_IT+0x1e8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d040      	beq.n	800725a <HAL_DMA_Abort_IT+0xee>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a5e      	ldr	r2, [pc, #376]	; (8007358 <HAL_DMA_Abort_IT+0x1ec>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d038      	beq.n	8007254 <HAL_DMA_Abort_IT+0xe8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a5d      	ldr	r2, [pc, #372]	; (800735c <HAL_DMA_Abort_IT+0x1f0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d030      	beq.n	800724e <HAL_DMA_Abort_IT+0xe2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a5b      	ldr	r2, [pc, #364]	; (8007360 <HAL_DMA_Abort_IT+0x1f4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d028      	beq.n	8007248 <HAL_DMA_Abort_IT+0xdc>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a53      	ldr	r2, [pc, #332]	; (8007348 <HAL_DMA_Abort_IT+0x1dc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d020      	beq.n	8007242 <HAL_DMA_Abort_IT+0xd6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a57      	ldr	r2, [pc, #348]	; (8007364 <HAL_DMA_Abort_IT+0x1f8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d019      	beq.n	800723e <HAL_DMA_Abort_IT+0xd2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a56      	ldr	r2, [pc, #344]	; (8007368 <HAL_DMA_Abort_IT+0x1fc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d012      	beq.n	800723a <HAL_DMA_Abort_IT+0xce>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a54      	ldr	r2, [pc, #336]	; (800736c <HAL_DMA_Abort_IT+0x200>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00a      	beq.n	8007234 <HAL_DMA_Abort_IT+0xc8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a53      	ldr	r2, [pc, #332]	; (8007370 <HAL_DMA_Abort_IT+0x204>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d102      	bne.n	800722e <HAL_DMA_Abort_IT+0xc2>
 8007228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800722c:	e01b      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 800722e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007232:	e018      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 8007234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007238:	e015      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 800723a:	2310      	movs	r3, #16
 800723c:	e013      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 800723e:	2301      	movs	r3, #1
 8007240:	e011      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 8007242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007246:	e00e      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 8007248:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800724c:	e00b      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 800724e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007252:	e008      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 8007254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007258:	e005      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 800725a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800725e:	e002      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 8007260:	2310      	movs	r3, #16
 8007262:	e000      	b.n	8007266 <HAL_DMA_Abort_IT+0xfa>
 8007264:	2301      	movs	r3, #1
 8007266:	4a43      	ldr	r2, [pc, #268]	; (8007374 <HAL_DMA_Abort_IT+0x208>)
 8007268:	6053      	str	r3, [r2, #4]
 800726a:	e057      	b.n	800731c <HAL_DMA_Abort_IT+0x1b0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a36      	ldr	r2, [pc, #216]	; (800734c <HAL_DMA_Abort_IT+0x1e0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d04f      	beq.n	8007316 <HAL_DMA_Abort_IT+0x1aa>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a35      	ldr	r2, [pc, #212]	; (8007350 <HAL_DMA_Abort_IT+0x1e4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d048      	beq.n	8007312 <HAL_DMA_Abort_IT+0x1a6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a33      	ldr	r2, [pc, #204]	; (8007354 <HAL_DMA_Abort_IT+0x1e8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d040      	beq.n	800730c <HAL_DMA_Abort_IT+0x1a0>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a32      	ldr	r2, [pc, #200]	; (8007358 <HAL_DMA_Abort_IT+0x1ec>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d038      	beq.n	8007306 <HAL_DMA_Abort_IT+0x19a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a30      	ldr	r2, [pc, #192]	; (800735c <HAL_DMA_Abort_IT+0x1f0>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d030      	beq.n	8007300 <HAL_DMA_Abort_IT+0x194>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2f      	ldr	r2, [pc, #188]	; (8007360 <HAL_DMA_Abort_IT+0x1f4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d028      	beq.n	80072fa <HAL_DMA_Abort_IT+0x18e>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a26      	ldr	r2, [pc, #152]	; (8007348 <HAL_DMA_Abort_IT+0x1dc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d020      	beq.n	80072f4 <HAL_DMA_Abort_IT+0x188>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2b      	ldr	r2, [pc, #172]	; (8007364 <HAL_DMA_Abort_IT+0x1f8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d019      	beq.n	80072f0 <HAL_DMA_Abort_IT+0x184>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a29      	ldr	r2, [pc, #164]	; (8007368 <HAL_DMA_Abort_IT+0x1fc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d012      	beq.n	80072ec <HAL_DMA_Abort_IT+0x180>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a28      	ldr	r2, [pc, #160]	; (800736c <HAL_DMA_Abort_IT+0x200>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00a      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x17a>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a26      	ldr	r2, [pc, #152]	; (8007370 <HAL_DMA_Abort_IT+0x204>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d102      	bne.n	80072e0 <HAL_DMA_Abort_IT+0x174>
 80072da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072de:	e01b      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 80072e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072e4:	e018      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 80072e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ea:	e015      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 80072ec:	2310      	movs	r3, #16
 80072ee:	e013      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e011      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 80072f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072f8:	e00e      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 80072fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80072fe:	e00b      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 8007300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007304:	e008      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 8007306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800730a:	e005      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 800730c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007310:	e002      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 8007312:	2310      	movs	r3, #16
 8007314:	e000      	b.n	8007318 <HAL_DMA_Abort_IT+0x1ac>
 8007316:	2301      	movs	r3, #1
 8007318:	4a17      	ldr	r2, [pc, #92]	; (8007378 <HAL_DMA_Abort_IT+0x20c>)
 800731a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
    } 
  }
  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40020080 	.word	0x40020080
 800734c:	40020008 	.word	0x40020008
 8007350:	4002001c 	.word	0x4002001c
 8007354:	40020030 	.word	0x40020030
 8007358:	40020044 	.word	0x40020044
 800735c:	40020058 	.word	0x40020058
 8007360:	4002006c 	.word	0x4002006c
 8007364:	40020408 	.word	0x40020408
 8007368:	4002041c 	.word	0x4002041c
 800736c:	40020430 	.word	0x40020430
 8007370:	40020444 	.word	0x40020444
 8007374:	40020400 	.word	0x40020400
 8007378:	40020000 	.word	0x40020000

0800737c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	2204      	movs	r2, #4
 800739a:	409a      	lsls	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4013      	ands	r3, r2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80f1 	beq.w	8007588 <HAL_DMA_IRQHandler+0x20c>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80eb 	beq.w	8007588 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d107      	bne.n	80073d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0204 	bic.w	r2, r2, #4
 80073ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b5f      	ldr	r3, [pc, #380]	; (8007554 <HAL_DMA_IRQHandler+0x1d8>)
 80073d8:	429a      	cmp	r2, r3
 80073da:	d958      	bls.n	800748e <HAL_DMA_IRQHandler+0x112>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a5d      	ldr	r2, [pc, #372]	; (8007558 <HAL_DMA_IRQHandler+0x1dc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d04f      	beq.n	8007486 <HAL_DMA_IRQHandler+0x10a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a5c      	ldr	r2, [pc, #368]	; (800755c <HAL_DMA_IRQHandler+0x1e0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d048      	beq.n	8007482 <HAL_DMA_IRQHandler+0x106>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a5a      	ldr	r2, [pc, #360]	; (8007560 <HAL_DMA_IRQHandler+0x1e4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d040      	beq.n	800747c <HAL_DMA_IRQHandler+0x100>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a59      	ldr	r2, [pc, #356]	; (8007564 <HAL_DMA_IRQHandler+0x1e8>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d038      	beq.n	8007476 <HAL_DMA_IRQHandler+0xfa>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a57      	ldr	r2, [pc, #348]	; (8007568 <HAL_DMA_IRQHandler+0x1ec>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d030      	beq.n	8007470 <HAL_DMA_IRQHandler+0xf4>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a56      	ldr	r2, [pc, #344]	; (800756c <HAL_DMA_IRQHandler+0x1f0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d028      	beq.n	800746a <HAL_DMA_IRQHandler+0xee>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a4d      	ldr	r2, [pc, #308]	; (8007554 <HAL_DMA_IRQHandler+0x1d8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d020      	beq.n	8007464 <HAL_DMA_IRQHandler+0xe8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a52      	ldr	r2, [pc, #328]	; (8007570 <HAL_DMA_IRQHandler+0x1f4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d019      	beq.n	8007460 <HAL_DMA_IRQHandler+0xe4>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a50      	ldr	r2, [pc, #320]	; (8007574 <HAL_DMA_IRQHandler+0x1f8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d012      	beq.n	800745c <HAL_DMA_IRQHandler+0xe0>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a4f      	ldr	r2, [pc, #316]	; (8007578 <HAL_DMA_IRQHandler+0x1fc>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00a      	beq.n	8007456 <HAL_DMA_IRQHandler+0xda>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a4d      	ldr	r2, [pc, #308]	; (800757c <HAL_DMA_IRQHandler+0x200>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d102      	bne.n	8007450 <HAL_DMA_IRQHandler+0xd4>
 800744a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800744e:	e01b      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007450:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007454:	e018      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745a:	e015      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	e013      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007460:	2304      	movs	r3, #4
 8007462:	e011      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007464:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007468:	e00e      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 800746a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800746e:	e00b      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007474:	e008      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800747a:	e005      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 800747c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007480:	e002      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007482:	2340      	movs	r3, #64	; 0x40
 8007484:	e000      	b.n	8007488 <HAL_DMA_IRQHandler+0x10c>
 8007486:	2304      	movs	r3, #4
 8007488:	4a3d      	ldr	r2, [pc, #244]	; (8007580 <HAL_DMA_IRQHandler+0x204>)
 800748a:	6053      	str	r3, [r2, #4]
 800748c:	e057      	b.n	800753e <HAL_DMA_IRQHandler+0x1c2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a31      	ldr	r2, [pc, #196]	; (8007558 <HAL_DMA_IRQHandler+0x1dc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d04f      	beq.n	8007538 <HAL_DMA_IRQHandler+0x1bc>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2f      	ldr	r2, [pc, #188]	; (800755c <HAL_DMA_IRQHandler+0x1e0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d048      	beq.n	8007534 <HAL_DMA_IRQHandler+0x1b8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a2e      	ldr	r2, [pc, #184]	; (8007560 <HAL_DMA_IRQHandler+0x1e4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d040      	beq.n	800752e <HAL_DMA_IRQHandler+0x1b2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <HAL_DMA_IRQHandler+0x1e8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d038      	beq.n	8007528 <HAL_DMA_IRQHandler+0x1ac>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2b      	ldr	r2, [pc, #172]	; (8007568 <HAL_DMA_IRQHandler+0x1ec>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d030      	beq.n	8007522 <HAL_DMA_IRQHandler+0x1a6>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a29      	ldr	r2, [pc, #164]	; (800756c <HAL_DMA_IRQHandler+0x1f0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d028      	beq.n	800751c <HAL_DMA_IRQHandler+0x1a0>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a21      	ldr	r2, [pc, #132]	; (8007554 <HAL_DMA_IRQHandler+0x1d8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d020      	beq.n	8007516 <HAL_DMA_IRQHandler+0x19a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a25      	ldr	r2, [pc, #148]	; (8007570 <HAL_DMA_IRQHandler+0x1f4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d019      	beq.n	8007512 <HAL_DMA_IRQHandler+0x196>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a24      	ldr	r2, [pc, #144]	; (8007574 <HAL_DMA_IRQHandler+0x1f8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d012      	beq.n	800750e <HAL_DMA_IRQHandler+0x192>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a22      	ldr	r2, [pc, #136]	; (8007578 <HAL_DMA_IRQHandler+0x1fc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00a      	beq.n	8007508 <HAL_DMA_IRQHandler+0x18c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a21      	ldr	r2, [pc, #132]	; (800757c <HAL_DMA_IRQHandler+0x200>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d102      	bne.n	8007502 <HAL_DMA_IRQHandler+0x186>
 80074fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007500:	e01b      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007502:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007506:	e018      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800750c:	e015      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 800750e:	2340      	movs	r3, #64	; 0x40
 8007510:	e013      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007512:	2304      	movs	r3, #4
 8007514:	e011      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007516:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800751a:	e00e      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 800751c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007520:	e00b      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007522:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007526:	e008      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800752c:	e005      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 800752e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007532:	e002      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	e000      	b.n	800753a <HAL_DMA_IRQHandler+0x1be>
 8007538:	2304      	movs	r3, #4
 800753a:	4a12      	ldr	r2, [pc, #72]	; (8007584 <HAL_DMA_IRQHandler+0x208>)
 800753c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 8136 	beq.w	80077b4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007550:	e130      	b.n	80077b4 <HAL_DMA_IRQHandler+0x438>
 8007552:	bf00      	nop
 8007554:	40020080 	.word	0x40020080
 8007558:	40020008 	.word	0x40020008
 800755c:	4002001c 	.word	0x4002001c
 8007560:	40020030 	.word	0x40020030
 8007564:	40020044 	.word	0x40020044
 8007568:	40020058 	.word	0x40020058
 800756c:	4002006c 	.word	0x4002006c
 8007570:	40020408 	.word	0x40020408
 8007574:	4002041c 	.word	0x4002041c
 8007578:	40020430 	.word	0x40020430
 800757c:	40020444 	.word	0x40020444
 8007580:	40020400 	.word	0x40020400
 8007584:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	2202      	movs	r2, #2
 800758e:	409a      	lsls	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4013      	ands	r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80dd 	beq.w	8007754 <HAL_DMA_IRQHandler+0x3d8>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 80d7 	beq.w	8007754 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10b      	bne.n	80075cc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 020a 	bic.w	r2, r2, #10
 80075c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b7b      	ldr	r3, [pc, #492]	; (80077c0 <HAL_DMA_IRQHandler+0x444>)
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d958      	bls.n	800768a <HAL_DMA_IRQHandler+0x30e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a79      	ldr	r2, [pc, #484]	; (80077c4 <HAL_DMA_IRQHandler+0x448>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d04f      	beq.n	8007682 <HAL_DMA_IRQHandler+0x306>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a78      	ldr	r2, [pc, #480]	; (80077c8 <HAL_DMA_IRQHandler+0x44c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d048      	beq.n	800767e <HAL_DMA_IRQHandler+0x302>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a76      	ldr	r2, [pc, #472]	; (80077cc <HAL_DMA_IRQHandler+0x450>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d040      	beq.n	8007678 <HAL_DMA_IRQHandler+0x2fc>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a75      	ldr	r2, [pc, #468]	; (80077d0 <HAL_DMA_IRQHandler+0x454>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d038      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2f6>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a73      	ldr	r2, [pc, #460]	; (80077d4 <HAL_DMA_IRQHandler+0x458>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d030      	beq.n	800766c <HAL_DMA_IRQHandler+0x2f0>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a72      	ldr	r2, [pc, #456]	; (80077d8 <HAL_DMA_IRQHandler+0x45c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d028      	beq.n	8007666 <HAL_DMA_IRQHandler+0x2ea>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a69      	ldr	r2, [pc, #420]	; (80077c0 <HAL_DMA_IRQHandler+0x444>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d020      	beq.n	8007660 <HAL_DMA_IRQHandler+0x2e4>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a6e      	ldr	r2, [pc, #440]	; (80077dc <HAL_DMA_IRQHandler+0x460>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d019      	beq.n	800765c <HAL_DMA_IRQHandler+0x2e0>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a6c      	ldr	r2, [pc, #432]	; (80077e0 <HAL_DMA_IRQHandler+0x464>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d012      	beq.n	8007658 <HAL_DMA_IRQHandler+0x2dc>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a6b      	ldr	r2, [pc, #428]	; (80077e4 <HAL_DMA_IRQHandler+0x468>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00a      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2d6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a69      	ldr	r2, [pc, #420]	; (80077e8 <HAL_DMA_IRQHandler+0x46c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d102      	bne.n	800764c <HAL_DMA_IRQHandler+0x2d0>
 8007646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800764a:	e01b      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 800764c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007650:	e018      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 8007652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007656:	e015      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 8007658:	2320      	movs	r3, #32
 800765a:	e013      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 800765c:	2302      	movs	r3, #2
 800765e:	e011      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 8007660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007664:	e00e      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 8007666:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800766a:	e00b      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 800766c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007670:	e008      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 8007672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007676:	e005      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 8007678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800767c:	e002      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 800767e:	2320      	movs	r3, #32
 8007680:	e000      	b.n	8007684 <HAL_DMA_IRQHandler+0x308>
 8007682:	2302      	movs	r3, #2
 8007684:	4a59      	ldr	r2, [pc, #356]	; (80077ec <HAL_DMA_IRQHandler+0x470>)
 8007686:	6053      	str	r3, [r2, #4]
 8007688:	e057      	b.n	800773a <HAL_DMA_IRQHandler+0x3be>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a4d      	ldr	r2, [pc, #308]	; (80077c4 <HAL_DMA_IRQHandler+0x448>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d04f      	beq.n	8007734 <HAL_DMA_IRQHandler+0x3b8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a4b      	ldr	r2, [pc, #300]	; (80077c8 <HAL_DMA_IRQHandler+0x44c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d048      	beq.n	8007730 <HAL_DMA_IRQHandler+0x3b4>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a4a      	ldr	r2, [pc, #296]	; (80077cc <HAL_DMA_IRQHandler+0x450>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d040      	beq.n	800772a <HAL_DMA_IRQHandler+0x3ae>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a48      	ldr	r2, [pc, #288]	; (80077d0 <HAL_DMA_IRQHandler+0x454>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d038      	beq.n	8007724 <HAL_DMA_IRQHandler+0x3a8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a47      	ldr	r2, [pc, #284]	; (80077d4 <HAL_DMA_IRQHandler+0x458>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d030      	beq.n	800771e <HAL_DMA_IRQHandler+0x3a2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a45      	ldr	r2, [pc, #276]	; (80077d8 <HAL_DMA_IRQHandler+0x45c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d028      	beq.n	8007718 <HAL_DMA_IRQHandler+0x39c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a3d      	ldr	r2, [pc, #244]	; (80077c0 <HAL_DMA_IRQHandler+0x444>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d020      	beq.n	8007712 <HAL_DMA_IRQHandler+0x396>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a41      	ldr	r2, [pc, #260]	; (80077dc <HAL_DMA_IRQHandler+0x460>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d019      	beq.n	800770e <HAL_DMA_IRQHandler+0x392>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a40      	ldr	r2, [pc, #256]	; (80077e0 <HAL_DMA_IRQHandler+0x464>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d012      	beq.n	800770a <HAL_DMA_IRQHandler+0x38e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a3e      	ldr	r2, [pc, #248]	; (80077e4 <HAL_DMA_IRQHandler+0x468>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00a      	beq.n	8007704 <HAL_DMA_IRQHandler+0x388>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a3d      	ldr	r2, [pc, #244]	; (80077e8 <HAL_DMA_IRQHandler+0x46c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d102      	bne.n	80076fe <HAL_DMA_IRQHandler+0x382>
 80076f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076fc:	e01b      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 80076fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007702:	e018      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 8007704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007708:	e015      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 800770a:	2320      	movs	r3, #32
 800770c:	e013      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 800770e:	2302      	movs	r3, #2
 8007710:	e011      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 8007712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007716:	e00e      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 8007718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800771c:	e00b      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 800771e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007722:	e008      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 8007724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007728:	e005      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 800772a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800772e:	e002      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 8007730:	2320      	movs	r3, #32
 8007732:	e000      	b.n	8007736 <HAL_DMA_IRQHandler+0x3ba>
 8007734:	2302      	movs	r3, #2
 8007736:	4a2e      	ldr	r2, [pc, #184]	; (80077f0 <HAL_DMA_IRQHandler+0x474>)
 8007738:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	2b00      	cmp	r3, #0
 8007748:	d034      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007752:	e02f      	b.n	80077b4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007758:	2208      	movs	r2, #8
 800775a:	409a      	lsls	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d028      	beq.n	80077b6 <HAL_DMA_IRQHandler+0x43a>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d023      	beq.n	80077b6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 020e 	bic.w	r2, r2, #14
 800777c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	2101      	movs	r1, #1
 8007788:	fa01 f202 	lsl.w	r2, r1, r2
 800778c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
    }
  }
  return;
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
}
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40020080 	.word	0x40020080
 80077c4:	40020008 	.word	0x40020008
 80077c8:	4002001c 	.word	0x4002001c
 80077cc:	40020030 	.word	0x40020030
 80077d0:	40020044 	.word	0x40020044
 80077d4:	40020058 	.word	0x40020058
 80077d8:	4002006c 	.word	0x4002006c
 80077dc:	40020408 	.word	0x40020408
 80077e0:	4002041c 	.word	0x4002041c
 80077e4:	40020430 	.word	0x40020430
 80077e8:	40020444 	.word	0x40020444
 80077ec:	40020400 	.word	0x40020400
 80077f0:	40020000 	.word	0x40020000

080077f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780a:	2101      	movs	r1, #1
 800780c:	fa01 f202 	lsl.w	r2, r1, r2
 8007810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b10      	cmp	r3, #16
 8007820:	d108      	bne.n	8007834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007832:	e007      	b.n	8007844 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	60da      	str	r2, [r3, #12]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr
	...

08007850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007850:	b480      	push	{r7}
 8007852:	b08b      	sub	sp, #44	; 0x2c
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8007866:	2300      	movs	r3, #0
 8007868:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800786e:	2300      	movs	r3, #0
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
 8007872:	e179      	b.n	8007b68 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8007874:	2201      	movs	r2, #1
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	4013      	ands	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	429a      	cmp	r2, r3
 800788e:	f040 8168 	bne.w	8007b62 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	4a96      	ldr	r2, [pc, #600]	; (8007af0 <HAL_GPIO_Init+0x2a0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d05e      	beq.n	800795a <HAL_GPIO_Init+0x10a>
 800789c:	4a94      	ldr	r2, [pc, #592]	; (8007af0 <HAL_GPIO_Init+0x2a0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d875      	bhi.n	800798e <HAL_GPIO_Init+0x13e>
 80078a2:	4a94      	ldr	r2, [pc, #592]	; (8007af4 <HAL_GPIO_Init+0x2a4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d058      	beq.n	800795a <HAL_GPIO_Init+0x10a>
 80078a8:	4a92      	ldr	r2, [pc, #584]	; (8007af4 <HAL_GPIO_Init+0x2a4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d86f      	bhi.n	800798e <HAL_GPIO_Init+0x13e>
 80078ae:	4a92      	ldr	r2, [pc, #584]	; (8007af8 <HAL_GPIO_Init+0x2a8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d052      	beq.n	800795a <HAL_GPIO_Init+0x10a>
 80078b4:	4a90      	ldr	r2, [pc, #576]	; (8007af8 <HAL_GPIO_Init+0x2a8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d869      	bhi.n	800798e <HAL_GPIO_Init+0x13e>
 80078ba:	4a90      	ldr	r2, [pc, #576]	; (8007afc <HAL_GPIO_Init+0x2ac>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d04c      	beq.n	800795a <HAL_GPIO_Init+0x10a>
 80078c0:	4a8e      	ldr	r2, [pc, #568]	; (8007afc <HAL_GPIO_Init+0x2ac>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d863      	bhi.n	800798e <HAL_GPIO_Init+0x13e>
 80078c6:	4a8e      	ldr	r2, [pc, #568]	; (8007b00 <HAL_GPIO_Init+0x2b0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d046      	beq.n	800795a <HAL_GPIO_Init+0x10a>
 80078cc:	4a8c      	ldr	r2, [pc, #560]	; (8007b00 <HAL_GPIO_Init+0x2b0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d85d      	bhi.n	800798e <HAL_GPIO_Init+0x13e>
 80078d2:	2b12      	cmp	r3, #18
 80078d4:	d82a      	bhi.n	800792c <HAL_GPIO_Init+0xdc>
 80078d6:	2b12      	cmp	r3, #18
 80078d8:	d859      	bhi.n	800798e <HAL_GPIO_Init+0x13e>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <HAL_GPIO_Init+0x90>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	0800795b 	.word	0x0800795b
 80078e4:	08007935 	.word	0x08007935
 80078e8:	08007947 	.word	0x08007947
 80078ec:	08007989 	.word	0x08007989
 80078f0:	0800798f 	.word	0x0800798f
 80078f4:	0800798f 	.word	0x0800798f
 80078f8:	0800798f 	.word	0x0800798f
 80078fc:	0800798f 	.word	0x0800798f
 8007900:	0800798f 	.word	0x0800798f
 8007904:	0800798f 	.word	0x0800798f
 8007908:	0800798f 	.word	0x0800798f
 800790c:	0800798f 	.word	0x0800798f
 8007910:	0800798f 	.word	0x0800798f
 8007914:	0800798f 	.word	0x0800798f
 8007918:	0800798f 	.word	0x0800798f
 800791c:	0800798f 	.word	0x0800798f
 8007920:	0800798f 	.word	0x0800798f
 8007924:	0800793d 	.word	0x0800793d
 8007928:	08007951 	.word	0x08007951
 800792c:	4a75      	ldr	r2, [pc, #468]	; (8007b04 <HAL_GPIO_Init+0x2b4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007932:	e02c      	b.n	800798e <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	623b      	str	r3, [r7, #32]
          break;
 800793a:	e029      	b.n	8007990 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	3304      	adds	r3, #4
 8007942:	623b      	str	r3, [r7, #32]
          break;
 8007944:	e024      	b.n	8007990 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	3308      	adds	r3, #8
 800794c:	623b      	str	r3, [r7, #32]
          break;
 800794e:	e01f      	b.n	8007990 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	330c      	adds	r3, #12
 8007956:	623b      	str	r3, [r7, #32]
          break;
 8007958:	e01a      	b.n	8007990 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007962:	2304      	movs	r3, #4
 8007964:	623b      	str	r3, [r7, #32]
          break;
 8007966:	e013      	b.n	8007990 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d105      	bne.n	800797c <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007970:	2308      	movs	r3, #8
 8007972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	611a      	str	r2, [r3, #16]
          break;
 800797a:	e009      	b.n	8007990 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800797c:	2308      	movs	r3, #8
 800797e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	615a      	str	r2, [r3, #20]
          break;
 8007986:	e003      	b.n	8007990 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007988:	2300      	movs	r3, #0
 800798a:	623b      	str	r3, [r7, #32]
          break;
 800798c:	e000      	b.n	8007990 <HAL_GPIO_Init+0x140>
          break;
 800798e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2bff      	cmp	r3, #255	; 0xff
 8007994:	d801      	bhi.n	800799a <HAL_GPIO_Init+0x14a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	e001      	b.n	800799e <HAL_GPIO_Init+0x14e>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	2bff      	cmp	r3, #255	; 0xff
 80079a4:	d802      	bhi.n	80079ac <HAL_GPIO_Init+0x15c>
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	e002      	b.n	80079b2 <HAL_GPIO_Init+0x162>
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	3b08      	subs	r3, #8
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	210f      	movs	r1, #15
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	fa01 f303 	lsl.w	r3, r1, r3
 80079c0:	43db      	mvns	r3, r3
 80079c2:	401a      	ands	r2, r3
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	fa01 f303 	lsl.w	r3, r1, r3
 80079cc:	431a      	orrs	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 80c1 	beq.w	8007b62 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80079e0:	4b49      	ldr	r3, [pc, #292]	; (8007b08 <HAL_GPIO_Init+0x2b8>)
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	4a48      	ldr	r2, [pc, #288]	; (8007b08 <HAL_GPIO_Init+0x2b8>)
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	6193      	str	r3, [r2, #24]
 80079ec:	4b46      	ldr	r3, [pc, #280]	; (8007b08 <HAL_GPIO_Init+0x2b8>)
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	60bb      	str	r3, [r7, #8]
 80079f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80079f8:	4a44      	ldr	r2, [pc, #272]	; (8007b0c <HAL_GPIO_Init+0x2bc>)
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	089b      	lsrs	r3, r3, #2
 80079fe:	3302      	adds	r3, #2
 8007a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a04:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	220f      	movs	r2, #15
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	43db      	mvns	r3, r3
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a3c      	ldr	r2, [pc, #240]	; (8007b10 <HAL_GPIO_Init+0x2c0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d01f      	beq.n	8007a64 <HAL_GPIO_Init+0x214>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a3b      	ldr	r2, [pc, #236]	; (8007b14 <HAL_GPIO_Init+0x2c4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d019      	beq.n	8007a60 <HAL_GPIO_Init+0x210>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a3a      	ldr	r2, [pc, #232]	; (8007b18 <HAL_GPIO_Init+0x2c8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d013      	beq.n	8007a5c <HAL_GPIO_Init+0x20c>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a39      	ldr	r2, [pc, #228]	; (8007b1c <HAL_GPIO_Init+0x2cc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00d      	beq.n	8007a58 <HAL_GPIO_Init+0x208>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a38      	ldr	r2, [pc, #224]	; (8007b20 <HAL_GPIO_Init+0x2d0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d007      	beq.n	8007a54 <HAL_GPIO_Init+0x204>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a37      	ldr	r2, [pc, #220]	; (8007b24 <HAL_GPIO_Init+0x2d4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d101      	bne.n	8007a50 <HAL_GPIO_Init+0x200>
 8007a4c:	2305      	movs	r3, #5
 8007a4e:	e00a      	b.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a50:	2306      	movs	r3, #6
 8007a52:	e008      	b.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a54:	2304      	movs	r3, #4
 8007a56:	e006      	b.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e004      	b.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e002      	b.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a64:	2300      	movs	r3, #0
 8007a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a68:	f002 0203 	and.w	r2, r2, #3
 8007a6c:	0092      	lsls	r2, r2, #2
 8007a6e:	4093      	lsls	r3, r2
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8007a76:	4925      	ldr	r1, [pc, #148]	; (8007b0c <HAL_GPIO_Init+0x2bc>)
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	089b      	lsrs	r3, r3, #2
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d006      	beq.n	8007a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007a90:	4b25      	ldr	r3, [pc, #148]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	4924      	ldr	r1, [pc, #144]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	600b      	str	r3, [r1, #0]
 8007a9c:	e006      	b.n	8007aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007a9e:	4b22      	ldr	r3, [pc, #136]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	4920      	ldr	r1, [pc, #128]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d006      	beq.n	8007ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	491a      	ldr	r1, [pc, #104]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	604b      	str	r3, [r1, #4]
 8007ac4:	e006      	b.n	8007ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	43db      	mvns	r3, r3
 8007ace:	4916      	ldr	r1, [pc, #88]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d025      	beq.n	8007b2c <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007ae0:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	4910      	ldr	r1, [pc, #64]	; (8007b28 <HAL_GPIO_Init+0x2d8>)
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	608b      	str	r3, [r1, #8]
 8007aec:	e025      	b.n	8007b3a <HAL_GPIO_Init+0x2ea>
 8007aee:	bf00      	nop
 8007af0:	10320000 	.word	0x10320000
 8007af4:	10310000 	.word	0x10310000
 8007af8:	10220000 	.word	0x10220000
 8007afc:	10210000 	.word	0x10210000
 8007b00:	10120000 	.word	0x10120000
 8007b04:	10110000 	.word	0x10110000
 8007b08:	40021000 	.word	0x40021000
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010800 	.word	0x40010800
 8007b14:	40010c00 	.word	0x40010c00
 8007b18:	40011000 	.word	0x40011000
 8007b1c:	40011400 	.word	0x40011400
 8007b20:	40011800 	.word	0x40011800
 8007b24:	40011c00 	.word	0x40011c00
 8007b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	43db      	mvns	r3, r3
 8007b34:	4911      	ldr	r1, [pc, #68]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007b46:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	490c      	ldr	r1, [pc, #48]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60cb      	str	r3, [r1, #12]
 8007b52:	e006      	b.n	8007b62 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007b54:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	43db      	mvns	r3, r3
 8007b5c:	4907      	ldr	r1, [pc, #28]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	3301      	adds	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	2b0f      	cmp	r3, #15
 8007b6c:	f67f ae82 	bls.w	8007874 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	372c      	adds	r7, #44	; 0x2c
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr
 8007b7c:	40010400 	.word	0x40010400

08007b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	887b      	ldrh	r3, [r7, #2]
 8007b92:	4013      	ands	r3, r2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	73fb      	strb	r3, [r7, #15]
 8007b9c:	e001      	b.n	8007ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	807b      	strh	r3, [r7, #2]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bbe:	787b      	ldrb	r3, [r7, #1]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bc4:	887a      	ldrh	r2, [r7, #2]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bca:	e003      	b.n	8007bd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bcc:	887b      	ldrh	r3, [r7, #2]
 8007bce:	041a      	lsls	r2, r3, #16
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	611a      	str	r2, [r3, #16]
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr
	...

08007be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007bea:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bec:	695a      	ldr	r2, [r3, #20]
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d006      	beq.n	8007c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007bf6:	4a05      	ldr	r2, [pc, #20]	; (8007c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f806 	bl	8007c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	40010400 	.word	0x40010400

08007c10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8087 	beq.w	8007d4c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007c3e:	4b92      	ldr	r3, [pc, #584]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f003 030c 	and.w	r3, r3, #12
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d00c      	beq.n	8007c64 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007c4a:	4b8f      	ldr	r3, [pc, #572]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f003 030c 	and.w	r3, r3, #12
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d112      	bne.n	8007c7c <HAL_RCC_OscConfig+0x58>
 8007c56:	4b8c      	ldr	r3, [pc, #560]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c62:	d10b      	bne.n	8007c7c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c64:	4b88      	ldr	r3, [pc, #544]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d06c      	beq.n	8007d4a <HAL_RCC_OscConfig+0x126>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d168      	bne.n	8007d4a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e22d      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c84:	d106      	bne.n	8007c94 <HAL_RCC_OscConfig+0x70>
 8007c86:	4b80      	ldr	r3, [pc, #512]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a7f      	ldr	r2, [pc, #508]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	e02e      	b.n	8007cf2 <HAL_RCC_OscConfig+0xce>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10c      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x92>
 8007c9c:	4b7a      	ldr	r3, [pc, #488]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a79      	ldr	r2, [pc, #484]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	4b77      	ldr	r3, [pc, #476]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a76      	ldr	r2, [pc, #472]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e01d      	b.n	8007cf2 <HAL_RCC_OscConfig+0xce>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cbe:	d10c      	bne.n	8007cda <HAL_RCC_OscConfig+0xb6>
 8007cc0:	4b71      	ldr	r3, [pc, #452]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a70      	ldr	r2, [pc, #448]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	4b6e      	ldr	r3, [pc, #440]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a6d      	ldr	r2, [pc, #436]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e00b      	b.n	8007cf2 <HAL_RCC_OscConfig+0xce>
 8007cda:	4b6b      	ldr	r3, [pc, #428]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a6a      	ldr	r2, [pc, #424]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4b68      	ldr	r3, [pc, #416]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a67      	ldr	r2, [pc, #412]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cf0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d013      	beq.n	8007d22 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cfa:	f7fe fe0d 	bl	8006918 <HAL_GetTick>
 8007cfe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d00:	e008      	b.n	8007d14 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d02:	f7fe fe09 	bl	8006918 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b64      	cmp	r3, #100	; 0x64
 8007d0e:	d901      	bls.n	8007d14 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e1e1      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d14:	4b5c      	ldr	r3, [pc, #368]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0f0      	beq.n	8007d02 <HAL_RCC_OscConfig+0xde>
 8007d20:	e014      	b.n	8007d4c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d22:	f7fe fdf9 	bl	8006918 <HAL_GetTick>
 8007d26:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d28:	e008      	b.n	8007d3c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d2a:	f7fe fdf5 	bl	8006918 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b64      	cmp	r3, #100	; 0x64
 8007d36:	d901      	bls.n	8007d3c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e1cd      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d3c:	4b52      	ldr	r3, [pc, #328]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f0      	bne.n	8007d2a <HAL_RCC_OscConfig+0x106>
 8007d48:	e000      	b.n	8007d4c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d063      	beq.n	8007e20 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007d58:	4b4b      	ldr	r3, [pc, #300]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f003 030c 	and.w	r3, r3, #12
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007d64:	4b48      	ldr	r3, [pc, #288]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f003 030c 	and.w	r3, r3, #12
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d11c      	bne.n	8007daa <HAL_RCC_OscConfig+0x186>
 8007d70:	4b45      	ldr	r3, [pc, #276]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d116      	bne.n	8007daa <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d7c:	4b42      	ldr	r3, [pc, #264]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_RCC_OscConfig+0x170>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d001      	beq.n	8007d94 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e1a1      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d94:	4b3c      	ldr	r3, [pc, #240]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4939      	ldr	r1, [pc, #228]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007da8:	e03a      	b.n	8007e20 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d020      	beq.n	8007df4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007db2:	4b36      	ldr	r3, [pc, #216]	; (8007e8c <HAL_RCC_OscConfig+0x268>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db8:	f7fe fdae 	bl	8006918 <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc0:	f7fe fdaa 	bl	8006918 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e182      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd2:	4b2d      	ldr	r3, [pc, #180]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dde:	4b2a      	ldr	r3, [pc, #168]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4926      	ldr	r1, [pc, #152]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]
 8007df2:	e015      	b.n	8007e20 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007df4:	4b25      	ldr	r3, [pc, #148]	; (8007e8c <HAL_RCC_OscConfig+0x268>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dfa:	f7fe fd8d 	bl	8006918 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e00:	e008      	b.n	8007e14 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e02:	f7fe fd89 	bl	8006918 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d901      	bls.n	8007e14 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e161      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e14:	4b1c      	ldr	r3, [pc, #112]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f0      	bne.n	8007e02 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d039      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d019      	beq.n	8007e68 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e34:	4b16      	ldr	r3, [pc, #88]	; (8007e90 <HAL_RCC_OscConfig+0x26c>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e3a:	f7fe fd6d 	bl	8006918 <HAL_GetTick>
 8007e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e40:	e008      	b.n	8007e54 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e42:	f7fe fd69 	bl	8006918 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d901      	bls.n	8007e54 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e141      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <HAL_RCC_OscConfig+0x264>)
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0f0      	beq.n	8007e42 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8007e60:	2001      	movs	r0, #1
 8007e62:	f000 fadf 	bl	8008424 <RCC_Delay>
 8007e66:	e01b      	b.n	8007ea0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e68:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <HAL_RCC_OscConfig+0x26c>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e6e:	f7fe fd53 	bl	8006918 <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e74:	e00e      	b.n	8007e94 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e76:	f7fe fd4f 	bl	8006918 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d907      	bls.n	8007e94 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e127      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	42420000 	.word	0x42420000
 8007e90:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e94:	4b92      	ldr	r3, [pc, #584]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1ea      	bne.n	8007e76 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80a6 	beq.w	8007ffa <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eb2:	4b8b      	ldr	r3, [pc, #556]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ebe:	4b88      	ldr	r3, [pc, #544]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	4a87      	ldr	r2, [pc, #540]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	61d3      	str	r3, [r2, #28]
 8007eca:	4b85      	ldr	r3, [pc, #532]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eda:	4b82      	ldr	r3, [pc, #520]	; (80080e4 <HAL_RCC_OscConfig+0x4c0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d118      	bne.n	8007f18 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ee6:	4b7f      	ldr	r3, [pc, #508]	; (80080e4 <HAL_RCC_OscConfig+0x4c0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a7e      	ldr	r2, [pc, #504]	; (80080e4 <HAL_RCC_OscConfig+0x4c0>)
 8007eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef2:	f7fe fd11 	bl	8006918 <HAL_GetTick>
 8007ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef8:	e008      	b.n	8007f0c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007efa:	f7fe fd0d 	bl	8006918 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b64      	cmp	r3, #100	; 0x64
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e0e5      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f0c:	4b75      	ldr	r3, [pc, #468]	; (80080e4 <HAL_RCC_OscConfig+0x4c0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d106      	bne.n	8007f2e <HAL_RCC_OscConfig+0x30a>
 8007f20:	4b6f      	ldr	r3, [pc, #444]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	4a6e      	ldr	r2, [pc, #440]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6213      	str	r3, [r2, #32]
 8007f2c:	e02d      	b.n	8007f8a <HAL_RCC_OscConfig+0x366>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10c      	bne.n	8007f50 <HAL_RCC_OscConfig+0x32c>
 8007f36:	4b6a      	ldr	r3, [pc, #424]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	4a69      	ldr	r2, [pc, #420]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f3c:	f023 0301 	bic.w	r3, r3, #1
 8007f40:	6213      	str	r3, [r2, #32]
 8007f42:	4b67      	ldr	r3, [pc, #412]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	4a66      	ldr	r2, [pc, #408]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f48:	f023 0304 	bic.w	r3, r3, #4
 8007f4c:	6213      	str	r3, [r2, #32]
 8007f4e:	e01c      	b.n	8007f8a <HAL_RCC_OscConfig+0x366>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	2b05      	cmp	r3, #5
 8007f56:	d10c      	bne.n	8007f72 <HAL_RCC_OscConfig+0x34e>
 8007f58:	4b61      	ldr	r3, [pc, #388]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	4a60      	ldr	r2, [pc, #384]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f5e:	f043 0304 	orr.w	r3, r3, #4
 8007f62:	6213      	str	r3, [r2, #32]
 8007f64:	4b5e      	ldr	r3, [pc, #376]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	4a5d      	ldr	r2, [pc, #372]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f6a:	f043 0301 	orr.w	r3, r3, #1
 8007f6e:	6213      	str	r3, [r2, #32]
 8007f70:	e00b      	b.n	8007f8a <HAL_RCC_OscConfig+0x366>
 8007f72:	4b5b      	ldr	r3, [pc, #364]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	4a5a      	ldr	r2, [pc, #360]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	6213      	str	r3, [r2, #32]
 8007f7e:	4b58      	ldr	r3, [pc, #352]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	4a57      	ldr	r2, [pc, #348]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007f84:	f023 0304 	bic.w	r3, r3, #4
 8007f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f92:	f7fe fcc1 	bl	8006918 <HAL_GetTick>
 8007f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f98:	e00a      	b.n	8007fb0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f9a:	f7fe fcbd 	bl	8006918 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e093      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fb0:	4b4b      	ldr	r3, [pc, #300]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0ee      	beq.n	8007f9a <HAL_RCC_OscConfig+0x376>
 8007fbc:	e014      	b.n	8007fe8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fbe:	f7fe fcab 	bl	8006918 <HAL_GetTick>
 8007fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fc4:	e00a      	b.n	8007fdc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fc6:	f7fe fca7 	bl	8006918 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e07d      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fdc:	4b40      	ldr	r3, [pc, #256]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1ee      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d105      	bne.n	8007ffa <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fee:	4b3c      	ldr	r3, [pc, #240]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	4a3b      	ldr	r2, [pc, #236]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8007ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ff8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d069      	beq.n	80080d6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008002:	4b37      	ldr	r3, [pc, #220]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f003 030c 	and.w	r3, r3, #12
 800800a:	2b08      	cmp	r3, #8
 800800c:	d061      	beq.n	80080d2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d146      	bne.n	80080a4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008016:	4b34      	ldr	r3, [pc, #208]	; (80080e8 <HAL_RCC_OscConfig+0x4c4>)
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800801c:	f7fe fc7c 	bl	8006918 <HAL_GetTick>
 8008020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008024:	f7fe fc78 	bl	8006918 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e050      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008036:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f0      	bne.n	8008024 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804a:	d108      	bne.n	800805e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800804c:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	4921      	ldr	r1, [pc, #132]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 800805a:	4313      	orrs	r3, r2
 800805c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800805e:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a19      	ldr	r1, [r3, #32]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	430b      	orrs	r3, r1
 8008070:	491b      	ldr	r1, [pc, #108]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8008072:	4313      	orrs	r3, r2
 8008074:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008076:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <HAL_RCC_OscConfig+0x4c4>)
 8008078:	2201      	movs	r2, #1
 800807a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800807c:	f7fe fc4c 	bl	8006918 <HAL_GetTick>
 8008080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008084:	f7fe fc48 	bl	8006918 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e020      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <HAL_RCC_OscConfig+0x460>
 80080a2:	e018      	b.n	80080d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080a4:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <HAL_RCC_OscConfig+0x4c4>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080aa:	f7fe fc35 	bl	8006918 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080b2:	f7fe fc31 	bl	8006918 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e009      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <HAL_RCC_OscConfig+0x4bc>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f0      	bne.n	80080b2 <HAL_RCC_OscConfig+0x48e>
 80080d0:	e001      	b.n	80080d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40021000 	.word	0x40021000
 80080e4:	40007000 	.word	0x40007000
 80080e8:	42420060 	.word	0x42420060

080080ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80080fa:	4b7e      	ldr	r3, [pc, #504]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d910      	bls.n	800812a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008108:	4b7a      	ldr	r3, [pc, #488]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f023 0207 	bic.w	r2, r3, #7
 8008110:	4978      	ldr	r1, [pc, #480]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	4313      	orrs	r3, r2
 8008116:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008118:	4b76      	ldr	r3, [pc, #472]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d001      	beq.n	800812a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e0e0      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d020      	beq.n	8008178 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008142:	4b6d      	ldr	r3, [pc, #436]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	4a6c      	ldr	r2, [pc, #432]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 8008148:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800814c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d005      	beq.n	8008166 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800815a:	4b67      	ldr	r3, [pc, #412]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	4a66      	ldr	r2, [pc, #408]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 8008160:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008164:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008166:	4b64      	ldr	r3, [pc, #400]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	4961      	ldr	r1, [pc, #388]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d06a      	beq.n	800825a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d107      	bne.n	800819c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800818c:	4b5a      	ldr	r3, [pc, #360]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d115      	bne.n	80081c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e0a7      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d107      	bne.n	80081b4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081a4:	4b54      	ldr	r3, [pc, #336]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d109      	bne.n	80081c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e09b      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081b4:	4b50      	ldr	r3, [pc, #320]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e093      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081c4:	4b4c      	ldr	r3, [pc, #304]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f023 0203 	bic.w	r2, r3, #3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4949      	ldr	r1, [pc, #292]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081d6:	f7fe fb9f 	bl	8006918 <HAL_GetTick>
 80081da:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d112      	bne.n	800820a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80081e4:	e00a      	b.n	80081fc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081e6:	f7fe fb97 	bl	8006918 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e077      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80081fc:	4b3e      	ldr	r3, [pc, #248]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f003 030c 	and.w	r3, r3, #12
 8008204:	2b04      	cmp	r3, #4
 8008206:	d1ee      	bne.n	80081e6 <HAL_RCC_ClockConfig+0xfa>
 8008208:	e027      	b.n	800825a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d11d      	bne.n	800824e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008212:	e00a      	b.n	800822a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008214:	f7fe fb80 	bl	8006918 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008222:	4293      	cmp	r3, r2
 8008224:	d901      	bls.n	800822a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e060      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800822a:	4b33      	ldr	r3, [pc, #204]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f003 030c 	and.w	r3, r3, #12
 8008232:	2b08      	cmp	r3, #8
 8008234:	d1ee      	bne.n	8008214 <HAL_RCC_ClockConfig+0x128>
 8008236:	e010      	b.n	800825a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008238:	f7fe fb6e 	bl	8006918 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	f241 3288 	movw	r2, #5000	; 0x1388
 8008246:	4293      	cmp	r3, r2
 8008248:	d901      	bls.n	800824e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e04e      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800824e:	4b2a      	ldr	r3, [pc, #168]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f003 030c 	and.w	r3, r3, #12
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1ee      	bne.n	8008238 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800825a:	4b26      	ldr	r3, [pc, #152]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d210      	bcs.n	800828a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008268:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f023 0207 	bic.w	r2, r3, #7
 8008270:	4920      	ldr	r1, [pc, #128]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	4313      	orrs	r3, r2
 8008276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008278:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d001      	beq.n	800828a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e030      	b.n	80082ec <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d008      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008296:	4b18      	ldr	r3, [pc, #96]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	4915      	ldr	r1, [pc, #84]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80082b4:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	490d      	ldr	r1, [pc, #52]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082c8:	f000 f81c 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	091b      	lsrs	r3, r3, #4
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	4908      	ldr	r1, [pc, #32]	; (80082fc <HAL_RCC_ClockConfig+0x210>)
 80082da:	5ccb      	ldrb	r3, [r1, r3]
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
 80082e0:	4a07      	ldr	r2, [pc, #28]	; (8008300 <HAL_RCC_ClockConfig+0x214>)
 80082e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7fe fad5 	bl	8006894 <HAL_InitTick>
  
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40022000 	.word	0x40022000
 80082f8:	40021000 	.word	0x40021000
 80082fc:	08016d30 	.word	0x08016d30
 8008300:	2000000c 	.word	0x2000000c

08008304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008304:	b490      	push	{r4, r7}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800830a:	4b29      	ldr	r3, [pc, #164]	; (80083b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800830c:	1d3c      	adds	r4, r7, #4
 800830e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008314:	f240 2301 	movw	r3, #513	; 0x201
 8008318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	2300      	movs	r3, #0
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800832e:	4b21      	ldr	r3, [pc, #132]	; (80083b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f003 030c 	and.w	r3, r3, #12
 800833a:	2b04      	cmp	r3, #4
 800833c:	d002      	beq.n	8008344 <HAL_RCC_GetSysClockFreq+0x40>
 800833e:	2b08      	cmp	r3, #8
 8008340:	d003      	beq.n	800834a <HAL_RCC_GetSysClockFreq+0x46>
 8008342:	e02b      	b.n	800839c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008344:	4b1c      	ldr	r3, [pc, #112]	; (80083b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008346:	623b      	str	r3, [r7, #32]
      break;
 8008348:	e02b      	b.n	80083a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	0c9b      	lsrs	r3, r3, #18
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	3328      	adds	r3, #40	; 0x28
 8008354:	443b      	add	r3, r7
 8008356:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800835a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d012      	beq.n	800838c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	0c5b      	lsrs	r3, r3, #17
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	3328      	adds	r3, #40	; 0x28
 8008372:	443b      	add	r3, r7
 8008374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008378:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	4a0e      	ldr	r2, [pc, #56]	; (80083b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800837e:	fb03 f202 	mul.w	r2, r3, r2
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	fbb2 f3f3 	udiv	r3, r2, r3
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
 800838a:	e004      	b.n	8008396 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4a0b      	ldr	r2, [pc, #44]	; (80083bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008390:	fb02 f303 	mul.w	r3, r2, r3
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	623b      	str	r3, [r7, #32]
      break;
 800839a:	e002      	b.n	80083a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800839e:	623b      	str	r3, [r7, #32]
      break;
 80083a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083a2:	6a3b      	ldr	r3, [r7, #32]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3728      	adds	r7, #40	; 0x28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc90      	pop	{r4, r7}
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	0800af0c 	.word	0x0800af0c
 80083b4:	40021000 	.word	0x40021000
 80083b8:	007a1200 	.word	0x007a1200
 80083bc:	003d0900 	.word	0x003d0900

080083c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083c4:	4b02      	ldr	r3, [pc, #8]	; (80083d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80083c6:	681b      	ldr	r3, [r3, #0]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr
 80083d0:	2000000c 	.word	0x2000000c

080083d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083d8:	f7ff fff2 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 80083dc:	4602      	mov	r2, r0
 80083de:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	4903      	ldr	r1, [pc, #12]	; (80083f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083ea:	5ccb      	ldrb	r3, [r1, r3]
 80083ec:	fa22 f303 	lsr.w	r3, r2, r3
}    
 80083f0:	4618      	mov	r0, r3
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	40021000 	.word	0x40021000
 80083f8:	08016d40 	.word	0x08016d40

080083fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008400:	f7ff ffde 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 8008404:	4602      	mov	r2, r0
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	0adb      	lsrs	r3, r3, #11
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	4903      	ldr	r1, [pc, #12]	; (8008420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008412:	5ccb      	ldrb	r3, [r1, r3]
 8008414:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8008418:	4618      	mov	r0, r3
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40021000 	.word	0x40021000
 8008420:	08016d40 	.word	0x08016d40

08008424 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800842c:	4b0b      	ldr	r3, [pc, #44]	; (800845c <RCC_Delay+0x38>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0b      	ldr	r2, [pc, #44]	; (8008460 <RCC_Delay+0x3c>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	0a5b      	lsrs	r3, r3, #9
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8008440:	bf00      	nop
}
 8008442:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1e5a      	subs	r2, r3, #1
 8008448:	60fa      	str	r2, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f8      	bne.n	8008440 <RCC_Delay+0x1c>
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	2000000c 	.word	0x2000000c
 8008460:	10624dd3 	.word	0x10624dd3

08008464 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	613b      	str	r3, [r7, #16]
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d07d      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008480:	2300      	movs	r3, #0
 8008482:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008484:	4b4f      	ldr	r3, [pc, #316]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10d      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008490:	4b4c      	ldr	r3, [pc, #304]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	4a4b      	ldr	r2, [pc, #300]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800849a:	61d3      	str	r3, [r2, #28]
 800849c:	4b49      	ldr	r3, [pc, #292]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a4:	60bb      	str	r3, [r7, #8]
 80084a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084a8:	2301      	movs	r3, #1
 80084aa:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ac:	4b46      	ldr	r3, [pc, #280]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d118      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084b8:	4b43      	ldr	r3, [pc, #268]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a42      	ldr	r2, [pc, #264]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084c4:	f7fe fa28 	bl	8006918 <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ca:	e008      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084cc:	f7fe fa24 	bl	8006918 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b64      	cmp	r3, #100	; 0x64
 80084d8:	d901      	bls.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e06d      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084de:	4b3a      	ldr	r3, [pc, #232]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0f0      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084ea:	4b36      	ldr	r3, [pc, #216]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d02e      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	429a      	cmp	r2, r3
 8008506:	d027      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008508:	4b2e      	ldr	r3, [pc, #184]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008510:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008512:	4b2e      	ldr	r3, [pc, #184]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008514:	2201      	movs	r2, #1
 8008516:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008518:	4b2c      	ldr	r3, [pc, #176]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800851e:	4a29      	ldr	r2, [pc, #164]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d014      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800852e:	f7fe f9f3 	bl	8006918 <HAL_GetTick>
 8008532:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008534:	e00a      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008536:	f7fe f9ef 	bl	8006918 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	f241 3288 	movw	r2, #5000	; 0x1388
 8008544:	4293      	cmp	r3, r2
 8008546:	d901      	bls.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e036      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800854c:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0ee      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4917      	ldr	r1, [pc, #92]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008566:	4313      	orrs	r3, r2
 8008568:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d105      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008570:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800857a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d008      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008588:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	490b      	ldr	r1, [pc, #44]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008596:	4313      	orrs	r3, r2
 8008598:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d008      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085a6:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4904      	ldr	r1, [pc, #16]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	40021000 	.word	0x40021000
 80085c8:	40007000 	.word	0x40007000
 80085cc:	42420440 	.word	0x42420440

080085d0 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e034      	b.n	8008650 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d106      	bne.n	8008600 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7f9 fd12 	bl	8002024 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3308      	adds	r3, #8
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f001 fda2 	bl	800a154 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6818      	ldr	r0, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	461a      	mov	r2, r3
 800861a:	68b9      	ldr	r1, [r7, #8]
 800861c:	f001 fe1a 	bl	800a254 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6858      	ldr	r0, [r3, #4]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	f001 fe45 	bl	800a2bc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	6892      	ldr	r2, [r2, #8]
 800863a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	6892      	ldr	r2, [r2, #8]
 8008646:	f041 0101 	orr.w	r1, r1, #1
 800864a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e01d      	b.n	80086a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fd fab2 	bl	8005be8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f000 fe0c 	bl	80092b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f042 0201 	orr.w	r2, r2, #1
 80086cc:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2202      	movs	r2, #2
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a1a      	ldr	r2, [r3, #32]
 80086f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80086fc:	4013      	ands	r3, r2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10f      	bne.n	8008722 <HAL_TIM_Base_Stop+0x40>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6a1a      	ldr	r2, [r3, #32]
 8008708:	f240 4344 	movw	r3, #1092	; 0x444
 800870c:	4013      	ands	r3, r2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d107      	bne.n	8008722 <HAL_TIM_Base_Stop+0x40>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0201 	bic.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr

08008736 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0201 	orr.w	r2, r2, #1
 800874c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0201 	orr.w	r2, r2, #1
 800875c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr

0800876a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0201 	bic.w	r2, r2, #1
 8008780:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6a1a      	ldr	r2, [r3, #32]
 8008788:	f241 1311 	movw	r3, #4369	; 0x1111
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10f      	bne.n	80087b2 <HAL_TIM_Base_Stop_IT+0x48>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6a1a      	ldr	r2, [r3, #32]
 8008798:	f240 4344 	movw	r3, #1092	; 0x444
 800879c:	4013      	ands	r3, r2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d107      	bne.n	80087b2 <HAL_TIM_Base_Stop_IT+0x48>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0201 	bic.w	r2, r2, #1
 80087b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e01d      	b.n	800880c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f815 	bl	8008814 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f000 fd59 	bl	80092b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr
	...

08008828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2201      	movs	r2, #1
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f001 f821 	bl	8009882 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a10      	ldr	r2, [pc, #64]	; (8008888 <HAL_TIM_PWM_Start+0x60>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d004      	beq.n	8008854 <HAL_TIM_PWM_Start+0x2c>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a0f      	ldr	r2, [pc, #60]	; (800888c <HAL_TIM_PWM_Start+0x64>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d101      	bne.n	8008858 <HAL_TIM_PWM_Start+0x30>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <HAL_TIM_PWM_Start+0x32>
 8008858:	2300      	movs	r3, #0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800886c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0201 	orr.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	40012c00 	.word	0x40012c00
 800888c:	40013400 	.word	0x40013400

08008890 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 ffed 	bl	8009882 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a22      	ldr	r2, [pc, #136]	; (8008938 <HAL_TIM_PWM_Stop+0xa8>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_TIM_PWM_Stop+0x2c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a21      	ldr	r2, [pc, #132]	; (800893c <HAL_TIM_PWM_Stop+0xac>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d101      	bne.n	80088c0 <HAL_TIM_PWM_Stop+0x30>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <HAL_TIM_PWM_Stop+0x32>
 80088c0:	2300      	movs	r3, #0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d017      	beq.n	80088f6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6a1a      	ldr	r2, [r3, #32]
 80088cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80088d0:	4013      	ands	r3, r2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10f      	bne.n	80088f6 <HAL_TIM_PWM_Stop+0x66>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a1a      	ldr	r2, [r3, #32]
 80088dc:	f240 4344 	movw	r3, #1092	; 0x444
 80088e0:	4013      	ands	r3, r2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d107      	bne.n	80088f6 <HAL_TIM_PWM_Stop+0x66>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6a1a      	ldr	r2, [r3, #32]
 80088fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8008900:	4013      	ands	r3, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10f      	bne.n	8008926 <HAL_TIM_PWM_Stop+0x96>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6a1a      	ldr	r2, [r3, #32]
 800890c:	f240 4344 	movw	r3, #1092	; 0x444
 8008910:	4013      	ands	r3, r2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <HAL_TIM_PWM_Stop+0x96>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0201 	bic.w	r2, r2, #1
 8008924:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	40012c00 	.word	0x40012c00
 800893c:	40013400 	.word	0x40013400

08008940 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d101      	bne.n	800895e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800895a:	2302      	movs	r3, #2
 800895c:	e0c6      	b.n	8008aec <HAL_TIM_PWM_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b01      	cmp	r3, #1
 8008968:	d10b      	bne.n	8008982 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <HAL_TIM_PWM_Start_DMA+0x3a>
 8008970:	887b      	ldrh	r3, [r7, #2]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e0b8      	b.n	8008aec <HAL_TIM_PWM_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2202      	movs	r2, #2
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b0c      	cmp	r3, #12
 8008986:	f200 8089 	bhi.w	8008a9c <HAL_TIM_PWM_Start_DMA+0x15c>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <HAL_TIM_PWM_Start_DMA+0x50>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089c5 	.word	0x080089c5
 8008994:	08008a9d 	.word	0x08008a9d
 8008998:	08008a9d 	.word	0x08008a9d
 800899c:	08008a9d 	.word	0x08008a9d
 80089a0:	080089fb 	.word	0x080089fb
 80089a4:	08008a9d 	.word	0x08008a9d
 80089a8:	08008a9d 	.word	0x08008a9d
 80089ac:	08008a9d 	.word	0x08008a9d
 80089b0:	08008a31 	.word	0x08008a31
 80089b4:	08008a9d 	.word	0x08008a9d
 80089b8:	08008a9d 	.word	0x08008a9d
 80089bc:	08008a9d 	.word	0x08008a9d
 80089c0:	08008a67 	.word	0x08008a67
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	4a4a      	ldr	r2, [pc, #296]	; (8008af4 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 80089ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	4a49      	ldr	r2, [pc, #292]	; (8008af8 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 80089d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3334      	adds	r3, #52	; 0x34
 80089e0:	461a      	mov	r2, r3
 80089e2:	887b      	ldrh	r3, [r7, #2]
 80089e4:	f7fe fb62 	bl	80070ac <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089f6:	60da      	str	r2, [r3, #12]
    }
    break;
 80089f8:	e051      	b.n	8008a9e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fe:	4a3d      	ldr	r2, [pc, #244]	; (8008af4 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8008a00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	4a3c      	ldr	r2, [pc, #240]	; (8008af8 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008a08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3338      	adds	r3, #56	; 0x38
 8008a16:	461a      	mov	r2, r3
 8008a18:	887b      	ldrh	r3, [r7, #2]
 8008a1a:	f7fe fb47 	bl	80070ac <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a2c:	60da      	str	r2, [r3, #12]
    }
    break;
 8008a2e:	e036      	b.n	8008a9e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	4a2f      	ldr	r2, [pc, #188]	; (8008af4 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8008a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	4a2e      	ldr	r2, [pc, #184]	; (8008af8 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	333c      	adds	r3, #60	; 0x3c
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	887b      	ldrh	r3, [r7, #2]
 8008a50:	f7fe fb2c 	bl	80070ac <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a62:	60da      	str	r2, [r3, #12]
    }
    break;
 8008a64:	e01b      	b.n	8008a9e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	4a22      	ldr	r2, [pc, #136]	; (8008af4 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8008a6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	4a21      	ldr	r2, [pc, #132]	; (8008af8 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008a74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3340      	adds	r3, #64	; 0x40
 8008a82:	461a      	mov	r2, r3
 8008a84:	887b      	ldrh	r3, [r7, #2]
 8008a86:	f7fe fb11 	bl	80070ac <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a98:	60da      	str	r2, [r3, #12]
    }
    break;
 8008a9a:	e000      	b.n	8008a9e <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 8008a9c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 feeb 	bl	8009882 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a12      	ldr	r2, [pc, #72]	; (8008afc <HAL_TIM_PWM_Start_DMA+0x1bc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d004      	beq.n	8008ac0 <HAL_TIM_PWM_Start_DMA+0x180>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a11      	ldr	r2, [pc, #68]	; (8008b00 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d101      	bne.n	8008ac4 <HAL_TIM_PWM_Start_DMA+0x184>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x186>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d007      	beq.n	8008ada <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f042 0201 	orr.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	08009243 	.word	0x08009243
 8008af8:	0800921f 	.word	0x0800921f
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40013400 	.word	0x40013400

08008b04 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b0c      	cmp	r3, #12
 8008b12:	d841      	bhi.n	8008b98 <HAL_TIM_PWM_Stop_DMA+0x94>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b51 	.word	0x08008b51
 8008b20:	08008b99 	.word	0x08008b99
 8008b24:	08008b99 	.word	0x08008b99
 8008b28:	08008b99 	.word	0x08008b99
 8008b2c:	08008b63 	.word	0x08008b63
 8008b30:	08008b99 	.word	0x08008b99
 8008b34:	08008b99 	.word	0x08008b99
 8008b38:	08008b99 	.word	0x08008b99
 8008b3c:	08008b75 	.word	0x08008b75
 8008b40:	08008b99 	.word	0x08008b99
 8008b44:	08008b99 	.word	0x08008b99
 8008b48:	08008b99 	.word	0x08008b99
 8008b4c:	08008b87 	.word	0x08008b87
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b5e:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b60:	e01b      	b.n	8008b9a <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b70:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b72:	e012      	b.n	8008b9a <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b82:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b84:	e009      	b.n	8008b9a <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b94:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b96:	e000      	b.n	8008b9a <HAL_TIM_PWM_Stop_DMA+0x96>

    default:
    break;
 8008b98:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fe6d 	bl	8009882 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a22      	ldr	r2, [pc, #136]	; (8008c38 <HAL_TIM_PWM_Stop_DMA+0x134>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d004      	beq.n	8008bbc <HAL_TIM_PWM_Stop_DMA+0xb8>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a21      	ldr	r2, [pc, #132]	; (8008c3c <HAL_TIM_PWM_Stop_DMA+0x138>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d101      	bne.n	8008bc0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d017      	beq.n	8008bf6 <HAL_TIM_PWM_Stop_DMA+0xf2>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10f      	bne.n	8008bf6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6a1a      	ldr	r2, [r3, #32]
 8008bdc:	f240 4344 	movw	r3, #1092	; 0x444
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d107      	bne.n	8008bf6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a1a      	ldr	r2, [r3, #32]
 8008bfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c00:	4013      	ands	r3, r2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10f      	bne.n	8008c26 <HAL_TIM_PWM_Stop_DMA+0x122>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6a1a      	ldr	r2, [r3, #32]
 8008c0c:	f240 4344 	movw	r3, #1092	; 0x444
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d107      	bne.n	8008c26 <HAL_TIM_PWM_Stop_DMA+0x122>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0201 	bic.w	r2, r2, #1
 8008c24:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	40012c00 	.word	0x40012c00
 8008c3c:	40013400 	.word	0x40013400

08008c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d122      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d11b      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f06f 0202 	mvn.w	r2, #2
 8008c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 faa7 	bl	80091d6 <HAL_TIM_IC_CaptureCallback>
 8008c88:	e005      	b.n	8008c96 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa9a 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 faa9 	bl	80091e8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d122      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0204 	mvn.w	r2, #4
 8008cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa7d 	bl	80091d6 <HAL_TIM_IC_CaptureCallback>
 8008cdc:	e005      	b.n	8008cea <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa70 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa7f 	bl	80091e8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d122      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d11b      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f06f 0208 	mvn.w	r2, #8
 8008d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2204      	movs	r2, #4
 8008d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa53 	bl	80091d6 <HAL_TIM_IC_CaptureCallback>
 8008d30:	e005      	b.n	8008d3e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa46 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fa55 	bl	80091e8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0310 	and.w	r3, r3, #16
 8008d4e:	2b10      	cmp	r3, #16
 8008d50:	d122      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	2b10      	cmp	r3, #16
 8008d5e:	d11b      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0210 	mvn.w	r2, #16
 8008d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2208      	movs	r2, #8
 8008d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa29 	bl	80091d6 <HAL_TIM_IC_CaptureCallback>
 8008d84:	e005      	b.n	8008d92 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa1c 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fa2b 	bl	80091e8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d10e      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d107      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0201 	mvn.w	r2, #1
 8008dbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f9f7 	bl	80091b2 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dce:	2b80      	cmp	r3, #128	; 0x80
 8008dd0:	d10e      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ddc:	2b80      	cmp	r3, #128	; 0x80
 8008dde:	d107      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008de8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fe10 	bl	8009a10 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d10e      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d107      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e14:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f9ef 	bl	80091fa <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d10e      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d107      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0220 	mvn.w	r2, #32
 8008e40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fddb 	bl	80099fe <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d101      	bne.n	8008e6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008e66:	2302      	movs	r3, #2
 8008e68:	e0b4      	b.n	8008fd4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b0c      	cmp	r3, #12
 8008e7e:	f200 809f 	bhi.w	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008e82:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ebd 	.word	0x08008ebd
 8008e8c:	08008fc1 	.word	0x08008fc1
 8008e90:	08008fc1 	.word	0x08008fc1
 8008e94:	08008fc1 	.word	0x08008fc1
 8008e98:	08008efd 	.word	0x08008efd
 8008e9c:	08008fc1 	.word	0x08008fc1
 8008ea0:	08008fc1 	.word	0x08008fc1
 8008ea4:	08008fc1 	.word	0x08008fc1
 8008ea8:	08008f3f 	.word	0x08008f3f
 8008eac:	08008fc1 	.word	0x08008fc1
 8008eb0:	08008fc1 	.word	0x08008fc1
 8008eb4:	08008fc1 	.word	0x08008fc1
 8008eb8:	08008f7f 	.word	0x08008f7f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fa74 	bl	80093b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0208 	orr.w	r2, r2, #8
 8008ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0204 	bic.w	r2, r2, #4
 8008ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6999      	ldr	r1, [r3, #24]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	619a      	str	r2, [r3, #24]
    }
    break;
 8008efa:	e062      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 faca 	bl	800949c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6999      	ldr	r1, [r3, #24]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	021a      	lsls	r2, r3, #8
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	619a      	str	r2, [r3, #24]
    }
    break;
 8008f3c:	e041      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb23 	bl	8009590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69da      	ldr	r2, [r3, #28]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f042 0208 	orr.w	r2, r2, #8
 8008f58:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69da      	ldr	r2, [r3, #28]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0204 	bic.w	r2, r2, #4
 8008f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69d9      	ldr	r1, [r3, #28]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	691a      	ldr	r2, [r3, #16]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	61da      	str	r2, [r3, #28]
    }
    break;
 8008f7c:	e021      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fb7d 	bl	8009684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69da      	ldr	r2, [r3, #28]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f98:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69da      	ldr	r2, [r3, #28]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69d9      	ldr	r1, [r3, #28]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	021a      	lsls	r2, r3, #8
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	61da      	str	r2, [r3, #28]
    }
    break;
 8008fbe:	e000      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8008fc0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e0d8      	b.n	80091aa <HAL_TIM_ConfigClockSource+0x1ce>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009016:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800901e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009030:	d052      	beq.n	80090d8 <HAL_TIM_ConfigClockSource+0xfc>
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009036:	f200 80ae 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 800903a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903e:	d027      	beq.n	8009090 <HAL_TIM_ConfigClockSource+0xb4>
 8009040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009044:	f200 80a7 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 8009048:	2b70      	cmp	r3, #112	; 0x70
 800904a:	d02a      	beq.n	80090a2 <HAL_TIM_ConfigClockSource+0xc6>
 800904c:	2b70      	cmp	r3, #112	; 0x70
 800904e:	f200 80a2 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 8009052:	2b60      	cmp	r3, #96	; 0x60
 8009054:	d063      	beq.n	800911e <HAL_TIM_ConfigClockSource+0x142>
 8009056:	2b60      	cmp	r3, #96	; 0x60
 8009058:	f200 809d 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 800905c:	2b50      	cmp	r3, #80	; 0x50
 800905e:	d04e      	beq.n	80090fe <HAL_TIM_ConfigClockSource+0x122>
 8009060:	2b50      	cmp	r3, #80	; 0x50
 8009062:	f200 8098 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	d069      	beq.n	800913e <HAL_TIM_ConfigClockSource+0x162>
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	f200 8093 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 8009070:	2b30      	cmp	r3, #48	; 0x30
 8009072:	f000 8089 	beq.w	8009188 <HAL_TIM_ConfigClockSource+0x1ac>
 8009076:	2b30      	cmp	r3, #48	; 0x30
 8009078:	f200 808d 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 800907c:	2b20      	cmp	r3, #32
 800907e:	d07c      	beq.n	800917a <HAL_TIM_ConfigClockSource+0x19e>
 8009080:	2b20      	cmp	r3, #32
 8009082:	f200 8088 	bhi.w	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d069      	beq.n	800915e <HAL_TIM_ConfigClockSource+0x182>
 800908a:	2b10      	cmp	r3, #16
 800908c:	d06e      	beq.n	800916c <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800908e:	e082      	b.n	8009196 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0207 	bic.w	r2, r2, #7
 800909e:	609a      	str	r2, [r3, #8]
    break;
 80090a0:	e07a      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6818      	ldr	r0, [r3, #0]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	6899      	ldr	r1, [r3, #8]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f000 fbc5 	bl	8009840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	609a      	str	r2, [r3, #8]
    break;
 80090d6:	e05f      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	6899      	ldr	r1, [r3, #8]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f000 fbaa 	bl	8009840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689a      	ldr	r2, [r3, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090fa:	609a      	str	r2, [r3, #8]
    break;
 80090fc:	e04c      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	6859      	ldr	r1, [r3, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	461a      	mov	r2, r3
 800910c:	f000 fb14 	bl	8009738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2150      	movs	r1, #80	; 0x50
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fb73 	bl	8009802 <TIM_ITRx_SetConfig>
    break;
 800911c:	e03c      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	6859      	ldr	r1, [r3, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	461a      	mov	r2, r3
 800912c:	f000 fb36 	bl	800979c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2160      	movs	r1, #96	; 0x60
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fb63 	bl	8009802 <TIM_ITRx_SetConfig>
    break;
 800913c:	e02c      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6859      	ldr	r1, [r3, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	461a      	mov	r2, r3
 800914c:	f000 faf4 	bl	8009738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2140      	movs	r1, #64	; 0x40
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fb53 	bl	8009802 <TIM_ITRx_SetConfig>
    break;
 800915c:	e01c      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2100      	movs	r1, #0
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fb4c 	bl	8009802 <TIM_ITRx_SetConfig>
    break;
 800916a:	e015      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2110      	movs	r1, #16
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fb45 	bl	8009802 <TIM_ITRx_SetConfig>
    break;
 8009178:	e00e      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2120      	movs	r1, #32
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fb3e 	bl	8009802 <TIM_ITRx_SetConfig>
    break;
 8009186:	e007      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2130      	movs	r1, #48	; 0x30
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fb37 	bl	8009802 <TIM_ITRx_SetConfig>
    break;
 8009194:	e000      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8009196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr

080091c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr

080091d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bc80      	pop	{r7}
 80091f8:	4770      	bx	lr

080091fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	bc80      	pop	{r7}
 800920a:	4770      	bx	lr

0800920c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr

0800921e <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f7ff ffe9 	bl	800920c <HAL_TIM_ErrorCallback>
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	429a      	cmp	r2, r3
 8009260:	d103      	bne.n	800926a <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	771a      	strb	r2, [r3, #28]
 8009268:	e019      	b.n	800929e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d103      	bne.n	800927c <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2202      	movs	r2, #2
 8009278:	771a      	strb	r2, [r3, #28]
 800927a:	e010      	b.n	800929e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d103      	bne.n	800928e <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2204      	movs	r2, #4
 800928a:	771a      	strb	r2, [r3, #28]
 800928c:	e007      	b.n	800929e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d102      	bne.n	800929e <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2208      	movs	r2, #8
 800929c:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f7ff ffa2 	bl	80091e8 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	771a      	strb	r2, [r3, #28]
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a34      	ldr	r2, [pc, #208]	; (800939c <TIM_Base_SetConfig+0xe8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d013      	beq.n	80092f8 <TIM_Base_SetConfig+0x44>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a33      	ldr	r2, [pc, #204]	; (80093a0 <TIM_Base_SetConfig+0xec>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d00f      	beq.n	80092f8 <TIM_Base_SetConfig+0x44>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092de:	d00b      	beq.n	80092f8 <TIM_Base_SetConfig+0x44>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a30      	ldr	r2, [pc, #192]	; (80093a4 <TIM_Base_SetConfig+0xf0>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d007      	beq.n	80092f8 <TIM_Base_SetConfig+0x44>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a2f      	ldr	r2, [pc, #188]	; (80093a8 <TIM_Base_SetConfig+0xf4>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d003      	beq.n	80092f8 <TIM_Base_SetConfig+0x44>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a2e      	ldr	r2, [pc, #184]	; (80093ac <TIM_Base_SetConfig+0xf8>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d108      	bne.n	800930a <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a23      	ldr	r2, [pc, #140]	; (800939c <TIM_Base_SetConfig+0xe8>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <TIM_Base_SetConfig+0x86>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a22      	ldr	r2, [pc, #136]	; (80093a0 <TIM_Base_SetConfig+0xec>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00f      	beq.n	800933a <TIM_Base_SetConfig+0x86>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009320:	d00b      	beq.n	800933a <TIM_Base_SetConfig+0x86>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <TIM_Base_SetConfig+0xf0>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d007      	beq.n	800933a <TIM_Base_SetConfig+0x86>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a1e      	ldr	r2, [pc, #120]	; (80093a8 <TIM_Base_SetConfig+0xf4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d003      	beq.n	800933a <TIM_Base_SetConfig+0x86>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a1d      	ldr	r2, [pc, #116]	; (80093ac <TIM_Base_SetConfig+0xf8>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d108      	bne.n	800934c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009352:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a09      	ldr	r2, [pc, #36]	; (800939c <TIM_Base_SetConfig+0xe8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_Base_SetConfig+0xd0>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a08      	ldr	r2, [pc, #32]	; (80093a0 <TIM_Base_SetConfig+0xec>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d103      	bne.n	800938c <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	615a      	str	r2, [r3, #20]
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr
 800939c:	40012c00 	.word	0x40012c00
 80093a0:	40013400 	.word	0x40013400
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800
 80093ac:	40000c00 	.word	0x40000c00

080093b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	f023 0201 	bic.w	r2, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f023 0302 	bic.w	r3, r3, #2
 8009404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4313      	orrs	r3, r2
 800940e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a20      	ldr	r2, [pc, #128]	; (8009494 <TIM_OC1_SetConfig+0xe4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_OC1_SetConfig+0x70>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a1f      	ldr	r2, [pc, #124]	; (8009498 <TIM_OC1_SetConfig+0xe8>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10c      	bne.n	800943a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f023 0308 	bic.w	r3, r3, #8
 8009426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f023 0304 	bic.w	r3, r3, #4
 8009438:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a15      	ldr	r2, [pc, #84]	; (8009494 <TIM_OC1_SetConfig+0xe4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d003      	beq.n	800944a <TIM_OC1_SetConfig+0x9a>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a14      	ldr	r2, [pc, #80]	; (8009498 <TIM_OC1_SetConfig+0xe8>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d111      	bne.n	800946e <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	4313      	orrs	r3, r2
 8009462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	4313      	orrs	r3, r2
 800946c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	621a      	str	r2, [r3, #32]
}
 8009488:	bf00      	nop
 800948a:	371c      	adds	r7, #28
 800948c:	46bd      	mov	sp, r7
 800948e:	bc80      	pop	{r7}
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	40012c00 	.word	0x40012c00
 8009498:	40013400 	.word	0x40013400

0800949c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	f023 0210 	bic.w	r2, r3, #16
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f023 0320 	bic.w	r3, r3, #32
 80094f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a21      	ldr	r2, [pc, #132]	; (8009588 <TIM_OC2_SetConfig+0xec>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <TIM_OC2_SetConfig+0x74>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a20      	ldr	r2, [pc, #128]	; (800958c <TIM_OC2_SetConfig+0xf0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d10d      	bne.n	800952c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	4313      	orrs	r3, r2
 8009522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800952a:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a16      	ldr	r2, [pc, #88]	; (8009588 <TIM_OC2_SetConfig+0xec>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d003      	beq.n	800953c <TIM_OC2_SetConfig+0xa0>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a15      	ldr	r2, [pc, #84]	; (800958c <TIM_OC2_SetConfig+0xf0>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d113      	bne.n	8009564 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800954a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	4313      	orrs	r3, r2
 8009562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	621a      	str	r2, [r3, #32]
}
 800957e:	bf00      	nop
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	bc80      	pop	{r7}
 8009586:	4770      	bx	lr
 8009588:	40012c00 	.word	0x40012c00
 800958c:	40013400 	.word	0x40013400

08009590 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a21      	ldr	r2, [pc, #132]	; (800967c <TIM_OC3_SetConfig+0xec>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d003      	beq.n	8009602 <TIM_OC3_SetConfig+0x72>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a20      	ldr	r2, [pc, #128]	; (8009680 <TIM_OC3_SetConfig+0xf0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d10d      	bne.n	800961e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	021b      	lsls	r3, r3, #8
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	4313      	orrs	r3, r2
 8009614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800961c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a16      	ldr	r2, [pc, #88]	; (800967c <TIM_OC3_SetConfig+0xec>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d003      	beq.n	800962e <TIM_OC3_SetConfig+0x9e>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a15      	ldr	r2, [pc, #84]	; (8009680 <TIM_OC3_SetConfig+0xf0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d113      	bne.n	8009656 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800963c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	011b      	lsls	r3, r3, #4
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	621a      	str	r2, [r3, #32]
}
 8009670:	bf00      	nop
 8009672:	371c      	adds	r7, #28
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	40012c00 	.word	0x40012c00
 8009680:	40013400 	.word	0x40013400

08009684 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096be:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	021b      	lsls	r3, r3, #8
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096da:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	031b      	lsls	r3, r3, #12
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a11      	ldr	r2, [pc, #68]	; (8009730 <TIM_OC4_SetConfig+0xac>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d003      	beq.n	80096f8 <TIM_OC4_SetConfig+0x74>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a10      	ldr	r2, [pc, #64]	; (8009734 <TIM_OC4_SetConfig+0xb0>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d109      	bne.n	800970c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	019b      	lsls	r3, r3, #6
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	4313      	orrs	r3, r2
 800970a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	621a      	str	r2, [r3, #32]
}
 8009726:	bf00      	nop
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr
 8009730:	40012c00 	.word	0x40012c00
 8009734:	40013400 	.word	0x40013400

08009738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f023 0201 	bic.w	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800976a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f023 030a 	bic.w	r3, r3, #10
 800977c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4313      	orrs	r3, r2
 8009784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	621a      	str	r2, [r3, #32]
}
 8009792:	bf00      	nop
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	bc80      	pop	{r7}
 800979a:	4770      	bx	lr

0800979c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	f023 0210 	bic.w	r2, r3, #16
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	031b      	lsls	r3, r3, #12
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	621a      	str	r2, [r3, #32]
}
 80097f8:	bf00      	nop
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bc80      	pop	{r7}
 8009800:	4770      	bx	lr

08009802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8009802:	b480      	push	{r7}
 8009804:	b085      	sub	sp, #20
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8009820:	887b      	ldrh	r3, [r7, #2]
 8009822:	f043 0307 	orr.w	r3, r3, #7
 8009826:	b29b      	uxth	r3, r3
 8009828:	461a      	mov	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4313      	orrs	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	609a      	str	r2, [r3, #8]
}
 8009836:	bf00      	nop
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	bc80      	pop	{r7}
 800983e:	4770      	bx	lr

08009840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800985e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	021a      	lsls	r2, r3, #8
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	431a      	orrs	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4313      	orrs	r3, r2
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	4313      	orrs	r3, r2
 8009870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	609a      	str	r2, [r3, #8]
}
 8009878:	bf00      	nop
 800987a:	371c      	adds	r7, #28
 800987c:	46bd      	mov	sp, r7
 800987e:	bc80      	pop	{r7}
 8009880:	4770      	bx	lr

08009882 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009882:	b480      	push	{r7}
 8009884:	b087      	sub	sp, #28
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8009892:	2201      	movs	r2, #1
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a1a      	ldr	r2, [r3, #32]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	43db      	mvns	r3, r3
 80098a4:	401a      	ands	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a1a      	ldr	r2, [r3, #32]
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	fa01 f303 	lsl.w	r3, r1, r3
 80098b6:	431a      	orrs	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	621a      	str	r2, [r3, #32]
}
 80098bc:	bf00      	nop
 80098be:	371c      	adds	r7, #28
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bc80      	pop	{r7}
 80098c4:	4770      	bx	lr

080098c6 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d101      	bne.n	80098e2 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80098de:	2302      	movs	r3, #2
 80098e0:	e044      	b.n	800996c <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	4313      	orrs	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	bc80      	pop	{r7}
 8009974:	4770      	bx	lr

08009976 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800998a:	2302      	movs	r3, #2
 800998c:	e032      	b.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80099ac:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6859      	ldr	r1, [r3, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	689a      	ldr	r2, [r3, #8]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ce:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6899      	ldr	r1, [r3, #8]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bc80      	pop	{r7}
 80099fc:	4770      	bx	lr

080099fe <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bc80      	pop	{r7}
 8009a0e:	4770      	bx	lr

08009a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr

08009a22 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e03f      	b.n	8009ab4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7fc fb65 	bl	8006118 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2224      	movs	r2, #36	; 0x24
 8009a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a64:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa5c 	bl	8009f24 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695a      	ldr	r2, [r3, #20]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a8a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a9a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f003 030f 	and.w	r3, r3, #15
 8009aea:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10d      	bne.n	8009b0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d008      	beq.n	8009b0e <HAL_UART_IRQHandler+0x52>
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f98b 	bl	8009e22 <UART_Receive_IT>
      return;
 8009b0c:	e0cb      	b.n	8009ca6 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80ab 	beq.w	8009c6c <HAL_UART_IRQHandler+0x1b0>
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d105      	bne.n	8009b2c <HAL_UART_IRQHandler+0x70>
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 80a0 	beq.w	8009c6c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <HAL_UART_IRQHandler+0x90>
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b44:	f043 0201 	orr.w	r2, r3, #1
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <HAL_UART_IRQHandler+0xb0>
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	f043 0202 	orr.w	r2, r3, #2
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <HAL_UART_IRQHandler+0xd0>
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b84:	f043 0204 	orr.w	r2, r3, #4
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	f003 0308 	and.w	r3, r3, #8
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <HAL_UART_IRQHandler+0xf0>
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba4:	f043 0208 	orr.w	r2, r3, #8
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d077      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f003 0320 	and.w	r3, r3, #32
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d007      	beq.n	8009bce <HAL_UART_IRQHandler+0x112>
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	f003 0320 	and.w	r3, r3, #32
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f92a 	bl	8009e22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bf14      	ite	ne
 8009bdc:	2301      	movne	r3, #1
 8009bde:	2300      	moveq	r3, #0
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be8:	f003 0308 	and.w	r3, r3, #8
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <HAL_UART_IRQHandler+0x13a>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d031      	beq.n	8009c5a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f875 	bl	8009ce6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d023      	beq.n	8009c52 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	695a      	ldr	r2, [r3, #20]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d013      	beq.n	8009c4a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	4a21      	ldr	r2, [pc, #132]	; (8009cac <HAL_UART_IRQHandler+0x1f0>)
 8009c28:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fd fa9c 	bl	800716c <HAL_DMA_Abort_IT>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d016      	beq.n	8009c68 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009c44:	4610      	mov	r0, r2
 8009c46:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c48:	e00e      	b.n	8009c68 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f842 	bl	8009cd4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c50:	e00a      	b.n	8009c68 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f83e 	bl	8009cd4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c58:	e006      	b.n	8009c68 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f83a 	bl	8009cd4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009c66:	e01d      	b.n	8009ca4 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c68:	bf00      	nop
    return;
 8009c6a:	e01b      	b.n	8009ca4 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d008      	beq.n	8009c88 <HAL_UART_IRQHandler+0x1cc>
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f861 	bl	8009d48 <UART_Transmit_IT>
    return;
 8009c86:	e00e      	b.n	8009ca6 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d009      	beq.n	8009ca6 <HAL_UART_IRQHandler+0x1ea>
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d004      	beq.n	8009ca6 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f8a8 	bl	8009df2 <UART_EndTransmit_IT>
    return;
 8009ca2:	e000      	b.n	8009ca6 <HAL_UART_IRQHandler+0x1ea>
    return;
 8009ca4:	bf00      	nop
  }
}
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	08009d21 	.word	0x08009d21

08009cb0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc80      	pop	{r7}
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bc80      	pop	{r7}
 8009ce4:	4770      	bx	lr

08009ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009cfc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	695a      	ldr	r2, [r3, #20]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0201 	bic.w	r2, r2, #1
 8009d0c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009d16:	bf00      	nop
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bc80      	pop	{r7}
 8009d1e:	4770      	bx	lr

08009d20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff ffca 	bl	8009cd4 <HAL_UART_ErrorCallback>
}
 8009d40:	bf00      	nop
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b21      	cmp	r3, #33	; 0x21
 8009d5a:	d144      	bne.n	8009de6 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d64:	d11a      	bne.n	8009d9c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	881b      	ldrh	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d7a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d105      	bne.n	8009d90 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a1b      	ldr	r3, [r3, #32]
 8009d88:	1c9a      	adds	r2, r3, #2
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	621a      	str	r2, [r3, #32]
 8009d8e:	e00e      	b.n	8009dae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	621a      	str	r2, [r3, #32]
 8009d9a:	e008      	b.n	8009dae <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	1c59      	adds	r1, r3, #1
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6211      	str	r1, [r2, #32]
 8009da6:	781a      	ldrb	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	3b01      	subs	r3, #1
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10f      	bne.n	8009de2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009de0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e000      	b.n	8009de8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009de6:	2302      	movs	r3, #2
  }
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bc80      	pop	{r7}
 8009df0:	4770      	bx	lr

08009df2 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e08:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff ff4c 	bl	8009cb0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b22      	cmp	r3, #34	; 0x22
 8009e34:	d171      	bne.n	8009f1a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e3e:	d123      	bne.n	8009e88 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e44:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10e      	bne.n	8009e6c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e64:	1c9a      	adds	r2, r3, #2
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	629a      	str	r2, [r3, #40]	; 0x28
 8009e6a:	e029      	b.n	8009ec0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	629a      	str	r2, [r3, #40]	; 0x28
 8009e86:	e01b      	b.n	8009ec0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6858      	ldr	r0, [r3, #4]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	1c59      	adds	r1, r3, #1
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	6291      	str	r1, [r2, #40]	; 0x28
 8009ea0:	b2c2      	uxtb	r2, r0
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	e00c      	b.n	8009ec0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb2:	1c58      	adds	r0, r3, #1
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	6288      	str	r0, [r1, #40]	; 0x28
 8009eb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ebc:	b2d2      	uxtb	r2, r2
 8009ebe:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d120      	bne.n	8009f16 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0220 	bic.w	r2, r2, #32
 8009ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ef2:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	695a      	ldr	r2, [r3, #20]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 0201 	bic.w	r2, r2, #1
 8009f02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2220      	movs	r2, #32
 8009f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff fed8 	bl	8009cc2 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e002      	b.n	8009f1c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e000      	b.n	8009f1c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009f1a:	2302      	movs	r3, #2
  }
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f24:	b5b0      	push	{r4, r5, r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68da      	ldr	r2, [r3, #12]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689a      	ldr	r2, [r3, #8]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009f66:	f023 030c 	bic.w	r3, r3, #12
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	430b      	orrs	r3, r1
 8009f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a6f      	ldr	r2, [pc, #444]	; (800a14c <UART_SetConfig+0x228>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d16b      	bne.n	800a06c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009f94:	f7fe fa32 	bl	80083fc <HAL_RCC_GetPCLK2Freq>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009a      	lsls	r2, r3, #2
 8009fa2:	441a      	add	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fae:	4a68      	ldr	r2, [pc, #416]	; (800a150 <UART_SetConfig+0x22c>)
 8009fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb4:	095b      	lsrs	r3, r3, #5
 8009fb6:	011c      	lsls	r4, r3, #4
 8009fb8:	f7fe fa20 	bl	80083fc <HAL_RCC_GetPCLK2Freq>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	009a      	lsls	r2, r3, #2
 8009fc6:	441a      	add	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	fbb2 f5f3 	udiv	r5, r2, r3
 8009fd2:	f7fe fa13 	bl	80083fc <HAL_RCC_GetPCLK2Freq>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	009a      	lsls	r2, r3, #2
 8009fe0:	441a      	add	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fec:	4a58      	ldr	r2, [pc, #352]	; (800a150 <UART_SetConfig+0x22c>)
 8009fee:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff2:	095b      	lsrs	r3, r3, #5
 8009ff4:	2264      	movs	r2, #100	; 0x64
 8009ff6:	fb02 f303 	mul.w	r3, r2, r3
 8009ffa:	1aeb      	subs	r3, r5, r3
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	3332      	adds	r3, #50	; 0x32
 800a000:	4a53      	ldr	r2, [pc, #332]	; (800a150 <UART_SetConfig+0x22c>)
 800a002:	fba2 2303 	umull	r2, r3, r2, r3
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a00c:	441c      	add	r4, r3
 800a00e:	f7fe f9f5 	bl	80083fc <HAL_RCC_GetPCLK2Freq>
 800a012:	4602      	mov	r2, r0
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	009a      	lsls	r2, r3, #2
 800a01c:	441a      	add	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	fbb2 f5f3 	udiv	r5, r2, r3
 800a028:	f7fe f9e8 	bl	80083fc <HAL_RCC_GetPCLK2Freq>
 800a02c:	4602      	mov	r2, r0
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009a      	lsls	r2, r3, #2
 800a036:	441a      	add	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a042:	4a43      	ldr	r2, [pc, #268]	; (800a150 <UART_SetConfig+0x22c>)
 800a044:	fba2 2303 	umull	r2, r3, r2, r3
 800a048:	095b      	lsrs	r3, r3, #5
 800a04a:	2264      	movs	r2, #100	; 0x64
 800a04c:	fb02 f303 	mul.w	r3, r2, r3
 800a050:	1aeb      	subs	r3, r5, r3
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	3332      	adds	r3, #50	; 0x32
 800a056:	4a3e      	ldr	r2, [pc, #248]	; (800a150 <UART_SetConfig+0x22c>)
 800a058:	fba2 2303 	umull	r2, r3, r2, r3
 800a05c:	095b      	lsrs	r3, r3, #5
 800a05e:	f003 020f 	and.w	r2, r3, #15
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4422      	add	r2, r4
 800a068:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800a06a:	e06a      	b.n	800a142 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800a06c:	f7fe f9b2 	bl	80083d4 <HAL_RCC_GetPCLK1Freq>
 800a070:	4602      	mov	r2, r0
 800a072:	4613      	mov	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	009a      	lsls	r2, r3, #2
 800a07a:	441a      	add	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	fbb2 f3f3 	udiv	r3, r2, r3
 800a086:	4a32      	ldr	r2, [pc, #200]	; (800a150 <UART_SetConfig+0x22c>)
 800a088:	fba2 2303 	umull	r2, r3, r2, r3
 800a08c:	095b      	lsrs	r3, r3, #5
 800a08e:	011c      	lsls	r4, r3, #4
 800a090:	f7fe f9a0 	bl	80083d4 <HAL_RCC_GetPCLK1Freq>
 800a094:	4602      	mov	r2, r0
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009a      	lsls	r2, r3, #2
 800a09e:	441a      	add	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	fbb2 f5f3 	udiv	r5, r2, r3
 800a0aa:	f7fe f993 	bl	80083d4 <HAL_RCC_GetPCLK1Freq>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009a      	lsls	r2, r3, #2
 800a0b8:	441a      	add	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c4:	4a22      	ldr	r2, [pc, #136]	; (800a150 <UART_SetConfig+0x22c>)
 800a0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ca:	095b      	lsrs	r3, r3, #5
 800a0cc:	2264      	movs	r2, #100	; 0x64
 800a0ce:	fb02 f303 	mul.w	r3, r2, r3
 800a0d2:	1aeb      	subs	r3, r5, r3
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	3332      	adds	r3, #50	; 0x32
 800a0d8:	4a1d      	ldr	r2, [pc, #116]	; (800a150 <UART_SetConfig+0x22c>)
 800a0da:	fba2 2303 	umull	r2, r3, r2, r3
 800a0de:	095b      	lsrs	r3, r3, #5
 800a0e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0e4:	441c      	add	r4, r3
 800a0e6:	f7fe f975 	bl	80083d4 <HAL_RCC_GetPCLK1Freq>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009a      	lsls	r2, r3, #2
 800a0f4:	441a      	add	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	fbb2 f5f3 	udiv	r5, r2, r3
 800a100:	f7fe f968 	bl	80083d4 <HAL_RCC_GetPCLK1Freq>
 800a104:	4602      	mov	r2, r0
 800a106:	4613      	mov	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	009a      	lsls	r2, r3, #2
 800a10e:	441a      	add	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11a:	4a0d      	ldr	r2, [pc, #52]	; (800a150 <UART_SetConfig+0x22c>)
 800a11c:	fba2 2303 	umull	r2, r3, r2, r3
 800a120:	095b      	lsrs	r3, r3, #5
 800a122:	2264      	movs	r2, #100	; 0x64
 800a124:	fb02 f303 	mul.w	r3, r2, r3
 800a128:	1aeb      	subs	r3, r5, r3
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	3332      	adds	r3, #50	; 0x32
 800a12e:	4a08      	ldr	r2, [pc, #32]	; (800a150 <UART_SetConfig+0x22c>)
 800a130:	fba2 2303 	umull	r2, r3, r2, r3
 800a134:	095b      	lsrs	r3, r3, #5
 800a136:	f003 020f 	and.w	r2, r3, #15
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4422      	add	r2, r4
 800a140:	609a      	str	r2, [r3, #8]
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bdb0      	pop	{r4, r5, r7, pc}
 800a14a:	bf00      	nop
 800a14c:	40013800 	.word	0x40013800
 800a150:	51eb851f 	.word	0x51eb851f

0800a154 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	6812      	ldr	r2, [r2, #0]
 800a16c:	f023 0101 	bic.w	r1, r3, #1
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	2b08      	cmp	r3, #8
 800a17c:	d132      	bne.n	800a1e4 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a188:	4b31      	ldr	r3, [pc, #196]	; (800a250 <FSMC_NORSRAM_Init+0xfc>)
 800a18a:	4013      	ands	r3, r2
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	6851      	ldr	r1, [r2, #4]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	6892      	ldr	r2, [r2, #8]
 800a194:	4311      	orrs	r1, r2
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	68d2      	ldr	r2, [r2, #12]
 800a19a:	4311      	orrs	r1, r2
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	6912      	ldr	r2, [r2, #16]
 800a1a0:	4311      	orrs	r1, r2
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	6952      	ldr	r2, [r2, #20]
 800a1a6:	4311      	orrs	r1, r2
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	6992      	ldr	r2, [r2, #24]
 800a1ac:	4311      	orrs	r1, r2
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	69d2      	ldr	r2, [r2, #28]
 800a1b2:	4311      	orrs	r1, r2
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	6a12      	ldr	r2, [r2, #32]
 800a1b8:	4311      	orrs	r1, r2
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1be:	4311      	orrs	r1, r2
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a1c4:	4311      	orrs	r1, r2
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a1ca:	4311      	orrs	r1, r2
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	6812      	ldr	r2, [r2, #0]
 800a1d8:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a1e2:	e02f      	b.n	800a244 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a1ee:	4b18      	ldr	r3, [pc, #96]	; (800a250 <FSMC_NORSRAM_Init+0xfc>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	6851      	ldr	r1, [r2, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	6892      	ldr	r2, [r2, #8]
 800a1fa:	4311      	orrs	r1, r2
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	68d2      	ldr	r2, [r2, #12]
 800a200:	4311      	orrs	r1, r2
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	6912      	ldr	r2, [r2, #16]
 800a206:	4311      	orrs	r1, r2
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	6952      	ldr	r2, [r2, #20]
 800a20c:	4311      	orrs	r1, r2
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	6992      	ldr	r2, [r2, #24]
 800a212:	4311      	orrs	r1, r2
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	69d2      	ldr	r2, [r2, #28]
 800a218:	4311      	orrs	r1, r2
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	6a12      	ldr	r2, [r2, #32]
 800a21e:	4311      	orrs	r1, r2
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a224:	4311      	orrs	r1, r2
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a22a:	4311      	orrs	r1, r2
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a230:	4311      	orrs	r1, r2
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a236:	4311      	orrs	r1, r2
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	4319      	orrs	r1, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bc80      	pop	{r7}
 800a24e:	4770      	bx	lr
 800a250:	fff70081 	.word	0xfff70081

0800a254 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	431a      	orrs	r2, r3
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	021b      	lsls	r3, r3, #8
 800a280:	431a      	orrs	r2, r3
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	041b      	lsls	r3, r3, #16
 800a288:	431a      	orrs	r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	3b01      	subs	r3, #1
 800a290:	051b      	lsls	r3, r3, #20
 800a292:	431a      	orrs	r2, r3
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	3b02      	subs	r3, #2
 800a29a:	061b      	lsls	r3, r3, #24
 800a29c:	431a      	orrs	r2, r3
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	3201      	adds	r2, #1
 800a2a8:	4319      	orrs	r1, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bc80      	pop	{r7}
 800a2ba:	4770      	bx	lr

0800a2bc <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2d0:	d11d      	bne.n	800a30e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2da:	4b13      	ldr	r3, [pc, #76]	; (800a328 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a2dc:	4013      	ands	r3, r2
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	6811      	ldr	r1, [r2, #0]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	6852      	ldr	r2, [r2, #4]
 800a2e6:	0112      	lsls	r2, r2, #4
 800a2e8:	4311      	orrs	r1, r2
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	6892      	ldr	r2, [r2, #8]
 800a2ee:	0212      	lsls	r2, r2, #8
 800a2f0:	4311      	orrs	r1, r2
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	6992      	ldr	r2, [r2, #24]
 800a2f6:	4311      	orrs	r1, r2
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	68d2      	ldr	r2, [r2, #12]
 800a2fc:	0412      	lsls	r2, r2, #16
 800a2fe:	430a      	orrs	r2, r1
 800a300:	ea43 0102 	orr.w	r1, r3, r2
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a30c:	e005      	b.n	800a31a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	bc80      	pop	{r7}
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	cff00000 	.word	0xcff00000

0800a32c <__cxa_pure_virtual>:
 800a32c:	b508      	push	{r3, lr}
 800a32e:	f000 f80d 	bl	800a34c <_ZSt9terminatev>

0800a332 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a332:	b508      	push	{r3, lr}
 800a334:	4780      	blx	r0
 800a336:	f000 f879 	bl	800a42c <abort>
	...

0800a33c <_ZSt13get_terminatev>:
 800a33c:	4b02      	ldr	r3, [pc, #8]	; (800a348 <_ZSt13get_terminatev+0xc>)
 800a33e:	6818      	ldr	r0, [r3, #0]
 800a340:	f3bf 8f5b 	dmb	ish
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	20000048 	.word	0x20000048

0800a34c <_ZSt9terminatev>:
 800a34c:	b508      	push	{r3, lr}
 800a34e:	f7ff fff5 	bl	800a33c <_ZSt13get_terminatev>
 800a352:	f7ff ffee 	bl	800a332 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a356 <sqrtf>:
 800a356:	b538      	push	{r3, r4, r5, lr}
 800a358:	4605      	mov	r5, r0
 800a35a:	f000 f816 	bl	800a38a <__ieee754_sqrtf>
 800a35e:	4629      	mov	r1, r5
 800a360:	4604      	mov	r4, r0
 800a362:	4628      	mov	r0, r5
 800a364:	f7f6 feda 	bl	800111c <__aeabi_fcmpun>
 800a368:	b968      	cbnz	r0, 800a386 <sqrtf+0x30>
 800a36a:	2100      	movs	r1, #0
 800a36c:	4628      	mov	r0, r5
 800a36e:	f7f6 fead 	bl	80010cc <__aeabi_fcmplt>
 800a372:	b140      	cbz	r0, 800a386 <sqrtf+0x30>
 800a374:	f000 f862 	bl	800a43c <__errno>
 800a378:	2321      	movs	r3, #33	; 0x21
 800a37a:	2100      	movs	r1, #0
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	4608      	mov	r0, r1
 800a380:	f7f6 fdba 	bl	8000ef8 <__aeabi_fdiv>
 800a384:	4604      	mov	r4, r0
 800a386:	4620      	mov	r0, r4
 800a388:	bd38      	pop	{r3, r4, r5, pc}

0800a38a <__ieee754_sqrtf>:
 800a38a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a38e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	4603      	mov	r3, r0
 800a396:	4604      	mov	r4, r0
 800a398:	d309      	bcc.n	800a3ae <__ieee754_sqrtf+0x24>
 800a39a:	4601      	mov	r1, r0
 800a39c:	f7f6 fcf8 	bl	8000d90 <__aeabi_fmul>
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f7f6 fbec 	bl	8000b80 <__addsf3>
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	d0fb      	beq.n	800a3aa <__ieee754_sqrtf+0x20>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	da06      	bge.n	800a3c4 <__ieee754_sqrtf+0x3a>
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	f7f6 fbe0 	bl	8000b7c <__aeabi_fsub>
 800a3bc:	4601      	mov	r1, r0
 800a3be:	f7f6 fd9b 	bl	8000ef8 <__aeabi_fdiv>
 800a3c2:	e7f1      	b.n	800a3a8 <__ieee754_sqrtf+0x1e>
 800a3c4:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800a3c8:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800a3cc:	d029      	beq.n	800a422 <__ieee754_sqrtf+0x98>
 800a3ce:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800a3d2:	07cb      	lsls	r3, r1, #31
 800a3d4:	f04f 0300 	mov.w	r3, #0
 800a3d8:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800a3dc:	f04f 0419 	mov.w	r4, #25
 800a3e0:	461e      	mov	r6, r3
 800a3e2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800a3e6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a3ea:	bf58      	it	pl
 800a3ec:	0052      	lslpl	r2, r2, #1
 800a3ee:	1040      	asrs	r0, r0, #1
 800a3f0:	0052      	lsls	r2, r2, #1
 800a3f2:	1875      	adds	r5, r6, r1
 800a3f4:	4295      	cmp	r5, r2
 800a3f6:	bfde      	ittt	le
 800a3f8:	186e      	addle	r6, r5, r1
 800a3fa:	1b52      	suble	r2, r2, r5
 800a3fc:	185b      	addle	r3, r3, r1
 800a3fe:	3c01      	subs	r4, #1
 800a400:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a404:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a408:	d1f3      	bne.n	800a3f2 <__ieee754_sqrtf+0x68>
 800a40a:	b112      	cbz	r2, 800a412 <__ieee754_sqrtf+0x88>
 800a40c:	3301      	adds	r3, #1
 800a40e:	f023 0301 	bic.w	r3, r3, #1
 800a412:	105c      	asrs	r4, r3, #1
 800a414:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a418:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800a41c:	e7c5      	b.n	800a3aa <__ieee754_sqrtf+0x20>
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	3201      	adds	r2, #1
 800a422:	0218      	lsls	r0, r3, #8
 800a424:	d5fb      	bpl.n	800a41e <__ieee754_sqrtf+0x94>
 800a426:	3a01      	subs	r2, #1
 800a428:	1a89      	subs	r1, r1, r2
 800a42a:	e7d0      	b.n	800a3ce <__ieee754_sqrtf+0x44>

0800a42c <abort>:
 800a42c:	2006      	movs	r0, #6
 800a42e:	b508      	push	{r3, lr}
 800a430:	f000 f85e 	bl	800a4f0 <raise>
 800a434:	2001      	movs	r0, #1
 800a436:	f7fb f86a 	bl	800550e <_exit>
	...

0800a43c <__errno>:
 800a43c:	4b01      	ldr	r3, [pc, #4]	; (800a444 <__errno+0x8>)
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	2000004c 	.word	0x2000004c

0800a448 <__libc_init_array>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	2600      	movs	r6, #0
 800a44c:	4d0c      	ldr	r5, [pc, #48]	; (800a480 <__libc_init_array+0x38>)
 800a44e:	4c0d      	ldr	r4, [pc, #52]	; (800a484 <__libc_init_array+0x3c>)
 800a450:	1b64      	subs	r4, r4, r5
 800a452:	10a4      	asrs	r4, r4, #2
 800a454:	42a6      	cmp	r6, r4
 800a456:	d109      	bne.n	800a46c <__libc_init_array+0x24>
 800a458:	f000 fce8 	bl	800ae2c <_init>
 800a45c:	2600      	movs	r6, #0
 800a45e:	4d0a      	ldr	r5, [pc, #40]	; (800a488 <__libc_init_array+0x40>)
 800a460:	4c0a      	ldr	r4, [pc, #40]	; (800a48c <__libc_init_array+0x44>)
 800a462:	1b64      	subs	r4, r4, r5
 800a464:	10a4      	asrs	r4, r4, #2
 800a466:	42a6      	cmp	r6, r4
 800a468:	d105      	bne.n	800a476 <__libc_init_array+0x2e>
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a470:	4798      	blx	r3
 800a472:	3601      	adds	r6, #1
 800a474:	e7ee      	b.n	800a454 <__libc_init_array+0xc>
 800a476:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47a:	4798      	blx	r3
 800a47c:	3601      	adds	r6, #1
 800a47e:	e7f2      	b.n	800a466 <__libc_init_array+0x1e>
 800a480:	08016d84 	.word	0x08016d84
 800a484:	08016d84 	.word	0x08016d84
 800a488:	08016d84 	.word	0x08016d84
 800a48c:	08016d90 	.word	0x08016d90

0800a490 <memset>:
 800a490:	4603      	mov	r3, r0
 800a492:	4402      	add	r2, r0
 800a494:	4293      	cmp	r3, r2
 800a496:	d100      	bne.n	800a49a <memset+0xa>
 800a498:	4770      	bx	lr
 800a49a:	f803 1b01 	strb.w	r1, [r3], #1
 800a49e:	e7f9      	b.n	800a494 <memset+0x4>

0800a4a0 <_raise_r>:
 800a4a0:	291f      	cmp	r1, #31
 800a4a2:	b538      	push	{r3, r4, r5, lr}
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	d904      	bls.n	800a4b4 <_raise_r+0x14>
 800a4aa:	2316      	movs	r3, #22
 800a4ac:	6003      	str	r3, [r0, #0]
 800a4ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4b6:	b112      	cbz	r2, 800a4be <_raise_r+0x1e>
 800a4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4bc:	b94b      	cbnz	r3, 800a4d2 <_raise_r+0x32>
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 f830 	bl	800a524 <_getpid_r>
 800a4c4:	462a      	mov	r2, r5
 800a4c6:	4601      	mov	r1, r0
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ce:	f000 b817 	b.w	800a500 <_kill_r>
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d00a      	beq.n	800a4ec <_raise_r+0x4c>
 800a4d6:	1c59      	adds	r1, r3, #1
 800a4d8:	d103      	bne.n	800a4e2 <_raise_r+0x42>
 800a4da:	2316      	movs	r3, #22
 800a4dc:	6003      	str	r3, [r0, #0]
 800a4de:	2001      	movs	r0, #1
 800a4e0:	e7e7      	b.n	800a4b2 <_raise_r+0x12>
 800a4e2:	2400      	movs	r4, #0
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4ea:	4798      	blx	r3
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	e7e0      	b.n	800a4b2 <_raise_r+0x12>

0800a4f0 <raise>:
 800a4f0:	4b02      	ldr	r3, [pc, #8]	; (800a4fc <raise+0xc>)
 800a4f2:	4601      	mov	r1, r0
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	f7ff bfd3 	b.w	800a4a0 <_raise_r>
 800a4fa:	bf00      	nop
 800a4fc:	2000004c 	.word	0x2000004c

0800a500 <_kill_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	2300      	movs	r3, #0
 800a504:	4d06      	ldr	r5, [pc, #24]	; (800a520 <_kill_r+0x20>)
 800a506:	4604      	mov	r4, r0
 800a508:	4608      	mov	r0, r1
 800a50a:	4611      	mov	r1, r2
 800a50c:	602b      	str	r3, [r5, #0]
 800a50e:	f7fa ffee 	bl	80054ee <_kill>
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	d102      	bne.n	800a51c <_kill_r+0x1c>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	b103      	cbz	r3, 800a51c <_kill_r+0x1c>
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	bd38      	pop	{r3, r4, r5, pc}
 800a51e:	bf00      	nop
 800a520:	20000d30 	.word	0x20000d30

0800a524 <_getpid_r>:
 800a524:	f7fa bfdc 	b.w	80054e0 <_getpid>

0800a528 <siprintf>:
 800a528:	b40e      	push	{r1, r2, r3}
 800a52a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a52e:	b500      	push	{lr}
 800a530:	b09c      	sub	sp, #112	; 0x70
 800a532:	ab1d      	add	r3, sp, #116	; 0x74
 800a534:	9002      	str	r0, [sp, #8]
 800a536:	9006      	str	r0, [sp, #24]
 800a538:	9107      	str	r1, [sp, #28]
 800a53a:	9104      	str	r1, [sp, #16]
 800a53c:	4808      	ldr	r0, [pc, #32]	; (800a560 <siprintf+0x38>)
 800a53e:	4909      	ldr	r1, [pc, #36]	; (800a564 <siprintf+0x3c>)
 800a540:	f853 2b04 	ldr.w	r2, [r3], #4
 800a544:	9105      	str	r1, [sp, #20]
 800a546:	6800      	ldr	r0, [r0, #0]
 800a548:	a902      	add	r1, sp, #8
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	f000 f904 	bl	800a758 <_svfiprintf_r>
 800a550:	2200      	movs	r2, #0
 800a552:	9b02      	ldr	r3, [sp, #8]
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	b01c      	add	sp, #112	; 0x70
 800a558:	f85d eb04 	ldr.w	lr, [sp], #4
 800a55c:	b003      	add	sp, #12
 800a55e:	4770      	bx	lr
 800a560:	2000004c 	.word	0x2000004c
 800a564:	ffff0208 	.word	0xffff0208

0800a568 <strcpy>:
 800a568:	4603      	mov	r3, r0
 800a56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a56e:	f803 2b01 	strb.w	r2, [r3], #1
 800a572:	2a00      	cmp	r2, #0
 800a574:	d1f9      	bne.n	800a56a <strcpy+0x2>
 800a576:	4770      	bx	lr

0800a578 <sbrk_aligned>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4e0e      	ldr	r6, [pc, #56]	; (800a5b4 <sbrk_aligned+0x3c>)
 800a57c:	460c      	mov	r4, r1
 800a57e:	6831      	ldr	r1, [r6, #0]
 800a580:	4605      	mov	r5, r0
 800a582:	b911      	cbnz	r1, 800a58a <sbrk_aligned+0x12>
 800a584:	f000 fb7e 	bl	800ac84 <_sbrk_r>
 800a588:	6030      	str	r0, [r6, #0]
 800a58a:	4621      	mov	r1, r4
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 fb79 	bl	800ac84 <_sbrk_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	d00a      	beq.n	800a5ac <sbrk_aligned+0x34>
 800a596:	1cc4      	adds	r4, r0, #3
 800a598:	f024 0403 	bic.w	r4, r4, #3
 800a59c:	42a0      	cmp	r0, r4
 800a59e:	d007      	beq.n	800a5b0 <sbrk_aligned+0x38>
 800a5a0:	1a21      	subs	r1, r4, r0
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f000 fb6e 	bl	800ac84 <_sbrk_r>
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d101      	bne.n	800a5b0 <sbrk_aligned+0x38>
 800a5ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	20000d2c 	.word	0x20000d2c

0800a5b8 <_malloc_r>:
 800a5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5bc:	1ccd      	adds	r5, r1, #3
 800a5be:	f025 0503 	bic.w	r5, r5, #3
 800a5c2:	3508      	adds	r5, #8
 800a5c4:	2d0c      	cmp	r5, #12
 800a5c6:	bf38      	it	cc
 800a5c8:	250c      	movcc	r5, #12
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	db01      	blt.n	800a5d4 <_malloc_r+0x1c>
 800a5d0:	42a9      	cmp	r1, r5
 800a5d2:	d905      	bls.n	800a5e0 <_malloc_r+0x28>
 800a5d4:	230c      	movs	r3, #12
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	603b      	str	r3, [r7, #0]
 800a5da:	4630      	mov	r0, r6
 800a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e0:	4e2e      	ldr	r6, [pc, #184]	; (800a69c <_malloc_r+0xe4>)
 800a5e2:	f000 fb95 	bl	800ad10 <__malloc_lock>
 800a5e6:	6833      	ldr	r3, [r6, #0]
 800a5e8:	461c      	mov	r4, r3
 800a5ea:	bb34      	cbnz	r4, 800a63a <_malloc_r+0x82>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7ff ffc2 	bl	800a578 <sbrk_aligned>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	d14d      	bne.n	800a696 <_malloc_r+0xde>
 800a5fa:	6834      	ldr	r4, [r6, #0]
 800a5fc:	4626      	mov	r6, r4
 800a5fe:	2e00      	cmp	r6, #0
 800a600:	d140      	bne.n	800a684 <_malloc_r+0xcc>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	4631      	mov	r1, r6
 800a606:	4638      	mov	r0, r7
 800a608:	eb04 0803 	add.w	r8, r4, r3
 800a60c:	f000 fb3a 	bl	800ac84 <_sbrk_r>
 800a610:	4580      	cmp	r8, r0
 800a612:	d13a      	bne.n	800a68a <_malloc_r+0xd2>
 800a614:	6821      	ldr	r1, [r4, #0]
 800a616:	3503      	adds	r5, #3
 800a618:	1a6d      	subs	r5, r5, r1
 800a61a:	f025 0503 	bic.w	r5, r5, #3
 800a61e:	3508      	adds	r5, #8
 800a620:	2d0c      	cmp	r5, #12
 800a622:	bf38      	it	cc
 800a624:	250c      	movcc	r5, #12
 800a626:	4638      	mov	r0, r7
 800a628:	4629      	mov	r1, r5
 800a62a:	f7ff ffa5 	bl	800a578 <sbrk_aligned>
 800a62e:	3001      	adds	r0, #1
 800a630:	d02b      	beq.n	800a68a <_malloc_r+0xd2>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	442b      	add	r3, r5
 800a636:	6023      	str	r3, [r4, #0]
 800a638:	e00e      	b.n	800a658 <_malloc_r+0xa0>
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	1b52      	subs	r2, r2, r5
 800a63e:	d41e      	bmi.n	800a67e <_malloc_r+0xc6>
 800a640:	2a0b      	cmp	r2, #11
 800a642:	d916      	bls.n	800a672 <_malloc_r+0xba>
 800a644:	1961      	adds	r1, r4, r5
 800a646:	42a3      	cmp	r3, r4
 800a648:	6025      	str	r5, [r4, #0]
 800a64a:	bf18      	it	ne
 800a64c:	6059      	strne	r1, [r3, #4]
 800a64e:	6863      	ldr	r3, [r4, #4]
 800a650:	bf08      	it	eq
 800a652:	6031      	streq	r1, [r6, #0]
 800a654:	5162      	str	r2, [r4, r5]
 800a656:	604b      	str	r3, [r1, #4]
 800a658:	4638      	mov	r0, r7
 800a65a:	f104 060b 	add.w	r6, r4, #11
 800a65e:	f000 fb5d 	bl	800ad1c <__malloc_unlock>
 800a662:	f026 0607 	bic.w	r6, r6, #7
 800a666:	1d23      	adds	r3, r4, #4
 800a668:	1af2      	subs	r2, r6, r3
 800a66a:	d0b6      	beq.n	800a5da <_malloc_r+0x22>
 800a66c:	1b9b      	subs	r3, r3, r6
 800a66e:	50a3      	str	r3, [r4, r2]
 800a670:	e7b3      	b.n	800a5da <_malloc_r+0x22>
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	42a3      	cmp	r3, r4
 800a676:	bf0c      	ite	eq
 800a678:	6032      	streq	r2, [r6, #0]
 800a67a:	605a      	strne	r2, [r3, #4]
 800a67c:	e7ec      	b.n	800a658 <_malloc_r+0xa0>
 800a67e:	4623      	mov	r3, r4
 800a680:	6864      	ldr	r4, [r4, #4]
 800a682:	e7b2      	b.n	800a5ea <_malloc_r+0x32>
 800a684:	4634      	mov	r4, r6
 800a686:	6876      	ldr	r6, [r6, #4]
 800a688:	e7b9      	b.n	800a5fe <_malloc_r+0x46>
 800a68a:	230c      	movs	r3, #12
 800a68c:	4638      	mov	r0, r7
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	f000 fb44 	bl	800ad1c <__malloc_unlock>
 800a694:	e7a1      	b.n	800a5da <_malloc_r+0x22>
 800a696:	6025      	str	r5, [r4, #0]
 800a698:	e7de      	b.n	800a658 <_malloc_r+0xa0>
 800a69a:	bf00      	nop
 800a69c:	20000d28 	.word	0x20000d28

0800a6a0 <__ssputs_r>:
 800a6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	688e      	ldr	r6, [r1, #8]
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	429e      	cmp	r6, r3
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	4690      	mov	r8, r2
 800a6ae:	461f      	mov	r7, r3
 800a6b0:	d838      	bhi.n	800a724 <__ssputs_r+0x84>
 800a6b2:	898a      	ldrh	r2, [r1, #12]
 800a6b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6b8:	d032      	beq.n	800a720 <__ssputs_r+0x80>
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	6909      	ldr	r1, [r1, #16]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	eba5 0901 	sub.w	r9, r5, r1
 800a6c4:	6965      	ldr	r5, [r4, #20]
 800a6c6:	444b      	add	r3, r9
 800a6c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6d0:	106d      	asrs	r5, r5, #1
 800a6d2:	429d      	cmp	r5, r3
 800a6d4:	bf38      	it	cc
 800a6d6:	461d      	movcc	r5, r3
 800a6d8:	0553      	lsls	r3, r2, #21
 800a6da:	d531      	bpl.n	800a740 <__ssputs_r+0xa0>
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7ff ff6b 	bl	800a5b8 <_malloc_r>
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	b950      	cbnz	r0, 800a6fc <__ssputs_r+0x5c>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6ec:	f8ca 3000 	str.w	r3, [sl]
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f6:	81a3      	strh	r3, [r4, #12]
 800a6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fc:	464a      	mov	r2, r9
 800a6fe:	6921      	ldr	r1, [r4, #16]
 800a700:	f000 fade 	bl	800acc0 <memcpy>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	6126      	str	r6, [r4, #16]
 800a712:	444e      	add	r6, r9
 800a714:	6026      	str	r6, [r4, #0]
 800a716:	463e      	mov	r6, r7
 800a718:	6165      	str	r5, [r4, #20]
 800a71a:	eba5 0509 	sub.w	r5, r5, r9
 800a71e:	60a5      	str	r5, [r4, #8]
 800a720:	42be      	cmp	r6, r7
 800a722:	d900      	bls.n	800a726 <__ssputs_r+0x86>
 800a724:	463e      	mov	r6, r7
 800a726:	4632      	mov	r2, r6
 800a728:	4641      	mov	r1, r8
 800a72a:	6820      	ldr	r0, [r4, #0]
 800a72c:	f000 fad6 	bl	800acdc <memmove>
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	2000      	movs	r0, #0
 800a734:	1b9b      	subs	r3, r3, r6
 800a736:	60a3      	str	r3, [r4, #8]
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	4433      	add	r3, r6
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	e7db      	b.n	800a6f8 <__ssputs_r+0x58>
 800a740:	462a      	mov	r2, r5
 800a742:	f000 fb39 	bl	800adb8 <_realloc_r>
 800a746:	4606      	mov	r6, r0
 800a748:	2800      	cmp	r0, #0
 800a74a:	d1e1      	bne.n	800a710 <__ssputs_r+0x70>
 800a74c:	4650      	mov	r0, sl
 800a74e:	6921      	ldr	r1, [r4, #16]
 800a750:	f000 faea 	bl	800ad28 <_free_r>
 800a754:	e7c7      	b.n	800a6e6 <__ssputs_r+0x46>
	...

0800a758 <_svfiprintf_r>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	4698      	mov	r8, r3
 800a75e:	898b      	ldrh	r3, [r1, #12]
 800a760:	4607      	mov	r7, r0
 800a762:	061b      	lsls	r3, r3, #24
 800a764:	460d      	mov	r5, r1
 800a766:	4614      	mov	r4, r2
 800a768:	b09d      	sub	sp, #116	; 0x74
 800a76a:	d50e      	bpl.n	800a78a <_svfiprintf_r+0x32>
 800a76c:	690b      	ldr	r3, [r1, #16]
 800a76e:	b963      	cbnz	r3, 800a78a <_svfiprintf_r+0x32>
 800a770:	2140      	movs	r1, #64	; 0x40
 800a772:	f7ff ff21 	bl	800a5b8 <_malloc_r>
 800a776:	6028      	str	r0, [r5, #0]
 800a778:	6128      	str	r0, [r5, #16]
 800a77a:	b920      	cbnz	r0, 800a786 <_svfiprintf_r+0x2e>
 800a77c:	230c      	movs	r3, #12
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a784:	e0d1      	b.n	800a92a <_svfiprintf_r+0x1d2>
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	616b      	str	r3, [r5, #20]
 800a78a:	2300      	movs	r3, #0
 800a78c:	9309      	str	r3, [sp, #36]	; 0x24
 800a78e:	2320      	movs	r3, #32
 800a790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a794:	2330      	movs	r3, #48	; 0x30
 800a796:	f04f 0901 	mov.w	r9, #1
 800a79a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a79e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a944 <_svfiprintf_r+0x1ec>
 800a7a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7a6:	4623      	mov	r3, r4
 800a7a8:	469a      	mov	sl, r3
 800a7aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ae:	b10a      	cbz	r2, 800a7b4 <_svfiprintf_r+0x5c>
 800a7b0:	2a25      	cmp	r2, #37	; 0x25
 800a7b2:	d1f9      	bne.n	800a7a8 <_svfiprintf_r+0x50>
 800a7b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7b8:	d00b      	beq.n	800a7d2 <_svfiprintf_r+0x7a>
 800a7ba:	465b      	mov	r3, fp
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7ff ff6d 	bl	800a6a0 <__ssputs_r>
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f000 80aa 	beq.w	800a920 <_svfiprintf_r+0x1c8>
 800a7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ce:	445a      	add	r2, fp
 800a7d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80a2 	beq.w	800a920 <_svfiprintf_r+0x1c8>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7e6:	f10a 0a01 	add.w	sl, sl, #1
 800a7ea:	9304      	str	r3, [sp, #16]
 800a7ec:	9307      	str	r3, [sp, #28]
 800a7ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a7f4:	4654      	mov	r4, sl
 800a7f6:	2205      	movs	r2, #5
 800a7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fc:	4851      	ldr	r0, [pc, #324]	; (800a944 <_svfiprintf_r+0x1ec>)
 800a7fe:	f000 fa51 	bl	800aca4 <memchr>
 800a802:	9a04      	ldr	r2, [sp, #16]
 800a804:	b9d8      	cbnz	r0, 800a83e <_svfiprintf_r+0xe6>
 800a806:	06d0      	lsls	r0, r2, #27
 800a808:	bf44      	itt	mi
 800a80a:	2320      	movmi	r3, #32
 800a80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a810:	0711      	lsls	r1, r2, #28
 800a812:	bf44      	itt	mi
 800a814:	232b      	movmi	r3, #43	; 0x2b
 800a816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a81a:	f89a 3000 	ldrb.w	r3, [sl]
 800a81e:	2b2a      	cmp	r3, #42	; 0x2a
 800a820:	d015      	beq.n	800a84e <_svfiprintf_r+0xf6>
 800a822:	4654      	mov	r4, sl
 800a824:	2000      	movs	r0, #0
 800a826:	f04f 0c0a 	mov.w	ip, #10
 800a82a:	9a07      	ldr	r2, [sp, #28]
 800a82c:	4621      	mov	r1, r4
 800a82e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a832:	3b30      	subs	r3, #48	; 0x30
 800a834:	2b09      	cmp	r3, #9
 800a836:	d94e      	bls.n	800a8d6 <_svfiprintf_r+0x17e>
 800a838:	b1b0      	cbz	r0, 800a868 <_svfiprintf_r+0x110>
 800a83a:	9207      	str	r2, [sp, #28]
 800a83c:	e014      	b.n	800a868 <_svfiprintf_r+0x110>
 800a83e:	eba0 0308 	sub.w	r3, r0, r8
 800a842:	fa09 f303 	lsl.w	r3, r9, r3
 800a846:	4313      	orrs	r3, r2
 800a848:	46a2      	mov	sl, r4
 800a84a:	9304      	str	r3, [sp, #16]
 800a84c:	e7d2      	b.n	800a7f4 <_svfiprintf_r+0x9c>
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	1d19      	adds	r1, r3, #4
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	9103      	str	r1, [sp, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfbb      	ittet	lt
 800a85a:	425b      	neglt	r3, r3
 800a85c:	f042 0202 	orrlt.w	r2, r2, #2
 800a860:	9307      	strge	r3, [sp, #28]
 800a862:	9307      	strlt	r3, [sp, #28]
 800a864:	bfb8      	it	lt
 800a866:	9204      	strlt	r2, [sp, #16]
 800a868:	7823      	ldrb	r3, [r4, #0]
 800a86a:	2b2e      	cmp	r3, #46	; 0x2e
 800a86c:	d10c      	bne.n	800a888 <_svfiprintf_r+0x130>
 800a86e:	7863      	ldrb	r3, [r4, #1]
 800a870:	2b2a      	cmp	r3, #42	; 0x2a
 800a872:	d135      	bne.n	800a8e0 <_svfiprintf_r+0x188>
 800a874:	9b03      	ldr	r3, [sp, #12]
 800a876:	3402      	adds	r4, #2
 800a878:	1d1a      	adds	r2, r3, #4
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	9203      	str	r2, [sp, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bfb8      	it	lt
 800a882:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a886:	9305      	str	r3, [sp, #20]
 800a888:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a948 <_svfiprintf_r+0x1f0>
 800a88c:	2203      	movs	r2, #3
 800a88e:	4650      	mov	r0, sl
 800a890:	7821      	ldrb	r1, [r4, #0]
 800a892:	f000 fa07 	bl	800aca4 <memchr>
 800a896:	b140      	cbz	r0, 800a8aa <_svfiprintf_r+0x152>
 800a898:	2340      	movs	r3, #64	; 0x40
 800a89a:	eba0 000a 	sub.w	r0, r0, sl
 800a89e:	fa03 f000 	lsl.w	r0, r3, r0
 800a8a2:	9b04      	ldr	r3, [sp, #16]
 800a8a4:	3401      	adds	r4, #1
 800a8a6:	4303      	orrs	r3, r0
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ae:	2206      	movs	r2, #6
 800a8b0:	4826      	ldr	r0, [pc, #152]	; (800a94c <_svfiprintf_r+0x1f4>)
 800a8b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8b6:	f000 f9f5 	bl	800aca4 <memchr>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d038      	beq.n	800a930 <_svfiprintf_r+0x1d8>
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <_svfiprintf_r+0x1f8>)
 800a8c0:	bb1b      	cbnz	r3, 800a90a <_svfiprintf_r+0x1b2>
 800a8c2:	9b03      	ldr	r3, [sp, #12]
 800a8c4:	3307      	adds	r3, #7
 800a8c6:	f023 0307 	bic.w	r3, r3, #7
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	9303      	str	r3, [sp, #12]
 800a8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d0:	4433      	add	r3, r6
 800a8d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d4:	e767      	b.n	800a7a6 <_svfiprintf_r+0x4e>
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	2001      	movs	r0, #1
 800a8da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8de:	e7a5      	b.n	800a82c <_svfiprintf_r+0xd4>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f04f 0c0a 	mov.w	ip, #10
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	3401      	adds	r4, #1
 800a8ea:	9305      	str	r3, [sp, #20]
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f2:	3a30      	subs	r2, #48	; 0x30
 800a8f4:	2a09      	cmp	r2, #9
 800a8f6:	d903      	bls.n	800a900 <_svfiprintf_r+0x1a8>
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0c5      	beq.n	800a888 <_svfiprintf_r+0x130>
 800a8fc:	9105      	str	r1, [sp, #20]
 800a8fe:	e7c3      	b.n	800a888 <_svfiprintf_r+0x130>
 800a900:	4604      	mov	r4, r0
 800a902:	2301      	movs	r3, #1
 800a904:	fb0c 2101 	mla	r1, ip, r1, r2
 800a908:	e7f0      	b.n	800a8ec <_svfiprintf_r+0x194>
 800a90a:	ab03      	add	r3, sp, #12
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	462a      	mov	r2, r5
 800a910:	4638      	mov	r0, r7
 800a912:	4b10      	ldr	r3, [pc, #64]	; (800a954 <_svfiprintf_r+0x1fc>)
 800a914:	a904      	add	r1, sp, #16
 800a916:	f3af 8000 	nop.w
 800a91a:	1c42      	adds	r2, r0, #1
 800a91c:	4606      	mov	r6, r0
 800a91e:	d1d6      	bne.n	800a8ce <_svfiprintf_r+0x176>
 800a920:	89ab      	ldrh	r3, [r5, #12]
 800a922:	065b      	lsls	r3, r3, #25
 800a924:	f53f af2c 	bmi.w	800a780 <_svfiprintf_r+0x28>
 800a928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92a:	b01d      	add	sp, #116	; 0x74
 800a92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a930:	ab03      	add	r3, sp, #12
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	462a      	mov	r2, r5
 800a936:	4638      	mov	r0, r7
 800a938:	4b06      	ldr	r3, [pc, #24]	; (800a954 <_svfiprintf_r+0x1fc>)
 800a93a:	a904      	add	r1, sp, #16
 800a93c:	f000 f87c 	bl	800aa38 <_printf_i>
 800a940:	e7eb      	b.n	800a91a <_svfiprintf_r+0x1c2>
 800a942:	bf00      	nop
 800a944:	08016d48 	.word	0x08016d48
 800a948:	08016d4e 	.word	0x08016d4e
 800a94c:	08016d52 	.word	0x08016d52
 800a950:	00000000 	.word	0x00000000
 800a954:	0800a6a1 	.word	0x0800a6a1

0800a958 <_printf_common>:
 800a958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a95c:	4616      	mov	r6, r2
 800a95e:	4699      	mov	r9, r3
 800a960:	688a      	ldr	r2, [r1, #8]
 800a962:	690b      	ldr	r3, [r1, #16]
 800a964:	4607      	mov	r7, r0
 800a966:	4293      	cmp	r3, r2
 800a968:	bfb8      	it	lt
 800a96a:	4613      	movlt	r3, r2
 800a96c:	6033      	str	r3, [r6, #0]
 800a96e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a972:	460c      	mov	r4, r1
 800a974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a978:	b10a      	cbz	r2, 800a97e <_printf_common+0x26>
 800a97a:	3301      	adds	r3, #1
 800a97c:	6033      	str	r3, [r6, #0]
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	0699      	lsls	r1, r3, #26
 800a982:	bf42      	ittt	mi
 800a984:	6833      	ldrmi	r3, [r6, #0]
 800a986:	3302      	addmi	r3, #2
 800a988:	6033      	strmi	r3, [r6, #0]
 800a98a:	6825      	ldr	r5, [r4, #0]
 800a98c:	f015 0506 	ands.w	r5, r5, #6
 800a990:	d106      	bne.n	800a9a0 <_printf_common+0x48>
 800a992:	f104 0a19 	add.w	sl, r4, #25
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	6832      	ldr	r2, [r6, #0]
 800a99a:	1a9b      	subs	r3, r3, r2
 800a99c:	42ab      	cmp	r3, r5
 800a99e:	dc28      	bgt.n	800a9f2 <_printf_common+0x9a>
 800a9a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9a4:	1e13      	subs	r3, r2, #0
 800a9a6:	6822      	ldr	r2, [r4, #0]
 800a9a8:	bf18      	it	ne
 800a9aa:	2301      	movne	r3, #1
 800a9ac:	0692      	lsls	r2, r2, #26
 800a9ae:	d42d      	bmi.n	800aa0c <_printf_common+0xb4>
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9b8:	47c0      	blx	r8
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d020      	beq.n	800aa00 <_printf_common+0xa8>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	68e5      	ldr	r5, [r4, #12]
 800a9c2:	f003 0306 	and.w	r3, r3, #6
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	bf18      	it	ne
 800a9ca:	2500      	movne	r5, #0
 800a9cc:	6832      	ldr	r2, [r6, #0]
 800a9ce:	f04f 0600 	mov.w	r6, #0
 800a9d2:	68a3      	ldr	r3, [r4, #8]
 800a9d4:	bf08      	it	eq
 800a9d6:	1aad      	subeq	r5, r5, r2
 800a9d8:	6922      	ldr	r2, [r4, #16]
 800a9da:	bf08      	it	eq
 800a9dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	bfc4      	itt	gt
 800a9e4:	1a9b      	subgt	r3, r3, r2
 800a9e6:	18ed      	addgt	r5, r5, r3
 800a9e8:	341a      	adds	r4, #26
 800a9ea:	42b5      	cmp	r5, r6
 800a9ec:	d11a      	bne.n	800aa24 <_printf_common+0xcc>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e008      	b.n	800aa04 <_printf_common+0xac>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4652      	mov	r2, sl
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	47c0      	blx	r8
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d103      	bne.n	800aa08 <_printf_common+0xb0>
 800aa00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa08:	3501      	adds	r5, #1
 800aa0a:	e7c4      	b.n	800a996 <_printf_common+0x3e>
 800aa0c:	2030      	movs	r0, #48	; 0x30
 800aa0e:	18e1      	adds	r1, r4, r3
 800aa10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa1a:	4422      	add	r2, r4
 800aa1c:	3302      	adds	r3, #2
 800aa1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa22:	e7c5      	b.n	800a9b0 <_printf_common+0x58>
 800aa24:	2301      	movs	r3, #1
 800aa26:	4622      	mov	r2, r4
 800aa28:	4649      	mov	r1, r9
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	47c0      	blx	r8
 800aa2e:	3001      	adds	r0, #1
 800aa30:	d0e6      	beq.n	800aa00 <_printf_common+0xa8>
 800aa32:	3601      	adds	r6, #1
 800aa34:	e7d9      	b.n	800a9ea <_printf_common+0x92>
	...

0800aa38 <_printf_i>:
 800aa38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa3c:	7e0f      	ldrb	r7, [r1, #24]
 800aa3e:	4691      	mov	r9, r2
 800aa40:	2f78      	cmp	r7, #120	; 0x78
 800aa42:	4680      	mov	r8, r0
 800aa44:	460c      	mov	r4, r1
 800aa46:	469a      	mov	sl, r3
 800aa48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa4e:	d807      	bhi.n	800aa60 <_printf_i+0x28>
 800aa50:	2f62      	cmp	r7, #98	; 0x62
 800aa52:	d80a      	bhi.n	800aa6a <_printf_i+0x32>
 800aa54:	2f00      	cmp	r7, #0
 800aa56:	f000 80d9 	beq.w	800ac0c <_printf_i+0x1d4>
 800aa5a:	2f58      	cmp	r7, #88	; 0x58
 800aa5c:	f000 80a4 	beq.w	800aba8 <_printf_i+0x170>
 800aa60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa68:	e03a      	b.n	800aae0 <_printf_i+0xa8>
 800aa6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa6e:	2b15      	cmp	r3, #21
 800aa70:	d8f6      	bhi.n	800aa60 <_printf_i+0x28>
 800aa72:	a101      	add	r1, pc, #4	; (adr r1, 800aa78 <_printf_i+0x40>)
 800aa74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa78:	0800aad1 	.word	0x0800aad1
 800aa7c:	0800aae5 	.word	0x0800aae5
 800aa80:	0800aa61 	.word	0x0800aa61
 800aa84:	0800aa61 	.word	0x0800aa61
 800aa88:	0800aa61 	.word	0x0800aa61
 800aa8c:	0800aa61 	.word	0x0800aa61
 800aa90:	0800aae5 	.word	0x0800aae5
 800aa94:	0800aa61 	.word	0x0800aa61
 800aa98:	0800aa61 	.word	0x0800aa61
 800aa9c:	0800aa61 	.word	0x0800aa61
 800aaa0:	0800aa61 	.word	0x0800aa61
 800aaa4:	0800abf3 	.word	0x0800abf3
 800aaa8:	0800ab15 	.word	0x0800ab15
 800aaac:	0800abd5 	.word	0x0800abd5
 800aab0:	0800aa61 	.word	0x0800aa61
 800aab4:	0800aa61 	.word	0x0800aa61
 800aab8:	0800ac15 	.word	0x0800ac15
 800aabc:	0800aa61 	.word	0x0800aa61
 800aac0:	0800ab15 	.word	0x0800ab15
 800aac4:	0800aa61 	.word	0x0800aa61
 800aac8:	0800aa61 	.word	0x0800aa61
 800aacc:	0800abdd 	.word	0x0800abdd
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	1d1a      	adds	r2, r3, #4
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	602a      	str	r2, [r5, #0]
 800aad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aadc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aae0:	2301      	movs	r3, #1
 800aae2:	e0a4      	b.n	800ac2e <_printf_i+0x1f6>
 800aae4:	6820      	ldr	r0, [r4, #0]
 800aae6:	6829      	ldr	r1, [r5, #0]
 800aae8:	0606      	lsls	r6, r0, #24
 800aaea:	f101 0304 	add.w	r3, r1, #4
 800aaee:	d50a      	bpl.n	800ab06 <_printf_i+0xce>
 800aaf0:	680e      	ldr	r6, [r1, #0]
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	2e00      	cmp	r6, #0
 800aaf6:	da03      	bge.n	800ab00 <_printf_i+0xc8>
 800aaf8:	232d      	movs	r3, #45	; 0x2d
 800aafa:	4276      	negs	r6, r6
 800aafc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab00:	230a      	movs	r3, #10
 800ab02:	485e      	ldr	r0, [pc, #376]	; (800ac7c <_printf_i+0x244>)
 800ab04:	e019      	b.n	800ab3a <_printf_i+0x102>
 800ab06:	680e      	ldr	r6, [r1, #0]
 800ab08:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	bf18      	it	ne
 800ab10:	b236      	sxthne	r6, r6
 800ab12:	e7ef      	b.n	800aaf4 <_printf_i+0xbc>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	6820      	ldr	r0, [r4, #0]
 800ab18:	1d19      	adds	r1, r3, #4
 800ab1a:	6029      	str	r1, [r5, #0]
 800ab1c:	0601      	lsls	r1, r0, #24
 800ab1e:	d501      	bpl.n	800ab24 <_printf_i+0xec>
 800ab20:	681e      	ldr	r6, [r3, #0]
 800ab22:	e002      	b.n	800ab2a <_printf_i+0xf2>
 800ab24:	0646      	lsls	r6, r0, #25
 800ab26:	d5fb      	bpl.n	800ab20 <_printf_i+0xe8>
 800ab28:	881e      	ldrh	r6, [r3, #0]
 800ab2a:	2f6f      	cmp	r7, #111	; 0x6f
 800ab2c:	bf0c      	ite	eq
 800ab2e:	2308      	moveq	r3, #8
 800ab30:	230a      	movne	r3, #10
 800ab32:	4852      	ldr	r0, [pc, #328]	; (800ac7c <_printf_i+0x244>)
 800ab34:	2100      	movs	r1, #0
 800ab36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab3a:	6865      	ldr	r5, [r4, #4]
 800ab3c:	2d00      	cmp	r5, #0
 800ab3e:	bfa8      	it	ge
 800ab40:	6821      	ldrge	r1, [r4, #0]
 800ab42:	60a5      	str	r5, [r4, #8]
 800ab44:	bfa4      	itt	ge
 800ab46:	f021 0104 	bicge.w	r1, r1, #4
 800ab4a:	6021      	strge	r1, [r4, #0]
 800ab4c:	b90e      	cbnz	r6, 800ab52 <_printf_i+0x11a>
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	d04d      	beq.n	800abee <_printf_i+0x1b6>
 800ab52:	4615      	mov	r5, r2
 800ab54:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab58:	fb03 6711 	mls	r7, r3, r1, r6
 800ab5c:	5dc7      	ldrb	r7, [r0, r7]
 800ab5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab62:	4637      	mov	r7, r6
 800ab64:	42bb      	cmp	r3, r7
 800ab66:	460e      	mov	r6, r1
 800ab68:	d9f4      	bls.n	800ab54 <_printf_i+0x11c>
 800ab6a:	2b08      	cmp	r3, #8
 800ab6c:	d10b      	bne.n	800ab86 <_printf_i+0x14e>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	07de      	lsls	r6, r3, #31
 800ab72:	d508      	bpl.n	800ab86 <_printf_i+0x14e>
 800ab74:	6923      	ldr	r3, [r4, #16]
 800ab76:	6861      	ldr	r1, [r4, #4]
 800ab78:	4299      	cmp	r1, r3
 800ab7a:	bfde      	ittt	le
 800ab7c:	2330      	movle	r3, #48	; 0x30
 800ab7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ab86:	1b52      	subs	r2, r2, r5
 800ab88:	6122      	str	r2, [r4, #16]
 800ab8a:	464b      	mov	r3, r9
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f8cd a000 	str.w	sl, [sp]
 800ab94:	aa03      	add	r2, sp, #12
 800ab96:	f7ff fedf 	bl	800a958 <_printf_common>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	d14c      	bne.n	800ac38 <_printf_i+0x200>
 800ab9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aba2:	b004      	add	sp, #16
 800aba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba8:	4834      	ldr	r0, [pc, #208]	; (800ac7c <_printf_i+0x244>)
 800abaa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abae:	6829      	ldr	r1, [r5, #0]
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	f851 6b04 	ldr.w	r6, [r1], #4
 800abb6:	6029      	str	r1, [r5, #0]
 800abb8:	061d      	lsls	r5, r3, #24
 800abba:	d514      	bpl.n	800abe6 <_printf_i+0x1ae>
 800abbc:	07df      	lsls	r7, r3, #31
 800abbe:	bf44      	itt	mi
 800abc0:	f043 0320 	orrmi.w	r3, r3, #32
 800abc4:	6023      	strmi	r3, [r4, #0]
 800abc6:	b91e      	cbnz	r6, 800abd0 <_printf_i+0x198>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	f023 0320 	bic.w	r3, r3, #32
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	2310      	movs	r3, #16
 800abd2:	e7af      	b.n	800ab34 <_printf_i+0xfc>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	f043 0320 	orr.w	r3, r3, #32
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	2378      	movs	r3, #120	; 0x78
 800abde:	4828      	ldr	r0, [pc, #160]	; (800ac80 <_printf_i+0x248>)
 800abe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abe4:	e7e3      	b.n	800abae <_printf_i+0x176>
 800abe6:	0659      	lsls	r1, r3, #25
 800abe8:	bf48      	it	mi
 800abea:	b2b6      	uxthmi	r6, r6
 800abec:	e7e6      	b.n	800abbc <_printf_i+0x184>
 800abee:	4615      	mov	r5, r2
 800abf0:	e7bb      	b.n	800ab6a <_printf_i+0x132>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	6826      	ldr	r6, [r4, #0]
 800abf6:	1d18      	adds	r0, r3, #4
 800abf8:	6961      	ldr	r1, [r4, #20]
 800abfa:	6028      	str	r0, [r5, #0]
 800abfc:	0635      	lsls	r5, r6, #24
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	d501      	bpl.n	800ac06 <_printf_i+0x1ce>
 800ac02:	6019      	str	r1, [r3, #0]
 800ac04:	e002      	b.n	800ac0c <_printf_i+0x1d4>
 800ac06:	0670      	lsls	r0, r6, #25
 800ac08:	d5fb      	bpl.n	800ac02 <_printf_i+0x1ca>
 800ac0a:	8019      	strh	r1, [r3, #0]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4615      	mov	r5, r2
 800ac10:	6123      	str	r3, [r4, #16]
 800ac12:	e7ba      	b.n	800ab8a <_printf_i+0x152>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	2100      	movs	r1, #0
 800ac18:	1d1a      	adds	r2, r3, #4
 800ac1a:	602a      	str	r2, [r5, #0]
 800ac1c:	681d      	ldr	r5, [r3, #0]
 800ac1e:	6862      	ldr	r2, [r4, #4]
 800ac20:	4628      	mov	r0, r5
 800ac22:	f000 f83f 	bl	800aca4 <memchr>
 800ac26:	b108      	cbz	r0, 800ac2c <_printf_i+0x1f4>
 800ac28:	1b40      	subs	r0, r0, r5
 800ac2a:	6060      	str	r0, [r4, #4]
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	6123      	str	r3, [r4, #16]
 800ac30:	2300      	movs	r3, #0
 800ac32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac36:	e7a8      	b.n	800ab8a <_printf_i+0x152>
 800ac38:	462a      	mov	r2, r5
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	47d0      	blx	sl
 800ac42:	3001      	adds	r0, #1
 800ac44:	d0ab      	beq.n	800ab9e <_printf_i+0x166>
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	079b      	lsls	r3, r3, #30
 800ac4a:	d413      	bmi.n	800ac74 <_printf_i+0x23c>
 800ac4c:	68e0      	ldr	r0, [r4, #12]
 800ac4e:	9b03      	ldr	r3, [sp, #12]
 800ac50:	4298      	cmp	r0, r3
 800ac52:	bfb8      	it	lt
 800ac54:	4618      	movlt	r0, r3
 800ac56:	e7a4      	b.n	800aba2 <_printf_i+0x16a>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	4632      	mov	r2, r6
 800ac5c:	4649      	mov	r1, r9
 800ac5e:	4640      	mov	r0, r8
 800ac60:	47d0      	blx	sl
 800ac62:	3001      	adds	r0, #1
 800ac64:	d09b      	beq.n	800ab9e <_printf_i+0x166>
 800ac66:	3501      	adds	r5, #1
 800ac68:	68e3      	ldr	r3, [r4, #12]
 800ac6a:	9903      	ldr	r1, [sp, #12]
 800ac6c:	1a5b      	subs	r3, r3, r1
 800ac6e:	42ab      	cmp	r3, r5
 800ac70:	dcf2      	bgt.n	800ac58 <_printf_i+0x220>
 800ac72:	e7eb      	b.n	800ac4c <_printf_i+0x214>
 800ac74:	2500      	movs	r5, #0
 800ac76:	f104 0619 	add.w	r6, r4, #25
 800ac7a:	e7f5      	b.n	800ac68 <_printf_i+0x230>
 800ac7c:	08016d59 	.word	0x08016d59
 800ac80:	08016d6a 	.word	0x08016d6a

0800ac84 <_sbrk_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	2300      	movs	r3, #0
 800ac88:	4d05      	ldr	r5, [pc, #20]	; (800aca0 <_sbrk_r+0x1c>)
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	602b      	str	r3, [r5, #0]
 800ac90:	f7fa fc48 	bl	8005524 <_sbrk>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_sbrk_r+0x1a>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_sbrk_r+0x1a>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20000d30 	.word	0x20000d30

0800aca4 <memchr>:
 800aca4:	4603      	mov	r3, r0
 800aca6:	b510      	push	{r4, lr}
 800aca8:	b2c9      	uxtb	r1, r1
 800acaa:	4402      	add	r2, r0
 800acac:	4293      	cmp	r3, r2
 800acae:	4618      	mov	r0, r3
 800acb0:	d101      	bne.n	800acb6 <memchr+0x12>
 800acb2:	2000      	movs	r0, #0
 800acb4:	e003      	b.n	800acbe <memchr+0x1a>
 800acb6:	7804      	ldrb	r4, [r0, #0]
 800acb8:	3301      	adds	r3, #1
 800acba:	428c      	cmp	r4, r1
 800acbc:	d1f6      	bne.n	800acac <memchr+0x8>
 800acbe:	bd10      	pop	{r4, pc}

0800acc0 <memcpy>:
 800acc0:	440a      	add	r2, r1
 800acc2:	4291      	cmp	r1, r2
 800acc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800acc8:	d100      	bne.n	800accc <memcpy+0xc>
 800acca:	4770      	bx	lr
 800accc:	b510      	push	{r4, lr}
 800acce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acd2:	4291      	cmp	r1, r2
 800acd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acd8:	d1f9      	bne.n	800acce <memcpy+0xe>
 800acda:	bd10      	pop	{r4, pc}

0800acdc <memmove>:
 800acdc:	4288      	cmp	r0, r1
 800acde:	b510      	push	{r4, lr}
 800ace0:	eb01 0402 	add.w	r4, r1, r2
 800ace4:	d902      	bls.n	800acec <memmove+0x10>
 800ace6:	4284      	cmp	r4, r0
 800ace8:	4623      	mov	r3, r4
 800acea:	d807      	bhi.n	800acfc <memmove+0x20>
 800acec:	1e43      	subs	r3, r0, #1
 800acee:	42a1      	cmp	r1, r4
 800acf0:	d008      	beq.n	800ad04 <memmove+0x28>
 800acf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acfa:	e7f8      	b.n	800acee <memmove+0x12>
 800acfc:	4601      	mov	r1, r0
 800acfe:	4402      	add	r2, r0
 800ad00:	428a      	cmp	r2, r1
 800ad02:	d100      	bne.n	800ad06 <memmove+0x2a>
 800ad04:	bd10      	pop	{r4, pc}
 800ad06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad0e:	e7f7      	b.n	800ad00 <memmove+0x24>

0800ad10 <__malloc_lock>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__malloc_lock+0x8>)
 800ad12:	f000 b880 	b.w	800ae16 <__retarget_lock_acquire_recursive>
 800ad16:	bf00      	nop
 800ad18:	20000d34 	.word	0x20000d34

0800ad1c <__malloc_unlock>:
 800ad1c:	4801      	ldr	r0, [pc, #4]	; (800ad24 <__malloc_unlock+0x8>)
 800ad1e:	f000 b87b 	b.w	800ae18 <__retarget_lock_release_recursive>
 800ad22:	bf00      	nop
 800ad24:	20000d34 	.word	0x20000d34

0800ad28 <_free_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	d040      	beq.n	800adb2 <_free_r+0x8a>
 800ad30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad34:	1f0c      	subs	r4, r1, #4
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bfb8      	it	lt
 800ad3a:	18e4      	addlt	r4, r4, r3
 800ad3c:	f7ff ffe8 	bl	800ad10 <__malloc_lock>
 800ad40:	4a1c      	ldr	r2, [pc, #112]	; (800adb4 <_free_r+0x8c>)
 800ad42:	6813      	ldr	r3, [r2, #0]
 800ad44:	b933      	cbnz	r3, 800ad54 <_free_r+0x2c>
 800ad46:	6063      	str	r3, [r4, #4]
 800ad48:	6014      	str	r4, [r2, #0]
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad50:	f7ff bfe4 	b.w	800ad1c <__malloc_unlock>
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	d908      	bls.n	800ad6a <_free_r+0x42>
 800ad58:	6820      	ldr	r0, [r4, #0]
 800ad5a:	1821      	adds	r1, r4, r0
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	bf01      	itttt	eq
 800ad60:	6819      	ldreq	r1, [r3, #0]
 800ad62:	685b      	ldreq	r3, [r3, #4]
 800ad64:	1809      	addeq	r1, r1, r0
 800ad66:	6021      	streq	r1, [r4, #0]
 800ad68:	e7ed      	b.n	800ad46 <_free_r+0x1e>
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	b10b      	cbz	r3, 800ad74 <_free_r+0x4c>
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	d9fa      	bls.n	800ad6a <_free_r+0x42>
 800ad74:	6811      	ldr	r1, [r2, #0]
 800ad76:	1850      	adds	r0, r2, r1
 800ad78:	42a0      	cmp	r0, r4
 800ad7a:	d10b      	bne.n	800ad94 <_free_r+0x6c>
 800ad7c:	6820      	ldr	r0, [r4, #0]
 800ad7e:	4401      	add	r1, r0
 800ad80:	1850      	adds	r0, r2, r1
 800ad82:	4283      	cmp	r3, r0
 800ad84:	6011      	str	r1, [r2, #0]
 800ad86:	d1e0      	bne.n	800ad4a <_free_r+0x22>
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	4401      	add	r1, r0
 800ad8e:	6011      	str	r1, [r2, #0]
 800ad90:	6053      	str	r3, [r2, #4]
 800ad92:	e7da      	b.n	800ad4a <_free_r+0x22>
 800ad94:	d902      	bls.n	800ad9c <_free_r+0x74>
 800ad96:	230c      	movs	r3, #12
 800ad98:	602b      	str	r3, [r5, #0]
 800ad9a:	e7d6      	b.n	800ad4a <_free_r+0x22>
 800ad9c:	6820      	ldr	r0, [r4, #0]
 800ad9e:	1821      	adds	r1, r4, r0
 800ada0:	428b      	cmp	r3, r1
 800ada2:	bf01      	itttt	eq
 800ada4:	6819      	ldreq	r1, [r3, #0]
 800ada6:	685b      	ldreq	r3, [r3, #4]
 800ada8:	1809      	addeq	r1, r1, r0
 800adaa:	6021      	streq	r1, [r4, #0]
 800adac:	6063      	str	r3, [r4, #4]
 800adae:	6054      	str	r4, [r2, #4]
 800adb0:	e7cb      	b.n	800ad4a <_free_r+0x22>
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20000d28 	.word	0x20000d28

0800adb8 <_realloc_r>:
 800adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adbc:	4680      	mov	r8, r0
 800adbe:	4614      	mov	r4, r2
 800adc0:	460e      	mov	r6, r1
 800adc2:	b921      	cbnz	r1, 800adce <_realloc_r+0x16>
 800adc4:	4611      	mov	r1, r2
 800adc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adca:	f7ff bbf5 	b.w	800a5b8 <_malloc_r>
 800adce:	b92a      	cbnz	r2, 800addc <_realloc_r+0x24>
 800add0:	f7ff ffaa 	bl	800ad28 <_free_r>
 800add4:	4625      	mov	r5, r4
 800add6:	4628      	mov	r0, r5
 800add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800addc:	f000 f81d 	bl	800ae1a <_malloc_usable_size_r>
 800ade0:	4284      	cmp	r4, r0
 800ade2:	4607      	mov	r7, r0
 800ade4:	d802      	bhi.n	800adec <_realloc_r+0x34>
 800ade6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adea:	d812      	bhi.n	800ae12 <_realloc_r+0x5a>
 800adec:	4621      	mov	r1, r4
 800adee:	4640      	mov	r0, r8
 800adf0:	f7ff fbe2 	bl	800a5b8 <_malloc_r>
 800adf4:	4605      	mov	r5, r0
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d0ed      	beq.n	800add6 <_realloc_r+0x1e>
 800adfa:	42bc      	cmp	r4, r7
 800adfc:	4622      	mov	r2, r4
 800adfe:	4631      	mov	r1, r6
 800ae00:	bf28      	it	cs
 800ae02:	463a      	movcs	r2, r7
 800ae04:	f7ff ff5c 	bl	800acc0 <memcpy>
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	f7ff ff8c 	bl	800ad28 <_free_r>
 800ae10:	e7e1      	b.n	800add6 <_realloc_r+0x1e>
 800ae12:	4635      	mov	r5, r6
 800ae14:	e7df      	b.n	800add6 <_realloc_r+0x1e>

0800ae16 <__retarget_lock_acquire_recursive>:
 800ae16:	4770      	bx	lr

0800ae18 <__retarget_lock_release_recursive>:
 800ae18:	4770      	bx	lr

0800ae1a <_malloc_usable_size_r>:
 800ae1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae1e:	1f18      	subs	r0, r3, #4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bfbc      	itt	lt
 800ae24:	580b      	ldrlt	r3, [r1, r0]
 800ae26:	18c0      	addlt	r0, r0, r3
 800ae28:	4770      	bx	lr
	...

0800ae2c <_init>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	bf00      	nop
 800ae30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae32:	bc08      	pop	{r3}
 800ae34:	469e      	mov	lr, r3
 800ae36:	4770      	bx	lr

0800ae38 <_fini>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr
