
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08007f88  08007f88  00017f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008680  08008680  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008688  08008688  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008690  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200000a8  08008738  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08008738  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142f0  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e4  00000000  00000000  000343c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000385a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00039870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0cb  00000000  00000000  0003a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a45b  00000000  00000000  00057a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ccd6  00000000  00000000  00071e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000feb64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f4  00000000  00000000  000febb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a8 	.word	0x200000a8
 8000204:	00000000 	.word	0x00000000
 8000208:	08007f70 	.word	0x08007f70

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000ac 	.word	0x200000ac
 8000224:	08007f70 	.word	0x08007f70

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_uldivmod>:
 8000d80:	b953      	cbnz	r3, 8000d98 <__aeabi_uldivmod+0x18>
 8000d82:	b94a      	cbnz	r2, 8000d98 <__aeabi_uldivmod+0x18>
 8000d84:	2900      	cmp	r1, #0
 8000d86:	bf08      	it	eq
 8000d88:	2800      	cmpeq	r0, #0
 8000d8a:	bf1c      	itt	ne
 8000d8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d94:	f000 b976 	b.w	8001084 <__aeabi_idiv0>
 8000d98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da0:	f000 f806 	bl	8000db0 <__udivmoddi4>
 8000da4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dac:	b004      	add	sp, #16
 8000dae:	4770      	bx	lr

08000db0 <__udivmoddi4>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	9e08      	ldr	r6, [sp, #32]
 8000db6:	460d      	mov	r5, r1
 8000db8:	4604      	mov	r4, r0
 8000dba:	4688      	mov	r8, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d14d      	bne.n	8000e5c <__udivmoddi4+0xac>
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	4694      	mov	ip, r2
 8000dc4:	d968      	bls.n	8000e98 <__udivmoddi4+0xe8>
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	b152      	cbz	r2, 8000de2 <__udivmoddi4+0x32>
 8000dcc:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd0:	f1c2 0120 	rsb	r1, r2, #32
 8000dd4:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ddc:	ea41 0803 	orr.w	r8, r1, r3
 8000de0:	4094      	lsls	r4, r2
 8000de2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000de6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	fb01 8817 	mls	r8, r1, r7, r8
 8000df2:	fb07 f00e 	mul.w	r0, r7, lr
 8000df6:	0c23      	lsrs	r3, r4, #16
 8000df8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x66>
 8000e00:	eb1c 0303 	adds.w	r3, ip, r3
 8000e04:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000e08:	f080 811e 	bcs.w	8001048 <__udivmoddi4+0x298>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f240 811b 	bls.w	8001048 <__udivmoddi4+0x298>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4463      	add	r3, ip
 8000e16:	1a1b      	subs	r3, r3, r0
 8000e18:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e1c:	fb01 3310 	mls	r3, r1, r0, r3
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	b2a4      	uxth	r4, r4
 8000e26:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d90a      	bls.n	8000e44 <__udivmoddi4+0x94>
 8000e2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e36:	f080 8109 	bcs.w	800104c <__udivmoddi4+0x29c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f240 8106 	bls.w	800104c <__udivmoddi4+0x29c>
 8000e40:	4464      	add	r4, ip
 8000e42:	3802      	subs	r0, #2
 8000e44:	2100      	movs	r1, #0
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e4e:	b11e      	cbz	r6, 8000e58 <__udivmoddi4+0xa8>
 8000e50:	2300      	movs	r3, #0
 8000e52:	40d4      	lsrs	r4, r2
 8000e54:	e9c6 4300 	strd	r4, r3, [r6]
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0xc2>
 8000e60:	2e00      	cmp	r6, #0
 8000e62:	f000 80ee 	beq.w	8001042 <__udivmoddi4+0x292>
 8000e66:	2100      	movs	r1, #0
 8000e68:	e9c6 0500 	strd	r0, r5, [r6]
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f183 	clz	r1, r3
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x160>
 8000e7a:	42ab      	cmp	r3, r5
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0xd4>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80fc 	bhi.w	800107c <__udivmoddi4+0x2cc>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb65 0303 	sbc.w	r3, r5, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d0e2      	beq.n	8000e58 <__udivmoddi4+0xa8>
 8000e92:	e9c6 4800 	strd	r4, r8, [r6]
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000e98:	b902      	cbnz	r2, 8000e9c <__udivmoddi4+0xec>
 8000e9a:	deff      	udf	#255	; 0xff
 8000e9c:	fab2 f282 	clz	r2, r2
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	f040 8091 	bne.w	8000fc8 <__udivmoddi4+0x218>
 8000ea6:	eba1 000c 	sub.w	r0, r1, ip
 8000eaa:	2101      	movs	r1, #1
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eb8:	fb07 0013 	mls	r0, r7, r3, r0
 8000ebc:	0c25      	lsrs	r5, r4, #16
 8000ebe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ec2:	fb0e f003 	mul.w	r0, lr, r3
 8000ec6:	42a8      	cmp	r0, r5
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x12c>
 8000eca:	eb1c 0505 	adds.w	r5, ip, r5
 8000ece:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x12a>
 8000ed4:	42a8      	cmp	r0, r5
 8000ed6:	f200 80ce 	bhi.w	8001076 <__udivmoddi4+0x2c6>
 8000eda:	4643      	mov	r3, r8
 8000edc:	1a2d      	subs	r5, r5, r0
 8000ede:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ee2:	fb07 5510 	mls	r5, r7, r0, r5
 8000ee6:	fb0e fe00 	mul.w	lr, lr, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x156>
 8000ef4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000efc:	d202      	bcs.n	8000f04 <__udivmoddi4+0x154>
 8000efe:	45a6      	cmp	lr, r4
 8000f00:	f200 80b6 	bhi.w	8001070 <__udivmoddi4+0x2c0>
 8000f04:	4628      	mov	r0, r5
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f0e:	e79e      	b.n	8000e4e <__udivmoddi4+0x9e>
 8000f10:	f1c1 0720 	rsb	r7, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f1e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f26:	fbba f8f9 	udiv	r8, sl, r9
 8000f2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f32:	408d      	lsls	r5, r1
 8000f34:	fa1f fe8c 	uxth.w	lr, ip
 8000f38:	431d      	orrs	r5, r3
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fb08 f00e 	mul.w	r0, r8, lr
 8000f42:	0c2c      	lsrs	r4, r5, #16
 8000f44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f48:	42a0      	cmp	r0, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d90b      	bls.n	8000f68 <__udivmoddi4+0x1b8>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f58:	f080 8088 	bcs.w	800106c <__udivmoddi4+0x2bc>
 8000f5c:	42a0      	cmp	r0, r4
 8000f5e:	f240 8085 	bls.w	800106c <__udivmoddi4+0x2bc>
 8000f62:	f1a8 0802 	sub.w	r8, r8, #2
 8000f66:	4464      	add	r4, ip
 8000f68:	1a24      	subs	r4, r4, r0
 8000f6a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f6e:	fb09 4410 	mls	r4, r9, r0, r4
 8000f72:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f76:	b2ad      	uxth	r5, r5
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	45a6      	cmp	lr, r4
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x1e2>
 8000f80:	eb1c 0404 	adds.w	r4, ip, r4
 8000f84:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f88:	d26c      	bcs.n	8001064 <__udivmoddi4+0x2b4>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	d96a      	bls.n	8001064 <__udivmoddi4+0x2b4>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	4464      	add	r4, ip
 8000f92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f96:	fba0 9502 	umull	r9, r5, r0, r2
 8000f9a:	eba4 040e 	sub.w	r4, r4, lr
 8000f9e:	42ac      	cmp	r4, r5
 8000fa0:	46c8      	mov	r8, r9
 8000fa2:	46ae      	mov	lr, r5
 8000fa4:	d356      	bcc.n	8001054 <__udivmoddi4+0x2a4>
 8000fa6:	d053      	beq.n	8001050 <__udivmoddi4+0x2a0>
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d069      	beq.n	8001080 <__udivmoddi4+0x2d0>
 8000fac:	ebb3 0208 	subs.w	r2, r3, r8
 8000fb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000fb4:	fa22 f301 	lsr.w	r3, r2, r1
 8000fb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000fbc:	431f      	orrs	r7, r3
 8000fbe:	40cc      	lsrs	r4, r1
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000fc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fcc:	f1c2 0120 	rsb	r1, r2, #32
 8000fd0:	fa25 f301 	lsr.w	r3, r5, r1
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fdc:	4095      	lsls	r5, r2
 8000fde:	430d      	orrs	r5, r1
 8000fe0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fe4:	fb07 3311 	mls	r3, r7, r1, r3
 8000fe8:	fa1f fe8c 	uxth.w	lr, ip
 8000fec:	0c28      	lsrs	r0, r5, #16
 8000fee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ff2:	fb01 f30e 	mul.w	r3, r1, lr
 8000ff6:	4283      	cmp	r3, r0
 8000ff8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ffc:	d908      	bls.n	8001010 <__udivmoddi4+0x260>
 8000ffe:	eb1c 0000 	adds.w	r0, ip, r0
 8001002:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001006:	d22f      	bcs.n	8001068 <__udivmoddi4+0x2b8>
 8001008:	4283      	cmp	r3, r0
 800100a:	d92d      	bls.n	8001068 <__udivmoddi4+0x2b8>
 800100c:	3902      	subs	r1, #2
 800100e:	4460      	add	r0, ip
 8001010:	1ac0      	subs	r0, r0, r3
 8001012:	fbb0 f3f7 	udiv	r3, r0, r7
 8001016:	fb07 0013 	mls	r0, r7, r3, r0
 800101a:	b2ad      	uxth	r5, r5
 800101c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001020:	fb03 f00e 	mul.w	r0, r3, lr
 8001024:	42a8      	cmp	r0, r5
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x28a>
 8001028:	eb1c 0505 	adds.w	r5, ip, r5
 800102c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001030:	d216      	bcs.n	8001060 <__udivmoddi4+0x2b0>
 8001032:	42a8      	cmp	r0, r5
 8001034:	d914      	bls.n	8001060 <__udivmoddi4+0x2b0>
 8001036:	3b02      	subs	r3, #2
 8001038:	4465      	add	r5, ip
 800103a:	1a28      	subs	r0, r5, r0
 800103c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001040:	e738      	b.n	8000eb4 <__udivmoddi4+0x104>
 8001042:	4631      	mov	r1, r6
 8001044:	4630      	mov	r0, r6
 8001046:	e707      	b.n	8000e58 <__udivmoddi4+0xa8>
 8001048:	462f      	mov	r7, r5
 800104a:	e6e4      	b.n	8000e16 <__udivmoddi4+0x66>
 800104c:	4618      	mov	r0, r3
 800104e:	e6f9      	b.n	8000e44 <__udivmoddi4+0x94>
 8001050:	454b      	cmp	r3, r9
 8001052:	d2a9      	bcs.n	8000fa8 <__udivmoddi4+0x1f8>
 8001054:	ebb9 0802 	subs.w	r8, r9, r2
 8001058:	eb65 0e0c 	sbc.w	lr, r5, ip
 800105c:	3801      	subs	r0, #1
 800105e:	e7a3      	b.n	8000fa8 <__udivmoddi4+0x1f8>
 8001060:	4643      	mov	r3, r8
 8001062:	e7ea      	b.n	800103a <__udivmoddi4+0x28a>
 8001064:	4628      	mov	r0, r5
 8001066:	e794      	b.n	8000f92 <__udivmoddi4+0x1e2>
 8001068:	4641      	mov	r1, r8
 800106a:	e7d1      	b.n	8001010 <__udivmoddi4+0x260>
 800106c:	46d0      	mov	r8, sl
 800106e:	e77b      	b.n	8000f68 <__udivmoddi4+0x1b8>
 8001070:	4464      	add	r4, ip
 8001072:	3802      	subs	r0, #2
 8001074:	e747      	b.n	8000f06 <__udivmoddi4+0x156>
 8001076:	3b02      	subs	r3, #2
 8001078:	4465      	add	r5, ip
 800107a:	e72f      	b.n	8000edc <__udivmoddi4+0x12c>
 800107c:	4608      	mov	r0, r1
 800107e:	e706      	b.n	8000e8e <__udivmoddi4+0xde>
 8001080:	4631      	mov	r1, r6
 8001082:	e6e9      	b.n	8000e58 <__udivmoddi4+0xa8>

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_ZN9UIElement17updateAllElementsEv>:
#include "EasyUI.hpp"
#define SHOW_LOCATION 1
UIElement* UIElement::allElements[MAX_UI_ELEMENTS] = {};
uint8_t UIElement::elementNum = 0;

void UIElement::updateAllElements(){
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	491a      	ldr	r1, [pc, #104]	; (80010fc <_ZN9UIElement17updateAllElementsEv+0x74>)
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fdc3 	bl	8004c20 <XPT2046_Get_TouchedPoint>
    #if SHOW_LOCATION
    char str[20];
    LCD_DrawString(0, 0, "                     ");
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <_ZN9UIElement17updateAllElementsEv+0x78>)
 800109c:	2100      	movs	r1, #0
 800109e:	2000      	movs	r0, #0
 80010a0:	f001 f89c 	bl	80021dc <LCD_DrawString>
    sprintf(str, "x=%d, y=%d", touch.x, touch.y);
 80010a4:	8b3b      	ldrh	r3, [r7, #24]
 80010a6:	461a      	mov	r2, r3
 80010a8:	8b7b      	ldrh	r3, [r7, #26]
 80010aa:	1d38      	adds	r0, r7, #4
 80010ac:	4915      	ldr	r1, [pc, #84]	; (8001104 <_ZN9UIElement17updateAllElementsEv+0x7c>)
 80010ae:	f002 fe27 	bl	8003d00 <sprintf_>
    LCD_DrawString(0, 0, str);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	2000      	movs	r0, #0
 80010ba:	f001 f88f 	bl	80021dc <LCD_DrawString>
    #endif
    for (int i=0; i<elementNum; i++){
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_ZN9UIElement17updateAllElementsEv+0x80>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	4293      	cmp	r3, r2
 80010cc:	da11      	bge.n	80010f2 <_ZN9UIElement17updateAllElementsEv+0x6a>
        allElements[i]->update(touch.x, touch.y);
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <_ZN9UIElement17updateAllElementsEv+0x84>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010d6:	4a0d      	ldr	r2, [pc, #52]	; (800110c <_ZN9UIElement17updateAllElementsEv+0x84>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	8b39      	ldrh	r1, [r7, #24]
 80010e6:	8b7a      	ldrh	r2, [r7, #26]
 80010e8:	4798      	blx	r3
    for (int i=0; i<elementNum; i++){
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	e7e7      	b.n	80010c2 <_ZN9UIElement17updateAllElementsEv+0x3a>
    }
    // Update all UI elements
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	08007f88 	.word	0x08007f88
 8001104:	08007fa0 	.word	0x08007fa0
 8001108:	20000144 	.word	0x20000144
 800110c:	200000c4 	.word	0x200000c4

08001110 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <MX_ADC1_Init+0x74>)
 8001122:	4a19      	ldr	r2, [pc, #100]	; (8001188 <MX_ADC1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_ADC1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_ADC1_Init+0x74>)
 800112e:	2201      	movs	r2, #1
 8001130:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_ADC1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_ADC1_Init+0x74>)
 800113a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800113e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_ADC1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_ADC1_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_ADC1_Init+0x74>)
 800114e:	f003 fe77 	bl	8004e40 <HAL_ADC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f001 f98c 	bl	8002474 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800115c:	230c      	movs	r3, #12
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2301      	movs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001164:	2305      	movs	r3, #5
 8001166:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_ADC1_Init+0x74>)
 800116e:	f003 ff51 	bl	8005014 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001178:	f001 f97c 	bl	8002474 <Error_Handler>
  }

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000148 	.word	0x20000148
 8001188:	40012400 	.word	0x40012400

0800118c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_ADC_MspInit+0x6c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d121      	bne.n	80011f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_ADC_MspInit+0x70>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_ADC_MspInit+0x70>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_ADC_MspInit+0x70>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_ADC_MspInit+0x70>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_ADC_MspInit+0x70>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_ADC_MspInit+0x70>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011dc:	2304      	movs	r3, #4
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011ec:	f004 fa56 	bl	800569c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40012400 	.word	0x40012400
 80011fc:	40021000 	.word	0x40021000
 8001200:	40011000 	.word	0x40011000

08001204 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <DEBUG_USART_Config+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <DEBUG_USART_Config+0x50>)
 800120c:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <DEBUG_USART_Config+0x4c>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <DEBUG_USART_Config+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <DEBUG_USART_Config+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <DEBUG_USART_Config+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <DEBUG_USART_Config+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <DEBUG_USART_Config+0x4c>)
 8001230:	220c      	movs	r2, #12
 8001232:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <DEBUG_USART_Config+0x4c>)
 8001236:	f006 f898 	bl	800736a <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <DEBUG_USART_Config+0x4c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <DEBUG_USART_Config+0x4c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0220 	orr.w	r2, r2, #32
 8001248:	60da      	str	r2, [r3, #12]
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000178 	.word	0x20000178
 8001254:	40013800 	.word	0x40013800

08001258 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_FSMC_Init+0xbc>)
 8001272:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001276:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_FSMC_Init+0xbc>)
 800127a:	4a27      	ldr	r2, [pc, #156]	; (8001318 <MX_FSMC_Init+0xc0>)
 800127c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <MX_FSMC_Init+0xbc>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <MX_FSMC_Init+0xbc>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_FSMC_Init+0xbc>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_FSMC_Init+0xbc>)
 8001292:	2210      	movs	r2, #16
 8001294:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_FSMC_Init+0xbc>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_FSMC_Init+0xbc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80012ce:	230f      	movs	r3, #15
 80012d0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012d2:	230f      	movs	r3, #15
 80012d4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012da:	230f      	movs	r3, #15
 80012dc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012de:	2310      	movs	r3, #16
 80012e0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012e2:	2311      	movs	r3, #17
 80012e4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_FSMC_Init+0xbc>)
 80012f2:	f005 f893 	bl	800641c <HAL_SRAM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80012fc:	f001 f8ba 	bl	8002474 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_FSMC_Init+0xc4>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <MX_FSMC_Init+0xc4>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	61d3      	str	r3, [r2, #28]

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200001f8 	.word	0x200001f8
 8001318:	a0000104 	.word	0xa0000104
 800131c:	40010000 	.word	0x40010000

08001320 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_FSMC_MspInit+0x78>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d129      	bne.n	8001390 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_FSMC_MspInit+0x78>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_FSMC_MspInit+0x7c>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a15      	ldr	r2, [pc, #84]	; (800139c <HAL_FSMC_MspInit+0x7c>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_FSMC_MspInit+0x7c>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800135a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800135e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4619      	mov	r1, r3
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <HAL_FSMC_MspInit+0x80>)
 8001370:	f004 f994 	bl	800569c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001374:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001378:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4619      	mov	r1, r3
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <HAL_FSMC_MspInit+0x84>)
 800138a:	f004 f987 	bl	800569c <HAL_GPIO_Init>
 800138e:	e000      	b.n	8001392 <HAL_FSMC_MspInit+0x72>
    return;
 8001390:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000023c 	.word	0x2000023c
 800139c:	40021000 	.word	0x40021000
 80013a0:	40011800 	.word	0x40011800
 80013a4:	40011400 	.word	0x40011400

080013a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013b0:	f7ff ffb6 	bl	8001320 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d0:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <MX_GPIO_Init+0x1d4>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <MX_GPIO_Init+0x1d4>)
 80013d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <MX_GPIO_Init+0x1d4>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e8:	4b69      	ldr	r3, [pc, #420]	; (8001590 <MX_GPIO_Init+0x1d4>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a68      	ldr	r2, [pc, #416]	; (8001590 <MX_GPIO_Init+0x1d4>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b66      	ldr	r3, [pc, #408]	; (8001590 <MX_GPIO_Init+0x1d4>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b63      	ldr	r3, [pc, #396]	; (8001590 <MX_GPIO_Init+0x1d4>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a62      	ldr	r2, [pc, #392]	; (8001590 <MX_GPIO_Init+0x1d4>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b60      	ldr	r3, [pc, #384]	; (8001590 <MX_GPIO_Init+0x1d4>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <MX_GPIO_Init+0x1d4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a5c      	ldr	r2, [pc, #368]	; (8001590 <MX_GPIO_Init+0x1d4>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <MX_GPIO_Init+0x1d4>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <MX_GPIO_Init+0x1d4>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a56      	ldr	r2, [pc, #344]	; (8001590 <MX_GPIO_Init+0x1d4>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b54      	ldr	r3, [pc, #336]	; (8001590 <MX_GPIO_Init+0x1d4>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2107      	movs	r1, #7
 800144c:	4851      	ldr	r0, [pc, #324]	; (8001594 <MX_GPIO_Init+0x1d8>)
 800144e:	f004 fad4 	bl	80059fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	484f      	ldr	r0, [pc, #316]	; (8001594 <MX_GPIO_Init+0x1d8>)
 8001458:	f004 facf 	bl	80059fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2123      	movs	r1, #35	; 0x23
 8001460:	484d      	ldr	r0, [pc, #308]	; (8001598 <MX_GPIO_Init+0x1dc>)
 8001462:	f004 faca 	bl	80059fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800146c:	484b      	ldr	r0, [pc, #300]	; (800159c <MX_GPIO_Init+0x1e0>)
 800146e:	f004 fac4 	bl	80059fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001478:	4847      	ldr	r0, [pc, #284]	; (8001598 <MX_GPIO_Init+0x1dc>)
 800147a:	f004 fabe 	bl	80059fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800147e:	2347      	movs	r3, #71	; 0x47
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	4619      	mov	r1, r3
 8001494:	483f      	ldr	r0, [pc, #252]	; (8001594 <MX_GPIO_Init+0x1d8>)
 8001496:	f004 f901 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800149a:	2308      	movs	r3, #8
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4839      	ldr	r0, [pc, #228]	; (8001594 <MX_GPIO_Init+0x1d8>)
 80014ae:	f004 f8f5 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b2:	2310      	movs	r3, #16
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b6:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <MX_GPIO_Init+0x1e4>)
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4833      	ldr	r0, [pc, #204]	; (8001594 <MX_GPIO_Init+0x1d8>)
 80014c6:	f004 f8e9 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 80014ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <MX_GPIO_Init+0x1e8>)
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	4619      	mov	r1, r3
 80014de:	4832      	ldr	r0, [pc, #200]	; (80015a8 <MX_GPIO_Init+0x1ec>)
 80014e0:	f004 f8dc 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <MX_GPIO_Init+0x1e8>)
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	4619      	mov	r1, r3
 80014f6:	482d      	ldr	r0, [pc, #180]	; (80015ac <MX_GPIO_Init+0x1f0>)
 80014f8:	f004 f8d0 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 80014fc:	f240 1323 	movw	r3, #291	; 0x123
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	4619      	mov	r1, r3
 8001514:	4820      	ldr	r0, [pc, #128]	; (8001598 <MX_GPIO_Init+0x1dc>)
 8001516:	f004 f8c1 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800151a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	4619      	mov	r1, r3
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_GPIO_Init+0x1e0>)
 8001534:	f004 f8b2 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2302      	movs	r3, #2
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4619      	mov	r1, r3
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <MX_GPIO_Init+0x1dc>)
 8001552:	f004 f8a3 	bl	800569c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2006      	movs	r0, #6
 800155c:	f003 ff5f 	bl	800541e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001560:	2006      	movs	r0, #6
 8001562:	f003 ff78 	bl	8005456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	200a      	movs	r0, #10
 800156c:	f003 ff57 	bl	800541e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001570:	200a      	movs	r0, #10
 8001572:	f003 ff70 	bl	8005456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2028      	movs	r0, #40	; 0x28
 800157c:	f003 ff4f 	bl	800541e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001580:	2028      	movs	r0, #40	; 0x28
 8001582:	f003 ff68 	bl	8005456 <HAL_NVIC_EnableIRQ>

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	40011800 	.word	0x40011800
 8001598:	40010c00 	.word	0x40010c00
 800159c:	40011400 	.word	0x40011400
 80015a0:	10210000 	.word	0x10210000
 80015a4:	10110000 	.word	0x10110000
 80015a8:	40011000 	.word	0x40011000
 80015ac:	40010800 	.word	0x40010800

080015b0 <_ZN8SERVO42C6getCHKEPhh>:
    uint32_t encoderCarry = 0;
    
    uint8_t stepSpeed = 3;
    

    static uint8_t getCHK(uint8_t instruction[], uint8_t len){
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	da0b      	bge.n	80015e4 <_ZN8SERVO42C6getCHKEPhh+0x34>
            result+=instruction[i];
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	4413      	add	r3, r2
 80015da:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	e7ef      	b.n	80015c4 <_ZN8SERVO42C6getCHKEPhh+0x14>
        }
        return result & 0xFF;
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	b2db      	uxtb	r3, r3
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>:

public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART) : address(address), pUART(pUART){}
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	460b      	mov	r3, r1
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	72fb      	strb	r3, [r7, #11]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	7afa      	ldrb	r2, [r7, #11]
 800160a:	711a      	strb	r2, [r3, #4]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	80da      	strh	r2, [r3, #6]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2203      	movs	r2, #3
 800161c:	731a      	strb	r2, [r3, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <_ZN8SERVO42C4stepEhhm>:

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step(uint8_t direction, uint8_t speed, uint32_t stepCount){
 800162a:	b580      	push	{r7, lr}
 800162c:	b088      	sub	sp, #32
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	72fb      	strb	r3, [r7, #11]
 8001638:	4613      	mov	r3, r2
 800163a:	72bb      	strb	r3, [r7, #10]
        uint8_t instruction[8] = {};
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
        instruction[0] = address;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	791b      	ldrb	r3, [r3, #4]
 8001648:	753b      	strb	r3, [r7, #20]
        instruction[1] = 0xfd;
 800164a:	23fd      	movs	r3, #253	; 0xfd
 800164c:	757b      	strb	r3, [r7, #21]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	01db      	lsls	r3, r3, #7
 8001652:	b25a      	sxtb	r2, r3
 8001654:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800165c:	b25b      	sxtb	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b25b      	sxtb	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	75bb      	strb	r3, [r7, #22]
        for (int i=0; i<4; i++){
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	2b03      	cmp	r3, #3
 800166e:	dc16      	bgt.n	800169e <_ZN8SERVO42C4stepEhhm+0x74>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	401a      	ands	r2, r3
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	40da      	lsrs	r2, r3
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f1c3 0306 	rsb	r3, r3, #6
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	3320      	adds	r3, #32
 8001690:	443b      	add	r3, r7
 8001692:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i=0; i<4; i++){
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	e7e5      	b.n	800166a <_ZN8SERVO42C4stepEhhm+0x40>
        }
        instruction[7] = getCHK(instruction, 8);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2108      	movs	r1, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff83 	bl	80015b0 <_ZN8SERVO42C6getCHKEPhh>
 80016aa:	4603      	mov	r3, r0
 80016ac:	76fb      	strb	r3, [r7, #27]
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f107 0114 	add.w	r1, r7, #20
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	2208      	movs	r2, #8
 80016ba:	f005 fea3 	bl	8007404 <HAL_UART_Transmit>
    }
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZN8SERVO42C13stepClockwiseEh>:
    void stepClockwise(uint8_t stepCount){
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70fb      	strb	r3, [r7, #3]
        step(0, stepSpeed, stepCount);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7b1a      	ldrb	r2, [r3, #12]
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	2100      	movs	r1, #0
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa5 	bl	800162a <_ZN8SERVO42C4stepEhhm>
    }
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZN8SERVO42C20stepCounterClockwiseEh>:
    void stepCounterClockwise(uint8_t stepCount){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
        step(1, stepSpeed, stepCount);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7b1a      	ldrb	r2, [r3, #12]
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	2101      	movs	r1, #1
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff94 	bl	800162a <_ZN8SERVO42C4stepEhhm>
    }
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <_ZN9UIElementC1Etttt>:
    static void updateAllElements();

    uint16_t x, y;
    uint16_t width, height;
protected:
    UIElement(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	817b      	strh	r3, [r7, #10]
 800171e:	460b      	mov	r3, r1
 8001720:	813b      	strh	r3, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <_ZN9UIElementC1Etttt+0x5c>)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	601a      	str	r2, [r3, #0]
        this->x = x;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	897a      	ldrh	r2, [r7, #10]
 8001730:	809a      	strh	r2, [r3, #4]
        this->y = y;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	893a      	ldrh	r2, [r7, #8]
 8001736:	80da      	strh	r2, [r3, #6]
        this->width = width;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	88fa      	ldrh	r2, [r7, #6]
 800173c:	811a      	strh	r2, [r3, #8]
        this->height = height;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8b3a      	ldrh	r2, [r7, #24]
 8001742:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <_ZN9UIElementC1Etttt+0x60>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	b2d1      	uxtb	r1, r2
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <_ZN9UIElementC1Etttt+0x60>)
 800174e:	7011      	strb	r1, [r2, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <_ZN9UIElementC1Etttt+0x64>)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	0800801c 	.word	0x0800801c
 800176c:	20000144 	.word	0x20000144
 8001770:	200000c4 	.word	0x200000c4

08001774 <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y){
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	803b      	strh	r3, [r7, #0]
        return x>=this->x && x<=this->x+width && y>=this->y && y<=this->y+height;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	429a      	cmp	r2, r3
 800178c:	d318      	bcc.n	80017c0 <_ZN9UIElement10checkTouchEtt+0x4c>
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	4619      	mov	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	891b      	ldrh	r3, [r3, #8]
 800179a:	440b      	add	r3, r1
 800179c:	429a      	cmp	r2, r3
 800179e:	dc0f      	bgt.n	80017c0 <_ZN9UIElement10checkTouchEtt+0x4c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	88db      	ldrh	r3, [r3, #6]
 80017a4:	883a      	ldrh	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d30a      	bcc.n	80017c0 <_ZN9UIElement10checkTouchEtt+0x4c>
 80017aa:	883a      	ldrh	r2, [r7, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	88db      	ldrh	r3, [r3, #6]
 80017b0:	4619      	mov	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	895b      	ldrh	r3, [r3, #10]
 80017b6:	440b      	add	r3, r1
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dc01      	bgt.n	80017c0 <_ZN9UIElement10checkTouchEtt+0x4c>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <_ZN9UIElement10checkTouchEtt+0x4e>
 80017c0:	2300      	movs	r3, #0
    }
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <_ZN6ButtonC1EttPcPFvPS_iiEtttt>:
    char text[TEXT_CHAR_NUM];
public:
    bool isPressed = false;
    void (*onPressed)(Button* self, int x, int y);

    Button(uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], void (*onPressed)(Button*, int ,int) = nullptr, uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	817b      	strh	r3, [r7, #10]
 80017da:	4613      	mov	r3, r2
 80017dc:	813b      	strh	r3, [r7, #8]
    : UIElement(x, y, width, height)
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 80017e2:	893a      	ldrh	r2, [r7, #8]
 80017e4:	8979      	ldrh	r1, [r7, #10]
 80017e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4623      	mov	r3, r4
 80017ec:	f7ff ff8e 	bl	800170c <_ZN9UIElementC1Etttt>
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <_ZN6ButtonC1EttPcPFvPS_iiEtttt+0x68>)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	819a      	strh	r2, [r3, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    {
        this->initialColor = color;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001808:	81da      	strh	r2, [r3, #14]
        this->color = color;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800180e:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001814:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3314      	adds	r3, #20
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	f006 fb9f 	bl	8007f60 <strcpy>
        this->onPressed = onPressed;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a3a      	ldr	r2, [r7, #32]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	0800800c 	.word	0x0800800c

08001838 <_ZN6Button6renderEv>:

    void render() override
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8898      	ldrh	r0, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	88d9      	ldrh	r1, [r3, #6]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	891a      	ldrh	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	895b      	ldrh	r3, [r3, #10]
 8001850:	f000 fbc2 	bl	8001fd8 <LCD_OpenWindow>
        LCD_FillColor(width*height, color);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	891b      	ldrh	r3, [r3, #8]
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	895b      	ldrh	r3, [r3, #10]
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8a1b      	ldrh	r3, [r3, #16]
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f000 fc0d 	bl	800208a <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x+width/3, y+height/3, text, color, textColor);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	889a      	ldrh	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	891b      	ldrh	r3, [r3, #8]
 8001878:	4910      	ldr	r1, [pc, #64]	; (80018bc <_ZN6Button6renderEv+0x84>)
 800187a:	fba1 1303 	umull	r1, r3, r1, r3
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b298      	uxth	r0, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	88da      	ldrh	r2, [r3, #6]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	895b      	ldrh	r3, [r3, #10]
 800188e:	490b      	ldr	r1, [pc, #44]	; (80018bc <_ZN6Button6renderEv+0x84>)
 8001890:	fba1 1303 	umull	r1, r3, r1, r3
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b299      	uxth	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 0214 	add.w	r2, r3, #20
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8a1c      	ldrh	r4, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8a5b      	ldrh	r3, [r3, #18]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	4623      	mov	r3, r4
 80018ae:	f000 fd13 	bl	80022d8 <LCD_DrawString_Color>
    }
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	aaaaaaab 	.word	0xaaaaaaab

080018c0 <_ZN6Button6updateEtt>:

    
    void update(u_int16_t x, u_int16_t y) override
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y)){
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	883a      	ldrh	r2, [r7, #0]
 80018d4:	8879      	ldrh	r1, [r7, #2]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff4c 	bl	8001774 <_ZN9UIElement10checkTouchEtt>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01a      	beq.n	8001918 <_ZN6Button6updateEtt+0x58>
            color = YELLOW;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018e8:	821a      	strh	r2, [r3, #16]
            if (!isPressed){
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f0:	f083 0301 	eor.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <_ZN6Button6updateEtt+0x68>
                isPressed = true;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                if (onPressed) onPressed(this,x,y);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <_ZN6Button6updateEtt+0x68>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	8879      	ldrh	r1, [r7, #2]
 8001910:	883a      	ldrh	r2, [r7, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
 8001916:	e007      	b.n	8001928 <_ZN6Button6updateEtt+0x68>
            }
        }
        else{
            color = initialColor;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	89da      	ldrh	r2, [r3, #14]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color){
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	899a      	ldrh	r2, [r3, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8a1b      	ldrh	r3, [r3, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d008      	beq.n	8001946 <_ZN6Button6updateEtt+0x86>
            render();
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
            last_color = color;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8a1a      	ldrh	r2, [r3, #16]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	819a      	strh	r2, [r3, #12]
        }
    }
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <_ZN6SliderC1Etttttt>:
    uint16_t draggerX;
    uint16_t draggerY;

public:

    Slider(
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4603      	mov	r3, r0
 8001960:	817b      	strh	r3, [r7, #10]
 8001962:	460b      	mov	r3, r1
 8001964:	813b      	strh	r3, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	80fb      	strh	r3, [r7, #6]
        uint16_t y,
        uint16_t maxValue = 0,
        uint16_t width = 10,
        uint16_t height = 130,
        uint16_t barColor = CYAN
    ): UIElement(x, y, width, height)
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	8c3c      	ldrh	r4, [r7, #32]
 800196e:	893a      	ldrh	r2, [r7, #8]
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4623      	mov	r3, r4
 8001978:	f7ff fec8 	bl	800170c <_ZN9UIElementC1Etttt>
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <_ZN6SliderC1Etttttt+0x74>)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2214      	movs	r2, #20
 8001986:	82da      	strh	r2, [r3, #22]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	761a      	strb	r2, [r3, #24]
    {
        this->maxValue = maxValue;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	829a      	strh	r2, [r3, #20]
        this->barColor = barColor;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001998:	819a      	strh	r2, [r3, #12]
        draggerX = x + width/2;
 800199a:	8c3b      	ldrh	r3, [r7, #32]
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	897b      	ldrh	r3, [r7, #10]
 80019a2:	4413      	add	r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	835a      	strh	r2, [r3, #26]
        draggerY = y + height/2;
 80019aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	893b      	ldrh	r3, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	839a      	strh	r2, [r3, #28]

    }
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	08007ffc 	.word	0x08007ffc

080019c8 <_ZN6Slider6renderEv>:
    

    void render() override
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    {
        // render bar
        LCD_OpenWindow(x, y, width, height);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	8898      	ldrh	r0, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	88d9      	ldrh	r1, [r3, #6]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	891a      	ldrh	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	895b      	ldrh	r3, [r3, #10]
 80019e0:	f000 fafa 	bl	8001fd8 <LCD_OpenWindow>
        LCD_FillColor(width*height, barColor);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	891b      	ldrh	r3, [r3, #8]
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	895b      	ldrh	r3, [r3, #10]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	899b      	ldrh	r3, [r3, #12]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 fb45 	bl	800208a <LCD_FillColor>

        // render dragger
        LCD_OpenWindow(x,draggerY,width,draggerRadius);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	8898      	ldrh	r0, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	8b99      	ldrh	r1, [r3, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	891a      	ldrh	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	8adb      	ldrh	r3, [r3, #22]
 8001a10:	f000 fae2 	bl	8001fd8 <LCD_OpenWindow>
        LCD_FillColor(width*draggerRadius, RED);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	891b      	ldrh	r3, [r3, #8]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	8adb      	ldrh	r3, [r3, #22]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fb2f 	bl	800208a <LCD_FillColor>
    }
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_ZN6Slider5wrapYEt>:

    uint16_t wrapY(u_int16_t y){
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
        if (y>500) return draggerY; // y=2048 if not touched
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a46:	d902      	bls.n	8001a4e <_ZN6Slider5wrapYEt+0x1a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8b9b      	ldrh	r3, [r3, #28]
 8001a4c:	e01f      	b.n	8001a8e <_ZN6Slider5wrapYEt+0x5a>
        if (y < this->y) return this->y;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	88db      	ldrh	r3, [r3, #6]
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d202      	bcs.n	8001a5e <_ZN6Slider5wrapYEt+0x2a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	88db      	ldrh	r3, [r3, #6]
 8001a5c:	e017      	b.n	8001a8e <_ZN6Slider5wrapYEt+0x5a>
        if (y > this->y+height-draggerRadius) return this->y+height-draggerRadius;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	88db      	ldrh	r3, [r3, #6]
 8001a64:	4619      	mov	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	895b      	ldrh	r3, [r3, #10]
 8001a6a:	440b      	add	r3, r1
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	8ac9      	ldrh	r1, [r1, #22]
 8001a70:	1a5b      	subs	r3, r3, r1
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dd0a      	ble.n	8001a8c <_ZN6Slider5wrapYEt+0x58>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	88da      	ldrh	r2, [r3, #6]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	895b      	ldrh	r3, [r3, #10]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	8adb      	ldrh	r3, [r3, #22]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	e000      	b.n	8001a8e <_ZN6Slider5wrapYEt+0x5a>
        return y;
 8001a8c:	887b      	ldrh	r3, [r7, #2]
    }
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <_ZN6Slider6updateEtt>:


    
    void update(u_int16_t x, u_int16_t y) override
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	803b      	strh	r3, [r7, #0]
    {
        bool isDraggerTouched;
        if (isDragging){
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d04f      	beq.n	8001b50 <_ZN6Slider6updateEtt+0xb8>
            draggerY = wrapY(y);
 8001ab0:	883b      	ldrh	r3, [r7, #0]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffbd 	bl	8001a34 <_ZN6Slider5wrapYEt>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	839a      	strh	r2, [r3, #28]
            value = (y-this->y)/this->height*maxValue;
 8001ac2:	883b      	ldrh	r3, [r7, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	88d2      	ldrh	r2, [r2, #6]
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	8952      	ldrh	r2, [r2, #10]
 8001ace:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	8a92      	ldrh	r2, [r2, #20]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f8fc 	bl	8000cd8 <__aeabi_i2f>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
            render();
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
            isDraggerTouched = x>=draggerX-3*draggerRadius && x<=draggerX+3*draggerRadius && y>=draggerY-draggerRadius && y<=draggerY+draggerRadius;
 8001af0:	887a      	ldrh	r2, [r7, #2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	8b5b      	ldrh	r3, [r3, #26]
 8001af6:	4619      	mov	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	8adb      	ldrh	r3, [r3, #22]
 8001afc:	4618      	mov	r0, r3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	1ac3      	subs	r3, r0, r3
 8001b02:	440b      	add	r3, r1
 8001b04:	429a      	cmp	r2, r3
 8001b06:	db20      	blt.n	8001b4a <_ZN6Slider6updateEtt+0xb2>
 8001b08:	887a      	ldrh	r2, [r7, #2]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	8b5b      	ldrh	r3, [r3, #26]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	8adb      	ldrh	r3, [r3, #22]
 8001b14:	4619      	mov	r1, r3
 8001b16:	460b      	mov	r3, r1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	440b      	add	r3, r1
 8001b1c:	4403      	add	r3, r0
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dc13      	bgt.n	8001b4a <_ZN6Slider6updateEtt+0xb2>
 8001b22:	883a      	ldrh	r2, [r7, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8b9b      	ldrh	r3, [r3, #28]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	8adb      	ldrh	r3, [r3, #22]
 8001b2e:	1acb      	subs	r3, r1, r3
 8001b30:	429a      	cmp	r2, r3
 8001b32:	db0a      	blt.n	8001b4a <_ZN6Slider6updateEtt+0xb2>
 8001b34:	883a      	ldrh	r2, [r7, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	8b9b      	ldrh	r3, [r3, #28]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	8adb      	ldrh	r3, [r3, #22]
 8001b40:	440b      	add	r3, r1
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dc01      	bgt.n	8001b4a <_ZN6Slider6updateEtt+0xb2>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <_ZN6Slider6updateEtt+0xb4>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e027      	b.n	8001ba0 <_ZN6Slider6updateEtt+0x108>
        }
        else{
            isDraggerTouched = x>=draggerX-draggerRadius && x<=draggerX+draggerRadius && y>=draggerY-draggerRadius && y<=draggerY+draggerRadius;
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8b5b      	ldrh	r3, [r3, #26]
 8001b56:	4619      	mov	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	8adb      	ldrh	r3, [r3, #22]
 8001b5c:	1acb      	subs	r3, r1, r3
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	db1c      	blt.n	8001b9c <_ZN6Slider6updateEtt+0x104>
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8b5b      	ldrh	r3, [r3, #26]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8adb      	ldrh	r3, [r3, #22]
 8001b6e:	440b      	add	r3, r1
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dc13      	bgt.n	8001b9c <_ZN6Slider6updateEtt+0x104>
 8001b74:	883a      	ldrh	r2, [r7, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	8b9b      	ldrh	r3, [r3, #28]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8adb      	ldrh	r3, [r3, #22]
 8001b80:	1acb      	subs	r3, r1, r3
 8001b82:	429a      	cmp	r2, r3
 8001b84:	db0a      	blt.n	8001b9c <_ZN6Slider6updateEtt+0x104>
 8001b86:	883a      	ldrh	r2, [r7, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8b9b      	ldrh	r3, [r3, #28]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8adb      	ldrh	r3, [r3, #22]
 8001b92:	440b      	add	r3, r1
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dc01      	bgt.n	8001b9c <_ZN6Slider6updateEtt+0x104>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <_ZN6Slider6updateEtt+0x106>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
        }
        
         
        isDragging = isDraggerTouched;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	761a      	strb	r2, [r3, #24]
    }
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <myfunc>:
#include "EasyUI.hpp"

#include <stdio.h>


void myfunc(){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0a6      	sub	sp, #152	; 0x98
 8001bb4:	af06      	add	r7, sp, #24
  SERVO42C servo(0xe0, &huart2);
 8001bb6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bba:	4a38      	ldr	r2, [pc, #224]	; (8001c9c <myfunc+0xec>)
 8001bbc:	21e0      	movs	r1, #224	; 0xe0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fd17 	bl	80015f2 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>

  Button testButton(150, 50, "Test");
 8001bc4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9304      	str	r3, [sp, #16]
 8001bcc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001bd0:	9303      	str	r3, [sp, #12]
 8001bd2:	2332      	movs	r3, #50	; 0x32
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	2355      	movs	r3, #85	; 0x55
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <myfunc+0xf0>)
 8001be0:	2232      	movs	r2, #50	; 0x32
 8001be2:	2196      	movs	r1, #150	; 0x96
 8001be4:	f7ff fdf2 	bl	80017cc <_ZN6ButtonC1EttPcPFvPS_iiEtttt>
  testButton.render();
 8001be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe23 	bl	8001838 <_ZN6Button6renderEv>

  Slider testSlider(150,120,100);
 8001bf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001bf6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	2382      	movs	r3, #130	; 0x82
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	230a      	movs	r3, #10
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	2278      	movs	r2, #120	; 0x78
 8001c08:	2196      	movs	r1, #150	; 0x96
 8001c0a:	f7ff fea1 	bl	8001950 <_ZN6SliderC1Etttttt>
  testSlider.render();
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fed8 	bl	80019c8 <_ZN6Slider6renderEv>

  char str[20];
  strType_XPT2046_Coordinate touch;
  LCD_DrawString(0, 0, "Hello World");
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <myfunc+0xf4>)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 fadd 	bl	80021dc <LCD_DrawString>

    // sprintf(str, "x=%d, y=%d", touch.x, touch.y);
    // LCD_DrawString(0, 0, str);

    
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001c22:	2101      	movs	r1, #1
 8001c24:	4820      	ldr	r0, [pc, #128]	; (8001ca8 <myfunc+0xf8>)
 8001c26:	f003 fed1 	bl	80059cc <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <myfunc+0x96>
      servo.stepCounterClockwise(10);
 8001c3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c3e:	210a      	movs	r1, #10
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fd51 	bl	80016e8 <_ZN8SERVO42C20stepCounterClockwiseEh>
    }
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	4818      	ldr	r0, [pc, #96]	; (8001cac <myfunc+0xfc>)
 8001c4c:	f003 febe 	bl	80059cc <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <myfunc+0xbc>
      servo.stepClockwise(10);
 8001c60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c64:	210a      	movs	r1, #10
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fd2d 	bl	80016c6 <_ZN8SERVO42C13stepClockwiseEh>
    }


    uint8_t data[3] = {};
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <myfunc+0x100>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	723b      	strb	r3, [r7, #8]
 8001c72:	f107 0309 	add.w	r3, r7, #9
 8001c76:	2200      	movs	r2, #0
 8001c78:	801a      	strh	r2, [r3, #0]
    // HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
    char str[3] = {};
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <myfunc+0x100>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	713b      	strb	r3, [r7, #4]
 8001c80:	1d7b      	adds	r3, r7, #5
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
    sprintf(str, "%02X", data[0]);
 8001c86:	7a3b      	ldrb	r3, [r7, #8]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <myfunc+0x104>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 f836 	bl	8003d00 <sprintf_>
    
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); 
    UIElement::updateAllElements();
 8001c94:	f7ff f9f8 	bl	8001088 <_ZN9UIElement17updateAllElementsEv>
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
    // HAL_Delay(500);
  }
 8001c98:	e7c3      	b.n	8001c22 <myfunc+0x72>
 8001c9a:	bf00      	nop
 8001c9c:	2000079c 	.word	0x2000079c
 8001ca0:	08007fac 	.word	0x08007fac
 8001ca4:	08007fb4 	.word	0x08007fb4
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	08007fc8 	.word	0x08007fc8
 8001cb4:	08007fc0 	.word	0x08007fc0

08001cb8 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	e002      	b.n	8001cc8 <Delay+0x10>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <Delay+0xa>
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 f826 	bl	8001d30 <LCD_BackLed_Control>
	LCD_Rst();
 8001ce4:	f000 f80c 	bl	8001d00 <LCD_Rst>
	LCD_REG_Config();
 8001ce8:	f000 f85c 	bl	8001da4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8001cec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001cf0:	22f0      	movs	r2, #240	; 0xf0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f000 f9e7 	bl	80020c8 <LCD_Clear>
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2102      	movs	r1, #2
 8001d08:	4807      	ldr	r0, [pc, #28]	; (8001d28 <LCD_Rst+0x28>)
 8001d0a:	f003 fe76 	bl	80059fa <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001d0e:	4807      	ldr	r0, [pc, #28]	; (8001d2c <LCD_Rst+0x2c>)
 8001d10:	f7ff ffd2 	bl	8001cb8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2102      	movs	r1, #2
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <LCD_Rst+0x28>)
 8001d1a:	f003 fe6e 	bl	80059fa <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <LCD_Rst+0x2c>)
 8001d20:	f7ff ffca 	bl	8001cb8 <Delay>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40011800 	.word	0x40011800
 8001d2c:	0002bffc 	.word	0x0002bffc

08001d30 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <LCD_BackLed_Control+0x34>)
 8001d48:	f003 fe57 	bl	80059fa <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001d4c:	e005      	b.n	8001d5a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <LCD_BackLed_Control+0x34>)
 8001d56:	f003 fe50 	bl	80059fa <HAL_GPIO_WritePin>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40011400 	.word	0x40011400

08001d68 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001d72:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	8013      	strh	r3, [r2, #0]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <LCD_Write_Data+0x1c>)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	8013      	strh	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	60020000 	.word	0x60020000

08001da4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001da8:	20cf      	movs	r0, #207	; 0xcf
 8001daa:	f7ff ffdd 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff ffe8 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001db4:	2081      	movs	r0, #129	; 0x81
 8001db6:	f7ff ffe5 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001dba:	2030      	movs	r0, #48	; 0x30
 8001dbc:	f7ff ffe2 	bl	8001d84 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001dc0:	20ed      	movs	r0, #237	; 0xed
 8001dc2:	f7ff ffd1 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001dc6:	2064      	movs	r0, #100	; 0x64
 8001dc8:	f7ff ffdc 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f7ff ffd9 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001dd2:	2012      	movs	r0, #18
 8001dd4:	f7ff ffd6 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001dd8:	2081      	movs	r0, #129	; 0x81
 8001dda:	f7ff ffd3 	bl	8001d84 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001dde:	20e8      	movs	r0, #232	; 0xe8
 8001de0:	f7ff ffc2 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001de4:	2085      	movs	r0, #133	; 0x85
 8001de6:	f7ff ffcd 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001dea:	2010      	movs	r0, #16
 8001dec:	f7ff ffca 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001df0:	2078      	movs	r0, #120	; 0x78
 8001df2:	f7ff ffc7 	bl	8001d84 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001df6:	20cb      	movs	r0, #203	; 0xcb
 8001df8:	f7ff ffb6 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001dfc:	2039      	movs	r0, #57	; 0x39
 8001dfe:	f7ff ffc1 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001e02:	202c      	movs	r0, #44	; 0x2c
 8001e04:	f7ff ffbe 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff ffbb 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001e0e:	2034      	movs	r0, #52	; 0x34
 8001e10:	f7ff ffb8 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001e14:	2002      	movs	r0, #2
 8001e16:	f7ff ffb5 	bl	8001d84 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001e1a:	20f7      	movs	r0, #247	; 0xf7
 8001e1c:	f7ff ffa4 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001e20:	2020      	movs	r0, #32
 8001e22:	f7ff ffaf 	bl	8001d84 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001e26:	20ea      	movs	r0, #234	; 0xea
 8001e28:	f7ff ff9e 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff ffa9 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff ffa6 	bl	8001d84 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001e38:	20b1      	movs	r0, #177	; 0xb1
 8001e3a:	f7ff ff95 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff ffa0 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001e44:	201b      	movs	r0, #27
 8001e46:	f7ff ff9d 	bl	8001d84 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001e4a:	20b6      	movs	r0, #182	; 0xb6
 8001e4c:	f7ff ff8c 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001e50:	200a      	movs	r0, #10
 8001e52:	f7ff ff97 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001e56:	20a2      	movs	r0, #162	; 0xa2
 8001e58:	f7ff ff94 	bl	8001d84 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001e5c:	20c0      	movs	r0, #192	; 0xc0
 8001e5e:	f7ff ff83 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001e62:	2035      	movs	r0, #53	; 0x35
 8001e64:	f7ff ff8e 	bl	8001d84 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001e68:	20c1      	movs	r0, #193	; 0xc1
 8001e6a:	f7ff ff7d 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001e6e:	2011      	movs	r0, #17
 8001e70:	f7ff ff88 	bl	8001d84 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001e74:	20c5      	movs	r0, #197	; 0xc5
 8001e76:	f7ff ff77 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001e7a:	2045      	movs	r0, #69	; 0x45
 8001e7c:	f7ff ff82 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001e80:	2045      	movs	r0, #69	; 0x45
 8001e82:	f7ff ff7f 	bl	8001d84 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001e86:	20c7      	movs	r0, #199	; 0xc7
 8001e88:	f7ff ff6e 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001e8c:	20a2      	movs	r0, #162	; 0xa2
 8001e8e:	f7ff ff79 	bl	8001d84 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001e92:	20f2      	movs	r0, #242	; 0xf2
 8001e94:	f7ff ff68 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff ff73 	bl	8001d84 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001e9e:	2026      	movs	r0, #38	; 0x26
 8001ea0:	f7ff ff62 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff ff6d 	bl	8001d84 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001eaa:	20e0      	movs	r0, #224	; 0xe0
 8001eac:	f7ff ff5c 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001eb0:	200f      	movs	r0, #15
 8001eb2:	f7ff ff67 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001eb6:	2026      	movs	r0, #38	; 0x26
 8001eb8:	f7ff ff64 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001ebc:	2024      	movs	r0, #36	; 0x24
 8001ebe:	f7ff ff61 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001ec2:	200b      	movs	r0, #11
 8001ec4:	f7ff ff5e 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001ec8:	200e      	movs	r0, #14
 8001eca:	f7ff ff5b 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001ece:	2009      	movs	r0, #9
 8001ed0:	f7ff ff58 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001ed4:	2054      	movs	r0, #84	; 0x54
 8001ed6:	f7ff ff55 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001eda:	20a8      	movs	r0, #168	; 0xa8
 8001edc:	f7ff ff52 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001ee0:	2046      	movs	r0, #70	; 0x46
 8001ee2:	f7ff ff4f 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001ee6:	200c      	movs	r0, #12
 8001ee8:	f7ff ff4c 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001eec:	2017      	movs	r0, #23
 8001eee:	f7ff ff49 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001ef2:	2009      	movs	r0, #9
 8001ef4:	f7ff ff46 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001ef8:	200f      	movs	r0, #15
 8001efa:	f7ff ff43 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001efe:	2007      	movs	r0, #7
 8001f00:	f7ff ff40 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff ff3d 	bl	8001d84 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001f0a:	20e1      	movs	r0, #225	; 0xe1
 8001f0c:	f7ff ff2c 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff ff37 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001f16:	2019      	movs	r0, #25
 8001f18:	f7ff ff34 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001f1c:	201b      	movs	r0, #27
 8001f1e:	f7ff ff31 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001f22:	2004      	movs	r0, #4
 8001f24:	f7ff ff2e 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001f28:	2010      	movs	r0, #16
 8001f2a:	f7ff ff2b 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001f2e:	2007      	movs	r0, #7
 8001f30:	f7ff ff28 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001f34:	202a      	movs	r0, #42	; 0x2a
 8001f36:	f7ff ff25 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001f3a:	2047      	movs	r0, #71	; 0x47
 8001f3c:	f7ff ff22 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001f40:	2039      	movs	r0, #57	; 0x39
 8001f42:	f7ff ff1f 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001f46:	2003      	movs	r0, #3
 8001f48:	f7ff ff1c 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001f4c:	2006      	movs	r0, #6
 8001f4e:	f7ff ff19 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001f52:	2006      	movs	r0, #6
 8001f54:	f7ff ff16 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001f58:	2030      	movs	r0, #48	; 0x30
 8001f5a:	f7ff ff13 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001f5e:	2038      	movs	r0, #56	; 0x38
 8001f60:	f7ff ff10 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001f64:	200f      	movs	r0, #15
 8001f66:	f7ff ff0d 	bl	8001d84 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001f6a:	2036      	movs	r0, #54	; 0x36
 8001f6c:	f7ff fefc 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001f70:	20c8      	movs	r0, #200	; 0xc8
 8001f72:	f7ff ff07 	bl	8001d84 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001f76:	202a      	movs	r0, #42	; 0x2a
 8001f78:	f7ff fef6 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff ff01 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff fefe 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fefb 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001f8e:	20ef      	movs	r0, #239	; 0xef
 8001f90:	f7ff fef8 	bl	8001d84 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001f94:	202b      	movs	r0, #43	; 0x2b
 8001f96:	f7ff fee7 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fef2 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff feef 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff feec 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001fac:	203f      	movs	r0, #63	; 0x3f
 8001fae:	f7ff fee9 	bl	8001d84 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001fb2:	203a      	movs	r0, #58	; 0x3a
 8001fb4:	f7ff fed8 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001fb8:	2055      	movs	r0, #85	; 0x55
 8001fba:	f7ff fee3 	bl	8001d84 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001fbe:	2011      	movs	r0, #17
 8001fc0:	f7ff fed2 	bl	8001d68 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <LCD_REG_Config+0x230>)
 8001fc6:	f7ff fe77 	bl	8001cb8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001fca:	2029      	movs	r0, #41	; 0x29
 8001fcc:	f7ff fecc 	bl	8001d68 <LCD_Write_Cmd>
	
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	0002bffc 	.word	0x0002bffc

08001fd8 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	80fb      	strh	r3, [r7, #6]
 8001fea:	4603      	mov	r3, r0
 8001fec:	80bb      	strh	r3, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001ff6:	202a      	movs	r0, #42	; 0x2a
 8001ff8:	f7ff feb6 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b29b      	uxth	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff febe 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff feb8 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	4413      	add	r3, r2
 800201a:	3b01      	subs	r3, #1
 800201c:	121b      	asrs	r3, r3, #8
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff feaf 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	4413      	add	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fea4 	bl	8001d84 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800203c:	202b      	movs	r0, #43	; 0x2b
 800203e:	f7ff fe93 	bl	8001d68 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	b29b      	uxth	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe9b 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	b29b      	uxth	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fe95 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800205a:	88ba      	ldrh	r2, [r7, #4]
 800205c:	883b      	ldrh	r3, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	3b01      	subs	r3, #1
 8002062:	121b      	asrs	r3, r3, #8
 8002064:	b29b      	uxth	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe8c 	bl	8001d84 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800206c:	88ba      	ldrh	r2, [r7, #4]
 800206e:	883b      	ldrh	r3, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29b      	uxth	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fe81 	bl	8001d84 <LCD_Write_Data>
	
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}

0800208a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800209a:	202c      	movs	r0, #44	; 0x2c
 800209c:	f7ff fe64 	bl	8001d68 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e006      	b.n	80020b4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fe6b 	bl	8001d84 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3301      	adds	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3f4      	bcc.n	80020a6 <LCD_FillColor+0x1c>
		
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4604      	mov	r4, r0
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4623      	mov	r3, r4
 80020d8:	80fb      	strh	r3, [r7, #6]
 80020da:	4603      	mov	r3, r0
 80020dc:	80bb      	strh	r3, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	807b      	strh	r3, [r7, #2]
 80020e2:	4613      	mov	r3, r2
 80020e4:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <LCD_Clear+0x58>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <LCD_Clear+0x2a>
 80020ee:	2300      	movs	r3, #0
 80020f0:	e001      	b.n	80020f6 <LCD_Clear+0x2e>
 80020f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f6:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80020f8:	883b      	ldrh	r3, [r7, #0]
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	88b9      	ldrh	r1, [r7, #4]
 80020fe:	88f8      	ldrh	r0, [r7, #6]
 8002100:	f7ff ff6a 	bl	8001fd8 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	883a      	ldrh	r2, [r7, #0]
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	461a      	mov	r2, r3
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f7ff ffb9 	bl	800208a <LCD_FillColor>
	
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}
 8002120:	20000240 	.word	0x20000240

08002124 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
 800212e:	460b      	mov	r3, r1
 8002130:	80bb      	strh	r3, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 8002136:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <LCD_DrawChar+0xb0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <LCD_DrawChar+0x20>
 800213e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002142:	e000      	b.n	8002146 <LCD_DrawChar+0x22>
 8002144:	2300      	movs	r3, #0
 8002146:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <LCD_DrawChar+0xb0>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <LCD_DrawChar+0x30>
 8002150:	2300      	movs	r3, #0
 8002152:	e001      	b.n	8002158 <LCD_DrawChar+0x34>
 8002154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002158:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	3b20      	subs	r3, #32
 800215e:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002160:	88b9      	ldrh	r1, [r7, #4]
 8002162:	88f8      	ldrh	r0, [r7, #6]
 8002164:	2310      	movs	r3, #16
 8002166:	2208      	movs	r2, #8
 8002168:	f7ff ff36 	bl	8001fd8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800216c:	202c      	movs	r0, #44	; 0x2c
 800216e:	f7ff fdfb 	bl	8001d68 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002172:	2300      	movs	r3, #0
 8002174:	75bb      	strb	r3, [r7, #22]
 8002176:	e024      	b.n	80021c2 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	7dbb      	ldrb	r3, [r7, #22]
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <LCD_DrawChar+0xb4>)
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	440a      	add	r2, r1
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002188:	2300      	movs	r3, #0
 800218a:	757b      	strb	r3, [r7, #21]
 800218c:	e013      	b.n	80021b6 <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 8002198:	8a7b      	ldrh	r3, [r7, #18]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fdf2 	bl	8001d84 <LCD_Write_Data>
 80021a0:	e003      	b.n	80021aa <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 80021a2:	8a3b      	ldrh	r3, [r7, #16]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fded 	bl	8001d84 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80021b0:	7d7b      	ldrb	r3, [r7, #21]
 80021b2:	3301      	adds	r3, #1
 80021b4:	757b      	strb	r3, [r7, #21]
 80021b6:	7d7b      	ldrb	r3, [r7, #21]
 80021b8:	2b07      	cmp	r3, #7
 80021ba:	d9e8      	bls.n	800218e <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80021bc:	7dbb      	ldrb	r3, [r7, #22]
 80021be:	3301      	adds	r3, #1
 80021c0:	75bb      	strb	r3, [r7, #22]
 80021c2:	7dbb      	ldrb	r3, [r7, #22]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d9d7      	bls.n	8002178 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000240 	.word	0x20000240
 80021d8:	08008024 	.word	0x08008024

080021dc <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	603a      	str	r2, [r7, #0]
 80021e6:	80fb      	strh	r3, [r7, #6]
 80021e8:	460b      	mov	r3, r1
 80021ea:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80021ec:	e01c      	b.n	8002228 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	2be8      	cmp	r3, #232	; 0xe8
 80021f2:	d904      	bls.n	80021fe <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80021f4:	2300      	movs	r3, #0
 80021f6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80021f8:	88bb      	ldrh	r3, [r7, #4]
 80021fa:	3310      	adds	r3, #16
 80021fc:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80021fe:	88bb      	ldrh	r3, [r7, #4]
 8002200:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002204:	d903      	bls.n	800220e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002206:	2300      	movs	r3, #0
 8002208:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800220a:	2300      	movs	r3, #0
 800220c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	88b9      	ldrh	r1, [r7, #4]
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff84 	bl	8002124 <LCD_DrawChar>
		
		pStr ++;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	3308      	adds	r3, #8
 8002226:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1de      	bne.n	80021ee <LCD_DrawString+0x12>
		
	}
	
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	4604      	mov	r4, r0
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4623      	mov	r3, r4
 800224c:	80fb      	strh	r3, [r7, #6]
 800224e:	4603      	mov	r3, r0
 8002250:	80bb      	strh	r3, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	70fb      	strb	r3, [r7, #3]
 8002256:	4613      	mov	r3, r2
 8002258:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	3b20      	subs	r3, #32
 800225e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002260:	88b9      	ldrh	r1, [r7, #4]
 8002262:	88f8      	ldrh	r0, [r7, #6]
 8002264:	2310      	movs	r3, #16
 8002266:	2208      	movs	r2, #8
 8002268:	f7ff feb6 	bl	8001fd8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800226c:	202c      	movs	r0, #44	; 0x2c
 800226e:	f7ff fd7b 	bl	8001d68 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002272:	2300      	movs	r3, #0
 8002274:	73bb      	strb	r3, [r7, #14]
 8002276:	e024      	b.n	80022c2 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8002278:	7b3a      	ldrb	r2, [r7, #12]
 800227a:	7bbb      	ldrb	r3, [r7, #14]
 800227c:	4915      	ldr	r1, [pc, #84]	; (80022d4 <LCD_DrawChar_Color+0x98>)
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	440a      	add	r2, r1
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002288:	2300      	movs	r3, #0
 800228a:	737b      	strb	r3, [r7, #13]
 800228c:	e013      	b.n	80022b6 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8002298:	8c3b      	ldrh	r3, [r7, #32]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fd72 	bl	8001d84 <LCD_Write_Data>
 80022a0:	e003      	b.n	80022aa <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80022a2:	883b      	ldrh	r3, [r7, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fd6d 	bl	8001d84 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80022b0:	7b7b      	ldrb	r3, [r7, #13]
 80022b2:	3301      	adds	r3, #1
 80022b4:	737b      	strb	r3, [r7, #13]
 80022b6:	7b7b      	ldrb	r3, [r7, #13]
 80022b8:	2b07      	cmp	r3, #7
 80022ba:	d9e8      	bls.n	800228e <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
 80022be:	3301      	adds	r3, #1
 80022c0:	73bb      	strb	r3, [r7, #14]
 80022c2:	7bbb      	ldrb	r3, [r7, #14]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d9d7      	bls.n	8002278 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	08008024 	.word	0x08008024

080022d8 <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b087      	sub	sp, #28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60ba      	str	r2, [r7, #8]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	81fb      	strh	r3, [r7, #14]
 80022e6:	460b      	mov	r3, r1
 80022e8:	81bb      	strh	r3, [r7, #12]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80022ee:	e01f      	b.n	8002330 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	2be8      	cmp	r3, #232	; 0xe8
 80022f4:	d904      	bls.n	8002300 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80022f6:	2300      	movs	r3, #0
 80022f8:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80022fa:	89bb      	ldrh	r3, [r7, #12]
 80022fc:	3310      	adds	r3, #16
 80022fe:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002300:	89bb      	ldrh	r3, [r7, #12]
 8002302:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002306:	d903      	bls.n	8002310 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002308:	2300      	movs	r3, #0
 800230a:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 800230c:	2300      	movs	r3, #0
 800230e:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	88fc      	ldrh	r4, [r7, #6]
 8002316:	89b9      	ldrh	r1, [r7, #12]
 8002318:	89f8      	ldrh	r0, [r7, #14]
 800231a:	8c3b      	ldrh	r3, [r7, #32]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	4623      	mov	r3, r4
 8002320:	f7ff ff8c 	bl	800223c <LCD_DrawChar_Color>
		
		pStr ++;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3301      	adds	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	3308      	adds	r3, #8
 800232e:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1db      	bne.n	80022f0 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
	...

08002344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002348:	f002 fd18 	bl	8004d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800234c:	f000 f830 	bl	80023b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002350:	f7ff f834 	bl	80013bc <MX_GPIO_Init>
  MX_FSMC_Init();
 8002354:	f7fe ff80 	bl	8001258 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002358:	f002 f936 	bl	80045c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800235c:	f001 ff7c 	bl	8004258 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002360:	f001 ffc6 	bl	80042f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002364:	f002 f812 	bl	800438c <MX_TIM5_Init>
  MX_TIM1_Init();
 8002368:	f001 fed0 	bl	800410c <MX_TIM1_Init>
  MX_ADC1_Init();
 800236c:	f7fe fed0 	bl	8001110 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8002370:	f002 f97e 	bl	8004670 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8002374:	f002 f952 	bl	800461c <MX_USART2_UART_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 8002378:	2200      	movs	r2, #0
 800237a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <main+0x60>)
 8002380:	f003 fb3b 	bl	80059fa <HAL_GPIO_WritePin>
	LCD_INIT();
 8002384:	f7ff fca9 	bl	8001cda <LCD_INIT>
	
	
	DEBUG_USART_Config();
 8002388:	f7fe ff3c 	bl	8001204 <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 800238c:	f002 f8e8 	bl	8004560 <TIMER_INIT>
	timer_min(1);
 8002390:	2001      	movs	r0, #1
 8002392:	f002 f8f7 	bl	8004584 <timer_min>
  myfunc();
 8002396:	f7ff fc0b 	bl	8001bb0 <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 800239a:	4903      	ldr	r1, [pc, #12]	; (80023a8 <main+0x64>)
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <main+0x68>)
 800239e:	f002 fc3f 	bl	8004c20 <XPT2046_Get_TouchedPoint>
 80023a2:	e7fa      	b.n	800239a <main+0x56>
 80023a4:	40011400 	.word	0x40011400
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000244 	.word	0x20000244

080023b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b096      	sub	sp, #88	; 0x58
 80023b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ba:	2228      	movs	r2, #40	; 0x28
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 fd82 	bl	8007ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	611a      	str	r2, [r3, #16]
 80023e2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80023e4:	2305      	movs	r3, #5
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023f2:	2301      	movs	r3, #1
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f6:	2301      	movs	r3, #1
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fa:	2302      	movs	r3, #2
 80023fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002402:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002404:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002408:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fb2e 	bl	8005a70 <HAL_RCC_OscConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800241a:	f000 f82b 	bl	8002474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800241e:	230f      	movs	r3, #15
 8002420:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800242a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fd7c 	bl	8005f38 <HAL_RCC_ClockConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002446:	f000 f815 	bl	8002474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800244a:	2303      	movs	r3, #3
 800244c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002458:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	4618      	mov	r0, r3
 800245e:	f003 ff27 	bl	80062b0 <HAL_RCCEx_PeriphCLKConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002468:	f000 f804 	bl	8002474 <Error_Handler>
  }
}
 800246c:	bf00      	nop
 800246e:	3758      	adds	r7, #88	; 0x58
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d204      	bcs.n	80024a2 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	701a      	strb	r2, [r3, #0]
  }
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e002      	b.n	80024dc <_strnlen_s+0x16>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <_strnlen_s+0x28>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	1e5a      	subs	r2, r3, #1
 80024e8:	603a      	str	r2, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f3      	bne.n	80024d6 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1ad3      	subs	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b2f      	cmp	r3, #47	; 0x2f
 800250c:	d904      	bls.n	8002518 <_is_digit+0x1a>
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b39      	cmp	r3, #57	; 0x39
 8002512:	d801      	bhi.n	8002518 <_is_digit+0x1a>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <_is_digit+0x1c>
 8002518:	2300      	movs	r3, #0
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002536:	e00e      	b.n	8002556 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4618      	mov	r0, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1c59      	adds	r1, r3, #1
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6011      	str	r1, [r2, #0]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4403      	add	r3, r0
 8002552:	3b30      	subs	r3, #48	; 0x30
 8002554:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ffce 	bl	80024fe <_is_digit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e7      	bne.n	8002538 <_atoi+0xe>
  }
  return i;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002572:	b590      	push	{r4, r7, lr}
 8002574:	b087      	sub	sp, #28
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d125      	bne.n	80025da <_out_rev+0x68>
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d120      	bne.n	80025da <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e00a      	b.n	80025b4 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	1c53      	adds	r3, r2, #1
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	68fc      	ldr	r4, [r7, #12]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	2020      	movs	r0, #32
 80025ac:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3f0      	bcc.n	800259e <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80025bc:	e00d      	b.n	80025da <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	3b01      	subs	r3, #1
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	4413      	add	r3, r2
 80025ca:	7818      	ldrb	r0, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	1c53      	adds	r3, r2, #1
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	68fc      	ldr	r4, [r7, #12]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	47a0      	blx	r4
  while (len) {
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00e      	beq.n	8002608 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80025ea:	e007      	b.n	80025fc <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	1c53      	adds	r3, r2, #1
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	68fc      	ldr	r4, [r7, #12]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	2020      	movs	r0, #32
 80025fa:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f1      	bhi.n	80025ec <_out_rev+0x7a>
    }
  }

  return idx;
 8002608:	687b      	ldr	r3, [r7, #4]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}

08002612 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b088      	sub	sp, #32
 8002616:	af04      	add	r7, sp, #16
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d136      	bne.n	8002698 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d018      	beq.n	8002662 <_ntoa_format+0x50>
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d013      	beq.n	8002662 <_ntoa_format+0x50>
 800263a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d104      	bne.n	800264c <_ntoa_format+0x3a>
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <_ntoa_format+0x50>
      width--;
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	3b01      	subs	r3, #1
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002652:	e006      	b.n	8002662 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	61fa      	str	r2, [r7, #28]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4413      	add	r3, r2
 800265e:	2230      	movs	r2, #48	; 0x30
 8002660:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	429a      	cmp	r2, r3
 8002668:	d20a      	bcs.n	8002680 <_ntoa_format+0x6e>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	2b1f      	cmp	r3, #31
 800266e:	d9f1      	bls.n	8002654 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002670:	e006      	b.n	8002680 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	61fa      	str	r2, [r7, #28]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	2230      	movs	r2, #48	; 0x30
 800267e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <_ntoa_format+0x86>
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	429a      	cmp	r2, r3
 8002690:	d202      	bcs.n	8002698 <_ntoa_format+0x86>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b1f      	cmp	r3, #31
 8002696:	d9ec      	bls.n	8002672 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d058      	beq.n	8002754 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <_ntoa_format+0xc8>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d013      	beq.n	80026da <_ntoa_format+0xc8>
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d003      	beq.n	80026c2 <_ntoa_format+0xb0>
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10b      	bne.n	80026da <_ntoa_format+0xc8>
      len--;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <_ntoa_format+0xc8>
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d102      	bne.n	80026da <_ntoa_format+0xc8>
        len--;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d10f      	bne.n	8002700 <_ntoa_format+0xee>
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <_ntoa_format+0xee>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	2b1f      	cmp	r3, #31
 80026ee:	d807      	bhi.n	8002700 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	61fa      	str	r2, [r7, #28]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	2278      	movs	r2, #120	; 0x78
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e01f      	b.n	8002740 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	2b10      	cmp	r3, #16
 8002704:	d10f      	bne.n	8002726 <_ntoa_format+0x114>
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <_ntoa_format+0x114>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b1f      	cmp	r3, #31
 8002714:	d807      	bhi.n	8002726 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	61fa      	str	r2, [r7, #28]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	2258      	movs	r2, #88	; 0x58
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e00c      	b.n	8002740 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	2b02      	cmp	r3, #2
 800272a:	d109      	bne.n	8002740 <_ntoa_format+0x12e>
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b1f      	cmp	r3, #31
 8002730:	d806      	bhi.n	8002740 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	61fa      	str	r2, [r7, #28]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4413      	add	r3, r2
 800273c:	2262      	movs	r2, #98	; 0x62
 800273e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b1f      	cmp	r3, #31
 8002744:	d806      	bhi.n	8002754 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	61fa      	str	r2, [r7, #28]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	2230      	movs	r2, #48	; 0x30
 8002752:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b1f      	cmp	r3, #31
 8002758:	d824      	bhi.n	80027a4 <_ntoa_format+0x192>
    if (negative) {
 800275a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	61fa      	str	r2, [r7, #28]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4413      	add	r3, r2
 800276c:	222d      	movs	r2, #45	; 0x2d
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e018      	b.n	80027a4 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	61fa      	str	r2, [r7, #28]
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	222b      	movs	r2, #43	; 0x2b
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e00b      	b.n	80027a4 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	61fa      	str	r2, [r7, #28]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	2220      	movs	r2, #32
 80027a2:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	9303      	str	r3, [sp, #12]
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fed9 	bl	8002572 <_out_rev>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b096      	sub	sp, #88	; 0x58
 80027ce:	af08      	add	r7, sp, #32
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80027dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80027e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e4:	f023 0310 	bic.w	r3, r3, #16
 80027e8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <_ntoa_long+0x30>
 80027f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d032      	beq.n	8002860 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80027fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8002802:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002804:	fb01 f202 	mul.w	r2, r1, r2
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800280e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002812:	2b09      	cmp	r3, #9
 8002814:	d804      	bhi.n	8002820 <_ntoa_long+0x56>
 8002816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800281a:	3330      	adds	r3, #48	; 0x30
 800281c:	b2da      	uxtb	r2, r3
 800281e:	e00d      	b.n	800283c <_ntoa_long+0x72>
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <_ntoa_long+0x64>
 800282a:	2241      	movs	r2, #65	; 0x41
 800282c:	e000      	b.n	8002830 <_ntoa_long+0x66>
 800282e:	2261      	movs	r2, #97	; 0x61
 8002830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002834:	4413      	add	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3b0a      	subs	r3, #10
 800283a:	b2da      	uxtb	r2, r3
 800283c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	6379      	str	r1, [r7, #52]	; 0x34
 8002842:	3338      	adds	r3, #56	; 0x38
 8002844:	443b      	add	r3, r7
 8002846:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800284a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800284c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <_ntoa_long+0x96>
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	2b1f      	cmp	r3, #31
 800285e:	d9cc      	bls.n	80027fa <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	9306      	str	r3, [sp, #24]
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	9305      	str	r3, [sp, #20]
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	9304      	str	r3, [sp, #16]
 800286c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800286e:	9303      	str	r3, [sp, #12]
 8002870:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fec3 	bl	8002612 <_ntoa_format>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3738      	adds	r7, #56	; 0x38
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b096      	sub	sp, #88	; 0x58
 800289a:	af08      	add	r7, sp, #32
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80028a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ac:	4313      	orrs	r3, r2
 80028ae:	d103      	bne.n	80028b8 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80028b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b2:	f023 0310 	bic.w	r3, r3, #16
 80028b6:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80028b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <_ntoa_long_long+0x34>
 80028c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028c6:	4313      	orrs	r3, r2
 80028c8:	d037      	beq.n	800293a <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80028ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028d2:	f7fe fa55 	bl	8000d80 <__aeabi_uldivmod>
 80028d6:	4613      	mov	r3, r2
 80028d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80028dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d804      	bhi.n	80028ee <_ntoa_long_long+0x58>
 80028e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028e8:	3330      	adds	r3, #48	; 0x30
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	e00d      	b.n	800290a <_ntoa_long_long+0x74>
 80028ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <_ntoa_long_long+0x66>
 80028f8:	2241      	movs	r2, #65	; 0x41
 80028fa:	e000      	b.n	80028fe <_ntoa_long_long+0x68>
 80028fc:	2261      	movs	r2, #97	; 0x61
 80028fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002902:	4413      	add	r3, r2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3b0a      	subs	r3, #10
 8002908:	b2da      	uxtb	r2, r3
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	1c59      	adds	r1, r3, #1
 800290e:	6379      	str	r1, [r7, #52]	; 0x34
 8002910:	3338      	adds	r3, #56	; 0x38
 8002912:	443b      	add	r3, r7
 8002914:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002918:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800291c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002920:	f7fe fa2e 	bl	8000d80 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800292c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002930:	4313      	orrs	r3, r2
 8002932:	d002      	beq.n	800293a <_ntoa_long_long+0xa4>
 8002934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002936:	2b1f      	cmp	r3, #31
 8002938:	d9c7      	bls.n	80028ca <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800293a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800293e:	9206      	str	r2, [sp, #24]
 8002940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002942:	9205      	str	r2, [sp, #20]
 8002944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002946:	9204      	str	r2, [sp, #16]
 8002948:	9303      	str	r3, [sp, #12]
 800294a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fe56 	bl	8002612 <_ntoa_format>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3738      	adds	r7, #56	; 0x38
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b09d      	sub	sp, #116	; 0x74
 8002974:	af06      	add	r7, sp, #24
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800298e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002992:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002996:	f7fe f86b 	bl	8000a70 <__aeabi_dcmpeq>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10f      	bne.n	80029c0 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80029a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a2:	9303      	str	r3, [sp, #12]
 80029a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	2303      	movs	r3, #3
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	4b82      	ldr	r3, [pc, #520]	; (8002bb8 <_ftoa+0x248>)
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff fddb 	bl	8002572 <_out_rev>
 80029bc:	4603      	mov	r3, r0
 80029be:	e224      	b.n	8002e0a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c4:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80029c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029cc:	f7fe f85a 	bl	8000a84 <__aeabi_dcmplt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00f      	beq.n	80029f6 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80029d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d8:	9303      	str	r3, [sp, #12]
 80029da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029dc:	9302      	str	r3, [sp, #8]
 80029de:	2304      	movs	r3, #4
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <_ftoa+0x24c>)
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff fdc0 	bl	8002572 <_out_rev>
 80029f2:	4603      	mov	r3, r0
 80029f4:	e209      	b.n	8002e0a <_ftoa+0x49a>
  if (value > DBL_MAX)
 80029f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029fa:	4b71      	ldr	r3, [pc, #452]	; (8002bc0 <_ftoa+0x250>)
 80029fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a00:	f7fe f85e 	bl	8000ac0 <__aeabi_dcmpgt>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01d      	beq.n	8002a46 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <_ftoa+0xa8>
 8002a14:	4b6b      	ldr	r3, [pc, #428]	; (8002bc4 <_ftoa+0x254>)
 8002a16:	e000      	b.n	8002a1a <_ftoa+0xaa>
 8002a18:	4b6b      	ldr	r3, [pc, #428]	; (8002bc8 <_ftoa+0x258>)
 8002a1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a1c:	f002 0204 	and.w	r2, r2, #4
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	d001      	beq.n	8002a28 <_ftoa+0xb8>
 8002a24:	2204      	movs	r2, #4
 8002a26:	e000      	b.n	8002a2a <_ftoa+0xba>
 8002a28:	2203      	movs	r2, #3
 8002a2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a2c:	9103      	str	r1, [sp, #12]
 8002a2e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a30:	9102      	str	r1, [sp, #8]
 8002a32:	9201      	str	r2, [sp, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fd98 	bl	8002572 <_out_rev>
 8002a42:	4603      	mov	r3, r0
 8002a44:	e1e1      	b.n	8002e0a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002a46:	a358      	add	r3, pc, #352	; (adr r3, 8002ba8 <_ftoa+0x238>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a50:	f7fe f836 	bl	8000ac0 <__aeabi_dcmpgt>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <_ftoa+0xfe>
 8002a5a:	a355      	add	r3, pc, #340	; (adr r3, 8002bb0 <_ftoa+0x240>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a64:	f7fe f80e 	bl	8000a84 <__aeabi_dcmplt>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d011      	beq.n	8002a92 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a70:	9304      	str	r3, [sp, #16]
 8002a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a74:	9303      	str	r3, [sp, #12]
 8002a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f9c9 	bl	8002e20 <_etoa>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	e1bb      	b.n	8002e0a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002aa4:	f7fd ffee 	bl	8000a84 <__aeabi_dcmplt>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <_ftoa+0x15c>
    negative = true;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8002ab4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	f7fd fbb6 	bl	8000230 <__aeabi_dsub>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002ada:	e00a      	b.n	8002af2 <_ftoa+0x182>
    buf[len++] = '0';
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	657a      	str	r2, [r7, #84]	; 0x54
 8002ae2:	3358      	adds	r3, #88	; 0x58
 8002ae4:	443b      	add	r3, r7
 8002ae6:	2230      	movs	r2, #48	; 0x30
 8002ae8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aee:	3b01      	subs	r3, #1
 8002af0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	2b1f      	cmp	r3, #31
 8002af6:	d802      	bhi.n	8002afe <_ftoa+0x18e>
 8002af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d8ee      	bhi.n	8002adc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002afe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b02:	f7fd ffe7 	bl	8000ad4 <__aeabi_d2iz>
 8002b06:	4603      	mov	r3, r0
 8002b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8002b0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b0c:	f7fd fcde 	bl	80004cc <__aeabi_i2d>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b18:	f7fd fb8a 	bl	8000230 <__aeabi_dsub>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <_ftoa+0x25c>)
 8002b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fd36 	bl	80005a0 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8002b3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b40:	f7fd fff0 	bl	8000b24 <__aeabi_d2uiz>
 8002b44:	4603      	mov	r3, r0
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8002b48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b4a:	f7fd fcaf 	bl	80004ac <__aeabi_ui2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b56:	f7fd fb6b 	bl	8000230 <__aeabi_dsub>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <_ftoa+0x260>)
 8002b68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b6c:	f7fd ffa8 	bl	8000ac0 <__aeabi_dcmpgt>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d02e      	beq.n	8002bd4 <_ftoa+0x264>
    ++frac;
 8002b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b78:	3301      	adds	r3, #1
 8002b7a:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002b7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b7e:	f7fd fc95 	bl	80004ac <__aeabi_ui2d>
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <_ftoa+0x25c>)
 8002b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f7fd ff8d 	bl	8000aac <__aeabi_dcmpge>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d032      	beq.n	8002bfe <_ftoa+0x28e>
      frac = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba2:	e02c      	b.n	8002bfe <_ftoa+0x28e>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	41cdcd65 	.word	0x41cdcd65
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	c1cdcd65 	.word	0xc1cdcd65
 8002bb8:	08007fcc 	.word	0x08007fcc
 8002bbc:	08007fd0 	.word	0x08007fd0
 8002bc0:	7fefffff 	.word	0x7fefffff
 8002bc4:	08007fd8 	.word	0x08007fd8
 8002bc8:	08007fe0 	.word	0x08007fe0
 8002bcc:	08008618 	.word	0x08008618
 8002bd0:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	4b8e      	ldr	r3, [pc, #568]	; (8002e14 <_ftoa+0x4a4>)
 8002bda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002bde:	f7fd ff51 	bl	8000a84 <__aeabi_dcmplt>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <_ftoa+0x288>
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8002bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d133      	bne.n	8002c6c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002c04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c06:	f7fd fc61 	bl	80004cc <__aeabi_i2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c12:	f7fd fb0d 	bl	8000230 <__aeabi_dsub>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002c1e:	2301      	movs	r3, #1
 8002c20:	461c      	mov	r4, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <_ftoa+0x4a4>)
 8002c28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c2c:	f7fd ff2a 	bl	8000a84 <__aeabi_dcmplt>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <_ftoa+0x2ca>
 8002c36:	2300      	movs	r3, #0
 8002c38:	461c      	mov	r4, r3
 8002c3a:	b2e3      	uxtb	r3, r4
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <_ftoa+0x2ea>
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <_ftoa+0x4a4>)
 8002c4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c50:	f7fd ff36 	bl	8000ac0 <__aeabi_dcmpgt>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04c      	beq.n	8002cf4 <_ftoa+0x384>
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d069      	beq.n	8002d38 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c66:	3301      	adds	r3, #1
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c6a:	e065      	b.n	8002d38 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 8002c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6e:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002c70:	e01f      	b.n	8002cb2 <_ftoa+0x342>
      --count;
 8002c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c74:	3b01      	subs	r3, #1
 8002c76:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8002c78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <_ftoa+0x4a8>)
 8002c7c:	fba3 2301 	umull	r2, r3, r3, r1
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	1aca      	subs	r2, r1, r3
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c90:	1c59      	adds	r1, r3, #1
 8002c92:	6579      	str	r1, [r7, #84]	; 0x54
 8002c94:	3230      	adds	r2, #48	; 0x30
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	3358      	adds	r3, #88	; 0x58
 8002c9a:	443b      	add	r3, r7
 8002c9c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca2:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <_ftoa+0x4a8>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb4:	2b1f      	cmp	r3, #31
 8002cb6:	d9dc      	bls.n	8002c72 <_ftoa+0x302>
 8002cb8:	e009      	b.n	8002cce <_ftoa+0x35e>
        break;
 8002cba:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002cbc:	e007      	b.n	8002cce <_ftoa+0x35e>
      buf[len++] = '0';
 8002cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	657a      	str	r2, [r7, #84]	; 0x54
 8002cc4:	3358      	adds	r3, #88	; 0x58
 8002cc6:	443b      	add	r3, r7
 8002cc8:	2230      	movs	r2, #48	; 0x30
 8002cca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	2b1f      	cmp	r3, #31
 8002cd2:	d804      	bhi.n	8002cde <_ftoa+0x36e>
 8002cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd6:	1e5a      	subs	r2, r3, #1
 8002cd8:	647a      	str	r2, [r7, #68]	; 0x44
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce0:	2b1f      	cmp	r3, #31
 8002ce2:	d829      	bhi.n	8002d38 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	657a      	str	r2, [r7, #84]	; 0x54
 8002cea:	3358      	adds	r3, #88	; 0x58
 8002cec:	443b      	add	r3, r7
 8002cee:	222e      	movs	r2, #46	; 0x2e
 8002cf0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cf4:	e020      	b.n	8002d38 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cf8:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <_ftoa+0x4ac>)
 8002cfa:	fb83 1302 	smull	r1, r3, r3, r2
 8002cfe:	1099      	asrs	r1, r3, #2
 8002d00:	17d3      	asrs	r3, r2, #31
 8002d02:	1ac9      	subs	r1, r1, r3
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	1ad1      	subs	r1, r2, r3
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	6579      	str	r1, [r7, #84]	; 0x54
 8002d16:	3230      	adds	r2, #48	; 0x30
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	3358      	adds	r3, #88	; 0x58
 8002d1c:	443b      	add	r3, r7
 8002d1e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d24:	4a3d      	ldr	r2, [pc, #244]	; (8002e1c <_ftoa+0x4ac>)
 8002d26:	fb82 1203 	smull	r1, r2, r2, r3
 8002d2a:	1092      	asrs	r2, r2, #2
 8002d2c:	17db      	asrs	r3, r3, #31
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3a:	2b1f      	cmp	r3, #31
 8002d3c:	d9db      	bls.n	8002cf6 <_ftoa+0x386>
 8002d3e:	e000      	b.n	8002d42 <_ftoa+0x3d2>
      break;
 8002d40:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d123      	bne.n	8002d94 <_ftoa+0x424>
 8002d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01e      	beq.n	8002d94 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d014      	beq.n	8002d86 <_ftoa+0x416>
 8002d5c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <_ftoa+0x3fe>
 8002d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <_ftoa+0x416>
      width--;
 8002d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d70:	3b01      	subs	r3, #1
 8002d72:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002d74:	e007      	b.n	8002d86 <_ftoa+0x416>
      buf[len++] = '0';
 8002d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	657a      	str	r2, [r7, #84]	; 0x54
 8002d7c:	3358      	adds	r3, #88	; 0x58
 8002d7e:	443b      	add	r3, r7
 8002d80:	2230      	movs	r2, #48	; 0x30
 8002d82:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002d86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d202      	bcs.n	8002d94 <_ftoa+0x424>
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d90:	2b1f      	cmp	r3, #31
 8002d92:	d9f0      	bls.n	8002d76 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d96:	2b1f      	cmp	r3, #31
 8002d98:	d827      	bhi.n	8002dea <_ftoa+0x47a>
    if (negative) {
 8002d9a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <_ftoa+0x444>
      buf[len++] = '-';
 8002da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	657a      	str	r2, [r7, #84]	; 0x54
 8002da8:	3358      	adds	r3, #88	; 0x58
 8002daa:	443b      	add	r3, r7
 8002dac:	222d      	movs	r2, #45	; 0x2d
 8002dae:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002db2:	e01a      	b.n	8002dea <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	657a      	str	r2, [r7, #84]	; 0x54
 8002dc4:	3358      	adds	r3, #88	; 0x58
 8002dc6:	443b      	add	r3, r7
 8002dc8:	222b      	movs	r2, #43	; 0x2b
 8002dca:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002dce:	e00c      	b.n	8002dea <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <_ftoa+0x47a>
      buf[len++] = ' ';
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	657a      	str	r2, [r7, #84]	; 0x54
 8002de0:	3358      	adds	r3, #88	; 0x58
 8002de2:	443b      	add	r3, r7
 8002de4:	2220      	movs	r2, #32
 8002de6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dec:	9303      	str	r3, [sp, #12]
 8002dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df0:	9302      	str	r3, [sp, #8]
 8002df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff fbb5 	bl	8002572 <_out_rev>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	375c      	adds	r7, #92	; 0x5c
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	3fe00000 	.word	0x3fe00000
 8002e18:	cccccccd 	.word	0xcccccccd
 8002e1c:	66666667 	.word	0x66666667

08002e20 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e24:	b09d      	sub	sp, #116	; 0x74
 8002e26:	af06      	add	r7, sp, #24
 8002e28:	61f8      	str	r0, [r7, #28]
 8002e2a:	61b9      	str	r1, [r7, #24]
 8002e2c:	617a      	str	r2, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002e30:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002e34:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e38:	f7fd fe1a 	bl	8000a70 <__aeabi_dcmpeq>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d014      	beq.n	8002e6c <_etoa+0x4c>
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e46:	4bc4      	ldr	r3, [pc, #784]	; (8003158 <_etoa+0x338>)
 8002e48:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e4c:	f7fd fe38 	bl	8000ac0 <__aeabi_dcmpgt>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <_etoa+0x4c>
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e5a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e62:	f7fd fe0f 	bl	8000a84 <__aeabi_dcmplt>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d014      	beq.n	8002e96 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e70:	9304      	str	r3, [sp, #16]
 8002e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e76:	9303      	str	r3, [sp, #12]
 8002e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e7c:	9302      	str	r3, [sp, #8]
 8002e7e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002e82:	e9cd 2300 	strd	r2, r3, [sp]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	69b9      	ldr	r1, [r7, #24]
 8002e8c:	69f8      	ldr	r0, [r7, #28]
 8002e8e:	f7ff fd6f 	bl	8002970 <_ftoa>
 8002e92:	4603      	mov	r3, r0
 8002e94:	e247      	b.n	8003326 <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 8002e96:	2301      	movs	r3, #1
 8002e98:	461e      	mov	r6, r3
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ea6:	f7fd fded 	bl	8000a84 <__aeabi_dcmplt>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <_etoa+0x94>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	461e      	mov	r6, r3
 8002eb4:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002eb8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <_etoa+0xb8>
    value = -value;
 8002ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ed4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002ee4:	2306      	movs	r3, #6
 8002ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002eea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002eee:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002ef2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	0d0a      	lsrs	r2, r1, #20
 8002f00:	2300      	movs	r3, #0
 8002f02:	4613      	mov	r3, r2
 8002f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f12:	4690      	mov	r8, r2
 8002f14:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002f18:	4644      	mov	r4, r8
 8002f1a:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002f1e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002f22:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002f26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002f28:	f7fd fad0 	bl	80004cc <__aeabi_i2d>
 8002f2c:	a37e      	add	r3, pc, #504	; (adr r3, 8003128 <_etoa+0x308>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd fb35 	bl	80005a0 <__aeabi_dmul>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	a37c      	add	r3, pc, #496	; (adr r3, 8003130 <_etoa+0x310>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd f976 	bl	8000234 <__adddf3>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <_etoa+0x33c>)
 8002f5a:	f7fd f969 	bl	8000230 <__aeabi_dsub>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	a374      	add	r3, pc, #464	; (adr r3, 8003138 <_etoa+0x318>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd fb18 	bl	80005a0 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4620      	mov	r0, r4
 8002f76:	4629      	mov	r1, r5
 8002f78:	f7fd f95c 	bl	8000234 <__adddf3>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fd fda6 	bl	8000ad4 <__aeabi_d2iz>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002f8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002f8e:	f7fd fa9d 	bl	80004cc <__aeabi_i2d>
 8002f92:	a36b      	add	r3, pc, #428	; (adr r3, 8003140 <_etoa+0x320>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fb02 	bl	80005a0 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	4b6d      	ldr	r3, [pc, #436]	; (8003160 <_etoa+0x340>)
 8002faa:	f7fd f943 	bl	8000234 <__adddf3>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f7fd fd8d 	bl	8000ad4 <__aeabi_d2iz>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002fbe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002fc0:	f7fd fa84 	bl	80004cc <__aeabi_i2d>
 8002fc4:	a360      	add	r3, pc, #384	; (adr r3, 8003148 <_etoa+0x328>)
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f7fd fae9 	bl	80005a0 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002fd8:	f7fd fa78 	bl	80004cc <__aeabi_i2d>
 8002fdc:	a35c      	add	r3, pc, #368	; (adr r3, 8003150 <_etoa+0x330>)
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f7fd fadd 	bl	80005a0 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4620      	mov	r0, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	f7fd f91f 	bl	8000230 <__aeabi_dsub>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002ffa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ffe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003002:	f7fd facd 	bl	80005a0 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800300e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003010:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003014:	17da      	asrs	r2, r3, #31
 8003016:	469a      	mov	sl, r3
 8003018:	4693      	mov	fp, r2
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003026:	2200      	movs	r2, #0
 8003028:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800302c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003030:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	f7fd f8fc 	bl	8000234 <__adddf3>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4690      	mov	r8, r2
 8003042:	4699      	mov	r9, r3
 8003044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003048:	f04f 0000 	mov.w	r0, #0
 800304c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003050:	f7fd f8ee 	bl	8000230 <__aeabi_dsub>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4692      	mov	sl, r2
 800305a:	469b      	mov	fp, r3
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <_etoa+0x344>)
 8003062:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003066:	f7fd fbc5 	bl	80007f4 <__aeabi_ddiv>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <_etoa+0x348>)
 8003078:	f7fd f8dc 	bl	8000234 <__adddf3>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003084:	f7fd fbb6 	bl	80007f4 <__aeabi_ddiv>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	4b35      	ldr	r3, [pc, #212]	; (800316c <_etoa+0x34c>)
 8003096:	f7fd f8cd 	bl	8000234 <__adddf3>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030a2:	f7fd fba7 	bl	80007f4 <__aeabi_ddiv>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4650      	mov	r0, sl
 80030ac:	4659      	mov	r1, fp
 80030ae:	f7fd f8c1 	bl	8000234 <__adddf3>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4640      	mov	r0, r8
 80030b8:	4649      	mov	r1, r9
 80030ba:	f7fd fb9b 	bl	80007f4 <__aeabi_ddiv>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <_etoa+0x350>)
 80030cc:	f7fd f8b2 	bl	8000234 <__adddf3>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4620      	mov	r0, r4
 80030d6:	4629      	mov	r1, r5
 80030d8:	f7fd fa62 	bl	80005a0 <__aeabi_dmul>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80030e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030e8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030ec:	f7fd fcca 	bl	8000a84 <__aeabi_dcmplt>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <_etoa+0x2f2>
    expval--;
 80030f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f8:	3b01      	subs	r3, #1
 80030fa:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80030fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <_etoa+0x348>)
 8003106:	f7fd fb75 	bl	80007f4 <__aeabi_ddiv>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003114:	2b63      	cmp	r3, #99	; 0x63
 8003116:	dc2d      	bgt.n	8003174 <_etoa+0x354>
 8003118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800311e:	db29      	blt.n	8003174 <_etoa+0x354>
 8003120:	2304      	movs	r3, #4
 8003122:	e028      	b.n	8003176 <_etoa+0x356>
 8003124:	f3af 8000 	nop.w
 8003128:	509f79fb 	.word	0x509f79fb
 800312c:	3fd34413 	.word	0x3fd34413
 8003130:	8b60c8b3 	.word	0x8b60c8b3
 8003134:	3fc68a28 	.word	0x3fc68a28
 8003138:	636f4361 	.word	0x636f4361
 800313c:	3fd287a7 	.word	0x3fd287a7
 8003140:	0979a371 	.word	0x0979a371
 8003144:	400a934f 	.word	0x400a934f
 8003148:	bbb55516 	.word	0xbbb55516
 800314c:	40026bb1 	.word	0x40026bb1
 8003150:	fefa39ef 	.word	0xfefa39ef
 8003154:	3fe62e42 	.word	0x3fe62e42
 8003158:	7fefffff 	.word	0x7fefffff
 800315c:	3ff80000 	.word	0x3ff80000
 8003160:	3fe00000 	.word	0x3fe00000
 8003164:	402c0000 	.word	0x402c0000
 8003168:	40240000 	.word	0x40240000
 800316c:	40180000 	.word	0x40180000
 8003170:	3ff00000 	.word	0x3ff00000
 8003174:	2305      	movs	r3, #5
 8003176:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800317c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003180:	2b00      	cmp	r3, #0
 8003182:	d03d      	beq.n	8003200 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003184:	a36a      	add	r3, pc, #424	; (adr r3, 8003330 <_etoa+0x510>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800318e:	f7fd fc8d 	bl	8000aac <__aeabi_dcmpge>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d024      	beq.n	80031e2 <_etoa+0x3c2>
 8003198:	a367      	add	r3, pc, #412	; (adr r3, 8003338 <_etoa+0x518>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031a2:	f7fd fc6f 	bl	8000a84 <__aeabi_dcmplt>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01a      	beq.n	80031e2 <_etoa+0x3c2>
      if ((int)prec > expval) {
 80031ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031b2:	429a      	cmp	r2, r3
 80031b4:	da07      	bge.n	80031c6 <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 80031b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80031ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c4:	e002      	b.n	80031cc <_etoa+0x3ac>
      }
      else {
        prec = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80031cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	657b      	str	r3, [r7, #84]	; 0x54
 80031e0:	e00e      	b.n	8003200 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80031e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <_etoa+0x3e0>
 80031ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <_etoa+0x3e0>
        --prec;
 80031f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003204:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8003206:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800320a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800320c:	429a      	cmp	r2, r3
 800320e:	d904      	bls.n	800321a <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003218:	e001      	b.n	800321e <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800321e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <_etoa+0x414>
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <_etoa+0x42e>
    value /= conv.F;
 800323a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800323e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003242:	f7fd fad7 	bl	80007f4 <__aeabi_ddiv>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003252:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <_etoa+0x44c>
 800325a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e003      	b.n	8003274 <_etoa+0x454>
 800326c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003270:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800328c:	e9cd 3400 	strd	r3, r4, [sp]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	69b9      	ldr	r1, [r7, #24]
 8003296:	69f8      	ldr	r0, [r7, #28]
 8003298:	f7ff fb6a 	bl	8002970 <_ftoa>
 800329c:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800329e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d03f      	beq.n	8003324 <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80032a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <_etoa+0x494>
 80032b0:	2045      	movs	r0, #69	; 0x45
 80032b2:	e000      	b.n	80032b6 <_etoa+0x496>
 80032b4:	2065      	movs	r0, #101	; 0x65
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	1c53      	adds	r3, r2, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	69fc      	ldr	r4, [r7, #28]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80032c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	425b      	neglt	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d0:	0fdb      	lsrs	r3, r3, #31
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032d6:	3a01      	subs	r2, #1
 80032d8:	2105      	movs	r1, #5
 80032da:	9105      	str	r1, [sp, #20]
 80032dc:	9204      	str	r2, [sp, #16]
 80032de:	2200      	movs	r2, #0
 80032e0:	9203      	str	r2, [sp, #12]
 80032e2:	220a      	movs	r2, #10
 80032e4:	9202      	str	r2, [sp, #8]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	9000      	str	r0, [sp, #0]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	69f8      	ldr	r0, [r7, #28]
 80032f2:	f7ff fa6a 	bl	80027ca <_ntoa_long>
 80032f6:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80032f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00f      	beq.n	8003324 <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003304:	e007      	b.n	8003316 <_etoa+0x4f6>
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	1c53      	adds	r3, r2, #1
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	69fc      	ldr	r4, [r7, #28]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	69b9      	ldr	r1, [r7, #24]
 8003312:	2020      	movs	r0, #32
 8003314:	47a0      	blx	r4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003320:	429a      	cmp	r2, r3
 8003322:	d8f0      	bhi.n	8003306 <_etoa+0x4e6>
    }
  }
  return idx;
 8003324:	697b      	ldr	r3, [r7, #20]
}
 8003326:	4618      	mov	r0, r3
 8003328:	375c      	adds	r7, #92	; 0x5c
 800332a:	46bd      	mov	sp, r7
 800332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003330:	eb1c432d 	.word	0xeb1c432d
 8003334:	3f1a36e2 	.word	0x3f1a36e2
 8003338:	00000000 	.word	0x00000000
 800333c:	412e8480 	.word	0x412e8480

08003340 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003344:	b0a3      	sub	sp, #140	; 0x8c
 8003346:	af0a      	add	r7, sp, #40	; 0x28
 8003348:	6178      	str	r0, [r7, #20]
 800334a:	6139      	str	r1, [r7, #16]
 800334c:	60fa      	str	r2, [r7, #12]
 800334e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 84ba 	bne.w	8003cd0 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 800335c:	4ba3      	ldr	r3, [pc, #652]	; (80035ec <_vsnprintf+0x2ac>)
 800335e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003360:	f000 bcb6 	b.w	8003cd0 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b25      	cmp	r3, #37	; 0x25
 800336a:	d00d      	beq.n	8003388 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	7818      	ldrb	r0, [r3, #0]
 8003370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003372:	1c53      	adds	r3, r2, #1
 8003374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003376:	697c      	ldr	r4, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6939      	ldr	r1, [r7, #16]
 800337c:	47a0      	blx	r4
      format++;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3301      	adds	r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
      continue;
 8003384:	f000 bca4 	b.w	8003cd0 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3301      	adds	r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	3b20      	subs	r3, #32
 8003398:	2b10      	cmp	r3, #16
 800339a:	d857      	bhi.n	800344c <_vsnprintf+0x10c>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <_vsnprintf+0x64>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	08003425 	.word	0x08003425
 80033a8:	0800344d 	.word	0x0800344d
 80033ac:	0800344d 	.word	0x0800344d
 80033b0:	08003439 	.word	0x08003439
 80033b4:	0800344d 	.word	0x0800344d
 80033b8:	0800344d 	.word	0x0800344d
 80033bc:	0800344d 	.word	0x0800344d
 80033c0:	0800344d 	.word	0x0800344d
 80033c4:	0800344d 	.word	0x0800344d
 80033c8:	0800344d 	.word	0x0800344d
 80033cc:	0800344d 	.word	0x0800344d
 80033d0:	08003411 	.word	0x08003411
 80033d4:	0800344d 	.word	0x0800344d
 80033d8:	080033fd 	.word	0x080033fd
 80033dc:	0800344d 	.word	0x0800344d
 80033e0:	0800344d 	.word	0x0800344d
 80033e4:	080033e9 	.word	0x080033e9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80033e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	2301      	movs	r3, #1
 80033f8:	653b      	str	r3, [r7, #80]	; 0x50
 80033fa:	e02a      	b.n	8003452 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80033fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3301      	adds	r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	2301      	movs	r3, #1
 800340c:	653b      	str	r3, [r7, #80]	; 0x50
 800340e:	e020      	b.n	8003452 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	2301      	movs	r3, #1
 8003420:	653b      	str	r3, [r7, #80]	; 0x50
 8003422:	e016      	b.n	8003452 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003426:	f043 0308 	orr.w	r3, r3, #8
 800342a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	2301      	movs	r3, #1
 8003434:	653b      	str	r3, [r7, #80]	; 0x50
 8003436:	e00c      	b.n	8003452 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343a:	f043 0310 	orr.w	r3, r3, #16
 800343e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3301      	adds	r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	2301      	movs	r3, #1
 8003448:	653b      	str	r3, [r7, #80]	; 0x50
 800344a:	e002      	b.n	8003452 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800344c:	2300      	movs	r3, #0
 800344e:	653b      	str	r3, [r7, #80]	; 0x50
 8003450:	bf00      	nop
      }
    } while (n);
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	2b00      	cmp	r3, #0
 8003456:	d19c      	bne.n	8003392 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff f84c 	bl	80024fe <_is_digit>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f85a 	bl	800252a <_atoi>
 8003476:	65b8      	str	r0, [r7, #88]	; 0x58
 8003478:	e01a      	b.n	80034b0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b2a      	cmp	r3, #42	; 0x2a
 8003480:	d116      	bne.n	80034b0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	da07      	bge.n	80034a6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	425b      	negs	r3, r3
 80034a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80034a4:	e001      	b.n	80034aa <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3301      	adds	r3, #1
 80034ae:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b2e      	cmp	r3, #46	; 0x2e
 80034ba:	d127      	bne.n	800350c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80034bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c2:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f815 	bl	80024fe <_is_digit>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f823 	bl	800252a <_atoi>
 80034e4:	6578      	str	r0, [r7, #84]	; 0x54
 80034e6:	e011      	b.n	800350c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b2a      	cmp	r3, #42	; 0x2a
 80034ee:	d10d      	bne.n	800350c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80034f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f4:	1d1a      	adds	r2, r3, #4
 80034f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003504:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	3b68      	subs	r3, #104	; 0x68
 8003512:	2b12      	cmp	r3, #18
 8003514:	d866      	bhi.n	80035e4 <_vsnprintf+0x2a4>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <_vsnprintf+0x1dc>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	0800358f 	.word	0x0800358f
 8003520:	080035e5 	.word	0x080035e5
 8003524:	080035c5 	.word	0x080035c5
 8003528:	080035e5 	.word	0x080035e5
 800352c:	08003569 	.word	0x08003569
 8003530:	080035e5 	.word	0x080035e5
 8003534:	080035e5 	.word	0x080035e5
 8003538:	080035e5 	.word	0x080035e5
 800353c:	080035e5 	.word	0x080035e5
 8003540:	080035e5 	.word	0x080035e5
 8003544:	080035e5 	.word	0x080035e5
 8003548:	080035e5 	.word	0x080035e5
 800354c:	080035b5 	.word	0x080035b5
 8003550:	080035e5 	.word	0x080035e5
 8003554:	080035e5 	.word	0x080035e5
 8003558:	080035e5 	.word	0x080035e5
 800355c:	080035e5 	.word	0x080035e5
 8003560:	080035e5 	.word	0x080035e5
 8003564:	080035d5 	.word	0x080035d5
      case 'l' :
        flags |= FLAGS_LONG;
 8003568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3301      	adds	r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b6c      	cmp	r3, #108	; 0x6c
 800357c:	d134      	bne.n	80035e8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800357e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3301      	adds	r3, #1
 800358a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800358c:	e02c      	b.n	80035e8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800358e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003594:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b68      	cmp	r3, #104	; 0x68
 80035a2:	d125      	bne.n	80035f0 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80035a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035aa:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3301      	adds	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
        }
        break;
 80035b2:	e01d      	b.n	80035f0 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80035b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	3301      	adds	r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
        break;
 80035c2:	e016      	b.n	80035f2 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80035c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
        break;
 80035d2:	e00e      	b.n	80035f2 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80035d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3301      	adds	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
        break;
 80035e2:	e006      	b.n	80035f2 <_vsnprintf+0x2b2>
      default :
        break;
 80035e4:	bf00      	nop
 80035e6:	e004      	b.n	80035f2 <_vsnprintf+0x2b2>
        break;
 80035e8:	bf00      	nop
 80035ea:	e002      	b.n	80035f2 <_vsnprintf+0x2b2>
 80035ec:	080024ad 	.word	0x080024ad
        break;
 80035f0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	3b25      	subs	r3, #37	; 0x25
 80035f8:	2b53      	cmp	r3, #83	; 0x53
 80035fa:	f200 835c 	bhi.w	8003cb6 <_vsnprintf+0x976>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <_vsnprintf+0x2c4>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003c9f 	.word	0x08003c9f
 8003608:	08003cb7 	.word	0x08003cb7
 800360c:	08003cb7 	.word	0x08003cb7
 8003610:	08003cb7 	.word	0x08003cb7
 8003614:	08003cb7 	.word	0x08003cb7
 8003618:	08003cb7 	.word	0x08003cb7
 800361c:	08003cb7 	.word	0x08003cb7
 8003620:	08003cb7 	.word	0x08003cb7
 8003624:	08003cb7 	.word	0x08003cb7
 8003628:	08003cb7 	.word	0x08003cb7
 800362c:	08003cb7 	.word	0x08003cb7
 8003630:	08003cb7 	.word	0x08003cb7
 8003634:	08003cb7 	.word	0x08003cb7
 8003638:	08003cb7 	.word	0x08003cb7
 800363c:	08003cb7 	.word	0x08003cb7
 8003640:	08003cb7 	.word	0x08003cb7
 8003644:	08003cb7 	.word	0x08003cb7
 8003648:	08003cb7 	.word	0x08003cb7
 800364c:	08003cb7 	.word	0x08003cb7
 8003650:	08003cb7 	.word	0x08003cb7
 8003654:	08003cb7 	.word	0x08003cb7
 8003658:	08003cb7 	.word	0x08003cb7
 800365c:	08003cb7 	.word	0x08003cb7
 8003660:	08003cb7 	.word	0x08003cb7
 8003664:	08003cb7 	.word	0x08003cb7
 8003668:	08003cb7 	.word	0x08003cb7
 800366c:	08003cb7 	.word	0x08003cb7
 8003670:	08003cb7 	.word	0x08003cb7
 8003674:	08003cb7 	.word	0x08003cb7
 8003678:	08003cb7 	.word	0x08003cb7
 800367c:	08003cb7 	.word	0x08003cb7
 8003680:	08003cb7 	.word	0x08003cb7
 8003684:	08003a57 	.word	0x08003a57
 8003688:	08003a0b 	.word	0x08003a0b
 800368c:	08003a57 	.word	0x08003a57
 8003690:	08003cb7 	.word	0x08003cb7
 8003694:	08003cb7 	.word	0x08003cb7
 8003698:	08003cb7 	.word	0x08003cb7
 800369c:	08003cb7 	.word	0x08003cb7
 80036a0:	08003cb7 	.word	0x08003cb7
 80036a4:	08003cb7 	.word	0x08003cb7
 80036a8:	08003cb7 	.word	0x08003cb7
 80036ac:	08003cb7 	.word	0x08003cb7
 80036b0:	08003cb7 	.word	0x08003cb7
 80036b4:	08003cb7 	.word	0x08003cb7
 80036b8:	08003cb7 	.word	0x08003cb7
 80036bc:	08003cb7 	.word	0x08003cb7
 80036c0:	08003cb7 	.word	0x08003cb7
 80036c4:	08003cb7 	.word	0x08003cb7
 80036c8:	08003cb7 	.word	0x08003cb7
 80036cc:	08003cb7 	.word	0x08003cb7
 80036d0:	08003755 	.word	0x08003755
 80036d4:	08003cb7 	.word	0x08003cb7
 80036d8:	08003cb7 	.word	0x08003cb7
 80036dc:	08003cb7 	.word	0x08003cb7
 80036e0:	08003cb7 	.word	0x08003cb7
 80036e4:	08003cb7 	.word	0x08003cb7
 80036e8:	08003cb7 	.word	0x08003cb7
 80036ec:	08003cb7 	.word	0x08003cb7
 80036f0:	08003cb7 	.word	0x08003cb7
 80036f4:	08003cb7 	.word	0x08003cb7
 80036f8:	08003755 	.word	0x08003755
 80036fc:	08003ac3 	.word	0x08003ac3
 8003700:	08003755 	.word	0x08003755
 8003704:	08003a57 	.word	0x08003a57
 8003708:	08003a0b 	.word	0x08003a0b
 800370c:	08003a57 	.word	0x08003a57
 8003710:	08003cb7 	.word	0x08003cb7
 8003714:	08003755 	.word	0x08003755
 8003718:	08003cb7 	.word	0x08003cb7
 800371c:	08003cb7 	.word	0x08003cb7
 8003720:	08003cb7 	.word	0x08003cb7
 8003724:	08003cb7 	.word	0x08003cb7
 8003728:	08003cb7 	.word	0x08003cb7
 800372c:	08003755 	.word	0x08003755
 8003730:	08003c03 	.word	0x08003c03
 8003734:	08003cb7 	.word	0x08003cb7
 8003738:	08003cb7 	.word	0x08003cb7
 800373c:	08003b3b 	.word	0x08003b3b
 8003740:	08003cb7 	.word	0x08003cb7
 8003744:	08003755 	.word	0x08003755
 8003748:	08003cb7 	.word	0x08003cb7
 800374c:	08003cb7 	.word	0x08003cb7
 8003750:	08003755 	.word	0x08003755
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b78      	cmp	r3, #120	; 0x78
 800375a:	d003      	beq.n	8003764 <_vsnprintf+0x424>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b58      	cmp	r3, #88	; 0x58
 8003762:	d102      	bne.n	800376a <_vsnprintf+0x42a>
          base = 16U;
 8003764:	2310      	movs	r3, #16
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48
 8003768:	e013      	b.n	8003792 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b6f      	cmp	r3, #111	; 0x6f
 8003770:	d102      	bne.n	8003778 <_vsnprintf+0x438>
          base =  8U;
 8003772:	2308      	movs	r3, #8
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
 8003776:	e00c      	b.n	8003792 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b62      	cmp	r3, #98	; 0x62
 800377e:	d102      	bne.n	8003786 <_vsnprintf+0x446>
          base =  2U;
 8003780:	2302      	movs	r3, #2
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
 8003784:	e005      	b.n	8003792 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003786:	230a      	movs	r3, #10
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	f023 0310 	bic.w	r3, r3, #16
 8003790:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b58      	cmp	r3, #88	; 0x58
 8003798:	d103      	bne.n	80037a2 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800379a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379c:	f043 0320 	orr.w	r3, r3, #32
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b69      	cmp	r3, #105	; 0x69
 80037a8:	d007      	beq.n	80037ba <_vsnprintf+0x47a>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d003      	beq.n	80037ba <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	f023 030c 	bic.w	r3, r3, #12
 80037b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80037ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 80037c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b69      	cmp	r3, #105	; 0x69
 80037d2:	d004      	beq.n	80037de <_vsnprintf+0x49e>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b64      	cmp	r3, #100	; 0x64
 80037da:	f040 8098 	bne.w	800390e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80037de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d031      	beq.n	800384c <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80037e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ec:	3307      	adds	r3, #7
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	f103 0208 	add.w	r2, r3, #8
 80037f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da06      	bge.n	8003818 <_vsnprintf+0x4d8>
 800380a:	2100      	movs	r1, #0
 800380c:	f1d2 0800 	rsbs	r8, r2, #0
 8003810:	eb61 0903 	sbc.w	r9, r1, r3
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	69f9      	ldr	r1, [r7, #28]
 800381a:	0fc9      	lsrs	r1, r1, #31
 800381c:	b2c9      	uxtb	r1, r1
 800381e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003820:	2400      	movs	r4, #0
 8003822:	4682      	mov	sl, r0
 8003824:	46a3      	mov	fp, r4
 8003826:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003828:	9008      	str	r0, [sp, #32]
 800382a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800382c:	9007      	str	r0, [sp, #28]
 800382e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003830:	9006      	str	r0, [sp, #24]
 8003832:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003836:	9102      	str	r1, [sp, #8]
 8003838:	e9cd 2300 	strd	r2, r3, [sp]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003840:	6939      	ldr	r1, [r7, #16]
 8003842:	6978      	ldr	r0, [r7, #20]
 8003844:	f7ff f827 	bl	8002896 <_ntoa_long_long>
 8003848:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800384a:	e0da      	b.n	8003a02 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800384c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d020      	beq.n	8003898 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8003856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	bfb8      	it	lt
 800386a:	425b      	neglt	r3, r3
 800386c:	4619      	mov	r1, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	0fdb      	lsrs	r3, r3, #31
 8003872:	b2db      	uxtb	r3, r3
 8003874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003876:	9205      	str	r2, [sp, #20]
 8003878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800387a:	9204      	str	r2, [sp, #16]
 800387c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800387e:	9203      	str	r2, [sp, #12]
 8003880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003882:	9202      	str	r2, [sp, #8]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	9100      	str	r1, [sp, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800388c:	6939      	ldr	r1, [r7, #16]
 800388e:	6978      	ldr	r0, [r7, #20]
 8003890:	f7fe ff9b 	bl	80027ca <_ntoa_long>
 8003894:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003896:	e0b4      	b.n	8003a02 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <_vsnprintf+0x572>
 80038a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e012      	b.n	80038d8 <_vsnprintf+0x598>
 80038b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <_vsnprintf+0x58c>
 80038bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b21b      	sxth	r3, r3
 80038ca:	e005      	b.n	80038d8 <_vsnprintf+0x598>
 80038cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038d0:	1d1a      	adds	r2, r3, #4
 80038d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bfb8      	it	lt
 80038e0:	425b      	neglt	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	0fdb      	lsrs	r3, r3, #31
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038ec:	9205      	str	r2, [sp, #20]
 80038ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038f0:	9204      	str	r2, [sp, #16]
 80038f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038f4:	9203      	str	r2, [sp, #12]
 80038f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f8:	9202      	str	r2, [sp, #8]
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	9100      	str	r1, [sp, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003902:	6939      	ldr	r1, [r7, #16]
 8003904:	6978      	ldr	r0, [r7, #20]
 8003906:	f7fe ff60 	bl	80027ca <_ntoa_long>
 800390a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800390c:	e079      	b.n	8003a02 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800390e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800391c:	3307      	adds	r3, #7
 800391e:	f023 0307 	bic.w	r3, r3, #7
 8003922:	f103 0208 	add.w	r2, r3, #8
 8003926:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003930:	2000      	movs	r0, #0
 8003932:	460d      	mov	r5, r1
 8003934:	4606      	mov	r6, r0
 8003936:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003938:	9108      	str	r1, [sp, #32]
 800393a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800393c:	9107      	str	r1, [sp, #28]
 800393e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003940:	9106      	str	r1, [sp, #24]
 8003942:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003946:	2100      	movs	r1, #0
 8003948:	9102      	str	r1, [sp, #8]
 800394a:	e9cd 2300 	strd	r2, r3, [sp]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003952:	6939      	ldr	r1, [r7, #16]
 8003954:	6978      	ldr	r0, [r7, #20]
 8003956:	f7fe ff9e 	bl	8002896 <_ntoa_long_long>
 800395a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800395c:	e051      	b.n	8003a02 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800395e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d018      	beq.n	800399a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003968:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003976:	9205      	str	r2, [sp, #20]
 8003978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397a:	9204      	str	r2, [sp, #16]
 800397c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800397e:	9203      	str	r2, [sp, #12]
 8003980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003982:	9202      	str	r2, [sp, #8]
 8003984:	2200      	movs	r2, #0
 8003986:	9201      	str	r2, [sp, #4]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	6978      	ldr	r0, [r7, #20]
 8003992:	f7fe ff1a 	bl	80027ca <_ntoa_long>
 8003996:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003998:	e033      	b.n	8003a02 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <_vsnprintf+0x674>
 80039a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e012      	b.n	80039da <_vsnprintf+0x69a>
 80039b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <_vsnprintf+0x68e>
 80039be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	e005      	b.n	80039da <_vsnprintf+0x69a>
 80039ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80039dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039de:	9305      	str	r3, [sp, #20]
 80039e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e2:	9304      	str	r3, [sp, #16]
 80039e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e6:	9303      	str	r3, [sp, #12]
 80039e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ea:	9302      	str	r3, [sp, #8]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039f8:	6939      	ldr	r1, [r7, #16]
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7fe fee5 	bl	80027ca <_ntoa_long>
 8003a00:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
        break;
 8003a08:	e162      	b.n	8003cd0 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b46      	cmp	r3, #70	; 0x46
 8003a10:	d103      	bne.n	8003a1a <_vsnprintf+0x6da>
 8003a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a1e:	3307      	adds	r3, #7
 8003a20:	f023 0307 	bic.w	r3, r3, #7
 8003a24:	f103 0208 	add.w	r2, r3, #8
 8003a28:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003a32:	9104      	str	r1, [sp, #16]
 8003a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a36:	9103      	str	r1, [sp, #12]
 8003a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a3a:	9102      	str	r1, [sp, #8]
 8003a3c:	e9cd 2300 	strd	r2, r3, [sp]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	6978      	ldr	r0, [r7, #20]
 8003a48:	f7fe ff92 	bl	8002970 <_ftoa>
 8003a4c:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
        break;
 8003a54:	e13c      	b.n	8003cd0 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b67      	cmp	r3, #103	; 0x67
 8003a5c:	d003      	beq.n	8003a66 <_vsnprintf+0x726>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b47      	cmp	r3, #71	; 0x47
 8003a64:	d103      	bne.n	8003a6e <_vsnprintf+0x72e>
 8003a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b45      	cmp	r3, #69	; 0x45
 8003a74:	d003      	beq.n	8003a7e <_vsnprintf+0x73e>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b47      	cmp	r3, #71	; 0x47
 8003a7c:	d103      	bne.n	8003a86 <_vsnprintf+0x746>
 8003a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a80:	f043 0320 	orr.w	r3, r3, #32
 8003a84:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a8a:	3307      	adds	r3, #7
 8003a8c:	f023 0307 	bic.w	r3, r3, #7
 8003a90:	f103 0208 	add.w	r2, r3, #8
 8003a94:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003a9e:	9104      	str	r1, [sp, #16]
 8003aa0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003aa2:	9103      	str	r1, [sp, #12]
 8003aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aa6:	9102      	str	r1, [sp, #8]
 8003aa8:	e9cd 2300 	strd	r2, r3, [sp]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab0:	6939      	ldr	r1, [r7, #16]
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff f9b4 	bl	8002e20 <_etoa>
 8003ab8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
        break;
 8003ac0:	e106      	b.n	8003cd0 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10e      	bne.n	8003aee <_vsnprintf+0x7ae>
          while (l++ < width) {
 8003ad0:	e007      	b.n	8003ae2 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8003ad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ad4:	1c53      	adds	r3, r2, #1
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad8:	697c      	ldr	r4, [r7, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6939      	ldr	r1, [r7, #16]
 8003ade:	2020      	movs	r0, #32
 8003ae0:	47a0      	blx	r4
          while (l++ < width) {
 8003ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d8f1      	bhi.n	8003ad2 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b2d8      	uxtb	r0, r3
 8003afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003afe:	1c53      	adds	r3, r2, #1
 8003b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b02:	697c      	ldr	r4, [r7, #20]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6939      	ldr	r1, [r7, #16]
 8003b08:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <_vsnprintf+0x7f2>
          while (l++ < width) {
 8003b14:	e007      	b.n	8003b26 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8003b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b18:	1c53      	adds	r3, r2, #1
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1c:	697c      	ldr	r4, [r7, #20]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	2020      	movs	r0, #32
 8003b24:	47a0      	blx	r4
          while (l++ < width) {
 8003b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	647a      	str	r2, [r7, #68]	; 0x44
 8003b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d8f1      	bhi.n	8003b16 <_vsnprintf+0x7d6>
          }
        }
        format++;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
        break;
 8003b38:	e0ca      	b.n	8003cd0 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <_vsnprintf+0x812>
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b50:	e001      	b.n	8003b56 <_vsnprintf+0x816>
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b56:	4619      	mov	r1, r3
 8003b58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b5a:	f7fe fcb4 	bl	80024c6 <_strnlen_s>
 8003b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 8003b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	bf28      	it	cs
 8003b72:	4613      	movcs	r3, r2
 8003b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d11a      	bne.n	8003bb6 <_vsnprintf+0x876>
          while (l++ < width) {
 8003b80:	e007      	b.n	8003b92 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8003b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b84:	1c53      	adds	r3, r2, #1
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b88:	697c      	ldr	r4, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6939      	ldr	r1, [r7, #16]
 8003b8e:	2020      	movs	r0, #32
 8003b90:	47a0      	blx	r4
          while (l++ < width) {
 8003b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d8f1      	bhi.n	8003b82 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003b9e:	e00a      	b.n	8003bb6 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ba6:	7818      	ldrb	r0, [r3, #0]
 8003ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003baa:	1c53      	adds	r3, r2, #1
 8003bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bae:	697c      	ldr	r4, [r7, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6939      	ldr	r1, [r7, #16]
 8003bb4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <_vsnprintf+0x892>
 8003bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0eb      	beq.n	8003ba0 <_vsnprintf+0x860>
 8003bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bca:	1e5a      	subs	r2, r3, #1
 8003bcc:	657a      	str	r2, [r7, #84]	; 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e6      	bne.n	8003ba0 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <_vsnprintf+0x8ba>
          while (l++ < width) {
 8003bdc:	e007      	b.n	8003bee <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8003bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003be0:	1c53      	adds	r3, r2, #1
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be4:	697c      	ldr	r4, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6939      	ldr	r1, [r7, #16]
 8003bea:	2020      	movs	r0, #32
 8003bec:	47a0      	blx	r4
          while (l++ < width) {
 8003bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d8f1      	bhi.n	8003bde <_vsnprintf+0x89e>
          }
        }
        format++;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
        break;
 8003c00:	e066      	b.n	8003cd0 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003c02:	2308      	movs	r3, #8
 8003c04:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c08:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8003c14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d023      	beq.n	8003c64 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c20:	1d1a      	adds	r2, r3, #4
 8003c22:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	603a      	str	r2, [r7, #0]
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c32:	9308      	str	r3, [sp, #32]
 8003c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c36:	9307      	str	r3, [sp, #28]
 8003c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3a:	9306      	str	r3, [sp, #24]
 8003c3c:	f04f 0210 	mov.w	r2, #16
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9302      	str	r3, [sp, #8]
 8003c4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c50:	e9cd 3400 	strd	r3, r4, [sp]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	f7fe fe1b 	bl	8002896 <_ntoa_long_long>
 8003c60:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003c62:	e018      	b.n	8003c96 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c68:	1d1a      	adds	r2, r3, #4
 8003c6a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c74:	9305      	str	r3, [sp, #20]
 8003c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c78:	9304      	str	r3, [sp, #16]
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7c:	9303      	str	r3, [sp, #12]
 8003c7e:	2310      	movs	r3, #16
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	2300      	movs	r3, #0
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	9200      	str	r2, [sp, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c8c:	6939      	ldr	r1, [r7, #16]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7fe fd9b 	bl	80027ca <_ntoa_long>
 8003c94:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
        break;
 8003c9c:	e018      	b.n	8003cd0 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca0:	1c53      	adds	r3, r2, #1
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca4:	697c      	ldr	r4, [r7, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6939      	ldr	r1, [r7, #16]
 8003caa:	2025      	movs	r0, #37	; 0x25
 8003cac:	47a0      	blx	r4
        format++;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
        break;
 8003cb4:	e00c      	b.n	8003cd0 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	7818      	ldrb	r0, [r3, #0]
 8003cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cbc:	1c53      	adds	r3, r2, #1
 8003cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc0:	697c      	ldr	r4, [r7, #20]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6939      	ldr	r1, [r7, #16]
 8003cc6:	47a0      	blx	r4
        format++;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
        break;
 8003cce:	bf00      	nop
  while (*format)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f47f ab45 	bne.w	8003364 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <_vsnprintf+0x9a8>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	e000      	b.n	8003cea <_vsnprintf+0x9aa>
 8003ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cea:	697c      	ldr	r4, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6939      	ldr	r1, [r7, #16]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3764      	adds	r7, #100	; 0x64
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d00 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003d00:	b40e      	push	{r1, r2, r3}
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b087      	sub	sp, #28
 8003d06:	af02      	add	r7, sp, #8
 8003d08:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003d0a:	f107 0320 	add.w	r3, r7, #32
 8003d0e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4805      	ldr	r0, [pc, #20]	; (8003d34 <sprintf_+0x34>)
 8003d1e:	f7ff fb0f 	bl	8003340 <_vsnprintf>
 8003d22:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003d24:	68fb      	ldr	r3, [r7, #12]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d30:	b003      	add	sp, #12
 8003d32:	4770      	bx	lr
 8003d34:	08002481 	.word	0x08002481

08003d38 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d50:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d009      	beq.n	8003d72 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	79f9      	ldrb	r1, [r7, #7]
 8003d68:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <Uart_isr+0x52>
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d012      	beq.n	8003dce <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <Uart_isr+0xbc>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ffba 	bl	8003d38 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <Uart_isr+0xc0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	605a      	str	r2, [r3, #4]
        return;
 8003dcc:	e031      	b.n	8003e32 <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d02c      	beq.n	8003e32 <Uart_isr+0xb6>
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d027      	beq.n	8003e32 <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8003de2:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <Uart_isr+0xc4>)
 8003de4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <Uart_isr+0xc4>)
 8003dea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d108      	bne.n	8003e04 <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e00:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8003e02:	e015      	b.n	8003e30 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <Uart_isr+0xc4>)
 8003e06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003e0a:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <Uart_isr+0xc4>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <Uart_isr+0xc4>)
 8003e12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003e16:	3301      	adds	r3, #1
 8003e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <Uart_isr+0xc4>)
 8003e1e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	7bba      	ldrb	r2, [r7, #14]
 8003e2e:	605a      	str	r2, [r3, #4]
    	return;
 8003e30:	bf00      	nop
    }
}
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000654 	.word	0x20000654
 8003e3c:	20000178 	.word	0x20000178
 8003e40:	2000024c 	.word	0x2000024c

08003e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_MspInit+0x5c>)
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <HAL_MspInit+0x5c>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6193      	str	r3, [r2, #24]
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_MspInit+0x5c>)
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_MspInit+0x5c>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_MspInit+0x5c>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	61d3      	str	r3, [r2, #28]
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_MspInit+0x5c>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_MspInit+0x60>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_MspInit+0x60>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40010000 	.word	0x40010000

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <HardFault_Handler+0x4>

08003eba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ebe:	e7fe      	b.n	8003ebe <MemManage_Handler+0x4>

08003ec0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <BusFault_Handler+0x4>

08003ec6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eca:	e7fe      	b.n	8003eca <UsageFault_Handler+0x4>

08003ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <SysTick_Handler+0x20>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <SysTick_Handler+0x18>
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <SysTick_Handler+0x20>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	4b02      	ldr	r3, [pc, #8]	; (8003f10 <SysTick_Handler+0x20>)
 8003f06:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f08:	f000 ff7e 	bl	8004e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000248 	.word	0x20000248

08003f14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <EXTI0_IRQHandler+0x28>)
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <EXTI0_IRQHandler+0x28>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f001 fd96 	bl	8005a5c <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003f30:	2001      	movs	r0, #1
 8003f32:	f001 fd7b 	bl	8005a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40010400 	.word	0x40010400

08003f40 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <EXTI4_IRQHandler+0x2c>)
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <EXTI4_IRQHandler+0x30>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <EXTI4_IRQHandler+0x2c>)
 8003f58:	2210      	movs	r2, #16
 8003f5a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8003f5c:	2010      	movs	r0, #16
 8003f5e:	f001 fd7d 	bl	8005a5c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003f62:	2010      	movs	r0, #16
 8003f64:	f001 fd62 	bl	8005a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	2000081c 	.word	0x2000081c

08003f74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <TIM3_IRQHandler+0x3c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <TIM3_IRQHandler+0x3c>)
 8003f82:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <TIM3_IRQHandler+0x3c>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10c      	bne.n	8003fa6 <TIM3_IRQHandler+0x32>
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <TIM3_IRQHandler+0x40>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d108      	bne.n	8003fa6 <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 8003f94:	4808      	ldr	r0, [pc, #32]	; (8003fb8 <TIM3_IRQHandler+0x44>)
 8003f96:	f002 faca 	bl	800652e <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8003f9a:	4807      	ldr	r0, [pc, #28]	; (8003fb8 <TIM3_IRQHandler+0x44>)
 8003f9c:	f002 fb0b 	bl	80065b6 <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <TIM3_IRQHandler+0x40>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003fa6:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <TIM3_IRQHandler+0x44>)
 8003fa8:	f002 fb63 	bl	8006672 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000758 	.word	0x20000758
 8003fb4:	20000759 	.word	0x20000759
 8003fb8:	200006d8 	.word	0x200006d8

08003fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <USART1_IRQHandler+0x38>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d107      	bne.n	8003fe4 <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <USART1_IRQHandler+0x38>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <USART1_IRQHandler+0x3c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	79fa      	ldrb	r2, [r7, #7]
 8003fe2:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fe4:	4805      	ldr	r0, [pc, #20]	; (8003ffc <USART1_IRQHandler+0x40>)
 8003fe6:	f003 faa7 	bl	8007538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000178 	.word	0x20000178
 8003ff8:	200001b8 	.word	0x200001b8
 8003ffc:	2000075c 	.word	0x2000075c

08004000 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 8004004:	4802      	ldr	r0, [pc, #8]	; (8004010 <USART3_IRQHandler+0x10>)
 8004006:	f7ff feb9 	bl	8003d7c <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200007dc 	.word	0x200007dc

08004014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <EXTI15_10_IRQHandler+0x2c>)
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <EXTI15_10_IRQHandler+0x20>
	{
		// extern void debug_alarm_set();
		// debug_alarm_set();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <EXTI15_10_IRQHandler+0x2c>)
 8004026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800402a:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 800402c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004030:	f001 fd14 	bl	8005a5c <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004038:	f001 fcf8 	bl	8005a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40010400 	.word	0x40010400

08004044 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <TIM5_IRQHandler+0x14>)
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800404e:	4803      	ldr	r0, [pc, #12]	; (800405c <TIM5_IRQHandler+0x18>)
 8004050:	f002 fb0f 	bl	8006672 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000000 	.word	0x20000000
 800405c:	20000718 	.word	0x20000718

08004060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
	return 1;
 8004064:	2301      	movs	r3, #1
}
 8004066:	4618      	mov	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <_kill>:

int _kill(int pid, int sig)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004078:	f003 fefc 	bl	8007e74 <__errno>
 800407c:	4603      	mov	r3, r0
 800407e:	2216      	movs	r2, #22
 8004080:	601a      	str	r2, [r3, #0]
	return -1;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_exit>:

void _exit (int status)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004096:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ffe7 	bl	800406e <_kill>
	while (1) {}		/* Make sure we hang here */
 80040a0:	e7fe      	b.n	80040a0 <_exit+0x12>
	...

080040a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <SystemInit+0x5c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <SystemInit+0x5c>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <SystemInit+0x5c>)
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4911      	ldr	r1, [pc, #68]	; (8004100 <SystemInit+0x5c>)
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <SystemInit+0x60>)
 80040bc:	4013      	ands	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <SystemInit+0x5c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <SystemInit+0x5c>)
 80040c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <SystemInit+0x5c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <SystemInit+0x5c>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <SystemInit+0x5c>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a07      	ldr	r2, [pc, #28]	; (8004100 <SystemInit+0x5c>)
 80040e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80040e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <SystemInit+0x5c>)
 80040ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80040ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <SystemInit+0x64>)
 80040f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40021000 	.word	0x40021000
 8004104:	f8ff0000 	.word	0xf8ff0000
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b094      	sub	sp, #80	; 0x50
 8004110:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004112:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004120:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800412a:	f107 031c 	add.w	r3, r7, #28
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	609a      	str	r2, [r3, #8]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	615a      	str	r2, [r3, #20]
 800413c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800413e:	463b      	mov	r3, r7
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	611a      	str	r2, [r3, #16]
 800414c:	615a      	str	r2, [r3, #20]
 800414e:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8004150:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <MX_TIM1_Init+0x144>)
 8004152:	4a40      	ldr	r2, [pc, #256]	; (8004254 <MX_TIM1_Init+0x148>)
 8004154:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <MX_TIM1_Init+0x144>)
 8004158:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800415c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415e:	4b3c      	ldr	r3, [pc, #240]	; (8004250 <MX_TIM1_Init+0x144>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8004164:	4b3a      	ldr	r3, [pc, #232]	; (8004250 <MX_TIM1_Init+0x144>)
 8004166:	f240 4265 	movw	r2, #1125	; 0x465
 800416a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800416c:	4b38      	ldr	r3, [pc, #224]	; (8004250 <MX_TIM1_Init+0x144>)
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004172:	4b37      	ldr	r3, [pc, #220]	; (8004250 <MX_TIM1_Init+0x144>)
 8004174:	2200      	movs	r2, #0
 8004176:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004178:	4b35      	ldr	r3, [pc, #212]	; (8004250 <MX_TIM1_Init+0x144>)
 800417a:	2200      	movs	r2, #0
 800417c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800417e:	4834      	ldr	r0, [pc, #208]	; (8004250 <MX_TIM1_Init+0x144>)
 8004180:	f002 f990 	bl	80064a4 <HAL_TIM_Base_Init>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800418a:	f7fe f973 	bl	8002474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800418e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004192:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004198:	4619      	mov	r1, r3
 800419a:	482d      	ldr	r0, [pc, #180]	; (8004250 <MX_TIM1_Init+0x144>)
 800419c:	f002 fc38 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80041a6:	f7fe f965 	bl	8002474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80041aa:	4829      	ldr	r0, [pc, #164]	; (8004250 <MX_TIM1_Init+0x144>)
 80041ac:	f002 fa2d 	bl	800660a <HAL_TIM_PWM_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80041b6:	f7fe f95d 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041c6:	4619      	mov	r1, r3
 80041c8:	4821      	ldr	r0, [pc, #132]	; (8004250 <MX_TIM1_Init+0x144>)
 80041ca:	f003 f878 	bl	80072be <HAL_TIMEx_MasterConfigSynchronization>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80041d4:	f7fe f94e 	bl	8002474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041d8:	2360      	movs	r3, #96	; 0x60
 80041da:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 80041dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80041e0:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041e6:	2300      	movs	r3, #0
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041f6:	f107 031c 	add.w	r3, r7, #28
 80041fa:	2200      	movs	r2, #0
 80041fc:	4619      	mov	r1, r3
 80041fe:	4814      	ldr	r0, [pc, #80]	; (8004250 <MX_TIM1_Init+0x144>)
 8004200:	f002 fb40 	bl	8006884 <HAL_TIM_PWM_ConfigChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800420a:	f7fe f933 	bl	8002474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800420e:	2300      	movs	r3, #0
 8004210:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004226:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004228:	2300      	movs	r3, #0
 800422a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800422c:	463b      	mov	r3, r7
 800422e:	4619      	mov	r1, r3
 8004230:	4807      	ldr	r0, [pc, #28]	; (8004250 <MX_TIM1_Init+0x144>)
 8004232:	f002 ffec 	bl	800720e <HAL_TIMEx_ConfigBreakDeadTime>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800423c:	f7fe f91a 	bl	8002474 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8004240:	4803      	ldr	r0, [pc, #12]	; (8004250 <MX_TIM1_Init+0x144>)
 8004242:	f000 f959 	bl	80044f8 <HAL_TIM_MspPostInit>

}
 8004246:	bf00      	nop
 8004248:	3750      	adds	r7, #80	; 0x50
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000658 	.word	0x20000658
 8004254:	40012c00 	.word	0x40012c00

08004258 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800425e:	f107 0308 	add.w	r3, r7, #8
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800426c:	463b      	mov	r3, r7
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <MX_TIM2_Init+0x94>)
 8004276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800427a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800427c:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <MX_TIM2_Init+0x94>)
 800427e:	2247      	movs	r2, #71	; 0x47
 8004280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <MX_TIM2_Init+0x94>)
 8004284:	2200      	movs	r2, #0
 8004286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004288:	4b18      	ldr	r3, [pc, #96]	; (80042ec <MX_TIM2_Init+0x94>)
 800428a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <MX_TIM2_Init+0x94>)
 8004292:	2200      	movs	r2, #0
 8004294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <MX_TIM2_Init+0x94>)
 8004298:	2200      	movs	r2, #0
 800429a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800429c:	4813      	ldr	r0, [pc, #76]	; (80042ec <MX_TIM2_Init+0x94>)
 800429e:	f002 f901 	bl	80064a4 <HAL_TIM_Base_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80042a8:	f7fe f8e4 	bl	8002474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042b2:	f107 0308 	add.w	r3, r7, #8
 80042b6:	4619      	mov	r1, r3
 80042b8:	480c      	ldr	r0, [pc, #48]	; (80042ec <MX_TIM2_Init+0x94>)
 80042ba:	f002 fba9 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80042c4:	f7fe f8d6 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042c8:	2300      	movs	r3, #0
 80042ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042d0:	463b      	mov	r3, r7
 80042d2:	4619      	mov	r1, r3
 80042d4:	4805      	ldr	r0, [pc, #20]	; (80042ec <MX_TIM2_Init+0x94>)
 80042d6:	f002 fff2 	bl	80072be <HAL_TIMEx_MasterConfigSynchronization>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80042e0:	f7fe f8c8 	bl	8002474 <Error_Handler>
  }

}
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000698 	.word	0x20000698

080042f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004304:	463b      	mov	r3, r7
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <MX_TIM3_Init+0x94>)
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <MX_TIM3_Init+0x98>)
 8004310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <MX_TIM3_Init+0x94>)
 8004314:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8004318:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <MX_TIM3_Init+0x94>)
 800431c:	2200      	movs	r2, #0
 800431e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <MX_TIM3_Init+0x94>)
 8004322:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8004326:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <MX_TIM3_Init+0x94>)
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <MX_TIM3_Init+0x94>)
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004334:	4813      	ldr	r0, [pc, #76]	; (8004384 <MX_TIM3_Init+0x94>)
 8004336:	f002 f8b5 	bl	80064a4 <HAL_TIM_Base_Init>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004340:	f7fe f898 	bl	8002474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004348:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	4619      	mov	r1, r3
 8004350:	480c      	ldr	r0, [pc, #48]	; (8004384 <MX_TIM3_Init+0x94>)
 8004352:	f002 fb5d 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800435c:	f7fe f88a 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004360:	2300      	movs	r3, #0
 8004362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004368:	463b      	mov	r3, r7
 800436a:	4619      	mov	r1, r3
 800436c:	4805      	ldr	r0, [pc, #20]	; (8004384 <MX_TIM3_Init+0x94>)
 800436e:	f002 ffa6 	bl	80072be <HAL_TIMEx_MasterConfigSynchronization>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004378:	f7fe f87c 	bl	8002474 <Error_Handler>
  }

}
 800437c:	bf00      	nop
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	200006d8 	.word	0x200006d8
 8004388:	40000400 	.word	0x40000400

0800438c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004392:	f107 0308 	add.w	r3, r7, #8
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a0:	463b      	mov	r3, r7
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <MX_TIM5_Init+0x94>)
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <MX_TIM5_Init+0x98>)
 80043ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <MX_TIM5_Init+0x94>)
 80043b0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80043b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <MX_TIM5_Init+0x94>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <MX_TIM5_Init+0x94>)
 80043be:	f248 32d5 	movw	r2, #33749	; 0x83d5
 80043c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c4:	4b16      	ldr	r3, [pc, #88]	; (8004420 <MX_TIM5_Init+0x94>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <MX_TIM5_Init+0x94>)
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80043d0:	4813      	ldr	r0, [pc, #76]	; (8004420 <MX_TIM5_Init+0x94>)
 80043d2:	f002 f867 	bl	80064a4 <HAL_TIM_Base_Init>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80043dc:	f7fe f84a 	bl	8002474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4619      	mov	r1, r3
 80043ec:	480c      	ldr	r0, [pc, #48]	; (8004420 <MX_TIM5_Init+0x94>)
 80043ee:	f002 fb0f 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80043f8:	f7fe f83c 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043fc:	2300      	movs	r3, #0
 80043fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004400:	2300      	movs	r3, #0
 8004402:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004404:	463b      	mov	r3, r7
 8004406:	4619      	mov	r1, r3
 8004408:	4805      	ldr	r0, [pc, #20]	; (8004420 <MX_TIM5_Init+0x94>)
 800440a:	f002 ff58 	bl	80072be <HAL_TIMEx_MasterConfigSynchronization>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004414:	f7fe f82e 	bl	8002474 <Error_Handler>
  }

}
 8004418:	bf00      	nop
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000718 	.word	0x20000718
 8004424:	40000c00 	.word	0x40000c00

08004428 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <HAL_TIM_Base_MspInit+0xc0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10c      	bne.n	8004454 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800443a:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 8004440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004444:	6193      	str	r3, [r2, #24]
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004452:	e044      	b.n	80044de <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d10c      	bne.n	8004478 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800445e:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4a22      	ldr	r2, [pc, #136]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	61d3      	str	r3, [r2, #28]
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
}
 8004476:	e032      	b.n	80044de <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_TIM_Base_MspInit+0xc8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d114      	bne.n	80044ac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004482:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	4a19      	ldr	r2, [pc, #100]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	61d3      	str	r3, [r2, #28]
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2100      	movs	r1, #0
 800449e:	201d      	movs	r0, #29
 80044a0:	f000 ffbd 	bl	800541e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044a4:	201d      	movs	r0, #29
 80044a6:	f000 ffd6 	bl	8005456 <HAL_NVIC_EnableIRQ>
}
 80044aa:	e018      	b.n	80044de <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <HAL_TIM_Base_MspInit+0xcc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d113      	bne.n	80044de <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 80044bc:	f043 0308 	orr.w	r3, r3, #8
 80044c0:	61d3      	str	r3, [r2, #28]
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_TIM_Base_MspInit+0xc4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	2032      	movs	r0, #50	; 0x32
 80044d4:	f000 ffa3 	bl	800541e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80044d8:	2032      	movs	r0, #50	; 0x32
 80044da:	f000 ffbc 	bl	8005456 <HAL_NVIC_EnableIRQ>
}
 80044de:	bf00      	nop
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000c00 	.word	0x40000c00

080044f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a10      	ldr	r2, [pc, #64]	; (8004554 <HAL_TIM_MspPostInit+0x5c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d118      	bne.n	800454a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_TIM_MspPostInit+0x60>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <HAL_TIM_MspPostInit+0x60>)
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	6193      	str	r3, [r2, #24]
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <HAL_TIM_MspPostInit+0x60>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	2302      	movs	r3, #2
 800453c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453e:	f107 0310 	add.w	r3, r7, #16
 8004542:	4619      	mov	r1, r3
 8004544:	4805      	ldr	r0, [pc, #20]	; (800455c <HAL_TIM_MspPostInit+0x64>)
 8004546:	f001 f8a9 	bl	800569c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800454a:	bf00      	nop
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40021000 	.word	0x40021000
 800455c:	40010800 	.word	0x40010800

08004560 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <TIMER_INIT+0x20>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0201 	mvn.w	r2, #1
 800456c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 800456e:	4804      	ldr	r0, [pc, #16]	; (8004580 <TIMER_INIT+0x20>)
 8004570:	f001 ffc3 	bl	80064fa <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <TIMER_INIT+0x20>)
 8004576:	f002 f804 	bl	8006582 <HAL_TIM_Base_Start_IT>
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000718 	.word	0x20000718

08004584 <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <timer_min+0x38>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0201 	mvn.w	r2, #1
 8004596:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <timer_min+0x3c>)
 80045a0:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <timer_min+0x40>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 80045a8:	4804      	ldr	r0, [pc, #16]	; (80045bc <timer_min+0x38>)
 80045aa:	f001 ffa6 	bl	80064fa <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80045ae:	4803      	ldr	r0, [pc, #12]	; (80045bc <timer_min+0x38>)
 80045b0:	f001 ffe7 	bl	8006582 <HAL_TIM_Base_Start_IT>
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200006d8 	.word	0x200006d8
 80045c0:	20000758 	.word	0x20000758
 80045c4:	20000759 	.word	0x20000759

080045c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <MX_USART1_UART_Init+0x50>)
 80045d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045ee:	220c      	movs	r2, #12
 80045f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045fe:	4805      	ldr	r0, [pc, #20]	; (8004614 <MX_USART1_UART_Init+0x4c>)
 8004600:	f002 feb3 	bl	800736a <HAL_UART_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800460a:	f7fd ff33 	bl	8002474 <Error_Handler>
  }

}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2000075c 	.word	0x2000075c
 8004618:	40013800 	.word	0x40013800

0800461c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004620:	4b11      	ldr	r3, [pc, #68]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <MX_USART2_UART_Init+0x50>)
 8004624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 8004628:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800462c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 8004636:	2200      	movs	r2, #0
 8004638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 800463c:	2200      	movs	r2, #0
 800463e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 8004642:	220c      	movs	r2, #12
 8004644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 8004648:	2200      	movs	r2, #0
 800464a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004652:	4805      	ldr	r0, [pc, #20]	; (8004668 <MX_USART2_UART_Init+0x4c>)
 8004654:	f002 fe89 	bl	800736a <HAL_UART_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800465e:	f7fd ff09 	bl	8002474 <Error_Handler>
  }

}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	2000079c 	.word	0x2000079c
 800466c:	40004400 	.word	0x40004400

08004670 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <MX_USART3_UART_Init+0x50>)
 8004678:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 800467c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004680:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004682:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 800468a:	2200      	movs	r2, #0
 800468c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 8004690:	2200      	movs	r2, #0
 8004692:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 8004696:	220c      	movs	r2, #12
 8004698:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 800469c:	2200      	movs	r2, #0
 800469e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046a6:	4805      	ldr	r0, [pc, #20]	; (80046bc <MX_USART3_UART_Init+0x4c>)
 80046a8:	f002 fe5f 	bl	800736a <HAL_UART_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80046b2:	f7fd fedf 	bl	8002474 <Error_Handler>
  }

}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200007dc 	.word	0x200007dc
 80046c0:	40004800 	.word	0x40004800

080046c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046cc:	f107 0320 	add.w	r3, r7, #32
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5b      	ldr	r2, [pc, #364]	; (800484c <HAL_UART_MspInit+0x188>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d13a      	bne.n	800475a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046e4:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4a59      	ldr	r2, [pc, #356]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80046ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ee:	6193      	str	r3, [r2, #24]
 80046f0:	4b57      	ldr	r3, [pc, #348]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fc:	4b54      	ldr	r3, [pc, #336]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	4a53      	ldr	r2, [pc, #332]	; (8004850 <HAL_UART_MspInit+0x18c>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6193      	str	r3, [r2, #24]
 8004708:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_UART_MspInit+0x18c>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471a:	2302      	movs	r3, #2
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800471e:	2303      	movs	r3, #3
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004722:	f107 0320 	add.w	r3, r7, #32
 8004726:	4619      	mov	r1, r3
 8004728:	484a      	ldr	r0, [pc, #296]	; (8004854 <HAL_UART_MspInit+0x190>)
 800472a:	f000 ffb7 	bl	800569c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800472e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004734:	2300      	movs	r3, #0
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473c:	f107 0320 	add.w	r3, r7, #32
 8004740:	4619      	mov	r1, r3
 8004742:	4844      	ldr	r0, [pc, #272]	; (8004854 <HAL_UART_MspInit+0x190>)
 8004744:	f000 ffaa 	bl	800569c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	2025      	movs	r0, #37	; 0x25
 800474e:	f000 fe66 	bl	800541e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004752:	2025      	movs	r0, #37	; 0x25
 8004754:	f000 fe7f 	bl	8005456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004758:	e074      	b.n	8004844 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a3e      	ldr	r2, [pc, #248]	; (8004858 <HAL_UART_MspInit+0x194>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d130      	bne.n	80047c6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004764:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_UART_MspInit+0x18c>)
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	4a39      	ldr	r2, [pc, #228]	; (8004850 <HAL_UART_MspInit+0x18c>)
 800476a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476e:	61d3      	str	r3, [r2, #28]
 8004770:	4b37      	ldr	r3, [pc, #220]	; (8004850 <HAL_UART_MspInit+0x18c>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_UART_MspInit+0x18c>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	4a33      	ldr	r2, [pc, #204]	; (8004850 <HAL_UART_MspInit+0x18c>)
 8004782:	f043 0304 	orr.w	r3, r3, #4
 8004786:	6193      	str	r3, [r2, #24]
 8004788:	4b31      	ldr	r3, [pc, #196]	; (8004850 <HAL_UART_MspInit+0x18c>)
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004794:	2304      	movs	r3, #4
 8004796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004798:	2302      	movs	r3, #2
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800479c:	2303      	movs	r3, #3
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	f107 0320 	add.w	r3, r7, #32
 80047a4:	4619      	mov	r1, r3
 80047a6:	482b      	ldr	r0, [pc, #172]	; (8004854 <HAL_UART_MspInit+0x190>)
 80047a8:	f000 ff78 	bl	800569c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047ac:	2308      	movs	r3, #8
 80047ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b0:	2300      	movs	r3, #0
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b8:	f107 0320 	add.w	r3, r7, #32
 80047bc:	4619      	mov	r1, r3
 80047be:	4825      	ldr	r0, [pc, #148]	; (8004854 <HAL_UART_MspInit+0x190>)
 80047c0:	f000 ff6c 	bl	800569c <HAL_GPIO_Init>
}
 80047c4:	e03e      	b.n	8004844 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART3)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a24      	ldr	r2, [pc, #144]	; (800485c <HAL_UART_MspInit+0x198>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d139      	bne.n	8004844 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047d0:	4b1f      	ldr	r3, [pc, #124]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80047d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047da:	61d3      	str	r3, [r2, #28]
 80047dc:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80047ee:	f043 0308 	orr.w	r3, r3, #8
 80047f2:	6193      	str	r3, [r2, #24]
 80047f4:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_UART_MspInit+0x18c>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800480a:	2303      	movs	r3, #3
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480e:	f107 0320 	add.w	r3, r7, #32
 8004812:	4619      	mov	r1, r3
 8004814:	4812      	ldr	r0, [pc, #72]	; (8004860 <HAL_UART_MspInit+0x19c>)
 8004816:	f000 ff41 	bl	800569c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800481a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800481e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004828:	f107 0320 	add.w	r3, r7, #32
 800482c:	4619      	mov	r1, r3
 800482e:	480c      	ldr	r0, [pc, #48]	; (8004860 <HAL_UART_MspInit+0x19c>)
 8004830:	f000 ff34 	bl	800569c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004834:	2200      	movs	r2, #0
 8004836:	2100      	movs	r1, #0
 8004838:	2027      	movs	r0, #39	; 0x27
 800483a:	f000 fdf0 	bl	800541e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800483e:	2027      	movs	r0, #39	; 0x27
 8004840:	f000 fe09 	bl	8005456 <HAL_NVIC_EnableIRQ>
}
 8004844:	bf00      	nop
 8004846:	3730      	adds	r7, #48	; 0x30
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40013800 	.word	0x40013800
 8004850:	40021000 	.word	0x40021000
 8004854:	40010800 	.word	0x40010800
 8004858:	40004400 	.word	0x40004400
 800485c:	40004800 	.word	0x40004800
 8004860:	40010c00 	.word	0x40010c00

08004864 <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e00a      	b.n	8004888 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 8004872:	230c      	movs	r3, #12
 8004874:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8004876:	bf00      	nop
 8004878:	7afb      	ldrb	r3, [r7, #11]
 800487a:	1e5a      	subs	r2, r3, #1
 800487c:	72fa      	strb	r2, [r7, #11]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1fa      	bne.n	8004878 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3301      	adds	r3, #1
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	429a      	cmp	r2, r3
 800488e:	d3f0      	bcc.n	8004872 <XPT2046_DelayUS+0xe>
			;

	}

}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 80048a6:	2200      	movs	r2, #0
 80048a8:	2104      	movs	r1, #4
 80048aa:	481d      	ldr	r0, [pc, #116]	; (8004920 <XPT2046_WriteCMD+0x84>)
 80048ac:	f001 f8a5 	bl	80059fa <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 80048b0:	2200      	movs	r2, #0
 80048b2:	2101      	movs	r1, #1
 80048b4:	481a      	ldr	r0, [pc, #104]	; (8004920 <XPT2046_WriteCMD+0x84>)
 80048b6:	f001 f8a0 	bl	80059fa <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	e027      	b.n	8004910 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80048c0:	79fa      	ldrb	r2, [r7, #7]
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	f1c3 0307 	rsb	r3, r3, #7
 80048c8:	fa42 f303 	asr.w	r3, r2, r3
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <XPT2046_WriteCMD+0x44>
 80048d4:	2201      	movs	r2, #1
 80048d6:	2104      	movs	r1, #4
 80048d8:	4811      	ldr	r0, [pc, #68]	; (8004920 <XPT2046_WriteCMD+0x84>)
 80048da:	f001 f88e 	bl	80059fa <HAL_GPIO_WritePin>
 80048de:	e004      	b.n	80048ea <XPT2046_WriteCMD+0x4e>
 80048e0:	2200      	movs	r2, #0
 80048e2:	2104      	movs	r1, #4
 80048e4:	480e      	ldr	r0, [pc, #56]	; (8004920 <XPT2046_WriteCMD+0x84>)
 80048e6:	f001 f888 	bl	80059fa <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80048ea:	2005      	movs	r0, #5
 80048ec:	f7ff ffba 	bl	8004864 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 80048f0:	2201      	movs	r2, #1
 80048f2:	2101      	movs	r1, #1
 80048f4:	480a      	ldr	r0, [pc, #40]	; (8004920 <XPT2046_WriteCMD+0x84>)
 80048f6:	f001 f880 	bl	80059fa <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80048fa:	2005      	movs	r0, #5
 80048fc:	f7ff ffb2 	bl	8004864 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8004900:	2200      	movs	r2, #0
 8004902:	2101      	movs	r1, #1
 8004904:	4806      	ldr	r0, [pc, #24]	; (8004920 <XPT2046_WriteCMD+0x84>)
 8004906:	f001 f878 	bl	80059fa <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3301      	adds	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b07      	cmp	r3, #7
 8004914:	d9d4      	bls.n	80048c0 <XPT2046_WriteCMD+0x24>
	}

}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40011800 	.word	0x40011800

08004924 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 800492a:	2300      	movs	r3, #0
 800492c:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 800492e:	2200      	movs	r2, #0
 8004930:	2104      	movs	r1, #4
 8004932:	4819      	ldr	r0, [pc, #100]	; (8004998 <XPT2046_ReadCMD+0x74>)
 8004934:	f001 f861 	bl	80059fa <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8004938:	2201      	movs	r2, #1
 800493a:	2101      	movs	r1, #1
 800493c:	4816      	ldr	r0, [pc, #88]	; (8004998 <XPT2046_ReadCMD+0x74>)
 800493e:	f001 f85c 	bl	80059fa <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 8004942:	2300      	movs	r3, #0
 8004944:	71fb      	strb	r3, [r7, #7]
 8004946:	e01e      	b.n	8004986 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8004948:	2200      	movs	r2, #0
 800494a:	2101      	movs	r1, #1
 800494c:	4812      	ldr	r0, [pc, #72]	; (8004998 <XPT2046_ReadCMD+0x74>)
 800494e:	f001 f854 	bl	80059fa <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 8004952:	2108      	movs	r1, #8
 8004954:	4810      	ldr	r0, [pc, #64]	; (8004998 <XPT2046_ReadCMD+0x74>)
 8004956:	f001 f839 	bl	80059cc <HAL_GPIO_ReadPin>
 800495a:	4603      	mov	r3, r0
 800495c:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	f1c3 030b 	rsb	r3, r3, #11
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	b21a      	sxth	r2, r3
 800496c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004970:	4313      	orrs	r3, r2
 8004972:	b21b      	sxth	r3, r3
 8004974:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8004976:	2201      	movs	r2, #1
 8004978:	2101      	movs	r1, #1
 800497a:	4807      	ldr	r0, [pc, #28]	; (8004998 <XPT2046_ReadCMD+0x74>)
 800497c:	f001 f83d 	bl	80059fa <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	3301      	adds	r3, #1
 8004984:	71fb      	strb	r3, [r7, #7]
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	2b0b      	cmp	r3, #11
 800498a:	d9dd      	bls.n	8004948 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 800498c:	88bb      	ldrh	r3, [r7, #4]

}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40011800 	.word	0x40011800

0800499c <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff ff77 	bl	800489c <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 80049ae:	f7ff ffb9 	bl	8004924 <XPT2046_ReadCMD>
 80049b2:	4603      	mov	r3, r0

}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 80049c6:	2090      	movs	r0, #144	; 0x90
 80049c8:	f7ff ffe8 	bl	800499c <XPT2046_ReadAdc>
 80049cc:	4603      	mov	r3, r0
 80049ce:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7ff ff47 	bl	8004864 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 80049d6:	20d0      	movs	r0, #208	; 0xd0
 80049d8:	f7ff ffe0 	bl	800499c <XPT2046_ReadAdc>
 80049dc:	4603      	mov	r3, r0
 80049de:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	89fa      	ldrh	r2, [r7, #14]
 80049e4:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	89ba      	ldrh	r2, [r7, #12]
 80049ea:	801a      	strh	r2, [r3, #0]

}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b092      	sub	sp, #72	; 0x48
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	2228      	movs	r2, #40	; 0x28
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 fa5c 	bl	8007ec8 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8004a10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a14:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff ffce 	bl	80049bc <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8004a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a24:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	3348      	adds	r3, #72	; 0x48
 8004a2c:	443b      	add	r3, r7
 8004a2e:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 8004a32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a36:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004a3a:	330a      	adds	r3, #10
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	3348      	adds	r3, #72	; 0x48
 8004a40:	443b      	add	r3, r7
 8004a42:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8004a46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8004a50:	2110      	movs	r1, #16
 8004a52:	4871      	ldr	r0, [pc, #452]	; (8004c18 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8004a54:	f000 ffba 	bl	80059cc <HAL_GPIO_ReadPin>
 8004a58:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <XPT2046_ReadAdc_Smooth_XY+0x72>
 8004a5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a62:	2b09      	cmp	r3, #9
 8004a64:	d9d4      	bls.n	8004a10 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8004a66:	2110      	movs	r1, #16
 8004a68:	486b      	ldr	r0, [pc, #428]	; (8004c18 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8004a6a:	f000 ffaf 	bl	80059cc <HAL_GPIO_ReadPin>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8004a74:	4b69      	ldr	r3, [pc, #420]	; (8004c1c <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8004a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a7e:	2b0a      	cmp	r3, #10
 8004a80:	f040 80c4 	bne.w	8004c0c <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8004a84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8004a8e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004a9e:	e02b      	b.n	8004af8 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8004aa0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	3348      	adds	r3, #72	; 0x48
 8004aa8:	443b      	add	r3, r7
 8004aaa:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	dd08      	ble.n	8004ac8 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8004ab6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	3348      	adds	r3, #72	; 0x48
 8004abe:	443b      	add	r3, r7
 8004ac0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac6:	e012      	b.n	8004aee <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8004ac8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	3348      	adds	r3, #72	; 0x48
 8004ad0:	443b      	add	r3, r7
 8004ad2:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ada:	4293      	cmp	r3, r2
 8004adc:	da07      	bge.n	8004aee <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8004ade:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	3348      	adds	r3, #72	; 0x48
 8004ae6:	443b      	add	r3, r7
 8004ae8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8004aee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004af2:	3301      	adds	r3, #1
 8004af4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004af8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004afc:	2b09      	cmp	r3, #9
 8004afe:	d9cf      	bls.n	8004aa0 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004b06:	e02f      	b.n	8004b68 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8004b08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b0c:	330a      	adds	r3, #10
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	3348      	adds	r3, #72	; 0x48
 8004b12:	443b      	add	r3, r7
 8004b14:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	dd09      	ble.n	8004b34 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8004b20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b24:	330a      	adds	r3, #10
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	3348      	adds	r3, #72	; 0x48
 8004b2a:	443b      	add	r3, r7
 8004b2c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b32:	e014      	b.n	8004b5e <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8004b34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b38:	330a      	adds	r3, #10
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	3348      	adds	r3, #72	; 0x48
 8004b3e:	443b      	add	r3, r7
 8004b40:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	da08      	bge.n	8004b5e <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8004b4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b50:	330a      	adds	r3, #10
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	3348      	adds	r3, #72	; 0x48
 8004b56:	443b      	add	r3, r7
 8004b58:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8004b5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b62:	3301      	adds	r3, #1
 8004b64:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004b68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	d9cb      	bls.n	8004b08 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8004b70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004b74:	461a      	mov	r2, r3
 8004b76:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b7a:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8004b7c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004b86:	4413      	add	r3, r2
 8004b88:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b8c:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8004b8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004b92:	4413      	add	r3, r2
 8004b94:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004b9e:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8004ba0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004baa:	441a      	add	r2, r3
 8004bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	1ad3      	subs	r3, r2, r3
				>> 3;
 8004bb4:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8004bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004bc6:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8004bc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004bd8:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8004bda:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004bde:	4413      	add	r3, r2
 8004be0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8004be4:	4413      	add	r3, r2
 8004be6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8004bea:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8004bec:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8004bf6:	441a      	add	r2, r3
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	1ad3      	subs	r3, r2, r3
				>> 3;
 8004c00:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	805a      	strh	r2, [r3, #2]

		return 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8004c0c:	2300      	movs	r3, #0

}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3748      	adds	r7, #72	; 0x48
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40011800 	.word	0x40011800
 8004c1c:	2000081c 	.word	0x2000081c

08004c20 <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8004c20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fedd 	bl	80049f4 <XPT2046_ReadAdc_Smooth_XY>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d06e      	beq.n	8004d1e <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c46:	893b      	ldrh	r3, [r7, #8]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fb fc3f 	bl	80004cc <__aeabi_i2d>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4620      	mov	r0, r4
 8004c54:	4629      	mov	r1, r5
 8004c56:	f7fb fca3 	bl	80005a0 <__aeabi_dmul>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4690      	mov	r8, r2
 8004c60:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004c68:	897b      	ldrh	r3, [r7, #10]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fb fc2e 	bl	80004cc <__aeabi_i2d>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4620      	mov	r0, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f7fb fc92 	bl	80005a0 <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4640      	mov	r0, r8
 8004c82:	4649      	mov	r1, r9
 8004c84:	f7fb fad6 	bl	8000234 <__adddf3>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c96:	f7fb facd 	bl	8000234 <__adddf3>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f7fb ff3f 	bl	8000b24 <__aeabi_d2uiz>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004cb4:	893b      	ldrh	r3, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb fc08 	bl	80004cc <__aeabi_i2d>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f7fb fc6c 	bl	80005a0 <__aeabi_dmul>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4690      	mov	r8, r2
 8004cce:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004cd6:	897b      	ldrh	r3, [r7, #10]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fb fbf7 	bl	80004cc <__aeabi_i2d>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f7fb fc5b 	bl	80005a0 <__aeabi_dmul>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4640      	mov	r0, r8
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	f7fb fa9f 	bl	8000234 <__adddf3>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004d04:	f7fb fa96 	bl	8000234 <__adddf3>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fb ff08 	bl	8000b24 <__aeabi_d2uiz>
 8004d14:	4603      	mov	r3, r0
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	805a      	strh	r2, [r3, #2]
 8004d1c:	e001      	b.n	8004d22 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]

}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004d30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004d32:	e003      	b.n	8004d3c <LoopCopyDataInit>

08004d34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004d36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004d38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004d3a:	3104      	adds	r1, #4

08004d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004d3c:	480a      	ldr	r0, [pc, #40]	; (8004d68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004d40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004d42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004d44:	d3f6      	bcc.n	8004d34 <CopyDataInit>
  ldr r2, =_sbss
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004d48:	e002      	b.n	8004d50 <LoopFillZerobss>

08004d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004d4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004d4c:	f842 3b04 	str.w	r3, [r2], #4

08004d50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004d52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004d54:	d3f9      	bcc.n	8004d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d56:	f7ff f9a5 	bl	80040a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d5a:	f003 f891 	bl	8007e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d5e:	f7fd faf1 	bl	8002344 <main>
  bx lr
 8004d62:	4770      	bx	lr
  ldr r3, =_sidata
 8004d64:	08008690 	.word	0x08008690
  ldr r0, =_sdata
 8004d68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004d6c:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8004d70:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8004d74:	20000828 	.word	0x20000828

08004d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d78:	e7fe      	b.n	8004d78 <ADC1_2_IRQHandler>
	...

08004d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_Init+0x28>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <HAL_Init+0x28>)
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d8c:	2003      	movs	r0, #3
 8004d8e:	f000 fb3b 	bl	8005408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d92:	2000      	movs	r0, #0
 8004d94:	f000 f808 	bl	8004da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d98:	f7ff f854 	bl	8003e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40022000 	.word	0x40022000

08004da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004db0:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <HAL_InitTick+0x54>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_InitTick+0x58>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	4619      	mov	r1, r3
 8004dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fb53 	bl	8005472 <HAL_SYSTICK_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e00e      	b.n	8004df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d80a      	bhi.n	8004df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004de4:	f000 fb1b 	bl	800541e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004de8:	4a06      	ldr	r2, [pc, #24]	; (8004e04 <HAL_InitTick+0x5c>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000004 	.word	0x20000004
 8004e00:	2000003c 	.word	0x2000003c
 8004e04:	20000038 	.word	0x20000038

08004e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_IncTick+0x1c>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_IncTick+0x20>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <HAL_IncTick+0x20>)
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	2000003c 	.word	0x2000003c
 8004e28:	20000820 	.word	0x20000820

08004e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e30:	4b02      	ldr	r3, [pc, #8]	; (8004e3c <HAL_GetTick+0x10>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	20000820 	.word	0x20000820

08004e40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e0ce      	b.n	8005000 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc f984 	bl	800118c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f9bd 	bl	8005204 <ADC_ConversionStop_Disable>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 80a9 	bne.w	8004fee <HAL_ADC_Init+0x1ae>
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 80a5 	bne.w	8004fee <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004eac:	f023 0302 	bic.w	r3, r3, #2
 8004eb0:	f043 0202 	orr.w	r2, r3, #2
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4951      	ldr	r1, [pc, #324]	; (8005008 <HAL_ADC_Init+0x1c8>)
 8004ec2:	428b      	cmp	r3, r1
 8004ec4:	d10a      	bne.n	8004edc <HAL_ADC_Init+0x9c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ece:	d002      	beq.n	8004ed6 <HAL_ADC_Init+0x96>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	e004      	b.n	8004ee0 <HAL_ADC_Init+0xa0>
 8004ed6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004eda:	e001      	b.n	8004ee0 <HAL_ADC_Init+0xa0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8004ee0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8004ee8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef8:	d003      	beq.n	8004f02 <HAL_ADC_Init+0xc2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d102      	bne.n	8004f08 <HAL_ADC_Init+0xc8>
 8004f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f06:	e000      	b.n	8004f0a <HAL_ADC_Init+0xca>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d119      	bne.n	8004f4c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	035a      	lsls	r2, r3, #13
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e00b      	b.n	8004f4c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f043 0201 	orr.w	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_ADC_Init+0x1cc>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7c:	d003      	beq.n	8004f86 <HAL_ADC_Init+0x146>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d104      	bne.n	8004f90 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	051b      	lsls	r3, r3, #20
 8004f8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <HAL_ADC_Init+0x1d0>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d10b      	bne.n	8004fcc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fca:	e018      	b.n	8004ffe <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	f023 0312 	bic.w	r3, r3, #18
 8004fd4:	f043 0210 	orr.w	r2, r3, #16
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	f043 0201 	orr.w	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fec:	e007      	b.n	8004ffe <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40013c00 	.word	0x40013c00
 800500c:	ffe1f7fd 	.word	0xffe1f7fd
 8005010:	ff1f0efe 	.word	0xff1f0efe

08005014 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x20>
 8005030:	2302      	movs	r3, #2
 8005032:	e0dc      	b.n	80051ee <HAL_ADC_ConfigChannel+0x1da>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b06      	cmp	r3, #6
 8005042:	d81c      	bhi.n	800507e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	3b05      	subs	r3, #5
 8005056:	221f      	movs	r2, #31
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	4019      	ands	r1, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	3b05      	subs	r3, #5
 8005070:	fa00 f203 	lsl.w	r2, r0, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	635a      	str	r2, [r3, #52]	; 0x34
 800507c:	e03c      	b.n	80050f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d81c      	bhi.n	80050c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	3b23      	subs	r3, #35	; 0x23
 8005098:	221f      	movs	r2, #31
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	4019      	ands	r1, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	3b23      	subs	r3, #35	; 0x23
 80050b2:	fa00 f203 	lsl.w	r2, r0, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
 80050be:	e01b      	b.n	80050f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	3b41      	subs	r3, #65	; 0x41
 80050d2:	221f      	movs	r2, #31
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	4019      	ands	r1, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	3b41      	subs	r3, #65	; 0x41
 80050ec:	fa00 f203 	lsl.w	r2, r0, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b09      	cmp	r3, #9
 80050fe:	d91c      	bls.n	800513a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68d9      	ldr	r1, [r3, #12]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	3b1e      	subs	r3, #30
 8005112:	2207      	movs	r2, #7
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	4019      	ands	r1, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6898      	ldr	r0, [r3, #8]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	3b1e      	subs	r3, #30
 800512c:	fa00 f203 	lsl.w	r2, r0, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	60da      	str	r2, [r3, #12]
 8005138:	e019      	b.n	800516e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6919      	ldr	r1, [r3, #16]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	4413      	add	r3, r2
 800514a:	2207      	movs	r2, #7
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	43db      	mvns	r3, r3
 8005152:	4019      	ands	r1, r3
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6898      	ldr	r0, [r3, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4413      	add	r3, r2
 8005162:	fa00 f203 	lsl.w	r2, r0, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b10      	cmp	r3, #16
 8005174:	d003      	beq.n	800517e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800517a:	2b11      	cmp	r3, #17
 800517c:	d132      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1d      	ldr	r2, [pc, #116]	; (80051f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d125      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d126      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80051a4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d11a      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_ADC_ConfigChannel+0x1e8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <HAL_ADC_ConfigChannel+0x1ec>)
 80051b4:	fba2 2303 	umull	r2, r3, r2, r3
 80051b8:	0c9a      	lsrs	r2, r3, #18
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051c4:	e002      	b.n	80051cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f9      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x1b2>
 80051d2:	e007      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr
 80051f8:	40012400 	.word	0x40012400
 80051fc:	20000004 	.word	0x20000004
 8005200:	431bde83 	.word	0x431bde83

08005204 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	d127      	bne.n	800526e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800522e:	f7ff fdfd 	bl	8004e2c <HAL_GetTick>
 8005232:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005234:	e014      	b.n	8005260 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005236:	f7ff fdf9 	bl	8004e2c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d90d      	bls.n	8005260 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	f043 0210 	orr.w	r2, r3, #16
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	f043 0201 	orr.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e007      	b.n	8005270 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d0e3      	beq.n	8005236 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <NVIC_SetPriorityGrouping+0x44>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005294:	4013      	ands	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052aa:	4a04      	ldr	r2, [pc, #16]	; (80052bc <NVIC_SetPriorityGrouping+0x44>)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	60d3      	str	r3, [r2, #12]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <NVIC_GetPriorityGrouping+0x18>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 0307 	and.w	r3, r3, #7
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	f003 021f 	and.w	r2, r3, #31
 80052ec:	4906      	ldr	r1, [pc, #24]	; (8005308 <NVIC_EnableIRQ+0x2c>)
 80052ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	2001      	movs	r0, #1
 80052f6:	fa00 f202 	lsl.w	r2, r0, r2
 80052fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr
 8005308:	e000e100 	.word	0xe000e100

0800530c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	6039      	str	r1, [r7, #0]
 8005316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531c:	2b00      	cmp	r3, #0
 800531e:	da0b      	bge.n	8005338 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	490c      	ldr	r1, [pc, #48]	; (8005358 <NVIC_SetPriority+0x4c>)
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	3b04      	subs	r3, #4
 800532e:	0112      	lsls	r2, r2, #4
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	440b      	add	r3, r1
 8005334:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005336:	e009      	b.n	800534c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	b2da      	uxtb	r2, r3
 800533c:	4907      	ldr	r1, [pc, #28]	; (800535c <NVIC_SetPriority+0x50>)
 800533e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005342:	0112      	lsls	r2, r2, #4
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	440b      	add	r3, r1
 8005348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	e000ed00 	.word	0xe000ed00
 800535c:	e000e100 	.word	0xe000e100

08005360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f1c3 0307 	rsb	r3, r3, #7
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf28      	it	cs
 800537e:	2304      	movcs	r3, #4
 8005380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	3304      	adds	r3, #4
 8005386:	2b06      	cmp	r3, #6
 8005388:	d902      	bls.n	8005390 <NVIC_EncodePriority+0x30>
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3b03      	subs	r3, #3
 800538e:	e000      	b.n	8005392 <NVIC_EncodePriority+0x32>
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43da      	mvns	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	401a      	ands	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	43d9      	mvns	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b8:	4313      	orrs	r3, r2
         );
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3724      	adds	r7, #36	; 0x24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053d4:	d301      	bcc.n	80053da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053d6:	2301      	movs	r3, #1
 80053d8:	e00f      	b.n	80053fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053da:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <SysTick_Config+0x40>)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3b01      	subs	r3, #1
 80053e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053e2:	210f      	movs	r1, #15
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e8:	f7ff ff90 	bl	800530c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <SysTick_Config+0x40>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053f2:	4b04      	ldr	r3, [pc, #16]	; (8005404 <SysTick_Config+0x40>)
 80053f4:	2207      	movs	r2, #7
 80053f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	e000e010 	.word	0xe000e010

08005408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff ff31 	bl	8005278 <NVIC_SetPriorityGrouping>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	4603      	mov	r3, r0
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005430:	f7ff ff46 	bl	80052c0 <NVIC_GetPriorityGrouping>
 8005434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	6978      	ldr	r0, [r7, #20]
 800543c:	f7ff ff90 	bl	8005360 <NVIC_EncodePriority>
 8005440:	4602      	mov	r2, r0
 8005442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005446:	4611      	mov	r1, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ff5f 	bl	800530c <NVIC_SetPriority>
}
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	4603      	mov	r3, r0
 800545e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff ff39 	bl	80052dc <NVIC_EnableIRQ>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff ffa2 	bl	80053c4 <SysTick_Config>
 8005480:	4603      	mov	r3, r0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d005      	beq.n	80054ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e0d6      	b.n	800565c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 020e 	bic.w	r2, r2, #14
 80054bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	4b64      	ldr	r3, [pc, #400]	; (8005668 <HAL_DMA_Abort_IT+0x1dc>)
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d958      	bls.n	800558c <HAL_DMA_Abort_IT+0x100>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a63      	ldr	r2, [pc, #396]	; (800566c <HAL_DMA_Abort_IT+0x1e0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04f      	beq.n	8005584 <HAL_DMA_Abort_IT+0xf8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a61      	ldr	r2, [pc, #388]	; (8005670 <HAL_DMA_Abort_IT+0x1e4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d048      	beq.n	8005580 <HAL_DMA_Abort_IT+0xf4>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a60      	ldr	r2, [pc, #384]	; (8005674 <HAL_DMA_Abort_IT+0x1e8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d040      	beq.n	800557a <HAL_DMA_Abort_IT+0xee>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a5e      	ldr	r2, [pc, #376]	; (8005678 <HAL_DMA_Abort_IT+0x1ec>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d038      	beq.n	8005574 <HAL_DMA_Abort_IT+0xe8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a5d      	ldr	r2, [pc, #372]	; (800567c <HAL_DMA_Abort_IT+0x1f0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d030      	beq.n	800556e <HAL_DMA_Abort_IT+0xe2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a5b      	ldr	r2, [pc, #364]	; (8005680 <HAL_DMA_Abort_IT+0x1f4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d028      	beq.n	8005568 <HAL_DMA_Abort_IT+0xdc>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a53      	ldr	r2, [pc, #332]	; (8005668 <HAL_DMA_Abort_IT+0x1dc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d020      	beq.n	8005562 <HAL_DMA_Abort_IT+0xd6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a57      	ldr	r2, [pc, #348]	; (8005684 <HAL_DMA_Abort_IT+0x1f8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d019      	beq.n	800555e <HAL_DMA_Abort_IT+0xd2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a56      	ldr	r2, [pc, #344]	; (8005688 <HAL_DMA_Abort_IT+0x1fc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d012      	beq.n	800555a <HAL_DMA_Abort_IT+0xce>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a54      	ldr	r2, [pc, #336]	; (800568c <HAL_DMA_Abort_IT+0x200>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00a      	beq.n	8005554 <HAL_DMA_Abort_IT+0xc8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a53      	ldr	r2, [pc, #332]	; (8005690 <HAL_DMA_Abort_IT+0x204>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d102      	bne.n	800554e <HAL_DMA_Abort_IT+0xc2>
 8005548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800554c:	e01b      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 800554e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005552:	e018      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 8005554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005558:	e015      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 800555a:	2310      	movs	r3, #16
 800555c:	e013      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 800555e:	2301      	movs	r3, #1
 8005560:	e011      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 8005562:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005566:	e00e      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 8005568:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800556c:	e00b      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 800556e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005572:	e008      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 8005574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005578:	e005      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 800557a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800557e:	e002      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 8005580:	2310      	movs	r3, #16
 8005582:	e000      	b.n	8005586 <HAL_DMA_Abort_IT+0xfa>
 8005584:	2301      	movs	r3, #1
 8005586:	4a43      	ldr	r2, [pc, #268]	; (8005694 <HAL_DMA_Abort_IT+0x208>)
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	e057      	b.n	800563c <HAL_DMA_Abort_IT+0x1b0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a36      	ldr	r2, [pc, #216]	; (800566c <HAL_DMA_Abort_IT+0x1e0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d04f      	beq.n	8005636 <HAL_DMA_Abort_IT+0x1aa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a35      	ldr	r2, [pc, #212]	; (8005670 <HAL_DMA_Abort_IT+0x1e4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d048      	beq.n	8005632 <HAL_DMA_Abort_IT+0x1a6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a33      	ldr	r2, [pc, #204]	; (8005674 <HAL_DMA_Abort_IT+0x1e8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d040      	beq.n	800562c <HAL_DMA_Abort_IT+0x1a0>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a32      	ldr	r2, [pc, #200]	; (8005678 <HAL_DMA_Abort_IT+0x1ec>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d038      	beq.n	8005626 <HAL_DMA_Abort_IT+0x19a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a30      	ldr	r2, [pc, #192]	; (800567c <HAL_DMA_Abort_IT+0x1f0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d030      	beq.n	8005620 <HAL_DMA_Abort_IT+0x194>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <HAL_DMA_Abort_IT+0x1f4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d028      	beq.n	800561a <HAL_DMA_Abort_IT+0x18e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a26      	ldr	r2, [pc, #152]	; (8005668 <HAL_DMA_Abort_IT+0x1dc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d020      	beq.n	8005614 <HAL_DMA_Abort_IT+0x188>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <HAL_DMA_Abort_IT+0x1f8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d019      	beq.n	8005610 <HAL_DMA_Abort_IT+0x184>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a29      	ldr	r2, [pc, #164]	; (8005688 <HAL_DMA_Abort_IT+0x1fc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d012      	beq.n	800560c <HAL_DMA_Abort_IT+0x180>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a28      	ldr	r2, [pc, #160]	; (800568c <HAL_DMA_Abort_IT+0x200>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00a      	beq.n	8005606 <HAL_DMA_Abort_IT+0x17a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <HAL_DMA_Abort_IT+0x204>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d102      	bne.n	8005600 <HAL_DMA_Abort_IT+0x174>
 80055fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055fe:	e01b      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005604:	e018      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800560a:	e015      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 800560c:	2310      	movs	r3, #16
 800560e:	e013      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005610:	2301      	movs	r3, #1
 8005612:	e011      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005618:	e00e      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 800561a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800561e:	e00b      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005624:	e008      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800562a:	e005      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 800562c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005630:	e002      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005632:	2310      	movs	r3, #16
 8005634:	e000      	b.n	8005638 <HAL_DMA_Abort_IT+0x1ac>
 8005636:	2301      	movs	r3, #1
 8005638:	4a17      	ldr	r2, [pc, #92]	; (8005698 <HAL_DMA_Abort_IT+0x20c>)
 800563a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
    } 
  }
  return status;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40020080 	.word	0x40020080
 800566c:	40020008 	.word	0x40020008
 8005670:	4002001c 	.word	0x4002001c
 8005674:	40020030 	.word	0x40020030
 8005678:	40020044 	.word	0x40020044
 800567c:	40020058 	.word	0x40020058
 8005680:	4002006c 	.word	0x4002006c
 8005684:	40020408 	.word	0x40020408
 8005688:	4002041c 	.word	0x4002041c
 800568c:	40020430 	.word	0x40020430
 8005690:	40020444 	.word	0x40020444
 8005694:	40020400 	.word	0x40020400
 8005698:	40020000 	.word	0x40020000

0800569c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800569c:	b480      	push	{r7}
 800569e:	b08b      	sub	sp, #44	; 0x2c
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
 80056be:	e179      	b.n	80059b4 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80056c0:	2201      	movs	r2, #1
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	429a      	cmp	r2, r3
 80056da:	f040 8168 	bne.w	80059ae <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4a96      	ldr	r2, [pc, #600]	; (800593c <HAL_GPIO_Init+0x2a0>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d05e      	beq.n	80057a6 <HAL_GPIO_Init+0x10a>
 80056e8:	4a94      	ldr	r2, [pc, #592]	; (800593c <HAL_GPIO_Init+0x2a0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d875      	bhi.n	80057da <HAL_GPIO_Init+0x13e>
 80056ee:	4a94      	ldr	r2, [pc, #592]	; (8005940 <HAL_GPIO_Init+0x2a4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d058      	beq.n	80057a6 <HAL_GPIO_Init+0x10a>
 80056f4:	4a92      	ldr	r2, [pc, #584]	; (8005940 <HAL_GPIO_Init+0x2a4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d86f      	bhi.n	80057da <HAL_GPIO_Init+0x13e>
 80056fa:	4a92      	ldr	r2, [pc, #584]	; (8005944 <HAL_GPIO_Init+0x2a8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d052      	beq.n	80057a6 <HAL_GPIO_Init+0x10a>
 8005700:	4a90      	ldr	r2, [pc, #576]	; (8005944 <HAL_GPIO_Init+0x2a8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d869      	bhi.n	80057da <HAL_GPIO_Init+0x13e>
 8005706:	4a90      	ldr	r2, [pc, #576]	; (8005948 <HAL_GPIO_Init+0x2ac>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d04c      	beq.n	80057a6 <HAL_GPIO_Init+0x10a>
 800570c:	4a8e      	ldr	r2, [pc, #568]	; (8005948 <HAL_GPIO_Init+0x2ac>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d863      	bhi.n	80057da <HAL_GPIO_Init+0x13e>
 8005712:	4a8e      	ldr	r2, [pc, #568]	; (800594c <HAL_GPIO_Init+0x2b0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d046      	beq.n	80057a6 <HAL_GPIO_Init+0x10a>
 8005718:	4a8c      	ldr	r2, [pc, #560]	; (800594c <HAL_GPIO_Init+0x2b0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d85d      	bhi.n	80057da <HAL_GPIO_Init+0x13e>
 800571e:	2b12      	cmp	r3, #18
 8005720:	d82a      	bhi.n	8005778 <HAL_GPIO_Init+0xdc>
 8005722:	2b12      	cmp	r3, #18
 8005724:	d859      	bhi.n	80057da <HAL_GPIO_Init+0x13e>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <HAL_GPIO_Init+0x90>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	080057a7 	.word	0x080057a7
 8005730:	08005781 	.word	0x08005781
 8005734:	08005793 	.word	0x08005793
 8005738:	080057d5 	.word	0x080057d5
 800573c:	080057db 	.word	0x080057db
 8005740:	080057db 	.word	0x080057db
 8005744:	080057db 	.word	0x080057db
 8005748:	080057db 	.word	0x080057db
 800574c:	080057db 	.word	0x080057db
 8005750:	080057db 	.word	0x080057db
 8005754:	080057db 	.word	0x080057db
 8005758:	080057db 	.word	0x080057db
 800575c:	080057db 	.word	0x080057db
 8005760:	080057db 	.word	0x080057db
 8005764:	080057db 	.word	0x080057db
 8005768:	080057db 	.word	0x080057db
 800576c:	080057db 	.word	0x080057db
 8005770:	08005789 	.word	0x08005789
 8005774:	0800579d 	.word	0x0800579d
 8005778:	4a75      	ldr	r2, [pc, #468]	; (8005950 <HAL_GPIO_Init+0x2b4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800577e:	e02c      	b.n	80057da <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	623b      	str	r3, [r7, #32]
          break;
 8005786:	e029      	b.n	80057dc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	3304      	adds	r3, #4
 800578e:	623b      	str	r3, [r7, #32]
          break;
 8005790:	e024      	b.n	80057dc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	3308      	adds	r3, #8
 8005798:	623b      	str	r3, [r7, #32]
          break;
 800579a:	e01f      	b.n	80057dc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	330c      	adds	r3, #12
 80057a2:	623b      	str	r3, [r7, #32]
          break;
 80057a4:	e01a      	b.n	80057dc <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80057ae:	2304      	movs	r3, #4
 80057b0:	623b      	str	r3, [r7, #32]
          break;
 80057b2:	e013      	b.n	80057dc <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d105      	bne.n	80057c8 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057bc:	2308      	movs	r3, #8
 80057be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	611a      	str	r2, [r3, #16]
          break;
 80057c6:	e009      	b.n	80057dc <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057c8:	2308      	movs	r3, #8
 80057ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	615a      	str	r2, [r3, #20]
          break;
 80057d2:	e003      	b.n	80057dc <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057d4:	2300      	movs	r3, #0
 80057d6:	623b      	str	r3, [r7, #32]
          break;
 80057d8:	e000      	b.n	80057dc <HAL_GPIO_Init+0x140>
          break;
 80057da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2bff      	cmp	r3, #255	; 0xff
 80057e0:	d801      	bhi.n	80057e6 <HAL_GPIO_Init+0x14a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	e001      	b.n	80057ea <HAL_GPIO_Init+0x14e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2bff      	cmp	r3, #255	; 0xff
 80057f0:	d802      	bhi.n	80057f8 <HAL_GPIO_Init+0x15c>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	e002      	b.n	80057fe <HAL_GPIO_Init+0x162>
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	3b08      	subs	r3, #8
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	210f      	movs	r1, #15
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	fa01 f303 	lsl.w	r3, r1, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	401a      	ands	r2, r3
 8005810:	6a39      	ldr	r1, [r7, #32]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	fa01 f303 	lsl.w	r3, r1, r3
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80c1 	beq.w	80059ae <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800582c:	4b49      	ldr	r3, [pc, #292]	; (8005954 <HAL_GPIO_Init+0x2b8>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	4a48      	ldr	r2, [pc, #288]	; (8005954 <HAL_GPIO_Init+0x2b8>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6193      	str	r3, [r2, #24]
 8005838:	4b46      	ldr	r3, [pc, #280]	; (8005954 <HAL_GPIO_Init+0x2b8>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8005844:	4a44      	ldr	r2, [pc, #272]	; (8005958 <HAL_GPIO_Init+0x2bc>)
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	3302      	adds	r3, #2
 800584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005850:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	220f      	movs	r2, #15
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4013      	ands	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3c      	ldr	r2, [pc, #240]	; (800595c <HAL_GPIO_Init+0x2c0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d01f      	beq.n	80058b0 <HAL_GPIO_Init+0x214>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3b      	ldr	r2, [pc, #236]	; (8005960 <HAL_GPIO_Init+0x2c4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d019      	beq.n	80058ac <HAL_GPIO_Init+0x210>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3a      	ldr	r2, [pc, #232]	; (8005964 <HAL_GPIO_Init+0x2c8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <HAL_GPIO_Init+0x20c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a39      	ldr	r2, [pc, #228]	; (8005968 <HAL_GPIO_Init+0x2cc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00d      	beq.n	80058a4 <HAL_GPIO_Init+0x208>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a38      	ldr	r2, [pc, #224]	; (800596c <HAL_GPIO_Init+0x2d0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <HAL_GPIO_Init+0x204>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a37      	ldr	r2, [pc, #220]	; (8005970 <HAL_GPIO_Init+0x2d4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_GPIO_Init+0x200>
 8005898:	2305      	movs	r3, #5
 800589a:	e00a      	b.n	80058b2 <HAL_GPIO_Init+0x216>
 800589c:	2306      	movs	r3, #6
 800589e:	e008      	b.n	80058b2 <HAL_GPIO_Init+0x216>
 80058a0:	2304      	movs	r3, #4
 80058a2:	e006      	b.n	80058b2 <HAL_GPIO_Init+0x216>
 80058a4:	2303      	movs	r3, #3
 80058a6:	e004      	b.n	80058b2 <HAL_GPIO_Init+0x216>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e002      	b.n	80058b2 <HAL_GPIO_Init+0x216>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_GPIO_Init+0x216>
 80058b0:	2300      	movs	r3, #0
 80058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b4:	f002 0203 	and.w	r2, r2, #3
 80058b8:	0092      	lsls	r2, r2, #2
 80058ba:	4093      	lsls	r3, r2
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80058c2:	4925      	ldr	r1, [pc, #148]	; (8005958 <HAL_GPIO_Init+0x2bc>)
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	3302      	adds	r3, #2
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80058dc:	4b25      	ldr	r3, [pc, #148]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4924      	ldr	r1, [pc, #144]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
 80058e8:	e006      	b.n	80058f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80058ea:	4b22      	ldr	r3, [pc, #136]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	4920      	ldr	r1, [pc, #128]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d006      	beq.n	8005912 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005904:	4b1b      	ldr	r3, [pc, #108]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	491a      	ldr	r1, [pc, #104]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	604b      	str	r3, [r1, #4]
 8005910:	e006      	b.n	8005920 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005912:	4b18      	ldr	r3, [pc, #96]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	43db      	mvns	r3, r3
 800591a:	4916      	ldr	r1, [pc, #88]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 800591c:	4013      	ands	r3, r2
 800591e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d025      	beq.n	8005978 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	4910      	ldr	r1, [pc, #64]	; (8005974 <HAL_GPIO_Init+0x2d8>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	608b      	str	r3, [r1, #8]
 8005938:	e025      	b.n	8005986 <HAL_GPIO_Init+0x2ea>
 800593a:	bf00      	nop
 800593c:	10320000 	.word	0x10320000
 8005940:	10310000 	.word	0x10310000
 8005944:	10220000 	.word	0x10220000
 8005948:	10210000 	.word	0x10210000
 800594c:	10120000 	.word	0x10120000
 8005950:	10110000 	.word	0x10110000
 8005954:	40021000 	.word	0x40021000
 8005958:	40010000 	.word	0x40010000
 800595c:	40010800 	.word	0x40010800
 8005960:	40010c00 	.word	0x40010c00
 8005964:	40011000 	.word	0x40011000
 8005968:	40011400 	.word	0x40011400
 800596c:	40011800 	.word	0x40011800
 8005970:	40011c00 	.word	0x40011c00
 8005974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005978:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <HAL_GPIO_Init+0x32c>)
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	43db      	mvns	r3, r3
 8005980:	4911      	ldr	r1, [pc, #68]	; (80059c8 <HAL_GPIO_Init+0x32c>)
 8005982:	4013      	ands	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d006      	beq.n	80059a0 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <HAL_GPIO_Init+0x32c>)
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	490c      	ldr	r1, [pc, #48]	; (80059c8 <HAL_GPIO_Init+0x32c>)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	4313      	orrs	r3, r2
 800599c:	60cb      	str	r3, [r1, #12]
 800599e:	e006      	b.n	80059ae <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80059a0:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_GPIO_Init+0x32c>)
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	43db      	mvns	r3, r3
 80059a8:	4907      	ldr	r1, [pc, #28]	; (80059c8 <HAL_GPIO_Init+0x32c>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	3301      	adds	r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	2b0f      	cmp	r3, #15
 80059b8:	f67f ae82 	bls.w	80056c0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	372c      	adds	r7, #44	; 0x2c
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	40010400 	.word	0x40010400

080059cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	887b      	ldrh	r3, [r7, #2]
 80059de:	4013      	ands	r3, r2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	e001      	b.n	80059ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	807b      	strh	r3, [r7, #2]
 8005a06:	4613      	mov	r3, r2
 8005a08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a0a:	787b      	ldrb	r3, [r7, #1]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a10:	887a      	ldrh	r2, [r7, #2]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a16:	e003      	b.n	8005a20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a18:	887b      	ldrh	r3, [r7, #2]
 8005a1a:	041a      	lsls	r2, r3, #16
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	611a      	str	r2, [r3, #16]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f806 	bl	8005a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40010400 	.word	0x40010400

08005a5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8087 	beq.w	8005b98 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a8a:	4b92      	ldr	r3, [pc, #584]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d00c      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a96:	4b8f      	ldr	r3, [pc, #572]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d112      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x58>
 8005aa2:	4b8c      	ldr	r3, [pc, #560]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aae:	d10b      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab0:	4b88      	ldr	r3, [pc, #544]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d06c      	beq.n	8005b96 <HAL_RCC_OscConfig+0x126>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d168      	bne.n	8005b96 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e22d      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d106      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x70>
 8005ad2:	4b80      	ldr	r3, [pc, #512]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a7f      	ldr	r2, [pc, #508]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e02e      	b.n	8005b3e <HAL_RCC_OscConfig+0xce>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10c      	bne.n	8005b02 <HAL_RCC_OscConfig+0x92>
 8005ae8:	4b7a      	ldr	r3, [pc, #488]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a79      	ldr	r2, [pc, #484]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	4b77      	ldr	r3, [pc, #476]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a76      	ldr	r2, [pc, #472]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	e01d      	b.n	8005b3e <HAL_RCC_OscConfig+0xce>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b0a:	d10c      	bne.n	8005b26 <HAL_RCC_OscConfig+0xb6>
 8005b0c:	4b71      	ldr	r3, [pc, #452]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a70      	ldr	r2, [pc, #448]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b6e      	ldr	r3, [pc, #440]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a6d      	ldr	r2, [pc, #436]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e00b      	b.n	8005b3e <HAL_RCC_OscConfig+0xce>
 8005b26:	4b6b      	ldr	r3, [pc, #428]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6a      	ldr	r2, [pc, #424]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	4b68      	ldr	r3, [pc, #416]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a67      	ldr	r2, [pc, #412]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b3c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d013      	beq.n	8005b6e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b46:	f7ff f971 	bl	8004e2c <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b4e:	f7ff f96d 	bl	8004e2c <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b64      	cmp	r3, #100	; 0x64
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e1e1      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b60:	4b5c      	ldr	r3, [pc, #368]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0xde>
 8005b6c:	e014      	b.n	8005b98 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6e:	f7ff f95d 	bl	8004e2c <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b76:	f7ff f959 	bl	8004e2c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b64      	cmp	r3, #100	; 0x64
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e1cd      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b88:	4b52      	ldr	r3, [pc, #328]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <HAL_RCC_OscConfig+0x106>
 8005b94:	e000      	b.n	8005b98 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d063      	beq.n	8005c6c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ba4:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f003 030c 	and.w	r3, r3, #12
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005bb0:	4b48      	ldr	r3, [pc, #288]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f003 030c 	and.w	r3, r3, #12
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d11c      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x186>
 8005bbc:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d116      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc8:	4b42      	ldr	r3, [pc, #264]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_RCC_OscConfig+0x170>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e1a1      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be0:	4b3c      	ldr	r3, [pc, #240]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4939      	ldr	r1, [pc, #228]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf4:	e03a      	b.n	8005c6c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bfe:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <HAL_RCC_OscConfig+0x268>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7ff f912 	bl	8004e2c <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c0c:	f7ff f90e 	bl	8004e2c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e182      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1e:	4b2d      	ldr	r3, [pc, #180]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2a:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4926      	ldr	r1, [pc, #152]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]
 8005c3e:	e015      	b.n	8005c6c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <HAL_RCC_OscConfig+0x268>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7ff f8f1 	bl	8004e2c <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c4e:	f7ff f8ed 	bl	8004e2c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e161      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c60:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f0      	bne.n	8005c4e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d039      	beq.n	8005cec <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d019      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c80:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <HAL_RCC_OscConfig+0x26c>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c86:	f7ff f8d1 	bl	8004e2c <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c8e:	f7ff f8cd 	bl	8004e2c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e141      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <HAL_RCC_OscConfig+0x264>)
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8005cac:	2001      	movs	r0, #1
 8005cae:	f000 fadf 	bl	8006270 <RCC_Delay>
 8005cb2:	e01b      	b.n	8005cec <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb4:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <HAL_RCC_OscConfig+0x26c>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cba:	f7ff f8b7 	bl	8004e2c <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc0:	e00e      	b.n	8005ce0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cc2:	f7ff f8b3 	bl	8004e2c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d907      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e127      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	42420000 	.word	0x42420000
 8005cdc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce0:	4b92      	ldr	r3, [pc, #584]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1ea      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80a6 	beq.w	8005e46 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cfe:	4b8b      	ldr	r3, [pc, #556]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10d      	bne.n	8005d26 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	4b88      	ldr	r3, [pc, #544]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4a87      	ldr	r2, [pc, #540]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	61d3      	str	r3, [r2, #28]
 8005d16:	4b85      	ldr	r3, [pc, #532]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d26:	4b82      	ldr	r3, [pc, #520]	; (8005f30 <HAL_RCC_OscConfig+0x4c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d118      	bne.n	8005d64 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d32:	4b7f      	ldr	r3, [pc, #508]	; (8005f30 <HAL_RCC_OscConfig+0x4c0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a7e      	ldr	r2, [pc, #504]	; (8005f30 <HAL_RCC_OscConfig+0x4c0>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d3e:	f7ff f875 	bl	8004e2c <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7ff f871 	bl	8004e2c <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b64      	cmp	r3, #100	; 0x64
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e0e5      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	4b75      	ldr	r3, [pc, #468]	; (8005f30 <HAL_RCC_OscConfig+0x4c0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCC_OscConfig+0x30a>
 8005d6c:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	4a6e      	ldr	r2, [pc, #440]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	6213      	str	r3, [r2, #32]
 8005d78:	e02d      	b.n	8005dd6 <HAL_RCC_OscConfig+0x366>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x32c>
 8005d82:	4b6a      	ldr	r3, [pc, #424]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	4a69      	ldr	r2, [pc, #420]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	6213      	str	r3, [r2, #32]
 8005d8e:	4b67      	ldr	r3, [pc, #412]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	4a66      	ldr	r2, [pc, #408]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	6213      	str	r3, [r2, #32]
 8005d9a:	e01c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x366>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCC_OscConfig+0x34e>
 8005da4:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	4a60      	ldr	r2, [pc, #384]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005daa:	f043 0304 	orr.w	r3, r3, #4
 8005dae:	6213      	str	r3, [r2, #32]
 8005db0:	4b5e      	ldr	r3, [pc, #376]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4a5d      	ldr	r2, [pc, #372]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6213      	str	r3, [r2, #32]
 8005dbc:	e00b      	b.n	8005dd6 <HAL_RCC_OscConfig+0x366>
 8005dbe:	4b5b      	ldr	r3, [pc, #364]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a5a      	ldr	r2, [pc, #360]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	6213      	str	r3, [r2, #32]
 8005dca:	4b58      	ldr	r3, [pc, #352]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	4a57      	ldr	r2, [pc, #348]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005dd0:	f023 0304 	bic.w	r3, r3, #4
 8005dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dde:	f7ff f825 	bl	8004e2c <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7ff f821 	bl	8004e2c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e093      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0ee      	beq.n	8005de6 <HAL_RCC_OscConfig+0x376>
 8005e08:	e014      	b.n	8005e34 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e0a:	f7ff f80f 	bl	8004e2c <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7ff f80b 	bl	8004e2c <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e07d      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e28:	4b40      	ldr	r3, [pc, #256]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1ee      	bne.n	8005e12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d105      	bne.n	8005e46 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3a:	4b3c      	ldr	r3, [pc, #240]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	4a3b      	ldr	r2, [pc, #236]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d069      	beq.n	8005f22 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e4e:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d061      	beq.n	8005f1e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d146      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b34      	ldr	r3, [pc, #208]	; (8005f34 <HAL_RCC_OscConfig+0x4c4>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fe ffe0 	bl	8004e2c <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fe ffdc 	bl	8004e2c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e050      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e82:	4b2a      	ldr	r3, [pc, #168]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e96:	d108      	bne.n	8005eaa <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e98:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	4921      	ldr	r1, [pc, #132]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eaa:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a19      	ldr	r1, [r3, #32]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	491b      	ldr	r1, [pc, #108]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <HAL_RCC_OscConfig+0x4c4>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fe ffb0 	bl	8004e2c <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fe ffac 	bl	8004e2c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e020      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x460>
 8005eee:	e018      	b.n	8005f22 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <HAL_RCC_OscConfig+0x4c4>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef6:	f7fe ff99 	bl	8004e2c <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efe:	f7fe ff95 	bl	8004e2c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e009      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <HAL_RCC_OscConfig+0x4bc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f0      	bne.n	8005efe <HAL_RCC_OscConfig+0x48e>
 8005f1c:	e001      	b.n	8005f22 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40007000 	.word	0x40007000
 8005f34:	42420060 	.word	0x42420060

08005f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005f46:	4b7e      	ldr	r3, [pc, #504]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d910      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f54:	4b7a      	ldr	r3, [pc, #488]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 0207 	bic.w	r2, r3, #7
 8005f5c:	4978      	ldr	r1, [pc, #480]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f64:	4b76      	ldr	r3, [pc, #472]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e0e0      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d020      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f8e:	4b6d      	ldr	r3, [pc, #436]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4a6c      	ldr	r2, [pc, #432]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005f94:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f98:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fa6:	4b67      	ldr	r3, [pc, #412]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4a66      	ldr	r2, [pc, #408]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005fac:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fb0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb2:	4b64      	ldr	r3, [pc, #400]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	4961      	ldr	r1, [pc, #388]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d06a      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d107      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd8:	4b5a      	ldr	r3, [pc, #360]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d115      	bne.n	8006010 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0a7      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d107      	bne.n	8006000 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff0:	4b54      	ldr	r3, [pc, #336]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09b      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006000:	4b50      	ldr	r3, [pc, #320]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e093      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006010:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 0203 	bic.w	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4949      	ldr	r1, [pc, #292]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006022:	f7fe ff03 	bl	8004e2c <HAL_GetTick>
 8006026:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d112      	bne.n	8006056 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006030:	e00a      	b.n	8006048 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006032:	f7fe fefb 	bl	8004e2c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006040:	4293      	cmp	r3, r2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e077      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006048:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b04      	cmp	r3, #4
 8006052:	d1ee      	bne.n	8006032 <HAL_RCC_ClockConfig+0xfa>
 8006054:	e027      	b.n	80060a6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d11d      	bne.n	800609a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800605e:	e00a      	b.n	8006076 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006060:	f7fe fee4 	bl	8004e2c <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f241 3288 	movw	r2, #5000	; 0x1388
 800606e:	4293      	cmp	r3, r2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e060      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006076:	4b33      	ldr	r3, [pc, #204]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 030c 	and.w	r3, r3, #12
 800607e:	2b08      	cmp	r3, #8
 8006080:	d1ee      	bne.n	8006060 <HAL_RCC_ClockConfig+0x128>
 8006082:	e010      	b.n	80060a6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006084:	f7fe fed2 	bl	8004e2c <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e04e      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800609a:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f003 030c 	and.w	r3, r3, #12
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1ee      	bne.n	8006084 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80060a6:	4b26      	ldr	r3, [pc, #152]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d210      	bcs.n	80060d6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b4:	4b22      	ldr	r3, [pc, #136]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f023 0207 	bic.w	r2, r3, #7
 80060bc:	4920      	ldr	r1, [pc, #128]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80060c4:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <HAL_RCC_ClockConfig+0x208>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d001      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e030      	b.n	8006138 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e2:	4b18      	ldr	r3, [pc, #96]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	4915      	ldr	r1, [pc, #84]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006100:	4b10      	ldr	r3, [pc, #64]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	490d      	ldr	r1, [pc, #52]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 8006110:	4313      	orrs	r3, r2
 8006112:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006114:	f000 f81c 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <HAL_RCC_ClockConfig+0x20c>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	4908      	ldr	r1, [pc, #32]	; (8006148 <HAL_RCC_ClockConfig+0x210>)
 8006126:	5ccb      	ldrb	r3, [r1, r3]
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
 800612c:	4a07      	ldr	r2, [pc, #28]	; (800614c <HAL_RCC_ClockConfig+0x214>)
 800612e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006130:	2000      	movs	r0, #0
 8006132:	f7fe fe39 	bl	8004da8 <HAL_InitTick>
  
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40022000 	.word	0x40022000
 8006144:	40021000 	.word	0x40021000
 8006148:	08008668 	.word	0x08008668
 800614c:	20000004 	.word	0x20000004

08006150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006150:	b490      	push	{r4, r7}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <HAL_RCC_GetSysClockFreq+0xac>)
 8006158:	1d3c      	adds	r4, r7, #4
 800615a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800615c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006160:	f240 2301 	movw	r3, #513	; 0x201
 8006164:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	2300      	movs	r3, #0
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	2300      	movs	r3, #0
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800617a:	4b21      	ldr	r3, [pc, #132]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb0>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f003 030c 	and.w	r3, r3, #12
 8006186:	2b04      	cmp	r3, #4
 8006188:	d002      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x40>
 800618a:	2b08      	cmp	r3, #8
 800618c:	d003      	beq.n	8006196 <HAL_RCC_GetSysClockFreq+0x46>
 800618e:	e02b      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006190:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006192:	623b      	str	r3, [r7, #32]
      break;
 8006194:	e02b      	b.n	80061ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	0c9b      	lsrs	r3, r3, #18
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	3328      	adds	r3, #40	; 0x28
 80061a0:	443b      	add	r3, r7
 80061a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80061a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d012      	beq.n	80061d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061b2:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_RCC_GetSysClockFreq+0xb0>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	0c5b      	lsrs	r3, r3, #17
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	3328      	adds	r3, #40	; 0x28
 80061be:	443b      	add	r3, r7
 80061c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061c4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4a0e      	ldr	r2, [pc, #56]	; (8006204 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061ca:	fb03 f202 	mul.w	r2, r3, r2
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
 80061d6:	e004      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061dc:	fb02 f303 	mul.w	r3, r2, r3
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	623b      	str	r3, [r7, #32]
      break;
 80061e6:	e002      	b.n	80061ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061ea:	623b      	str	r3, [r7, #32]
      break;
 80061ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3728      	adds	r7, #40	; 0x28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc90      	pop	{r4, r7}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	08007fe4 	.word	0x08007fe4
 8006200:	40021000 	.word	0x40021000
 8006204:	007a1200 	.word	0x007a1200
 8006208:	003d0900 	.word	0x003d0900

0800620c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006210:	4b02      	ldr	r3, [pc, #8]	; (800621c <HAL_RCC_GetHCLKFreq+0x10>)
 8006212:	681b      	ldr	r3, [r3, #0]
}
 8006214:	4618      	mov	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr
 800621c:	20000004 	.word	0x20000004

08006220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006224:	f7ff fff2 	bl	800620c <HAL_RCC_GetHCLKFreq>
 8006228:	4602      	mov	r2, r0
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4903      	ldr	r1, [pc, #12]	; (8006244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006236:	5ccb      	ldrb	r3, [r1, r3]
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
}    
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000
 8006244:	08008678 	.word	0x08008678

08006248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800624c:	f7ff ffde 	bl	800620c <HAL_RCC_GetHCLKFreq>
 8006250:	4602      	mov	r2, r0
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	0adb      	lsrs	r3, r3, #11
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	4903      	ldr	r1, [pc, #12]	; (800626c <HAL_RCC_GetPCLK2Freq+0x24>)
 800625e:	5ccb      	ldrb	r3, [r1, r3]
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40021000 	.word	0x40021000
 800626c:	08008678 	.word	0x08008678

08006270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <RCC_Delay+0x38>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a0b      	ldr	r2, [pc, #44]	; (80062ac <RCC_Delay+0x3c>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	0a5b      	lsrs	r3, r3, #9
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800628c:	bf00      	nop
}
 800628e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1e5a      	subs	r2, r3, #1
 8006294:	60fa      	str	r2, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f8      	bne.n	800628c <RCC_Delay+0x1c>
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000004 	.word	0x20000004
 80062ac:	10624dd3 	.word	0x10624dd3

080062b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d07d      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80062cc:	2300      	movs	r3, #0
 80062ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062d0:	4b4f      	ldr	r3, [pc, #316]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10d      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062dc:	4b4c      	ldr	r3, [pc, #304]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	4a4b      	ldr	r2, [pc, #300]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e6:	61d3      	str	r3, [r2, #28]
 80062e8:	4b49      	ldr	r3, [pc, #292]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062f4:	2301      	movs	r3, #1
 80062f6:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f8:	4b46      	ldr	r3, [pc, #280]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d118      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006304:	4b43      	ldr	r3, [pc, #268]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a42      	ldr	r2, [pc, #264]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800630a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006310:	f7fe fd8c 	bl	8004e2c <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006316:	e008      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006318:	f7fe fd88 	bl	8004e2c <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b64      	cmp	r3, #100	; 0x64
 8006324:	d901      	bls.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e06d      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632a:	4b3a      	ldr	r3, [pc, #232]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f0      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006336:	4b36      	ldr	r3, [pc, #216]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d02e      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	429a      	cmp	r2, r3
 8006352:	d027      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006354:	4b2e      	ldr	r3, [pc, #184]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800635e:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006360:	2201      	movs	r2, #1
 8006362:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006364:	4b2c      	ldr	r3, [pc, #176]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800636a:	4a29      	ldr	r2, [pc, #164]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d014      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637a:	f7fe fd57 	bl	8004e2c <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006380:	e00a      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fe fd53 	bl	8004e2c <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006390:	4293      	cmp	r3, r2
 8006392:	d901      	bls.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e036      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0ee      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4917      	ldr	r1, [pc, #92]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d105      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063d4:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	490b      	ldr	r1, [pc, #44]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	4904      	ldr	r1, [pc, #16]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006400:	4313      	orrs	r3, r2
 8006402:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40021000 	.word	0x40021000
 8006414:	40007000 	.word	0x40007000
 8006418:	42420440 	.word	0x42420440

0800641c <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e034      	b.n	800649c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7fa ffae 	bl	80013a8 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3308      	adds	r3, #8
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f001 fc04 	bl	8007c64 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	461a      	mov	r2, r3
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	f001 fc7c 	bl	8007d64 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6858      	ldr	r0, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	f001 fca7 	bl	8007dcc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	6892      	ldr	r2, [r2, #8]
 8006486:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	6892      	ldr	r2, [r2, #8]
 8006492:	f041 0101 	orr.w	r1, r1, #1
 8006496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e01d      	b.n	80064f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fd ffac 	bl	8004428 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f000 fbac 	bl	8006c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	f241 1311 	movw	r3, #4369	; 0x1111
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10f      	bne.n	800656e <HAL_TIM_Base_Stop+0x40>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6a1a      	ldr	r2, [r3, #32]
 8006554:	f240 4344 	movw	r3, #1092	; 0x444
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d107      	bne.n	800656e <HAL_TIM_Base_Stop+0x40>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0201 	bic.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0201 	orr.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0201 	bic.w	r2, r2, #1
 80065cc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10f      	bne.n	80065fe <HAL_TIM_Base_Stop_IT+0x48>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	f240 4344 	movw	r3, #1092	; 0x444
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d107      	bne.n	80065fe <HAL_TIM_Base_Stop_IT+0x48>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0201 	bic.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e01d      	b.n	8006658 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d106      	bne.n	8006636 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f815 	bl	8006660 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3304      	adds	r3, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f000 faf9 	bl	8006c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b02      	cmp	r3, #2
 8006686:	d122      	bne.n	80066ce <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b02      	cmp	r3, #2
 8006694:	d11b      	bne.n	80066ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f06f 0202 	mvn.w	r2, #2
 800669e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 faa8 	bl	8006c0a <HAL_TIM_IC_CaptureCallback>
 80066ba:	e005      	b.n	80066c8 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa9b 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 faaa 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d122      	bne.n	8006722 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d11b      	bne.n	8006722 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f06f 0204 	mvn.w	r2, #4
 80066f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fa7e 	bl	8006c0a <HAL_TIM_IC_CaptureCallback>
 800670e:	e005      	b.n	800671c <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa71 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa80 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d122      	bne.n	8006776 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b08      	cmp	r3, #8
 800673c:	d11b      	bne.n	8006776 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0208 	mvn.w	r2, #8
 8006746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2204      	movs	r2, #4
 800674c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fa54 	bl	8006c0a <HAL_TIM_IC_CaptureCallback>
 8006762:	e005      	b.n	8006770 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa47 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa56 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b10      	cmp	r3, #16
 8006782:	d122      	bne.n	80067ca <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b10      	cmp	r3, #16
 8006790:	d11b      	bne.n	80067ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0210 	mvn.w	r2, #16
 800679a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2208      	movs	r2, #8
 80067a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa2a 	bl	8006c0a <HAL_TIM_IC_CaptureCallback>
 80067b6:	e005      	b.n	80067c4 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa1d 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa2c 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10e      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0201 	mvn.w	r2, #1
 80067ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f9f8 	bl	8006be6 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006800:	2b80      	cmp	r3, #128	; 0x80
 8006802:	d10e      	bne.n	8006822 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	2b80      	cmp	r3, #128	; 0x80
 8006810:	d107      	bne.n	8006822 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800681a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fd9b 	bl	8007358 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d10e      	bne.n	800684e <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d107      	bne.n	800684e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006846:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f9f0 	bl	8006c2e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b20      	cmp	r3, #32
 800685a:	d10e      	bne.n	800687a <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b20      	cmp	r3, #32
 8006868:	d107      	bne.n	800687a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f06f 0220 	mvn.w	r2, #32
 8006872:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fd66 	bl	8007346 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800689a:	2302      	movs	r3, #2
 800689c:	e0b4      	b.n	8006a08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b0c      	cmp	r3, #12
 80068b2:	f200 809f 	bhi.w	80069f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068f1 	.word	0x080068f1
 80068c0:	080069f5 	.word	0x080069f5
 80068c4:	080069f5 	.word	0x080069f5
 80068c8:	080069f5 	.word	0x080069f5
 80068cc:	08006931 	.word	0x08006931
 80068d0:	080069f5 	.word	0x080069f5
 80068d4:	080069f5 	.word	0x080069f5
 80068d8:	080069f5 	.word	0x080069f5
 80068dc:	08006973 	.word	0x08006973
 80068e0:	080069f5 	.word	0x080069f5
 80068e4:	080069f5 	.word	0x080069f5
 80068e8:	080069f5 	.word	0x080069f5
 80068ec:	080069b3 	.word	0x080069b3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fa20 	bl	8006d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0208 	orr.w	r2, r2, #8
 800690a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0204 	bic.w	r2, r2, #4
 800691a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6999      	ldr	r1, [r3, #24]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	619a      	str	r2, [r3, #24]
    }
    break;
 800692e:	e062      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fa76 	bl	8006e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800694a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6999      	ldr	r1, [r3, #24]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	021a      	lsls	r2, r3, #8
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	619a      	str	r2, [r3, #24]
    }
    break;
 8006970:	e041      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	4618      	mov	r0, r3
 800697a:	f000 facf 	bl	8006f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0208 	orr.w	r2, r2, #8
 800698c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69da      	ldr	r2, [r3, #28]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0204 	bic.w	r2, r2, #4
 800699c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69d9      	ldr	r1, [r3, #28]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	61da      	str	r2, [r3, #28]
    }
    break;
 80069b0:	e021      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fb29 	bl	8007010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069cc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69d9      	ldr	r1, [r3, #28]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	021a      	lsls	r2, r3, #8
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	61da      	str	r2, [r3, #28]
    }
    break;
 80069f2:	e000      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80069f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIM_ConfigClockSource+0x1c>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e0d8      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x1ce>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a64:	d052      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0xfc>
 8006a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6a:	f200 80ae 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d027      	beq.n	8006ac4 <HAL_TIM_ConfigClockSource+0xb4>
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a78:	f200 80a7 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006a7c:	2b70      	cmp	r3, #112	; 0x70
 8006a7e:	d02a      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0xc6>
 8006a80:	2b70      	cmp	r3, #112	; 0x70
 8006a82:	f200 80a2 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006a86:	2b60      	cmp	r3, #96	; 0x60
 8006a88:	d063      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x142>
 8006a8a:	2b60      	cmp	r3, #96	; 0x60
 8006a8c:	f200 809d 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006a90:	2b50      	cmp	r3, #80	; 0x50
 8006a92:	d04e      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x122>
 8006a94:	2b50      	cmp	r3, #80	; 0x50
 8006a96:	f200 8098 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d069      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x162>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	f200 8093 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006aa4:	2b30      	cmp	r3, #48	; 0x30
 8006aa6:	f000 8089 	beq.w	8006bbc <HAL_TIM_ConfigClockSource+0x1ac>
 8006aaa:	2b30      	cmp	r3, #48	; 0x30
 8006aac:	f200 808d 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d07c      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x19e>
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	f200 8088 	bhi.w	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d069      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x182>
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d06e      	beq.n	8006ba0 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8006ac2:	e082      	b.n	8006bca <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0207 	bic.w	r2, r2, #7
 8006ad2:	609a      	str	r2, [r3, #8]
    break;
 8006ad4:	e07a      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f000 fb71 	bl	80071cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006af8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	609a      	str	r2, [r3, #8]
    break;
 8006b0a:	e05f      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6899      	ldr	r1, [r3, #8]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f000 fb56 	bl	80071cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b2e:	609a      	str	r2, [r3, #8]
    break;
 8006b30:	e04c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f000 fac0 	bl	80070c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2150      	movs	r1, #80	; 0x50
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fb1f 	bl	800718e <TIM_ITRx_SetConfig>
    break;
 8006b50:	e03c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 fae2 	bl	8007128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2160      	movs	r1, #96	; 0x60
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fb0f 	bl	800718e <TIM_ITRx_SetConfig>
    break;
 8006b70:	e02c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 faa0 	bl	80070c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2140      	movs	r1, #64	; 0x40
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 faff 	bl	800718e <TIM_ITRx_SetConfig>
    break;
 8006b90:	e01c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 faf8 	bl	800718e <TIM_ITRx_SetConfig>
    break;
 8006b9e:	e015      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2110      	movs	r1, #16
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 faf1 	bl	800718e <TIM_ITRx_SetConfig>
    break;
 8006bac:	e00e      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2120      	movs	r1, #32
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 faea 	bl	800718e <TIM_ITRx_SetConfig>
    break;
 8006bba:	e007      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2130      	movs	r1, #48	; 0x30
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fae3 	bl	800718e <TIM_ITRx_SetConfig>
    break;
 8006bc8:	e000      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8006bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bc80      	pop	{r7}
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a34      	ldr	r2, [pc, #208]	; (8006d28 <TIM_Base_SetConfig+0xe8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <TIM_Base_SetConfig+0x44>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a33      	ldr	r2, [pc, #204]	; (8006d2c <TIM_Base_SetConfig+0xec>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00f      	beq.n	8006c84 <TIM_Base_SetConfig+0x44>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6a:	d00b      	beq.n	8006c84 <TIM_Base_SetConfig+0x44>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a30      	ldr	r2, [pc, #192]	; (8006d30 <TIM_Base_SetConfig+0xf0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_Base_SetConfig+0x44>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a2f      	ldr	r2, [pc, #188]	; (8006d34 <TIM_Base_SetConfig+0xf4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0x44>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a2e      	ldr	r2, [pc, #184]	; (8006d38 <TIM_Base_SetConfig+0xf8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a23      	ldr	r2, [pc, #140]	; (8006d28 <TIM_Base_SetConfig+0xe8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <TIM_Base_SetConfig+0x86>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <TIM_Base_SetConfig+0xec>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00f      	beq.n	8006cc6 <TIM_Base_SetConfig+0x86>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cac:	d00b      	beq.n	8006cc6 <TIM_Base_SetConfig+0x86>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <TIM_Base_SetConfig+0xf0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <TIM_Base_SetConfig+0x86>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a1e      	ldr	r2, [pc, #120]	; (8006d34 <TIM_Base_SetConfig+0xf4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_Base_SetConfig+0x86>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <TIM_Base_SetConfig+0xf8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d108      	bne.n	8006cd8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cde:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a09      	ldr	r2, [pc, #36]	; (8006d28 <TIM_Base_SetConfig+0xe8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_Base_SetConfig+0xd0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <TIM_Base_SetConfig+0xec>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d103      	bne.n	8006d18 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	615a      	str	r2, [r3, #20]
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00

08006d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f023 0201 	bic.w	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f023 0302 	bic.w	r3, r3, #2
 8006d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a20      	ldr	r2, [pc, #128]	; (8006e20 <TIM_OC1_SetConfig+0xe4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_OC1_SetConfig+0x70>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a1f      	ldr	r2, [pc, #124]	; (8006e24 <TIM_OC1_SetConfig+0xe8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d10c      	bne.n	8006dc6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f023 0308 	bic.w	r3, r3, #8
 8006db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f023 0304 	bic.w	r3, r3, #4
 8006dc4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <TIM_OC1_SetConfig+0xe4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d003      	beq.n	8006dd6 <TIM_OC1_SetConfig+0x9a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <TIM_OC1_SetConfig+0xe8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d111      	bne.n	8006dfa <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	621a      	str	r2, [r3, #32]
}
 8006e14:	bf00      	nop
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40013400 	.word	0x40013400

08006e28 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f023 0210 	bic.w	r2, r3, #16
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f023 0320 	bic.w	r3, r3, #32
 8006e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <TIM_OC2_SetConfig+0xec>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d003      	beq.n	8006e9c <TIM_OC2_SetConfig+0x74>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a20      	ldr	r2, [pc, #128]	; (8006f18 <TIM_OC2_SetConfig+0xf0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d10d      	bne.n	8006eb8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb6:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <TIM_OC2_SetConfig+0xec>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d003      	beq.n	8006ec8 <TIM_OC2_SetConfig+0xa0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <TIM_OC2_SetConfig+0xf0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d113      	bne.n	8006ef0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	621a      	str	r2, [r3, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400

08006f1c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0303 	bic.w	r3, r3, #3
 8006f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a21      	ldr	r2, [pc, #132]	; (8007008 <TIM_OC3_SetConfig+0xec>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_OC3_SetConfig+0x72>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a20      	ldr	r2, [pc, #128]	; (800700c <TIM_OC3_SetConfig+0xf0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d10d      	bne.n	8006faa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fa8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a16      	ldr	r2, [pc, #88]	; (8007008 <TIM_OC3_SetConfig+0xec>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d003      	beq.n	8006fba <TIM_OC3_SetConfig+0x9e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a15      	ldr	r2, [pc, #84]	; (800700c <TIM_OC3_SetConfig+0xf0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d113      	bne.n	8006fe2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	621a      	str	r2, [r3, #32]
}
 8006ffc:	bf00      	nop
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40013400 	.word	0x40013400

08007010 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007052:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007066:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a11      	ldr	r2, [pc, #68]	; (80070bc <TIM_OC4_SetConfig+0xac>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_OC4_SetConfig+0x74>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a10      	ldr	r2, [pc, #64]	; (80070c0 <TIM_OC4_SetConfig+0xb0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d109      	bne.n	8007098 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	019b      	lsls	r3, r3, #6
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40013400 	.word	0x40013400

080070c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f023 0201 	bic.w	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f023 030a 	bic.w	r3, r3, #10
 8007108:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f023 0210 	bic.w	r2, r3, #16
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800715a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	031b      	lsls	r3, r3, #12
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800716c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	621a      	str	r2, [r3, #32]
}
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071aa:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80071ac:	887b      	ldrh	r3, [r7, #2]
 80071ae:	f043 0307 	orr.w	r3, r3, #7
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	609a      	str	r2, [r3, #8]
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr

080071cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	021a      	lsls	r2, r3, #8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	609a      	str	r2, [r3, #8]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr

0800720e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007226:	2302      	movs	r3, #2
 8007228:	e044      	b.n	80072b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr

080072be <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d101      	bne.n	80072d6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e032      	b.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072f4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6859      	ldr	r1, [r3, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007316:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6899      	ldr	r1, [r3, #8]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr

0800736a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e03f      	b.n	80073fc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d106      	bne.n	8007396 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fd f997 	bl	80046c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2224      	movs	r2, #36	; 0x24
 800739a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ac:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fb40 	bl	8007a34 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	695a      	ldr	r2, [r3, #20]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073d2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073e2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af02      	add	r7, sp, #8
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b20      	cmp	r3, #32
 8007422:	f040 8083 	bne.w	800752c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_UART_Transmit+0x2e>
 800742c:	88fb      	ldrh	r3, [r7, #6]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e07b      	b.n	800752e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_UART_Transmit+0x40>
 8007440:	2302      	movs	r3, #2
 8007442:	e074      	b.n	800752e <HAL_UART_Transmit+0x12a>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2221      	movs	r2, #33	; 0x21
 8007456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800745a:	f7fd fce7 	bl	8004e2c <HAL_GetTick>
 800745e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	88fa      	ldrh	r2, [r7, #6]
 8007464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	88fa      	ldrh	r2, [r7, #6]
 800746a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800746c:	e042      	b.n	80074f4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007484:	d122      	bne.n	80074cc <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2200      	movs	r2, #0
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f966 	bl	8007762 <UART_WaitOnFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e046      	b.n	800752e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074b2:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	3302      	adds	r3, #2
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	e017      	b.n	80074f4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	e013      	b.n	80074f4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2200      	movs	r2, #0
 80074d4:	2180      	movs	r1, #128	; 0x80
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f943 	bl	8007762 <UART_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e023      	b.n	800752e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	60ba      	str	r2, [r7, #8]
 80074ec:	781a      	ldrb	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1b7      	bne.n	800746e <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2200      	movs	r2, #0
 8007506:	2140      	movs	r1, #64	; 0x40
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 f92a 	bl	8007762 <UART_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e00a      	b.n	800752e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	e000      	b.n	800752e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8007558:	2300      	movs	r3, #0
 800755a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10d      	bne.n	800758a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <HAL_UART_IRQHandler+0x52>
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f9d5 	bl	8007932 <UART_Receive_IT>
      return;
 8007588:	e0cb      	b.n	8007722 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80ab 	beq.w	80076e8 <HAL_UART_IRQHandler+0x1b0>
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <HAL_UART_IRQHandler+0x70>
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80a0 	beq.w	80076e8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <HAL_UART_IRQHandler+0x90>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c0:	f043 0201 	orr.w	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <HAL_UART_IRQHandler+0xb0>
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e0:	f043 0202 	orr.w	r2, r3, #2
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <HAL_UART_IRQHandler+0xd0>
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007600:	f043 0204 	orr.w	r2, r3, #4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_UART_IRQHandler+0xf0>
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	f043 0208 	orr.w	r2, r3, #8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d077      	beq.n	8007720 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <HAL_UART_IRQHandler+0x112>
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f974 	bl	8007932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <HAL_UART_IRQHandler+0x13a>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d031      	beq.n	80076d6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f8bf 	bl	80077f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d023      	beq.n	80076ce <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007694:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	d013      	beq.n	80076c6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a2:	4a21      	ldr	r2, [pc, #132]	; (8007728 <HAL_UART_IRQHandler+0x1f0>)
 80076a4:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fd feee 	bl	800548c <HAL_DMA_Abort_IT>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d016      	beq.n	80076e4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c4:	e00e      	b.n	80076e4 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f842 	bl	8007750 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	e00a      	b.n	80076e4 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f83e 	bl	8007750 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	e006      	b.n	80076e4 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f83a 	bl	8007750 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80076e2:	e01d      	b.n	8007720 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	bf00      	nop
    return;
 80076e6:	e01b      	b.n	8007720 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_UART_IRQHandler+0x1cc>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f8ab 	bl	8007858 <UART_Transmit_IT>
    return;
 8007702:	e00e      	b.n	8007722 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <HAL_UART_IRQHandler+0x1ea>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8f2 	bl	8007902 <UART_EndTransmit_IT>
    return;
 800771e:	e000      	b.n	8007722 <HAL_UART_IRQHandler+0x1ea>
    return;
 8007720:	bf00      	nop
  }
}
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	08007831 	.word	0x08007831

0800772c <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	bc80      	pop	{r7}
 800774e:	4770      	bx	lr

08007750 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007772:	e02c      	b.n	80077ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800777a:	d028      	beq.n	80077ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0x30>
 8007782:	f7fd fb53 	bl	8004e2c <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	429a      	cmp	r2, r3
 8007790:	d21d      	bcs.n	80077ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0201 	bic.w	r2, r2, #1
 80077b0:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2220      	movs	r2, #32
 80077be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e00f      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4013      	ands	r3, r2
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	429a      	cmp	r2, r3
 80077dc:	bf0c      	ite	eq
 80077de:	2301      	moveq	r3, #1
 80077e0:	2300      	movne	r3, #0
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d0c3      	beq.n	8007774 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800780c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695a      	ldr	r2, [r3, #20]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0201 	bic.w	r2, r2, #1
 800781c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff ff80 	bl	8007750 <HAL_UART_ErrorCallback>
}
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b21      	cmp	r3, #33	; 0x21
 800786a:	d144      	bne.n	80078f6 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007874:	d11a      	bne.n	80078ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800788a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	1c9a      	adds	r2, r3, #2
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	621a      	str	r2, [r3, #32]
 800789e:	e00e      	b.n	80078be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	621a      	str	r2, [r3, #32]
 80078aa:	e008      	b.n	80078be <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	1c59      	adds	r1, r3, #1
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6211      	str	r1, [r2, #32]
 80078b6:	781a      	ldrb	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	4619      	mov	r1, r3
 80078cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10f      	bne.n	80078f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e000      	b.n	80078f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bc80      	pop	{r7}
 8007900:	4770      	bx	lr

08007902 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007918:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ff02 	bl	800772c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b22      	cmp	r3, #34	; 0x22
 8007944:	d171      	bne.n	8007a2a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794e:	d123      	bne.n	8007998 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10e      	bne.n	800797c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	1c9a      	adds	r2, r3, #2
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	629a      	str	r2, [r3, #40]	; 0x28
 800797a:	e029      	b.n	80079d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	b29b      	uxth	r3, r3
 8007984:	b2db      	uxtb	r3, r3
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	629a      	str	r2, [r3, #40]	; 0x28
 8007996:	e01b      	b.n	80079d0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6858      	ldr	r0, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	1c59      	adds	r1, r3, #1
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6291      	str	r1, [r2, #40]	; 0x28
 80079b0:	b2c2      	uxtb	r2, r0
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e00c      	b.n	80079d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	1c58      	adds	r0, r3, #1
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	6288      	str	r0, [r1, #40]	; 0x28
 80079c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29b      	uxth	r3, r3
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4619      	mov	r1, r3
 80079de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d120      	bne.n	8007a26 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0220 	bic.w	r2, r2, #32
 80079f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a02:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695a      	ldr	r2, [r3, #20]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff fe8e 	bl	800773e <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e002      	b.n	8007a2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	e000      	b.n	8007a2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007a2a:	2302      	movs	r3, #2
  }
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a34:	b5b0      	push	{r4, r5, r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a76:	f023 030c 	bic.w	r3, r3, #12
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	430b      	orrs	r3, r1
 8007a82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a6f      	ldr	r2, [pc, #444]	; (8007c5c <UART_SetConfig+0x228>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d16b      	bne.n	8007b7c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007aa4:	f7fe fbd0 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009a      	lsls	r2, r3, #2
 8007ab2:	441a      	add	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abe:	4a68      	ldr	r2, [pc, #416]	; (8007c60 <UART_SetConfig+0x22c>)
 8007ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac4:	095b      	lsrs	r3, r3, #5
 8007ac6:	011c      	lsls	r4, r3, #4
 8007ac8:	f7fe fbbe 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 8007acc:	4602      	mov	r2, r0
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009a      	lsls	r2, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	fbb2 f5f3 	udiv	r5, r2, r3
 8007ae2:	f7fe fbb1 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009a      	lsls	r2, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afc:	4a58      	ldr	r2, [pc, #352]	; (8007c60 <UART_SetConfig+0x22c>)
 8007afe:	fba2 2303 	umull	r2, r3, r2, r3
 8007b02:	095b      	lsrs	r3, r3, #5
 8007b04:	2264      	movs	r2, #100	; 0x64
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	1aeb      	subs	r3, r5, r3
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	3332      	adds	r3, #50	; 0x32
 8007b10:	4a53      	ldr	r2, [pc, #332]	; (8007c60 <UART_SetConfig+0x22c>)
 8007b12:	fba2 2303 	umull	r2, r3, r2, r3
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b1c:	441c      	add	r4, r3
 8007b1e:	f7fe fb93 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	009a      	lsls	r2, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	fbb2 f5f3 	udiv	r5, r2, r3
 8007b38:	f7fe fb86 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009a      	lsls	r2, r3, #2
 8007b46:	441a      	add	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b52:	4a43      	ldr	r2, [pc, #268]	; (8007c60 <UART_SetConfig+0x22c>)
 8007b54:	fba2 2303 	umull	r2, r3, r2, r3
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	2264      	movs	r2, #100	; 0x64
 8007b5c:	fb02 f303 	mul.w	r3, r2, r3
 8007b60:	1aeb      	subs	r3, r5, r3
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	3332      	adds	r3, #50	; 0x32
 8007b66:	4a3e      	ldr	r2, [pc, #248]	; (8007c60 <UART_SetConfig+0x22c>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	f003 020f 	and.w	r2, r3, #15
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4422      	add	r2, r4
 8007b78:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007b7a:	e06a      	b.n	8007c52 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007b7c:	f7fe fb50 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009a      	lsls	r2, r3, #2
 8007b8a:	441a      	add	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b96:	4a32      	ldr	r2, [pc, #200]	; (8007c60 <UART_SetConfig+0x22c>)
 8007b98:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	011c      	lsls	r4, r3, #4
 8007ba0:	f7fe fb3e 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009a      	lsls	r2, r3, #2
 8007bae:	441a      	add	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8007bba:	f7fe fb31 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009a      	lsls	r2, r3, #2
 8007bc8:	441a      	add	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd4:	4a22      	ldr	r2, [pc, #136]	; (8007c60 <UART_SetConfig+0x22c>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	2264      	movs	r2, #100	; 0x64
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	1aeb      	subs	r3, r5, r3
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	3332      	adds	r3, #50	; 0x32
 8007be8:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <UART_SetConfig+0x22c>)
 8007bea:	fba2 2303 	umull	r2, r3, r2, r3
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bf4:	441c      	add	r4, r3
 8007bf6:	f7fe fb13 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009a      	lsls	r2, r3, #2
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007c10:	f7fe fb06 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8007c14:	4602      	mov	r2, r0
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009a      	lsls	r2, r3, #2
 8007c1e:	441a      	add	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2a:	4a0d      	ldr	r2, [pc, #52]	; (8007c60 <UART_SetConfig+0x22c>)
 8007c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	2264      	movs	r2, #100	; 0x64
 8007c34:	fb02 f303 	mul.w	r3, r2, r3
 8007c38:	1aeb      	subs	r3, r5, r3
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	3332      	adds	r3, #50	; 0x32
 8007c3e:	4a08      	ldr	r2, [pc, #32]	; (8007c60 <UART_SetConfig+0x22c>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4422      	add	r2, r4
 8007c50:	609a      	str	r2, [r3, #8]
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bdb0      	pop	{r4, r5, r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40013800 	.word	0x40013800
 8007c60:	51eb851f 	.word	0x51eb851f

08007c64 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	f023 0101 	bic.w	r1, r3, #1
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d132      	bne.n	8007cf4 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c98:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <FSMC_NORSRAM_Init+0xfc>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	6851      	ldr	r1, [r2, #4]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	6892      	ldr	r2, [r2, #8]
 8007ca4:	4311      	orrs	r1, r2
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	68d2      	ldr	r2, [r2, #12]
 8007caa:	4311      	orrs	r1, r2
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	6912      	ldr	r2, [r2, #16]
 8007cb0:	4311      	orrs	r1, r2
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	6952      	ldr	r2, [r2, #20]
 8007cb6:	4311      	orrs	r1, r2
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	6992      	ldr	r2, [r2, #24]
 8007cbc:	4311      	orrs	r1, r2
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	69d2      	ldr	r2, [r2, #28]
 8007cc2:	4311      	orrs	r1, r2
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	6a12      	ldr	r2, [r2, #32]
 8007cc8:	4311      	orrs	r1, r2
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cce:	4311      	orrs	r1, r2
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007cd4:	4311      	orrs	r1, r2
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007cda:	4311      	orrs	r1, r2
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007cf2:	e02f      	b.n	8007d54 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cfe:	4b18      	ldr	r3, [pc, #96]	; (8007d60 <FSMC_NORSRAM_Init+0xfc>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	6851      	ldr	r1, [r2, #4]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	6892      	ldr	r2, [r2, #8]
 8007d0a:	4311      	orrs	r1, r2
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	68d2      	ldr	r2, [r2, #12]
 8007d10:	4311      	orrs	r1, r2
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	6912      	ldr	r2, [r2, #16]
 8007d16:	4311      	orrs	r1, r2
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	6952      	ldr	r2, [r2, #20]
 8007d1c:	4311      	orrs	r1, r2
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	6992      	ldr	r2, [r2, #24]
 8007d22:	4311      	orrs	r1, r2
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	69d2      	ldr	r2, [r2, #28]
 8007d28:	4311      	orrs	r1, r2
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	6a12      	ldr	r2, [r2, #32]
 8007d2e:	4311      	orrs	r1, r2
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d34:	4311      	orrs	r1, r2
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007d3a:	4311      	orrs	r1, r2
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d40:	4311      	orrs	r1, r2
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d46:	4311      	orrs	r1, r2
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	6812      	ldr	r2, [r2, #0]
 8007d4c:	4319      	orrs	r1, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr
 8007d60:	fff70081 	.word	0xfff70081

08007d64 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	431a      	orrs	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	051b      	lsls	r3, r3, #20
 8007da2:	431a      	orrs	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	3b02      	subs	r3, #2
 8007daa:	061b      	lsls	r3, r3, #24
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	3201      	adds	r2, #1
 8007db8:	4319      	orrs	r1, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de0:	d11d      	bne.n	8007e1e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dea:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	6811      	ldr	r1, [r2, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	6852      	ldr	r2, [r2, #4]
 8007df6:	0112      	lsls	r2, r2, #4
 8007df8:	4311      	orrs	r1, r2
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	6892      	ldr	r2, [r2, #8]
 8007dfe:	0212      	lsls	r2, r2, #8
 8007e00:	4311      	orrs	r1, r2
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	6992      	ldr	r2, [r2, #24]
 8007e06:	4311      	orrs	r1, r2
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	68d2      	ldr	r2, [r2, #12]
 8007e0c:	0412      	lsls	r2, r2, #16
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	ea43 0102 	orr.w	r1, r3, r2
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007e1c:	e005      	b.n	8007e2a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	cff00000 	.word	0xcff00000

08007e3c <__cxa_pure_virtual>:
 8007e3c:	b508      	push	{r3, lr}
 8007e3e:	f000 f80d 	bl	8007e5c <_ZSt9terminatev>

08007e42 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007e42:	b508      	push	{r3, lr}
 8007e44:	4780      	blx	r0
 8007e46:	f000 f80e 	bl	8007e66 <abort>
	...

08007e4c <_ZSt13get_terminatev>:
 8007e4c:	4b02      	ldr	r3, [pc, #8]	; (8007e58 <_ZSt13get_terminatev+0xc>)
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	f3bf 8f5b 	dmb	ish
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20000040 	.word	0x20000040

08007e5c <_ZSt9terminatev>:
 8007e5c:	b508      	push	{r3, lr}
 8007e5e:	f7ff fff5 	bl	8007e4c <_ZSt13get_terminatev>
 8007e62:	f7ff ffee 	bl	8007e42 <_ZN10__cxxabiv111__terminateEPFvvE>

08007e66 <abort>:
 8007e66:	2006      	movs	r0, #6
 8007e68:	b508      	push	{r3, lr}
 8007e6a:	f000 f85d 	bl	8007f28 <raise>
 8007e6e:	2001      	movs	r0, #1
 8007e70:	f7fc f90d 	bl	800408e <_exit>

08007e74 <__errno>:
 8007e74:	4b01      	ldr	r3, [pc, #4]	; (8007e7c <__errno+0x8>)
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20000044 	.word	0x20000044

08007e80 <__libc_init_array>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	2600      	movs	r6, #0
 8007e84:	4d0c      	ldr	r5, [pc, #48]	; (8007eb8 <__libc_init_array+0x38>)
 8007e86:	4c0d      	ldr	r4, [pc, #52]	; (8007ebc <__libc_init_array+0x3c>)
 8007e88:	1b64      	subs	r4, r4, r5
 8007e8a:	10a4      	asrs	r4, r4, #2
 8007e8c:	42a6      	cmp	r6, r4
 8007e8e:	d109      	bne.n	8007ea4 <__libc_init_array+0x24>
 8007e90:	f000 f86e 	bl	8007f70 <_init>
 8007e94:	2600      	movs	r6, #0
 8007e96:	4d0a      	ldr	r5, [pc, #40]	; (8007ec0 <__libc_init_array+0x40>)
 8007e98:	4c0a      	ldr	r4, [pc, #40]	; (8007ec4 <__libc_init_array+0x44>)
 8007e9a:	1b64      	subs	r4, r4, r5
 8007e9c:	10a4      	asrs	r4, r4, #2
 8007e9e:	42a6      	cmp	r6, r4
 8007ea0:	d105      	bne.n	8007eae <__libc_init_array+0x2e>
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}
 8007ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea8:	4798      	blx	r3
 8007eaa:	3601      	adds	r6, #1
 8007eac:	e7ee      	b.n	8007e8c <__libc_init_array+0xc>
 8007eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb2:	4798      	blx	r3
 8007eb4:	3601      	adds	r6, #1
 8007eb6:	e7f2      	b.n	8007e9e <__libc_init_array+0x1e>
 8007eb8:	08008688 	.word	0x08008688
 8007ebc:	08008688 	.word	0x08008688
 8007ec0:	08008688 	.word	0x08008688
 8007ec4:	0800868c 	.word	0x0800868c

08007ec8 <memset>:
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4402      	add	r2, r0
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d100      	bne.n	8007ed2 <memset+0xa>
 8007ed0:	4770      	bx	lr
 8007ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed6:	e7f9      	b.n	8007ecc <memset+0x4>

08007ed8 <_raise_r>:
 8007ed8:	291f      	cmp	r1, #31
 8007eda:	b538      	push	{r3, r4, r5, lr}
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	d904      	bls.n	8007eec <_raise_r+0x14>
 8007ee2:	2316      	movs	r3, #22
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007eee:	b112      	cbz	r2, 8007ef6 <_raise_r+0x1e>
 8007ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ef4:	b94b      	cbnz	r3, 8007f0a <_raise_r+0x32>
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 f830 	bl	8007f5c <_getpid_r>
 8007efc:	462a      	mov	r2, r5
 8007efe:	4601      	mov	r1, r0
 8007f00:	4620      	mov	r0, r4
 8007f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f06:	f000 b817 	b.w	8007f38 <_kill_r>
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d00a      	beq.n	8007f24 <_raise_r+0x4c>
 8007f0e:	1c59      	adds	r1, r3, #1
 8007f10:	d103      	bne.n	8007f1a <_raise_r+0x42>
 8007f12:	2316      	movs	r3, #22
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	2001      	movs	r0, #1
 8007f18:	e7e7      	b.n	8007eea <_raise_r+0x12>
 8007f1a:	2400      	movs	r4, #0
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f22:	4798      	blx	r3
 8007f24:	2000      	movs	r0, #0
 8007f26:	e7e0      	b.n	8007eea <_raise_r+0x12>

08007f28 <raise>:
 8007f28:	4b02      	ldr	r3, [pc, #8]	; (8007f34 <raise+0xc>)
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f7ff bfd3 	b.w	8007ed8 <_raise_r>
 8007f32:	bf00      	nop
 8007f34:	20000044 	.word	0x20000044

08007f38 <_kill_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4d06      	ldr	r5, [pc, #24]	; (8007f58 <_kill_r+0x20>)
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	f7fc f892 	bl	800406e <_kill>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d102      	bne.n	8007f54 <_kill_r+0x1c>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b103      	cbz	r3, 8007f54 <_kill_r+0x1c>
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	20000824 	.word	0x20000824

08007f5c <_getpid_r>:
 8007f5c:	f7fc b880 	b.w	8004060 <_getpid>

08007f60 <strcpy>:
 8007f60:	4603      	mov	r3, r0
 8007f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f66:	f803 2b01 	strb.w	r2, [r3], #1
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d1f9      	bne.n	8007f62 <strcpy+0x2>
 8007f6e:	4770      	bx	lr

08007f70 <_init>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	bf00      	nop
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr

08007f7c <_fini>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr
