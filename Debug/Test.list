
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab0c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800acf8  0800acf8  0001acf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b48c  0800b48c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b48c  0800b48c  0001b48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b494  0800b494  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800b4a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031b4  200000a8  0800b54c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000325c  0800b54c  0002325c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2e3  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe5  00000000  00000000  0003b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  000403a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00041928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e225  00000000  00000000  00042ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8db  00000000  00000000  00060ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db6b  00000000  00000000  0007e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006120  00000000  00000000  0010c35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a8 	.word	0x200000a8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800acdc 	.word	0x0800acdc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000ac 	.word	0x200000ac
 8000224:	0800acdc 	.word	0x0800acdc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_fmul>:
 8000d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d98:	bf1e      	ittt	ne
 8000d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9e:	ea92 0f0c 	teqne	r2, ip
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d06f      	beq.n	8000e88 <__aeabi_fmul+0xf8>
 8000da8:	441a      	add	r2, r3
 8000daa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dae:	0240      	lsls	r0, r0, #9
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000db6:	d01e      	beq.n	8000df6 <__aeabi_fmul+0x66>
 8000db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd0:	bf3e      	ittt	cc
 8000dd2:	0049      	lslcc	r1, r1, #1
 8000dd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd8:	005b      	lslcc	r3, r3, #1
 8000dda:	ea40 0001 	orr.w	r0, r0, r1
 8000dde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de2:	2afd      	cmp	r2, #253	; 0xfd
 8000de4:	d81d      	bhi.n	8000e22 <__aeabi_fmul+0x92>
 8000de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dee:	bf08      	it	eq
 8000df0:	f020 0001 	biceq.w	r0, r0, #1
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfe:	bf08      	it	eq
 8000e00:	0249      	lsleq	r1, r1, #9
 8000e02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0a:	3a7f      	subs	r2, #127	; 0x7f
 8000e0c:	bfc2      	ittt	gt
 8000e0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e16:	4770      	bxgt	lr
 8000e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	3a01      	subs	r2, #1
 8000e22:	dc5d      	bgt.n	8000ee0 <__aeabi_fmul+0x150>
 8000e24:	f112 0f19 	cmn.w	r2, #25
 8000e28:	bfdc      	itt	le
 8000e2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e2e:	4770      	bxle	lr
 8000e30:	f1c2 0200 	rsb	r2, r2, #0
 8000e34:	0041      	lsls	r1, r0, #1
 8000e36:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3a:	f1c2 0220 	rsb	r2, r2, #32
 8000e3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e46:	f140 0000 	adc.w	r0, r0, #0
 8000e4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e4e:	bf08      	it	eq
 8000e50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e54:	4770      	bx	lr
 8000e56:	f092 0f00 	teq	r2, #0
 8000e5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5e:	bf02      	ittt	eq
 8000e60:	0040      	lsleq	r0, r0, #1
 8000e62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e66:	3a01      	subeq	r2, #1
 8000e68:	d0f9      	beq.n	8000e5e <__aeabi_fmul+0xce>
 8000e6a:	ea40 000c 	orr.w	r0, r0, ip
 8000e6e:	f093 0f00 	teq	r3, #0
 8000e72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	bf02      	ittt	eq
 8000e78:	0049      	lsleq	r1, r1, #1
 8000e7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7e:	3b01      	subeq	r3, #1
 8000e80:	d0f9      	beq.n	8000e76 <__aeabi_fmul+0xe6>
 8000e82:	ea41 010c 	orr.w	r1, r1, ip
 8000e86:	e78f      	b.n	8000da8 <__aeabi_fmul+0x18>
 8000e88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	bf18      	it	ne
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d00a      	beq.n	8000eae <__aeabi_fmul+0x11e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1d8      	bne.n	8000e56 <__aeabi_fmul+0xc6>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	4770      	bx	lr
 8000eae:	f090 0f00 	teq	r0, #0
 8000eb2:	bf17      	itett	ne
 8000eb4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb8:	4608      	moveq	r0, r1
 8000eba:	f091 0f00 	teqne	r1, #0
 8000ebe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec2:	d014      	beq.n	8000eee <__aeabi_fmul+0x15e>
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	d101      	bne.n	8000ece <__aeabi_fmul+0x13e>
 8000eca:	0242      	lsls	r2, r0, #9
 8000ecc:	d10f      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000ece:	ea93 0f0c 	teq	r3, ip
 8000ed2:	d103      	bne.n	8000edc <__aeabi_fmul+0x14c>
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	bf18      	it	ne
 8000ed8:	4608      	movne	r0, r1
 8000eda:	d108      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eec:	4770      	bx	lr
 8000eee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_fdiv>:
 8000ef8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000efc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f00:	bf1e      	ittt	ne
 8000f02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f06:	ea92 0f0c 	teqne	r2, ip
 8000f0a:	ea93 0f0c 	teqne	r3, ip
 8000f0e:	d069      	beq.n	8000fe4 <__aeabi_fdiv+0xec>
 8000f10:	eba2 0203 	sub.w	r2, r2, r3
 8000f14:	ea80 0c01 	eor.w	ip, r0, r1
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f1e:	d037      	beq.n	8000f90 <__aeabi_fdiv+0x98>
 8000f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f30:	428b      	cmp	r3, r1
 8000f32:	bf38      	it	cc
 8000f34:	005b      	lslcc	r3, r3, #1
 8000f36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	bf24      	itt	cs
 8000f42:	1a5b      	subcs	r3, r3, r1
 8000f44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5a:	bf24      	itt	cs
 8000f5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f68:	bf24      	itt	cs
 8000f6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	bf18      	it	ne
 8000f76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7a:	d1e0      	bne.n	8000f3e <__aeabi_fdiv+0x46>
 8000f7c:	2afd      	cmp	r2, #253	; 0xfd
 8000f7e:	f63f af50 	bhi.w	8000e22 <__aeabi_fmul+0x92>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f88:	bf08      	it	eq
 8000f8a:	f020 0001 	biceq.w	r0, r0, #1
 8000f8e:	4770      	bx	lr
 8000f90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f98:	327f      	adds	r2, #127	; 0x7f
 8000f9a:	bfc2      	ittt	gt
 8000f9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa4:	4770      	bxgt	lr
 8000fa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	e737      	b.n	8000e22 <__aeabi_fmul+0x92>
 8000fb2:	f092 0f00 	teq	r2, #0
 8000fb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fba:	bf02      	ittt	eq
 8000fbc:	0040      	lsleq	r0, r0, #1
 8000fbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc2:	3a01      	subeq	r2, #1
 8000fc4:	d0f9      	beq.n	8000fba <__aeabi_fdiv+0xc2>
 8000fc6:	ea40 000c 	orr.w	r0, r0, ip
 8000fca:	f093 0f00 	teq	r3, #0
 8000fce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	bf02      	ittt	eq
 8000fd4:	0049      	lsleq	r1, r1, #1
 8000fd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fda:	3b01      	subeq	r3, #1
 8000fdc:	d0f9      	beq.n	8000fd2 <__aeabi_fdiv+0xda>
 8000fde:	ea41 010c 	orr.w	r1, r1, ip
 8000fe2:	e795      	b.n	8000f10 <__aeabi_fdiv+0x18>
 8000fe4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d108      	bne.n	8001000 <__aeabi_fdiv+0x108>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	f47f af7d 	bne.w	8000eee <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	f47f af70 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e776      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001000:	ea93 0f0c 	teq	r3, ip
 8001004:	d104      	bne.n	8001010 <__aeabi_fdiv+0x118>
 8001006:	024b      	lsls	r3, r1, #9
 8001008:	f43f af4c 	beq.w	8000ea4 <__aeabi_fmul+0x114>
 800100c:	4608      	mov	r0, r1
 800100e:	e76e      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001010:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001014:	bf18      	it	ne
 8001016:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101a:	d1ca      	bne.n	8000fb2 <__aeabi_fdiv+0xba>
 800101c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001020:	f47f af5c 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8001024:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001028:	f47f af3c 	bne.w	8000ea4 <__aeabi_fmul+0x114>
 800102c:	e75f      	b.n	8000eee <__aeabi_fmul+0x15e>
 800102e:	bf00      	nop

08001030 <__gesf2>:
 8001030:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001034:	e006      	b.n	8001044 <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__lesf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	e002      	b.n	8001044 <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__cmpsf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001048:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800104c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001054:	bf18      	it	ne
 8001056:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800105a:	d011      	beq.n	8001080 <__cmpsf2+0x40>
 800105c:	b001      	add	sp, #4
 800105e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001062:	bf18      	it	ne
 8001064:	ea90 0f01 	teqne	r0, r1
 8001068:	bf58      	it	pl
 800106a:	ebb2 0003 	subspl.w	r0, r2, r3
 800106e:	bf88      	it	hi
 8001070:	17c8      	asrhi	r0, r1, #31
 8001072:	bf38      	it	cc
 8001074:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001078:	bf18      	it	ne
 800107a:	f040 0001 	orrne.w	r0, r0, #1
 800107e:	4770      	bx	lr
 8001080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001084:	d102      	bne.n	800108c <__cmpsf2+0x4c>
 8001086:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108a:	d105      	bne.n	8001098 <__cmpsf2+0x58>
 800108c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001090:	d1e4      	bne.n	800105c <__cmpsf2+0x1c>
 8001092:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001096:	d0e1      	beq.n	800105c <__cmpsf2+0x1c>
 8001098:	f85d 0b04 	ldr.w	r0, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_cfrcmple>:
 80010a0:	4684      	mov	ip, r0
 80010a2:	4608      	mov	r0, r1
 80010a4:	4661      	mov	r1, ip
 80010a6:	e7ff      	b.n	80010a8 <__aeabi_cfcmpeq>

080010a8 <__aeabi_cfcmpeq>:
 80010a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010aa:	f7ff ffc9 	bl	8001040 <__cmpsf2>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	bf48      	it	mi
 80010b2:	f110 0f00 	cmnmi.w	r0, #0
 80010b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b8 <__aeabi_fcmpeq>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff fff4 	bl	80010a8 <__aeabi_cfcmpeq>
 80010c0:	bf0c      	ite	eq
 80010c2:	2001      	moveq	r0, #1
 80010c4:	2000      	movne	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmplt>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffea 	bl	80010a8 <__aeabi_cfcmpeq>
 80010d4:	bf34      	ite	cc
 80010d6:	2001      	movcc	r0, #1
 80010d8:	2000      	movcs	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmple>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffe0 	bl	80010a8 <__aeabi_cfcmpeq>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpge>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffd2 	bl	80010a0 <__aeabi_cfrcmple>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpgt>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffc8 	bl	80010a0 <__aeabi_cfrcmple>
 8001110:	bf34      	ite	cc
 8001112:	2001      	movcc	r0, #1
 8001114:	2000      	movcs	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <__aeabi_uldivmod>:
 800115c:	b953      	cbnz	r3, 8001174 <__aeabi_uldivmod+0x18>
 800115e:	b94a      	cbnz	r2, 8001174 <__aeabi_uldivmod+0x18>
 8001160:	2900      	cmp	r1, #0
 8001162:	bf08      	it	eq
 8001164:	2800      	cmpeq	r0, #0
 8001166:	bf1c      	itt	ne
 8001168:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800116c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001170:	f000 b976 	b.w	8001460 <__aeabi_idiv0>
 8001174:	f1ad 0c08 	sub.w	ip, sp, #8
 8001178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800117c:	f000 f806 	bl	800118c <__udivmoddi4>
 8001180:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001188:	b004      	add	sp, #16
 800118a:	4770      	bx	lr

0800118c <__udivmoddi4>:
 800118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001190:	9e08      	ldr	r6, [sp, #32]
 8001192:	460d      	mov	r5, r1
 8001194:	4604      	mov	r4, r0
 8001196:	4688      	mov	r8, r1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d14d      	bne.n	8001238 <__udivmoddi4+0xac>
 800119c:	428a      	cmp	r2, r1
 800119e:	4694      	mov	ip, r2
 80011a0:	d968      	bls.n	8001274 <__udivmoddi4+0xe8>
 80011a2:	fab2 f282 	clz	r2, r2
 80011a6:	b152      	cbz	r2, 80011be <__udivmoddi4+0x32>
 80011a8:	fa01 f302 	lsl.w	r3, r1, r2
 80011ac:	f1c2 0120 	rsb	r1, r2, #32
 80011b0:	fa20 f101 	lsr.w	r1, r0, r1
 80011b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b8:	ea41 0803 	orr.w	r8, r1, r3
 80011bc:	4094      	lsls	r4, r2
 80011be:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011c2:	fbb8 f7f1 	udiv	r7, r8, r1
 80011c6:	fa1f fe8c 	uxth.w	lr, ip
 80011ca:	fb01 8817 	mls	r8, r1, r7, r8
 80011ce:	fb07 f00e 	mul.w	r0, r7, lr
 80011d2:	0c23      	lsrs	r3, r4, #16
 80011d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011d8:	4298      	cmp	r0, r3
 80011da:	d90a      	bls.n	80011f2 <__udivmoddi4+0x66>
 80011dc:	eb1c 0303 	adds.w	r3, ip, r3
 80011e0:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80011e4:	f080 811e 	bcs.w	8001424 <__udivmoddi4+0x298>
 80011e8:	4298      	cmp	r0, r3
 80011ea:	f240 811b 	bls.w	8001424 <__udivmoddi4+0x298>
 80011ee:	3f02      	subs	r7, #2
 80011f0:	4463      	add	r3, ip
 80011f2:	1a1b      	subs	r3, r3, r0
 80011f4:	fbb3 f0f1 	udiv	r0, r3, r1
 80011f8:	fb01 3310 	mls	r3, r1, r0, r3
 80011fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8001200:	b2a4      	uxth	r4, r4
 8001202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001206:	45a6      	cmp	lr, r4
 8001208:	d90a      	bls.n	8001220 <__udivmoddi4+0x94>
 800120a:	eb1c 0404 	adds.w	r4, ip, r4
 800120e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001212:	f080 8109 	bcs.w	8001428 <__udivmoddi4+0x29c>
 8001216:	45a6      	cmp	lr, r4
 8001218:	f240 8106 	bls.w	8001428 <__udivmoddi4+0x29c>
 800121c:	4464      	add	r4, ip
 800121e:	3802      	subs	r0, #2
 8001220:	2100      	movs	r1, #0
 8001222:	eba4 040e 	sub.w	r4, r4, lr
 8001226:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800122a:	b11e      	cbz	r6, 8001234 <__udivmoddi4+0xa8>
 800122c:	2300      	movs	r3, #0
 800122e:	40d4      	lsrs	r4, r2
 8001230:	e9c6 4300 	strd	r4, r3, [r6]
 8001234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001238:	428b      	cmp	r3, r1
 800123a:	d908      	bls.n	800124e <__udivmoddi4+0xc2>
 800123c:	2e00      	cmp	r6, #0
 800123e:	f000 80ee 	beq.w	800141e <__udivmoddi4+0x292>
 8001242:	2100      	movs	r1, #0
 8001244:	e9c6 0500 	strd	r0, r5, [r6]
 8001248:	4608      	mov	r0, r1
 800124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124e:	fab3 f183 	clz	r1, r3
 8001252:	2900      	cmp	r1, #0
 8001254:	d14a      	bne.n	80012ec <__udivmoddi4+0x160>
 8001256:	42ab      	cmp	r3, r5
 8001258:	d302      	bcc.n	8001260 <__udivmoddi4+0xd4>
 800125a:	4282      	cmp	r2, r0
 800125c:	f200 80fc 	bhi.w	8001458 <__udivmoddi4+0x2cc>
 8001260:	1a84      	subs	r4, r0, r2
 8001262:	eb65 0303 	sbc.w	r3, r5, r3
 8001266:	2001      	movs	r0, #1
 8001268:	4698      	mov	r8, r3
 800126a:	2e00      	cmp	r6, #0
 800126c:	d0e2      	beq.n	8001234 <__udivmoddi4+0xa8>
 800126e:	e9c6 4800 	strd	r4, r8, [r6]
 8001272:	e7df      	b.n	8001234 <__udivmoddi4+0xa8>
 8001274:	b902      	cbnz	r2, 8001278 <__udivmoddi4+0xec>
 8001276:	deff      	udf	#255	; 0xff
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	2a00      	cmp	r2, #0
 800127e:	f040 8091 	bne.w	80013a4 <__udivmoddi4+0x218>
 8001282:	eba1 000c 	sub.w	r0, r1, ip
 8001286:	2101      	movs	r1, #1
 8001288:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800128c:	fa1f fe8c 	uxth.w	lr, ip
 8001290:	fbb0 f3f7 	udiv	r3, r0, r7
 8001294:	fb07 0013 	mls	r0, r7, r3, r0
 8001298:	0c25      	lsrs	r5, r4, #16
 800129a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800129e:	fb0e f003 	mul.w	r0, lr, r3
 80012a2:	42a8      	cmp	r0, r5
 80012a4:	d908      	bls.n	80012b8 <__udivmoddi4+0x12c>
 80012a6:	eb1c 0505 	adds.w	r5, ip, r5
 80012aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012ae:	d202      	bcs.n	80012b6 <__udivmoddi4+0x12a>
 80012b0:	42a8      	cmp	r0, r5
 80012b2:	f200 80ce 	bhi.w	8001452 <__udivmoddi4+0x2c6>
 80012b6:	4643      	mov	r3, r8
 80012b8:	1a2d      	subs	r5, r5, r0
 80012ba:	fbb5 f0f7 	udiv	r0, r5, r7
 80012be:	fb07 5510 	mls	r5, r7, r0, r5
 80012c2:	fb0e fe00 	mul.w	lr, lr, r0
 80012c6:	b2a4      	uxth	r4, r4
 80012c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012cc:	45a6      	cmp	lr, r4
 80012ce:	d908      	bls.n	80012e2 <__udivmoddi4+0x156>
 80012d0:	eb1c 0404 	adds.w	r4, ip, r4
 80012d4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012d8:	d202      	bcs.n	80012e0 <__udivmoddi4+0x154>
 80012da:	45a6      	cmp	lr, r4
 80012dc:	f200 80b6 	bhi.w	800144c <__udivmoddi4+0x2c0>
 80012e0:	4628      	mov	r0, r5
 80012e2:	eba4 040e 	sub.w	r4, r4, lr
 80012e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ea:	e79e      	b.n	800122a <__udivmoddi4+0x9e>
 80012ec:	f1c1 0720 	rsb	r7, r1, #32
 80012f0:	408b      	lsls	r3, r1
 80012f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012fa:	fa25 fa07 	lsr.w	sl, r5, r7
 80012fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001302:	fbba f8f9 	udiv	r8, sl, r9
 8001306:	fa20 f307 	lsr.w	r3, r0, r7
 800130a:	fb09 aa18 	mls	sl, r9, r8, sl
 800130e:	408d      	lsls	r5, r1
 8001310:	fa1f fe8c 	uxth.w	lr, ip
 8001314:	431d      	orrs	r5, r3
 8001316:	fa00 f301 	lsl.w	r3, r0, r1
 800131a:	fb08 f00e 	mul.w	r0, r8, lr
 800131e:	0c2c      	lsrs	r4, r5, #16
 8001320:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001324:	42a0      	cmp	r0, r4
 8001326:	fa02 f201 	lsl.w	r2, r2, r1
 800132a:	d90b      	bls.n	8001344 <__udivmoddi4+0x1b8>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001334:	f080 8088 	bcs.w	8001448 <__udivmoddi4+0x2bc>
 8001338:	42a0      	cmp	r0, r4
 800133a:	f240 8085 	bls.w	8001448 <__udivmoddi4+0x2bc>
 800133e:	f1a8 0802 	sub.w	r8, r8, #2
 8001342:	4464      	add	r4, ip
 8001344:	1a24      	subs	r4, r4, r0
 8001346:	fbb4 f0f9 	udiv	r0, r4, r9
 800134a:	fb09 4410 	mls	r4, r9, r0, r4
 800134e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001352:	b2ad      	uxth	r5, r5
 8001354:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001358:	45a6      	cmp	lr, r4
 800135a:	d908      	bls.n	800136e <__udivmoddi4+0x1e2>
 800135c:	eb1c 0404 	adds.w	r4, ip, r4
 8001360:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001364:	d26c      	bcs.n	8001440 <__udivmoddi4+0x2b4>
 8001366:	45a6      	cmp	lr, r4
 8001368:	d96a      	bls.n	8001440 <__udivmoddi4+0x2b4>
 800136a:	3802      	subs	r0, #2
 800136c:	4464      	add	r4, ip
 800136e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001372:	fba0 9502 	umull	r9, r5, r0, r2
 8001376:	eba4 040e 	sub.w	r4, r4, lr
 800137a:	42ac      	cmp	r4, r5
 800137c:	46c8      	mov	r8, r9
 800137e:	46ae      	mov	lr, r5
 8001380:	d356      	bcc.n	8001430 <__udivmoddi4+0x2a4>
 8001382:	d053      	beq.n	800142c <__udivmoddi4+0x2a0>
 8001384:	2e00      	cmp	r6, #0
 8001386:	d069      	beq.n	800145c <__udivmoddi4+0x2d0>
 8001388:	ebb3 0208 	subs.w	r2, r3, r8
 800138c:	eb64 040e 	sbc.w	r4, r4, lr
 8001390:	fa22 f301 	lsr.w	r3, r2, r1
 8001394:	fa04 f707 	lsl.w	r7, r4, r7
 8001398:	431f      	orrs	r7, r3
 800139a:	40cc      	lsrs	r4, r1
 800139c:	e9c6 7400 	strd	r7, r4, [r6]
 80013a0:	2100      	movs	r1, #0
 80013a2:	e747      	b.n	8001234 <__udivmoddi4+0xa8>
 80013a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013a8:	f1c2 0120 	rsb	r1, r2, #32
 80013ac:	fa25 f301 	lsr.w	r3, r5, r1
 80013b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b4:	fa20 f101 	lsr.w	r1, r0, r1
 80013b8:	4095      	lsls	r5, r2
 80013ba:	430d      	orrs	r5, r1
 80013bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80013c0:	fb07 3311 	mls	r3, r7, r1, r3
 80013c4:	fa1f fe8c 	uxth.w	lr, ip
 80013c8:	0c28      	lsrs	r0, r5, #16
 80013ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ce:	fb01 f30e 	mul.w	r3, r1, lr
 80013d2:	4283      	cmp	r3, r0
 80013d4:	fa04 f402 	lsl.w	r4, r4, r2
 80013d8:	d908      	bls.n	80013ec <__udivmoddi4+0x260>
 80013da:	eb1c 0000 	adds.w	r0, ip, r0
 80013de:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80013e2:	d22f      	bcs.n	8001444 <__udivmoddi4+0x2b8>
 80013e4:	4283      	cmp	r3, r0
 80013e6:	d92d      	bls.n	8001444 <__udivmoddi4+0x2b8>
 80013e8:	3902      	subs	r1, #2
 80013ea:	4460      	add	r0, ip
 80013ec:	1ac0      	subs	r0, r0, r3
 80013ee:	fbb0 f3f7 	udiv	r3, r0, r7
 80013f2:	fb07 0013 	mls	r0, r7, r3, r0
 80013f6:	b2ad      	uxth	r5, r5
 80013f8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013fc:	fb03 f00e 	mul.w	r0, r3, lr
 8001400:	42a8      	cmp	r0, r5
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x28a>
 8001404:	eb1c 0505 	adds.w	r5, ip, r5
 8001408:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800140c:	d216      	bcs.n	800143c <__udivmoddi4+0x2b0>
 800140e:	42a8      	cmp	r0, r5
 8001410:	d914      	bls.n	800143c <__udivmoddi4+0x2b0>
 8001412:	3b02      	subs	r3, #2
 8001414:	4465      	add	r5, ip
 8001416:	1a28      	subs	r0, r5, r0
 8001418:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800141c:	e738      	b.n	8001290 <__udivmoddi4+0x104>
 800141e:	4631      	mov	r1, r6
 8001420:	4630      	mov	r0, r6
 8001422:	e707      	b.n	8001234 <__udivmoddi4+0xa8>
 8001424:	462f      	mov	r7, r5
 8001426:	e6e4      	b.n	80011f2 <__udivmoddi4+0x66>
 8001428:	4618      	mov	r0, r3
 800142a:	e6f9      	b.n	8001220 <__udivmoddi4+0x94>
 800142c:	454b      	cmp	r3, r9
 800142e:	d2a9      	bcs.n	8001384 <__udivmoddi4+0x1f8>
 8001430:	ebb9 0802 	subs.w	r8, r9, r2
 8001434:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001438:	3801      	subs	r0, #1
 800143a:	e7a3      	b.n	8001384 <__udivmoddi4+0x1f8>
 800143c:	4643      	mov	r3, r8
 800143e:	e7ea      	b.n	8001416 <__udivmoddi4+0x28a>
 8001440:	4628      	mov	r0, r5
 8001442:	e794      	b.n	800136e <__udivmoddi4+0x1e2>
 8001444:	4641      	mov	r1, r8
 8001446:	e7d1      	b.n	80013ec <__udivmoddi4+0x260>
 8001448:	46d0      	mov	r8, sl
 800144a:	e77b      	b.n	8001344 <__udivmoddi4+0x1b8>
 800144c:	4464      	add	r4, ip
 800144e:	3802      	subs	r0, #2
 8001450:	e747      	b.n	80012e2 <__udivmoddi4+0x156>
 8001452:	3b02      	subs	r3, #2
 8001454:	4465      	add	r5, ip
 8001456:	e72f      	b.n	80012b8 <__udivmoddi4+0x12c>
 8001458:	4608      	mov	r0, r1
 800145a:	e706      	b.n	800126a <__udivmoddi4+0xde>
 800145c:	4631      	mov	r1, r6
 800145e:	e6e9      	b.n	8001234 <__udivmoddi4+0xa8>

08001460 <__aeabi_idiv0>:
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <_ZN6StringC1EPKc>:
    char str[STRING_LEN];
    int len;
    String(){
        len = 0;
    }
    String(const char* s){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
        len = strlen(s);
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f7fe feda 	bl	8000228 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(str, s);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f008 ffc8 	bl	800a416 <strcpy>
    }
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN9UIElement17updateAllElementsEv>:
#define SHOW_LOCATION 1
UIElement *UIElement::allElements[MAX_UI_ELEMENTS] = {};
uint8_t UIElement::elementNum = 0;

void UIElement::updateAllElements()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0b6      	sub	sp, #216	; 0xd8
 8001494:	af00      	add	r7, sp, #0
    static bool firstCall = false;
    if (!firstCall)
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <_ZN9UIElement17updateAllElementsEv+0x100>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f083 0301 	eor.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d02c      	beq.n	80014fe <_ZN9UIElement17updateAllElementsEv+0x6e>
    {
        for (int i = 0; i < elementNum; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <_ZN9UIElement17updateAllElementsEv+0x104>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014b4:	4293      	cmp	r3, r2
 80014b6:	da13      	bge.n	80014e0 <_ZN9UIElement17updateAllElementsEv+0x50>
        {
            allElements[i]->render();
 80014b8:	4a37      	ldr	r2, [pc, #220]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 80014ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c2:	4935      	ldr	r1, [pc, #212]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 80014c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4610      	mov	r0, r2
 80014d2:	4798      	blx	r3
        for (int i = 0; i < elementNum; i++)
 80014d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014d8:	3301      	adds	r3, #1
 80014da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80014de:	e7e4      	b.n	80014aa <_ZN9UIElement17updateAllElementsEv+0x1a>
        }
        printToLCD("x=   , y=   ", 0);
 80014e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014e4:	492d      	ldr	r1, [pc, #180]	; (800159c <_ZN9UIElement17updateAllElementsEv+0x10c>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ffbc 	bl	8001464 <_ZN6StringC1EPKc>
 80014ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 fe38 	bl	8006168 <_Z10printToLCDRK6Stringt>
        firstCall = true;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <_ZN9UIElement17updateAllElementsEv+0x100>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
    }
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 80014fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001502:	4927      	ldr	r1, [pc, #156]	; (80015a0 <_ZN9UIElement17updateAllElementsEv+0x110>)
 8001504:	4618      	mov	r0, r3
 8001506:	f005 f845 	bl	8006594 <XPT2046_Get_TouchedPoint>
    // Refresh the coordinate only when touched
    // if ((touch.x < 230 || touch.y < 300) && (touch.x > 0 && touch.y > 0))
    // {
        // if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
        // {
            sprintf(str, "x=%d, y=%d", touch.x, touch.y);
 800150a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800150e:	461a      	mov	r2, r3
 8001510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001514:	1d38      	adds	r0, r7, #4
 8001516:	4923      	ldr	r1, [pc, #140]	; (80015a4 <_ZN9UIElement17updateAllElementsEv+0x114>)
 8001518:	f008 ff4e 	bl	800a3b8 <siprintf>
            printToLCD(str, 0);
 800151c:	1d3a      	adds	r2, r7, #4
 800151e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff9d 	bl	8001464 <_ZN6StringC1EPKc>
 800152a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f004 fe19 	bl	8006168 <_Z10printToLCDRK6Stringt>
        // }
    // }
#endif
    for (int i = 0; i < elementNum; i++)
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_ZN9UIElement17updateAllElementsEv+0x104>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001546:	4293      	cmp	r3, r2
 8001548:	da17      	bge.n	800157a <_ZN9UIElement17updateAllElementsEv+0xea>
    {
        allElements[i]->update(touch.x, touch.y);
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 800154c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001550:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 8001556:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3304      	adds	r3, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8001568:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800156c:	4798      	blx	r3
    for (int i = 0; i < elementNum; i++)
 800156e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001572:	3301      	adds	r3, #1
 8001574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001578:	e7e0      	b.n	800153c <_ZN9UIElement17updateAllElementsEv+0xac>
    }
    touch.x = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    touch.y = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    // Update all UI elements
 8001586:	bf00      	nop
 8001588:	37d8      	adds	r7, #216	; 0xd8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000145 	.word	0x20000145
 8001594:	20000144 	.word	0x20000144
 8001598:	200000c4 	.word	0x200000c4
 800159c:	0800acf8 	.word	0x0800acf8
 80015a0:	20000008 	.word	0x20000008
 80015a4:	0800ad08 	.word	0x0800ad08

080015a8 <_ZN6StringC1Ev>:
    String(){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
        len = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <_ZN6StringC1Ei>:
    String(const String& s){
        len = s.len;
        strcpy(str, s.str);
    }
    String(int n){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
        len = sprintf(str, "%d", n);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	4906      	ldr	r1, [pc, #24]	; (80015ec <_ZN6StringC1Ei+0x28>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 feef 	bl	800a3b8 <siprintf>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	0800ad14 	.word	0x0800ad14

080015f0 <_ZN6StringC1Em>:
    String(uint8_t n): String((int)n){}
    String(uint16_t n): String((int)n){}
    String(uint32_t n): String((int)n){}
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffe0 	bl	80015c4 <_ZN6StringC1Ei>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <_ZN6StringC1EPhi>:
    String(float f){
        len = sprintf(str, "%.2f", f);
    }
    String(double f) : String((float)f){
    }
    String(uint8_t* arr, int len){
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
        // byte array to hex string
        for (int i=0; i<len; i++){
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	da11      	bge.n	800164c <_ZN6StringC1EPhi+0x3c>
            sprintf(str+i*3, "%02X ", arr[i]);
 8001628:	68f9      	ldr	r1, [r7, #12]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	18c8      	adds	r0, r1, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4906      	ldr	r1, [pc, #24]	; (8001658 <_ZN6StringC1EPhi+0x48>)
 8001640:	f008 feba 	bl	800a3b8 <siprintf>
        for (int i=0; i<len; i++){
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e7e9      	b.n	8001620 <_ZN6StringC1EPhi+0x10>
        }
    }
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	0800ad18 	.word	0x0800ad18

0800165c <_ZN6StringplEPKc>:
    String& operator=(const String& s){
        len = s.len;
        strcpy(str, s.str);
        return *this;
    }
    String operator+(const char* s){
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
        String newStr;
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff ff9d 	bl	80015a8 <_ZN6StringC1Ev>
        newStr.len = len + strlen(s);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	461c      	mov	r4, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7fe fdd7 	bl	8000228 <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	4423      	add	r3, r4
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(newStr.str, str);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f008 fec3 	bl	800a416 <strcpy>
        strcat(newStr.str, s);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	f008 feaf 	bl	800a3f8 <strcat>
        return newStr;
 800169a:	bf00      	nop
    }
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}

080016a4 <_ZN6StringplERKS_>:
    String operator+(const String& s){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
        String newStr;
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff ff79 	bl	80015a8 <_ZN6StringC1Ev>
        newStr.len = len + s.len;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	441a      	add	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(newStr.str, str);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f008 fea3 	bl	800a416 <strcpy>
        strcat(newStr.str, s.str);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f008 fe8e 	bl	800a3f8 <strcat>
        return newStr;
 80016dc:	bf00      	nop
    }
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_ZN8SERVO42C6getCRCEPhh>:
    
    

    

    static uint8_t getCRC(uint8_t instruction[], uint8_t len){
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	429a      	cmp	r2, r3
 8001700:	da0b      	bge.n	800171a <_ZN8SERVO42C6getCRCEPhh+0x34>
            result+=instruction[i];
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29a      	uxth	r2, r3
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	4413      	add	r3, r2
 8001710:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3301      	adds	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	e7ef      	b.n	80016fa <_ZN8SERVO42C6getCRCEPhh+0x14>
        }
        return result & 0xFF;
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	b2db      	uxtb	r3, r3
    }
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <_ZN8SERVO42C11receiveUARTEh>:

    // WARNING: remember to check for nullptr, which means receive failed
    uint8_t* receiveUART(uint8_t len){
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
        static uint8_t data[16] = {};
        HAL_UART_Receive(pUART, data, len+1, 70);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	b29b      	uxth	r3, r3
 800173c:	3301      	adds	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	2346      	movs	r3, #70	; 0x46
 8001742:	4927      	ldr	r1, [pc, #156]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8001744:	f008 f87d 	bl	8009842 <HAL_UART_Receive>
        uint8_t offset = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
        if (data[0] == address){
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	791b      	ldrb	r3, [r3, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	d102      	bne.n	800175e <_ZN8SERVO42C11receiveUARTEh+0x36>
            offset = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e00a      	b.n	8001774 <_ZN8SERVO42C11receiveUARTEh+0x4c>
        }else if (data[1] == address){
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8001760:	785a      	ldrb	r2, [r3, #1]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	791b      	ldrb	r3, [r3, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	d102      	bne.n	8001770 <_ZN8SERVO42C11receiveUARTEh+0x48>
            offset = 1;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e001      	b.n	8001774 <_ZN8SERVO42C11receiveUARTEh+0x4c>
        }else {
            return nullptr;
 8001770:	2300      	movs	r3, #0
 8001772:	e030      	b.n	80017d6 <_ZN8SERVO42C11receiveUARTEh+0xae>
        }

        if (data[len-1+offset] == getCRC(data+offset, len-1)){
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	4413      	add	r3, r2
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 800177e:	5cd4      	ldrb	r4, [r2, r3]
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8001784:	441a      	add	r2, r3
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	3b01      	subs	r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f7ff ffa9 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 8001794:	4603      	mov	r3, r0
 8001796:	429c      	cmp	r4, r3
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d017      	beq.n	80017d4 <_ZN8SERVO42C11receiveUARTEh+0xac>
            // printToLCD("Check Success", 3);

            // move forward by the offset
            if (offset == 1){
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d112      	bne.n	80017d0 <_ZN8SERVO42C11receiveUARTEh+0xa8>
                for (int i=0; i<len; i++){
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	da0c      	bge.n	80017d0 <_ZN8SERVO42C11receiveUARTEh+0xa8>
                    data[i] = data[i+1];
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 80017bc:	5cd1      	ldrb	r1, [r2, r3]
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	460a      	mov	r2, r1
 80017c6:	701a      	strb	r2, [r3, #0]
                for (int i=0; i<len; i++){
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	e7ee      	b.n	80017ae <_ZN8SERVO42C11receiveUARTEh+0x86>
                }
            }
            return data;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 80017d2:	e000      	b.n	80017d6 <_ZN8SERVO42C11receiveUARTEh+0xae>
        }else{
            // printToLCD("Check fail : offset="+String(offset), 3);
            // printToLCD(String("dataCRC=")+String::toHexStr(data[len-1+offset])+" CalcCRC="+String::toHexStr(getCRC(data+offset, len-1)), 5);
            // printToLCD(String(data,9), 7);
            return nullptr;
 80017d4:	2300      	movs	r3, #0
        }
    }
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000148 	.word	0x20000148

080017e4 <_ZN8SERVO42C11receiveUARTEht>:

    uint8_t* receiveUART(uint8_t len, uint16_t maxRetry){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
 80017f0:	4613      	mov	r3, r2
 80017f2:	803b      	strh	r3, [r7, #0]
        uint8_t* data = nullptr;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
        while (data==nullptr){
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <_ZN8SERVO42C11receiveUARTEht+0x36>
            data = receiveUART(len);
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff90 	bl	8001728 <_ZN8SERVO42C11receiveUARTEh>
 8001808:	60f8      	str	r0, [r7, #12]
            maxRetry--;
 800180a:	883b      	ldrh	r3, [r7, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	803b      	strh	r3, [r7, #0]
            if (maxRetry==0){
 8001810:	883b      	ldrh	r3, [r7, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d000      	beq.n	8001818 <_ZN8SERVO42C11receiveUARTEht+0x34>
        while (data==nullptr){
 8001816:	e7ef      	b.n	80017f8 <_ZN8SERVO42C11receiveUARTEht+0x14>
                break;
 8001818:	bf00      	nop
            }
            if (data==nullptr){
                // debugLog("Retry receiveUART, maxRetry="+String(maxRetry));
            }
        }
        return data;
 800181a:	68fb      	ldr	r3, [r7, #12]
    }
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	0000      	movs	r0, r0
	...

08001828 <_ZN8SERVO42C8getRPMofEh>:
    
    
    float getRPMof(uint8_t speed){
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
        float divisionCoefficient = ABS(stepAngle-1.8)>0.01?400:200;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe61 	bl	8000500 <__aeabi_f2d>
 800183e:	a32e      	add	r3, pc, #184	; (adr r3, 80018f8 <_ZN8SERVO42C8getRPMofEh+0xd0>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fcfc 	bl	8000240 <__aeabi_dsub>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f7ff f93a 	bl	8000ad0 <__aeabi_dcmpgt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00e      	beq.n	8001880 <_ZN8SERVO42C8getRPMofEh+0x58>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe4a 	bl	8000500 <__aeabi_f2d>
 800186c:	a322      	add	r3, pc, #136	; (adr r3, 80018f8 <_ZN8SERVO42C8getRPMofEh+0xd0>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fce5 	bl	8000240 <__aeabi_dsub>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	e00e      	b.n	800189e <_ZN8SERVO42C8getRPMofEh+0x76>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe3b 	bl	8000500 <__aeabi_f2d>
 800188a:	a31b      	add	r3, pc, #108	; (adr r3, 80018f8 <_ZN8SERVO42C8getRPMofEh+0xd0>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fcd6 	bl	8000240 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800189e:	a318      	add	r3, pc, #96	; (adr r3, 8001900 <_ZN8SERVO42C8getRPMofEh+0xd8>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7ff f912 	bl	8000ad0 <__aeabi_dcmpgt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <_ZN8SERVO42C8getRPMofEh+0x8e>
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_ZN8SERVO42C8getRPMofEh+0xe0>)
 80018b4:	e000      	b.n	80018b8 <_ZN8SERVO42C8getRPMofEh+0x90>
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_ZN8SERVO42C8getRPMofEh+0xe4>)
 80018b8:	60fb      	str	r3, [r7, #12]
        return (speed * 30000)/(stepDivision * divisionCoefficient);
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fa0f 	bl	8000ce8 <__aeabi_i2f>
 80018ca:	4604      	mov	r4, r0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fa08 	bl	8000ce8 <__aeabi_i2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fa57 	bl	8000d90 <__aeabi_fmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fb06 	bl	8000ef8 <__aeabi_fdiv>
 80018ec:	4603      	mov	r3, r0
    }
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bdb0      	pop	{r4, r5, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	cccccccd 	.word	0xcccccccd
 80018fc:	3ffccccc 	.word	0x3ffccccc
 8001900:	47ae147b 	.word	0x47ae147b
 8001904:	3f847ae1 	.word	0x3f847ae1
 8001908:	43c80000 	.word	0x43c80000
 800190c:	43480000 	.word	0x43480000

08001910 <_ZN8SERVO42C18getSpeedParamOfRPMEf>:
    float getSpeedParamOfRPM(float rpm){
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
        float divisionCoefficient = ABS(stepAngle-1.8)>0.01?400:200;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdee 	bl	8000500 <__aeabi_f2d>
 8001924:	a32c      	add	r3, pc, #176	; (adr r3, 80019d8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xc8>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fc89 	bl	8000240 <__aeabi_dsub>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	f7ff f8c7 	bl	8000ad0 <__aeabi_dcmpgt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00e      	beq.n	8001966 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x56>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdd7 	bl	8000500 <__aeabi_f2d>
 8001952:	a321      	add	r3, pc, #132	; (adr r3, 80019d8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xc8>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fc72 	bl	8000240 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	e00e      	b.n	8001984 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x74>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdc8 	bl	8000500 <__aeabi_f2d>
 8001970:	a319      	add	r3, pc, #100	; (adr r3, 80019d8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xc8>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fc63 	bl	8000240 <__aeabi_dsub>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4614      	mov	r4, r2
 8001980:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001984:	a316      	add	r3, pc, #88	; (adr r3, 80019e0 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xd0>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	4620      	mov	r0, r4
 800198c:	4629      	mov	r1, r5
 800198e:	f7ff f89f 	bl	8000ad0 <__aeabi_dcmpgt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x8c>
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xd8>)
 800199a:	e000      	b.n	800199e <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x8e>
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xdc>)
 800199e:	60fb      	str	r3, [r7, #12]
        return rpm * stepDivision * divisionCoefficient / 30000;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f99e 	bl	8000ce8 <__aeabi_i2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f9ed 	bl	8000d90 <__aeabi_fmul>
 80019b6:	4603      	mov	r3, r0
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9e8 	bl	8000d90 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	490b      	ldr	r1, [pc, #44]	; (80019f0 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xe0>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fa97 	bl	8000ef8 <__aeabi_fdiv>
 80019ca:	4603      	mov	r3, r0
    }
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	cccccccd 	.word	0xcccccccd
 80019dc:	3ffccccc 	.word	0x3ffccccc
 80019e0:	47ae147b 	.word	0x47ae147b
 80019e4:	3f847ae1 	.word	0x3f847ae1
 80019e8:	43c80000 	.word	0x43c80000
 80019ec:	43480000 	.word	0x43480000
 80019f0:	46ea6000 	.word	0x46ea6000

080019f4 <_ZN8SERVO42C16getLinearSpeedOfEh>:
    
    float getLinearSpeedOf(uint8_t speed){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
        return getRPMof(speed) * mmPerLap / 60; // mm/s
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff0f 	bl	8001828 <_ZN8SERVO42C8getRPMofEh>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff f9bc 	bl	8000d90 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4904      	ldr	r1, [pc, #16]	; (8001a2c <_ZN8SERVO42C16getLinearSpeedOfEh+0x38>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fa6b 	bl	8000ef8 <__aeabi_fdiv>
 8001a22:	4603      	mov	r3, r0
    }
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	42700000 	.word	0x42700000

08001a30 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>:

    uint8_t getSpeedParamOfLinearSpeed(float linearSpeed){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
        float rpm = linearSpeed * 60 / mmPerLap;
 8001a3a:	490e      	ldr	r1, [pc, #56]	; (8001a74 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf+0x44>)
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f7ff f9a7 	bl	8000d90 <__aeabi_fmul>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f7ff fa53 	bl	8000ef8 <__aeabi_fdiv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	60fb      	str	r3, [r7, #12]
        return getSpeedParamOfRPM(rpm);
 8001a56:	68f9      	ldr	r1, [r7, #12]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff59 	bl	8001910 <_ZN8SERVO42C18getSpeedParamOfRPMEf>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fb5b 	bl	800111c <__aeabi_f2uiz>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b2db      	uxtb	r3, r3
    }
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	42700000 	.word	0x42700000

08001a78 <_ZN8SERVO42C13getDistanceOfEm>:
    
    float getDistanceOf(uint32_t stepCount){
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
        return stepCount/(float)stepDivision * stepAngle/360 * mmPerLap;
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	f7ff f92c 	bl	8000ce0 <__aeabi_ui2f>
 8001a88:	4604      	mov	r4, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f925 	bl	8000ce0 <__aeabi_ui2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7ff fa2c 	bl	8000ef8 <__aeabi_fdiv>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f7ff f970 	bl	8000d90 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <_ZN8SERVO42C13getDistanceOfEm+0x5c>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fa1f 	bl	8000ef8 <__aeabi_fdiv>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f7ff f963 	bl	8000d90 <__aeabi_fmul>
 8001aca:	4603      	mov	r3, r0
    }
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	43b40000 	.word	0x43b40000

08001ad8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>:

    uint32_t getStepCountFromTargetPosition(float targetPosition, uint8_t& direction){
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
        float currentPosition = getPosition();
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f897 	bl	8001c18 <_ZN8SERVO42C11getPositionEv>
 8001aea:	61f8      	str	r0, [r7, #28]
        float error = targetPosition - currentPosition;
 8001aec:	69f9      	ldr	r1, [r7, #28]
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f7ff f844 	bl	8000b7c <__aeabi_fsub>
 8001af4:	4603      	mov	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
        direction = error>0?1:0;
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	69b8      	ldr	r0, [r7, #24]
 8001afe:	f7ff fb03 	bl	8001108 <__aeabi_fcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x34>
 8001b08:	2201      	movs	r2, #1
 8001b0a:	e000      	b.n	8001b0e <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x36>
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	701a      	strb	r2, [r3, #0]
        error = error>0?error:-error;
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	69b8      	ldr	r0, [r7, #24]
 8001b18:	f7ff faf6 	bl	8001108 <__aeabi_fcmpgt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x4e>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	e002      	b.n	8001b2c <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x54>
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b2c:	61bb      	str	r3, [r7, #24]
        uint32_t stepCount = error/(mmPerLap) * (360/stepAngle)*stepDivision;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	4619      	mov	r1, r3
 8001b34:	69b8      	ldr	r0, [r7, #24]
 8001b36:	f7ff f9df 	bl	8000ef8 <__aeabi_fdiv>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461c      	mov	r4, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	480f      	ldr	r0, [pc, #60]	; (8001b84 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0xac>)
 8001b46:	f7ff f9d7 	bl	8000ef8 <__aeabi_fdiv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff f91e 	bl	8000d90 <__aeabi_fmul>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461c      	mov	r4, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8c2 	bl	8000ce8 <__aeabi_i2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff f911 	bl	8000d90 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fad3 	bl	800111c <__aeabi_f2uiz>
 8001b76:	4603      	mov	r3, r0
 8001b78:	617b      	str	r3, [r7, #20]
        return stepCount;
 8001b7a:	697b      	ldr	r3, [r7, #20]
    }
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3724      	adds	r7, #36	; 0x24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	43b40000 	.word	0x43b40000

08001b88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDefb>:

    
public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART, bool useLimitSwitch = false) : address(address), pUART(pUART), useLimitSwitch(useLimitSwitch){}
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	460b      	mov	r3, r1
 8001b96:	72fb      	strb	r3, [r7, #11]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	72bb      	strb	r3, [r7, #10]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	7afa      	ldrb	r2, [r7, #11]
 8001ba6:	711a      	strb	r2, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	80da      	strh	r2, [r3, #6]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	811a      	strh	r2, [r3, #8]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	829a      	strh	r2, [r3, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	775a      	strb	r2, [r3, #29]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	7aba      	ldrb	r2, [r7, #10]
 8001bde:	779a      	strb	r2, [r3, #30]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2232      	movs	r2, #50	; 0x32
 8001be4:	77da      	strb	r2, [r3, #31]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <_ZN8SERVO42CC1EhP18UART_HandleTypeDefb+0x88>)
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_ZN8SERVO42CC1EhP18UART_HandleTypeDefb+0x8c>)
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	3fe66666 	.word	0x3fe66666
 8001c14:	3f4ccccd 	.word	0x3f4ccccd

08001c18 <_ZN8SERVO42C11getPositionEv>:
        zeroEncoderCarry = encoderCarry;
        enableAbsolutePosControl = true;
    }

    // position : distance from zero position
    float getPosition(){ // to test
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
        receiveEncoder();
 8001c20:	2103      	movs	r1, #3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8f2 	bl	8001e0c <_ZN8SERVO42C14receiveEncoderEi>
        // if (enableAbsolutePosControl){
        float position = 0;
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
        position = ((encoder - zeroEncoder)/(float)0xFFFF+ (encoderCarry - zeroEncoderCarry))*mmPerLap;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	88db      	ldrh	r3, [r3, #6]
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	891b      	ldrh	r3, [r3, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f854 	bl	8000ce8 <__aeabi_i2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4911      	ldr	r1, [pc, #68]	; (8001c88 <_ZN8SERVO42C11getPositionEv+0x70>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f957 	bl	8000ef8 <__aeabi_fdiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461c      	mov	r4, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f845 	bl	8000ce8 <__aeabi_i2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7fe ff8c 	bl	8000b80 <__addsf3>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f7ff f88c 	bl	8000d90 <__aeabi_fmul>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]
        // }
        // return -1;
    }
 8001c7c:	bf00      	nop
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	477fff00 	.word	0x477fff00

08001c8c <_ZN8SERVO42C9step_UARTEhhm>:
    }

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step_UART(uint8_t direction, uint8_t speed, uint32_t stepCount){
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b0cd      	sub	sp, #308	; 0x134
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8001c96:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8001c9a:	6020      	str	r0, [r4, #0]
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001ca4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cae:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8001cbe:	460a      	mov	r2, r1
 8001cc0:	701a      	strb	r2, [r3, #0]
        uint8_t instruction[8] = {};
 8001cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
        instruction[0] = address;
 8001cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cd6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	791a      	ldrb	r2, [r3, #4]
 8001cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ce2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ce6:	701a      	strb	r2, [r3, #0]
        instruction[1] = 0xfd;
 8001ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cf0:	22fd      	movs	r2, #253	; 0xfd
 8001cf2:	705a      	strb	r2, [r3, #1]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 8001cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cf8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d06:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8001d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d22:	709a      	strb	r2, [r3, #2]
        for (int i=0; i<4; i++){
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	dc20      	bgt.n	8001d74 <_ZN8SERVO42C9step_UARTEhhm+0xe8>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 8001d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	40da      	lsrs	r2, r3
 8001d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d58:	f1c3 0306 	rsb	r3, r3, #6
 8001d5c:	b2d1      	uxtb	r1, r2
 8001d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001d62:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001d66:	54d1      	strb	r1, [r2, r3]
        for (int i=0; i<4; i++){
 8001d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d72:	e7da      	b.n	8001d2a <_ZN8SERVO42C9step_UARTEhhm+0x9e>
        }
        instruction[7] = getCRC(instruction, 8);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2108      	movs	r1, #8
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fcb3 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d8c:	71da      	strb	r2, [r3, #7]
        debugLog(String(instruction, 8)+" c:"+String(stepCount));
 8001d8e:	f107 0114 	add.w	r1, r7, #20
 8001d92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d96:	2208      	movs	r2, #8
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fc39 	bl	8001610 <_ZN6StringC1EPhi>
 8001d9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001da2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <_ZN8SERVO42C9step_UARTEhhm+0x17c>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fc57 	bl	800165c <_ZN6StringplEPKc>
 8001dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001db2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001db6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f7ff fc17 	bl	80015f0 <_ZN6StringC1Em>
 8001dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dca:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001dce:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc66 	bl	80016a4 <_ZN6StringplERKS_>
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	2112      	movs	r1, #18
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f9ea 	bl	80061b8 <_Z8debugLogRK6Stringt>
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 8001de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001de8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	f107 0114 	add.w	r1, r7, #20
 8001df4:	2364      	movs	r3, #100	; 0x64
 8001df6:	2208      	movs	r2, #8
 8001df8:	f007 fc8a 	bl	8009710 <HAL_UART_Transmit>
    }
 8001dfc:	bf00      	nop
 8001dfe:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	0800ad20 	.word	0x0800ad20

08001e0c <_ZN8SERVO42C14receiveEncoderEi>:
        instruction[4] = getCRC(instruction, 4);
        HAL_UART_Transmit(pUART, instruction, 5, 100);
    }
    

    bool receiveEncoder(int retryCount = 3){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
        // send instruction to request encoder
        uint8_t instruction[3] = {};
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <_ZN8SERVO42C14receiveEncoderEi+0xb4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	723b      	strb	r3, [r7, #8]
 8001e1c:	f107 0309 	add.w	r3, r7, #9
 8001e20:	2200      	movs	r2, #0
 8001e22:	801a      	strh	r2, [r3, #0]
        instruction[0] = address;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	791b      	ldrb	r3, [r3, #4]
 8001e28:	723b      	strb	r3, [r7, #8]
        instruction[1] = 0x30;
 8001e2a:	2330      	movs	r3, #48	; 0x30
 8001e2c:	727b      	strb	r3, [r7, #9]
        instruction[2] = getCRC(instruction, 2);
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	2102      	movs	r1, #2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fc56 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72bb      	strb	r3, [r7, #10]
        while (retryCount>0){
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd38      	ble.n	8001eb6 <_ZN8SERVO42C14receiveEncoderEi+0xaa>
            HAL_UART_Transmit(pUART, instruction, 3, 50);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f107 0108 	add.w	r1, r7, #8
 8001e4c:	2332      	movs	r3, #50	; 0x32
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f007 fc5e 	bl	8009710 <HAL_UART_Transmit>
            uint8_t* data = receiveUART(8, 3);
 8001e54:	2203      	movs	r2, #3
 8001e56:	2108      	movs	r1, #8
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fcc3 	bl	80017e4 <_ZN8SERVO42C11receiveUARTEht>
 8001e5e:	60f8      	str	r0, [r7, #12]
            if (data!=nullptr){
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d023      	beq.n	8001eae <_ZN8SERVO42C14receiveEncoderEi+0xa2>
                encoder = data[5]<<8 | data[6];
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3305      	adds	r3, #5
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3306      	adds	r3, #6
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	80da      	strh	r2, [r3, #6]
                encoderCarry = data[1]<<24 | data[2]<<16 | data[3]<<8 | data[4];
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3303      	adds	r3, #3
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	3204      	adds	r2, #4
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60da      	str	r2, [r3, #12]
                return true;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e004      	b.n	8001eb8 <_ZN8SERVO42C14receiveEncoderEi+0xac>
            }
            retryCount--;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]
        while (retryCount>0){
 8001eb4:	e7c3      	b.n	8001e3e <_ZN8SERVO42C14receiveEncoderEi+0x32>
        }
        return false;
 8001eb6:	2300      	movs	r3, #0
    }
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	0800ad24 	.word	0x0800ad24

08001ec4 <_Z6step3dmhmhmh>:

SERVO42C xServo(0xe0, &huart2);
SERVO42C yServo(0xe1, &huart2);
SERVO42C zServo(0xe2, &huart2);

void step3d(uint32_t xStepCount, uint8_t xDir, uint32_t yStepCount, uint8_t yDir, uint32_t zStepCount, uint8_t zDir){
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b08f      	sub	sp, #60	; 0x3c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	72fb      	strb	r3, [r7, #11]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	72bb      	strb	r3, [r7, #10]
    uint32_t maxStepCount = MAX(MAX(xStepCount, yStepCount), zStepCount);
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d901      	bls.n	8001ee4 <_Z6step3dmhmhmh+0x20>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	e000      	b.n	8001ee6 <_Z6step3dmhmhmh+0x22>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d907      	bls.n	8001efc <_Z6step3dmhmhmh+0x38>
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d901      	bls.n	8001ef8 <_Z6step3dmhmhmh+0x34>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	e002      	b.n	8001efe <_Z6step3dmhmhmh+0x3a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	e000      	b.n	8001efe <_Z6step3dmhmhmh+0x3a>
 8001efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
    SERVO42C* pMaxServo;
    if (maxStepCount == xStepCount){
 8001f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d102      	bne.n	8001f0e <_Z6step3dmhmhmh+0x4a>
        pMaxServo = &xServo;
 8001f08:	4b40      	ldr	r3, [pc, #256]	; (800200c <_Z6step3dmhmhmh+0x148>)
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0c:	e008      	b.n	8001f20 <_Z6step3dmhmhmh+0x5c>
    }else if (maxStepCount == yStepCount){
 8001f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d102      	bne.n	8001f1c <_Z6step3dmhmhmh+0x58>
        pMaxServo = &yServo;
 8001f16:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <_Z6step3dmhmhmh+0x14c>)
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1a:	e001      	b.n	8001f20 <_Z6step3dmhmhmh+0x5c>
    }else{
        pMaxServo = &zServo;
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <_Z6step3dmhmhmh+0x150>)
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    SERVO42C& maxServo = *pMaxServo;
 8001f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c

    float maxTimeConsumed = maxServo.getDistanceOf(maxStepCount) / maxServo.getLinearSpeedOf(maxServo.stepSpeed);
 8001f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f28:	f7ff fda6 	bl	8001a78 <_ZN8SERVO42C13getDistanceOfEm>
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	7fdb      	ldrb	r3, [r3, #31]
 8001f32:	4619      	mov	r1, r3
 8001f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f36:	f7ff fd5d 	bl	80019f4 <_ZN8SERVO42C16getLinearSpeedOfEh>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7fe ffda 	bl	8000ef8 <__aeabi_fdiv>
 8001f44:	4603      	mov	r3, r0
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    float linearSpeedX = xServo.getDistanceOf(xStepCount) / maxTimeConsumed;
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4830      	ldr	r0, [pc, #192]	; (800200c <_Z6step3dmhmhmh+0x148>)
 8001f4c:	f7ff fd94 	bl	8001a78 <_ZN8SERVO42C13getDistanceOfEm>
 8001f50:	4603      	mov	r3, r0
 8001f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ffcf 	bl	8000ef8 <__aeabi_fdiv>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    float linearSpeedY = yServo.getDistanceOf(yStepCount) / maxTimeConsumed;
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	482b      	ldr	r0, [pc, #172]	; (8002010 <_Z6step3dmhmhmh+0x14c>)
 8001f62:	f7ff fd89 	bl	8001a78 <_ZN8SERVO42C13getDistanceOfEm>
 8001f66:	4603      	mov	r3, r0
 8001f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe ffc4 	bl	8000ef8 <__aeabi_fdiv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	623b      	str	r3, [r7, #32]
    float linearSpeedZ = zServo.getDistanceOf(zStepCount) / maxTimeConsumed;
 8001f74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f76:	4827      	ldr	r0, [pc, #156]	; (8002014 <_Z6step3dmhmhmh+0x150>)
 8001f78:	f7ff fd7e 	bl	8001a78 <_ZN8SERVO42C13getDistanceOfEm>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe ffb9 	bl	8000ef8 <__aeabi_fdiv>
 8001f86:	4603      	mov	r3, r0
 8001f88:	61fb      	str	r3, [r7, #28]

    float speedParamX = xServo.getSpeedParamOfLinearSpeed(linearSpeedX);
 8001f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8c:	481f      	ldr	r0, [pc, #124]	; (800200c <_Z6step3dmhmhmh+0x148>)
 8001f8e:	f7ff fd4f 	bl	8001a30 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fea3 	bl	8000ce0 <__aeabi_ui2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]
    float speedParamY = yServo.getSpeedParamOfLinearSpeed(linearSpeedY);
 8001f9e:	6a39      	ldr	r1, [r7, #32]
 8001fa0:	481b      	ldr	r0, [pc, #108]	; (8002010 <_Z6step3dmhmhmh+0x14c>)
 8001fa2:	f7ff fd45 	bl	8001a30 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fe99 	bl	8000ce0 <__aeabi_ui2f>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	617b      	str	r3, [r7, #20]
    float speedParamZ = zServo.getSpeedParamOfLinearSpeed(linearSpeedZ);
 8001fb2:	69f9      	ldr	r1, [r7, #28]
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <_Z6step3dmhmhmh+0x150>)
 8001fb6:	f7ff fd3b 	bl	8001a30 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fe8f 	bl	8000ce0 <__aeabi_ui2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	613b      	str	r3, [r7, #16]

    xServo.step_UART(xDir, speedParamX, xStepCount);
 8001fc6:	69b8      	ldr	r0, [r7, #24]
 8001fc8:	f7ff f8a8 	bl	800111c <__aeabi_f2uiz>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	7af9      	ldrb	r1, [r7, #11]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <_Z6step3dmhmhmh+0x148>)
 8001fd6:	f7ff fe59 	bl	8001c8c <_ZN8SERVO42C9step_UARTEhhm>
    yServo.step_UART(yDir, speedParamY, yStepCount);
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff f89e 	bl	800111c <__aeabi_f2uiz>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	7ab9      	ldrb	r1, [r7, #10]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <_Z6step3dmhmhmh+0x14c>)
 8001fea:	f7ff fe4f 	bl	8001c8c <_ZN8SERVO42C9step_UARTEhhm>
    zServo.step_UART(zDir, speedParamZ, zStepCount);
 8001fee:	6938      	ldr	r0, [r7, #16]
 8001ff0:	f7ff f894 	bl	800111c <__aeabi_f2uiz>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <_Z6step3dmhmhmh+0x150>)
 8002000:	f7ff fe44 	bl	8001c8c <_ZN8SERVO42C9step_UARTEhhm>
}
 8002004:	bf00      	nop
 8002006:	373c      	adds	r7, #60	; 0x3c
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	20000158 	.word	0x20000158
 8002010:	20000188 	.word	0x20000188
 8002014:	200001b8 	.word	0x200001b8

08002018 <_Z13setPosition3dfff>:

void setPosition3d(float x, float y, float z){
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
    uint8_t xDir = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]

    uint32_t xStepCount =  xServo.getStepCountFromTargetPosition(x, xDir);
 8002028:	f107 0313 	add.w	r3, r7, #19
 800202c:	461a      	mov	r2, r3
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	4813      	ldr	r0, [pc, #76]	; (8002080 <_Z13setPosition3dfff+0x68>)
 8002032:	f7ff fd51 	bl	8001ad8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>
 8002036:	61f8      	str	r0, [r7, #28]
    uint8_t yDir = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	74bb      	strb	r3, [r7, #18]
    uint32_t yStepCount =  yServo.getStepCountFromTargetPosition(y, yDir);
 800203c:	f107 0312 	add.w	r3, r7, #18
 8002040:	461a      	mov	r2, r3
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	480f      	ldr	r0, [pc, #60]	; (8002084 <_Z13setPosition3dfff+0x6c>)
 8002046:	f7ff fd47 	bl	8001ad8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>
 800204a:	61b8      	str	r0, [r7, #24]
    uint8_t zDir = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	747b      	strb	r3, [r7, #17]
    uint32_t zStepCount =  zServo.getStepCountFromTargetPosition(z, zDir);
 8002050:	f107 0311 	add.w	r3, r7, #17
 8002054:	461a      	mov	r2, r3
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <_Z13setPosition3dfff+0x70>)
 800205a:	f7ff fd3d 	bl	8001ad8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>
 800205e:	6178      	str	r0, [r7, #20]
    step3d(xStepCount, xDir, yStepCount, yDir, zStepCount, zDir);
 8002060:	7cf9      	ldrb	r1, [r7, #19]
 8002062:	7cba      	ldrb	r2, [r7, #18]
 8002064:	7c7b      	ldrb	r3, [r7, #17]
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	69f8      	ldr	r0, [r7, #28]
 8002072:	f7ff ff27 	bl	8001ec4 <_Z6step3dmhmhmh>
    // todo, block thread until done
 8002076:	bf00      	nop
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000158 	.word	0x20000158
 8002084:	20000188 	.word	0x20000188
 8002088:	200001b8 	.word	0x200001b8

0800208c <_Z41__static_initialization_and_destruction_0ii>:
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d116      	bne.n	80020ca <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d111      	bne.n	80020ca <_Z41__static_initialization_and_destruction_0ii+0x3e>
SERVO42C xServo(0xe0, &huart2);
 80020a6:	2300      	movs	r3, #0
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80020aa:	21e0      	movs	r1, #224	; 0xe0
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80020ae:	f7ff fd6b 	bl	8001b88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDefb>
SERVO42C yServo(0xe1, &huart2);
 80020b2:	2300      	movs	r3, #0
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80020b6:	21e1      	movs	r1, #225	; 0xe1
 80020b8:	4808      	ldr	r0, [pc, #32]	; (80020dc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80020ba:	f7ff fd65 	bl	8001b88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDefb>
SERVO42C zServo(0xe2, &huart2);
 80020be:	2300      	movs	r3, #0
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80020c2:	21e2      	movs	r1, #226	; 0xe2
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80020c6:	f7ff fd5f 	bl	8001b88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDefb>
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200031c4 	.word	0x200031c4
 80020d8:	20000158 	.word	0x20000158
 80020dc:	20000188 	.word	0x20000188
 80020e0:	200001b8 	.word	0x200001b8

080020e4 <_GLOBAL__sub_I_xServo>:
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff ffcd 	bl	800208c <_Z41__static_initialization_and_destruction_0ii>
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_ADC1_Init+0x74>)
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <MX_ADC1_Init+0x78>)
 8002108:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_ADC1_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_ADC1_Init+0x74>)
 8002112:	2201      	movs	r2, #1
 8002114:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_ADC1_Init+0x74>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_ADC1_Init+0x74>)
 800211e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <MX_ADC1_Init+0x74>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_ADC1_Init+0x74>)
 800212c:	2201      	movs	r2, #1
 800212e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <MX_ADC1_Init+0x74>)
 8002132:	f004 fb3f 	bl	80067b4 <HAL_ADC_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800213c:	f001 fcf0 	bl	8003b20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002140:	230c      	movs	r3, #12
 8002142:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002144:	2301      	movs	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002148:	2305      	movs	r3, #5
 800214a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_ADC1_Init+0x74>)
 8002152:	f004 fc19 	bl	8006988 <HAL_ADC_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800215c:	f001 fce0 	bl	8003b20 <Error_Handler>
  }

}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200001e8 	.word	0x200001e8
 800216c:	40012400 	.word	0x40012400

08002170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_ADC_MspInit+0x6c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d121      	bne.n	80021d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_ADC_MspInit+0x70>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <HAL_ADC_MspInit+0x70>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_ADC_MspInit+0x70>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_ADC_MspInit+0x70>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_ADC_MspInit+0x70>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_ADC_MspInit+0x70>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c0:	2304      	movs	r3, #4
 80021c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c4:	2303      	movs	r3, #3
 80021c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	4619      	mov	r1, r3
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HAL_ADC_MspInit+0x74>)
 80021d0:	f005 fa5e 	bl	8007690 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40012400 	.word	0x40012400
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40011000 	.word	0x40011000

080021e8 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <DEBUG_USART_Config+0x4c>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <DEBUG_USART_Config+0x50>)
 80021f0:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <DEBUG_USART_Config+0x4c>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <DEBUG_USART_Config+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <DEBUG_USART_Config+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <DEBUG_USART_Config+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <DEBUG_USART_Config+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <DEBUG_USART_Config+0x4c>)
 8002214:	220c      	movs	r2, #12
 8002216:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 8002218:	4806      	ldr	r0, [pc, #24]	; (8002234 <DEBUG_USART_Config+0x4c>)
 800221a:	f007 fa2c 	bl	8009676 <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <DEBUG_USART_Config+0x4c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <DEBUG_USART_Config+0x4c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0220 	orr.w	r2, r2, #32
 800222c:	60da      	str	r2, [r3, #12]
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000218 	.word	0x20000218
 8002238:	40013800 	.word	0x40013800

0800223c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_DMA_Init+0x38>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <MX_DMA_Init+0x38>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6153      	str	r3, [r2, #20]
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_DMA_Init+0x38>)
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2010      	movs	r0, #16
 8002260:	f004 fd97 	bl	8006d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002264:	2010      	movs	r0, #16
 8002266:	f004 fdb0 	bl	8006dca <HAL_NVIC_EnableIRQ>

}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000

08002278 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	615a      	str	r2, [r3, #20]
 800228e:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <MX_FSMC_Init+0xbc>)
 8002292:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002296:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002298:	4b26      	ldr	r3, [pc, #152]	; (8002334 <MX_FSMC_Init+0xbc>)
 800229a:	4a27      	ldr	r2, [pc, #156]	; (8002338 <MX_FSMC_Init+0xc0>)
 800229c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022b2:	2210      	movs	r2, #16
 80022b4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_FSMC_Init+0xbc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80022ee:	230f      	movs	r3, #15
 80022f0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80022f2:	230f      	movs	r3, #15
 80022f4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80022f6:	23ff      	movs	r3, #255	; 0xff
 80022f8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80022fa:	230f      	movs	r3, #15
 80022fc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80022fe:	2310      	movs	r3, #16
 8002300:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002302:	2311      	movs	r3, #17
 8002304:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	4619      	mov	r1, r3
 8002310:	4808      	ldr	r0, [pc, #32]	; (8002334 <MX_FSMC_Init+0xbc>)
 8002312:	f006 f87d 	bl	8008410 <HAL_SRAM_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800231c:	f001 fc00 	bl	8003b20 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_FSMC_Init+0xc4>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <MX_FSMC_Init+0xc4>)
 8002326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232a:	61d3      	str	r3, [r2, #28]

}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000298 	.word	0x20000298
 8002338:	a0000104 	.word	0xa0000104
 800233c:	40010000 	.word	0x40010000

08002340 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_FSMC_MspInit+0x78>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d129      	bne.n	80023b0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_FSMC_MspInit+0x78>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_FSMC_MspInit+0x7c>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <HAL_FSMC_MspInit+0x7c>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6153      	str	r3, [r2, #20]
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_FSMC_MspInit+0x7c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800237a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800237e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	4619      	mov	r1, r3
 800238e:	480c      	ldr	r0, [pc, #48]	; (80023c0 <HAL_FSMC_MspInit+0x80>)
 8002390:	f005 f97e 	bl	8007690 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002394:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002398:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4619      	mov	r1, r3
 80023a8:	4806      	ldr	r0, [pc, #24]	; (80023c4 <HAL_FSMC_MspInit+0x84>)
 80023aa:	f005 f971 	bl	8007690 <HAL_GPIO_Init>
 80023ae:	e000      	b.n	80023b2 <HAL_FSMC_MspInit+0x72>
    return;
 80023b0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200002dc 	.word	0x200002dc
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40011800 	.word	0x40011800
 80023c4:	40011400 	.word	0x40011400

080023c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80023d0:	f7ff ffb6 	bl	8002340 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 0318 	add.w	r3, r7, #24
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a74      	ldr	r2, [pc, #464]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 80023f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002408:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 800240e:	f043 0310 	orr.w	r3, r3, #16
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002420:	4b69      	ldr	r3, [pc, #420]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a68      	ldr	r2, [pc, #416]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b66      	ldr	r3, [pc, #408]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002438:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a62      	ldr	r2, [pc, #392]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002450:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a5c      	ldr	r2, [pc, #368]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 8002456:	f043 0320 	orr.w	r3, r3, #32
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <MX_GPIO_Init+0x1ec>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	2107      	movs	r1, #7
 800246c:	4857      	ldr	r0, [pc, #348]	; (80025cc <MX_GPIO_Init+0x1f0>)
 800246e:	f005 fabe 	bl	80079ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	2140      	movs	r1, #64	; 0x40
 8002476:	4855      	ldr	r0, [pc, #340]	; (80025cc <MX_GPIO_Init+0x1f0>)
 8002478:	f005 fab9 	bl	80079ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 800247c:	2201      	movs	r2, #1
 800247e:	2123      	movs	r1, #35	; 0x23
 8002480:	4853      	ldr	r0, [pc, #332]	; (80025d0 <MX_GPIO_Init+0x1f4>)
 8002482:	f005 fab4 	bl	80079ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800248c:	4851      	ldr	r0, [pc, #324]	; (80025d4 <MX_GPIO_Init+0x1f8>)
 800248e:	f005 faae 	bl	80079ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002498:	484d      	ldr	r0, [pc, #308]	; (80025d0 <MX_GPIO_Init+0x1f4>)
 800249a:	f005 faa8 	bl	80079ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800249e:	2347      	movs	r3, #71	; 0x47
 80024a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ae:	f107 0318 	add.w	r3, r7, #24
 80024b2:	4619      	mov	r1, r3
 80024b4:	4845      	ldr	r0, [pc, #276]	; (80025cc <MX_GPIO_Init+0x1f0>)
 80024b6:	f005 f8eb 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024ba:	2308      	movs	r3, #8
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	483f      	ldr	r0, [pc, #252]	; (80025cc <MX_GPIO_Init+0x1f0>)
 80024ce:	f005 f8df 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024d2:	2310      	movs	r3, #16
 80024d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <MX_GPIO_Init+0x1fc>)
 80024d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024da:	2301      	movs	r3, #1
 80024dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024de:	f107 0318 	add.w	r3, r7, #24
 80024e2:	4619      	mov	r1, r3
 80024e4:	4839      	ldr	r0, [pc, #228]	; (80025cc <MX_GPIO_Init+0x1f0>)
 80024e6:	f005 f8d3 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 80024ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f0:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <MX_GPIO_Init+0x200>)
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	4619      	mov	r1, r3
 80024fe:	4838      	ldr	r0, [pc, #224]	; (80025e0 <MX_GPIO_Init+0x204>)
 8002500:	f005 f8c6 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002504:	2301      	movs	r3, #1
 8002506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <MX_GPIO_Init+0x200>)
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800250c:	2302      	movs	r3, #2
 800250e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0318 	add.w	r3, r7, #24
 8002514:	4619      	mov	r1, r3
 8002516:	4833      	ldr	r0, [pc, #204]	; (80025e4 <MX_GPIO_Init+0x208>)
 8002518:	f005 f8ba 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_X_Pin;
 800251c:	2320      	movs	r3, #32
 800251e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002524:	2301      	movs	r3, #1
 8002526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWITCH_X_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	4619      	mov	r1, r3
 800252e:	482c      	ldr	r0, [pc, #176]	; (80025e0 <MX_GPIO_Init+0x204>)
 8002530:	f005 f8ae 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8002534:	f240 1323 	movw	r3, #291	; 0x123
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	f107 0318 	add.w	r3, r7, #24
 800254a:	4619      	mov	r1, r3
 800254c:	4820      	ldr	r0, [pc, #128]	; (80025d0 <MX_GPIO_Init+0x1f4>)
 800254e:	f005 f89f 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002552:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	2301      	movs	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002564:	f107 0318 	add.w	r3, r7, #24
 8002568:	4619      	mov	r1, r3
 800256a:	481a      	ldr	r0, [pc, #104]	; (80025d4 <MX_GPIO_Init+0x1f8>)
 800256c:	f005 f890 	bl	8007690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2302      	movs	r3, #2
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0318 	add.w	r3, r7, #24
 8002586:	4619      	mov	r1, r3
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <MX_GPIO_Init+0x1f4>)
 800258a:	f005 f881 	bl	8007690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	2006      	movs	r0, #6
 8002594:	f004 fbfd 	bl	8006d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002598:	2006      	movs	r0, #6
 800259a:	f004 fc16 	bl	8006dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	200a      	movs	r0, #10
 80025a4:	f004 fbf5 	bl	8006d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025a8:	200a      	movs	r0, #10
 80025aa:	f004 fc0e 	bl	8006dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2028      	movs	r0, #40	; 0x28
 80025b4:	f004 fbed 	bl	8006d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025b8:	2028      	movs	r0, #40	; 0x28
 80025ba:	f004 fc06 	bl	8006dca <HAL_NVIC_EnableIRQ>

}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40011800 	.word	0x40011800
 80025d0:	40010c00 	.word	0x40010c00
 80025d4:	40011400 	.word	0x40011400
 80025d8:	10210000 	.word	0x10210000
 80025dc:	10110000 	.word	0x10110000
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40010800 	.word	0x40010800

080025e8 <_ZN8SERVO42C4spinEhh>:
    void spin(uint8_t direction, uint8_t speed){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
 80025f4:	4613      	mov	r3, r2
 80025f6:	70bb      	strb	r3, [r7, #2]
        uint8_t instruction[4] = {};
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
        instruction[0] = address;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	791b      	ldrb	r3, [r3, #4]
 8002600:	733b      	strb	r3, [r7, #12]
        instruction[1] = 0xf6;
 8002602:	23f6      	movs	r3, #246	; 0xf6
 8002604:	737b      	strb	r3, [r7, #13]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	01db      	lsls	r3, r3, #7
 800260a:	b25a      	sxtb	r2, r3
 800260c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002614:	b25b      	sxtb	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b25b      	sxtb	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	73bb      	strb	r3, [r7, #14]
        instruction[3] = getCRC(instruction, 3);
 800261e:	f107 030c 	add.w	r3, r7, #12
 8002622:	2103      	movs	r1, #3
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f85e 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(pUART, instruction, 4, 100);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f107 010c 	add.w	r1, r7, #12
 8002636:	2364      	movs	r3, #100	; 0x64
 8002638:	2204      	movs	r2, #4
 800263a:	f007 f869 	bl	8009710 <HAL_UART_Transmit>
    }
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_ZN8SERVO42C13spinClockwiseEh>:
    void spinClockwise(uint8_t speed){
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	70fb      	strb	r3, [r7, #3]
        spin(0, speed);
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	461a      	mov	r2, r3
 8002656:	2100      	movs	r1, #0
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ffc5 	bl	80025e8 <_ZN8SERVO42C4spinEhh>
    }
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_ZN8SERVO42C20spinCounterClockwiseEh>:
    void spinCounterClockwise(uint8_t speed){
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	70fb      	strb	r3, [r7, #3]
        spin(1, speed);
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	461a      	mov	r2, r3
 8002676:	2101      	movs	r1, #1
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffb5 	bl	80025e8 <_ZN8SERVO42C4spinEhh>
    }
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <_ZN9UIElementC1Etttt>:

    uint16_t x, y;
    uint16_t width, height;

protected:
    UIElement(uint16_t x, uint16_t y, uint16_t width, uint16_t height)
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	460b      	mov	r3, r1
 800269c:	813b      	strh	r3, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
    {
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <_ZN9UIElementC1Etttt+0x5c>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]
        this->x = x;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	897a      	ldrh	r2, [r7, #10]
 80026ac:	809a      	strh	r2, [r3, #4]
        this->y = y;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	893a      	ldrh	r2, [r7, #8]
 80026b2:	80da      	strh	r2, [r3, #6]
        this->width = width;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	811a      	strh	r2, [r3, #8]
        this->height = height;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8b3a      	ldrh	r2, [r7, #24]
 80026be:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <_ZN9UIElementC1Etttt+0x60>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	b2d1      	uxtb	r1, r2
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <_ZN9UIElementC1Etttt+0x60>)
 80026ca:	7011      	strb	r1, [r2, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <_ZN9UIElementC1Etttt+0x64>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	0800adf8 	.word	0x0800adf8
 80026e8:	20000144 	.word	0x20000144
 80026ec:	200000c4 	.word	0x200000c4

080026f0 <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y)
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	803b      	strh	r3, [r7, #0]
    {
        return x >= this->x && x <= this->x + width && y >= this->y && y <= this->y + height;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	889b      	ldrh	r3, [r3, #4]
 8002704:	887a      	ldrh	r2, [r7, #2]
 8002706:	429a      	cmp	r2, r3
 8002708:	d318      	bcc.n	800273c <_ZN9UIElement10checkTouchEtt+0x4c>
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	889b      	ldrh	r3, [r3, #4]
 8002710:	4619      	mov	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	891b      	ldrh	r3, [r3, #8]
 8002716:	440b      	add	r3, r1
 8002718:	429a      	cmp	r2, r3
 800271a:	dc0f      	bgt.n	800273c <_ZN9UIElement10checkTouchEtt+0x4c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	88db      	ldrh	r3, [r3, #6]
 8002720:	883a      	ldrh	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d30a      	bcc.n	800273c <_ZN9UIElement10checkTouchEtt+0x4c>
 8002726:	883a      	ldrh	r2, [r7, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	88db      	ldrh	r3, [r3, #6]
 800272c:	4619      	mov	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	895b      	ldrh	r3, [r3, #10]
 8002732:	440b      	add	r3, r1
 8002734:	429a      	cmp	r2, r3
 8002736:	dc01      	bgt.n	800273c <_ZN9UIElement10checkTouchEtt+0x4c>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <_ZN9UIElement10checkTouchEtt+0x4e>
 800273c:	2300      	movs	r3, #0
    }
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <_ZN6ButtonC1EttPctttt>:
    bool isPressed = false;
    void (*onPressed)() = nullptr;
    void (*whilePressing)() = nullptr;
    void (*onReleased)() = nullptr;

    Button(uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b087      	sub	sp, #28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	4613      	mov	r3, r2
 8002758:	813b      	strh	r3, [r7, #8]
        : UIElement(x, y, width, height)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	8c3c      	ldrh	r4, [r7, #32]
 800275e:	893a      	ldrh	r2, [r7, #8]
 8002760:	8979      	ldrh	r1, [r7, #10]
 8002762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	4623      	mov	r3, r4
 8002768:	f7ff ff8e 	bl	8002688 <_ZN9UIElementC1Etttt>
 800276c:	4a13      	ldr	r2, [pc, #76]	; (80027bc <_ZN6ButtonC1EttPctttt+0x74>)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	819a      	strh	r2, [r3, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
    {
        this->initialColor = color;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002796:	81da      	strh	r2, [r3, #14]
        this->color = color;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800279c:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80027a2:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3314      	adds	r3, #20
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f007 fe33 	bl	800a416 <strcpy>
    }
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd90      	pop	{r4, r7, pc}
 80027ba:	bf00      	nop
 80027bc:	0800ade8 	.word	0x0800ade8

080027c0 <_ZN6Button6renderEv>:
    void setOnReleased(void (*onReleased)())
    {
        this->onReleased = onReleased;
    }

    void render() override
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8898      	ldrh	r0, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	88d9      	ldrh	r1, [r3, #6]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	891a      	ldrh	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	895b      	ldrh	r3, [r3, #10]
 80027d8:	f000 ff46 	bl	8003668 <LCD_OpenWindow>
        LCD_FillColor(width * height, color);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	891b      	ldrh	r3, [r3, #8]
 80027e0:	461a      	mov	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	895b      	ldrh	r3, [r3, #10]
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8a1b      	ldrh	r3, [r3, #16]
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f000 ff91 	bl	800371a <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x + width / 3, y + height / 3, text, color, textColor);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	889a      	ldrh	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	891b      	ldrh	r3, [r3, #8]
 8002800:	4910      	ldr	r1, [pc, #64]	; (8002844 <_ZN6Button6renderEv+0x84>)
 8002802:	fba1 1303 	umull	r1, r3, r1, r3
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	b29b      	uxth	r3, r3
 800280a:	4413      	add	r3, r2
 800280c:	b298      	uxth	r0, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	88da      	ldrh	r2, [r3, #6]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	895b      	ldrh	r3, [r3, #10]
 8002816:	490b      	ldr	r1, [pc, #44]	; (8002844 <_ZN6Button6renderEv+0x84>)
 8002818:	fba1 1303 	umull	r1, r3, r1, r3
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	4413      	add	r3, r2
 8002822:	b299      	uxth	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f103 0214 	add.w	r2, r3, #20
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8a1c      	ldrh	r4, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8a5b      	ldrh	r3, [r3, #18]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4623      	mov	r3, r4
 8002836:	f001 f897 	bl	8003968 <LCD_DrawString_Color>
    }
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	bf00      	nop
 8002844:	aaaaaaab 	.word	0xaaaaaaab

08002848 <_ZN6Button6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	883a      	ldrh	r2, [r7, #0]
 800285c:	8879      	ldrh	r1, [r7, #2]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff46 	bl	80026f0 <_ZN9UIElement10checkTouchEtt>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00f      	beq.n	800288a <_ZN6Button6updateEtt+0x42>
        {
            color = YELLOW;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002870:	821a      	strh	r2, [r3, #16]
            // if (!isPressed)
            //{ // only trigger once
            isPressed = true;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (whilePressing)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <_ZN6Button6updateEtt+0x52>
                whilePressing();
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	4798      	blx	r3
 8002888:	e007      	b.n	800289a <_ZN6Button6updateEtt+0x52>
            //}
        }
        else
        {
            color = initialColor;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	89da      	ldrh	r2, [r3, #14]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	899a      	ldrh	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8a1b      	ldrh	r3, [r3, #16]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d023      	beq.n	80028ee <_ZN6Button6updateEtt+0xa6>
        {
            if (isPressed && onPressed){
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <_ZN6Button6updateEtt+0x76>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <_ZN6Button6updateEtt+0x76>
                onPressed();
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	4798      	blx	r3
            }
            if (!isPressed && onReleased)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <_ZN6Button6updateEtt+0x94>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <_ZN6Button6updateEtt+0x94>
                onReleased();
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4798      	blx	r3
            render();
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
            last_color = color;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8a1a      	ldrh	r2, [r3, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	819a      	strh	r2, [r3, #12]
        }
    }
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <_ZN6SliderC1Etttttt>:

    uint16_t draggerX;
    uint16_t draggerY;

public:
    Slider(
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
        uint16_t x,
        uint16_t y,
        uint16_t maxValue = 0,
        uint16_t width = 10,
        uint16_t height = 130,
        uint16_t barColor = CYAN) : UIElement(x, y, width, height)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	8c3c      	ldrh	r4, [r7, #32]
 8002916:	893a      	ldrh	r2, [r7, #8]
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4623      	mov	r3, r4
 8002920:	f7ff feb2 	bl	8002688 <_ZN9UIElementC1Etttt>
 8002924:	4a11      	ldr	r2, [pc, #68]	; (800296c <_ZN6SliderC1Etttttt+0x74>)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2214      	movs	r2, #20
 800292e:	82da      	strh	r2, [r3, #22]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	761a      	strb	r2, [r3, #24]
    {
        this->maxValue = maxValue;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	829a      	strh	r2, [r3, #20]
        this->barColor = barColor;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002940:	819a      	strh	r2, [r3, #12]
        draggerX = x + width / 2;
 8002942:	8c3b      	ldrh	r3, [r7, #32]
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	897b      	ldrh	r3, [r7, #10]
 800294a:	4413      	add	r3, r2
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	835a      	strh	r2, [r3, #26]
        draggerY = y + height / 2;
 8002952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	893b      	ldrh	r3, [r7, #8]
 800295a:	4413      	add	r3, r2
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	839a      	strh	r2, [r3, #28]
    }
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bd90      	pop	{r4, r7, pc}
 800296c:	0800add8 	.word	0x0800add8

08002970 <_ZN6Slider6renderEv>:

    void render() override
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    {
        // render bar
        LCD_OpenWindow(x, y, width, height);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8898      	ldrh	r0, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	88d9      	ldrh	r1, [r3, #6]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	891a      	ldrh	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	895b      	ldrh	r3, [r3, #10]
 8002988:	f000 fe6e 	bl	8003668 <LCD_OpenWindow>
        LCD_FillColor(width * height, barColor);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	891b      	ldrh	r3, [r3, #8]
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	895b      	ldrh	r3, [r3, #10]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	899b      	ldrh	r3, [r3, #12]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 feb9 	bl	800371a <LCD_FillColor>

        // render dragger
        LCD_OpenWindow(x, draggerY, width, draggerRadius);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8898      	ldrh	r0, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8b99      	ldrh	r1, [r3, #28]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	891a      	ldrh	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8adb      	ldrh	r3, [r3, #22]
 80029b8:	f000 fe56 	bl	8003668 <LCD_OpenWindow>
        LCD_FillColor(width * draggerRadius, RED);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	891b      	ldrh	r3, [r3, #8]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8adb      	ldrh	r3, [r3, #22]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fea3 	bl	800371a <LCD_FillColor>
    }
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZN6Slider5wrapYEt>:

    uint16_t wrapY(u_int16_t y)
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
    {
        if (y > 500 || y==0)
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ee:	d802      	bhi.n	80029f6 <_ZN6Slider5wrapYEt+0x1a>
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <_ZN6Slider5wrapYEt+0x20>
            return draggerY; // y=2048 if not touched
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8b9b      	ldrh	r3, [r3, #28]
 80029fa:	e01f      	b.n	8002a3c <_ZN6Slider5wrapYEt+0x60>
        if (y < this->y)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	88db      	ldrh	r3, [r3, #6]
 8002a00:	887a      	ldrh	r2, [r7, #2]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d202      	bcs.n	8002a0c <_ZN6Slider5wrapYEt+0x30>
            return this->y;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	88db      	ldrh	r3, [r3, #6]
 8002a0a:	e017      	b.n	8002a3c <_ZN6Slider5wrapYEt+0x60>
        if (y > this->y + height - draggerRadius)
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	88db      	ldrh	r3, [r3, #6]
 8002a12:	4619      	mov	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	895b      	ldrh	r3, [r3, #10]
 8002a18:	440b      	add	r3, r1
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	8ac9      	ldrh	r1, [r1, #22]
 8002a1e:	1a5b      	subs	r3, r3, r1
 8002a20:	429a      	cmp	r2, r3
 8002a22:	dd0a      	ble.n	8002a3a <_ZN6Slider5wrapYEt+0x5e>
            return this->y + height - draggerRadius;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	88da      	ldrh	r2, [r3, #6]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	895b      	ldrh	r3, [r3, #10]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8adb      	ldrh	r3, [r3, #22]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	e000      	b.n	8002a3c <_ZN6Slider5wrapYEt+0x60>
        return y;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
    }
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <_ZN6Slider6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]
 8002a52:	4613      	mov	r3, r2
 8002a54:	803b      	strh	r3, [r7, #0]
    {
        bool isDraggerTouched;
        if (isDragging)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7e1b      	ldrb	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d04a      	beq.n	8002af4 <_ZN6Slider6updateEtt+0xae>
        {
            draggerY = wrapY(y);
 8002a5e:	883b      	ldrh	r3, [r7, #0]
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffba 	bl	80029dc <_ZN6Slider5wrapYEt>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	839a      	strh	r2, [r3, #28]
            render();
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
            isDraggerTouched = x >= draggerX - 6 * draggerRadius && x <= draggerX + 6 * draggerRadius && y >= draggerY - 6*draggerRadius && y <= draggerY + 6*draggerRadius;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8b5b      	ldrh	r3, [r3, #26]
 8002a80:	4618      	mov	r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8adb      	ldrh	r3, [r3, #22]
 8002a86:	4619      	mov	r1, r3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	0089      	lsls	r1, r1, #2
 8002a8c:	1a5b      	subs	r3, r3, r1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4403      	add	r3, r0
 8002a92:	429a      	cmp	r2, r3
 8002a94:	db2b      	blt.n	8002aee <_ZN6Slider6updateEtt+0xa8>
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8b5b      	ldrh	r3, [r3, #26]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8adb      	ldrh	r3, [r3, #22]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4403      	add	r3, r0
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	dc1d      	bgt.n	8002aee <_ZN6Slider6updateEtt+0xa8>
 8002ab2:	883a      	ldrh	r2, [r7, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8b9b      	ldrh	r3, [r3, #28]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8adb      	ldrh	r3, [r3, #22]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	0089      	lsls	r1, r1, #2
 8002ac4:	1a5b      	subs	r3, r3, r1
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4403      	add	r3, r0
 8002aca:	429a      	cmp	r2, r3
 8002acc:	db0f      	blt.n	8002aee <_ZN6Slider6updateEtt+0xa8>
 8002ace:	883a      	ldrh	r2, [r7, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8b9b      	ldrh	r3, [r3, #28]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8adb      	ldrh	r3, [r3, #22]
 8002ada:	4619      	mov	r1, r3
 8002adc:	460b      	mov	r3, r1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4403      	add	r3, r0
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	dc01      	bgt.n	8002aee <_ZN6Slider6updateEtt+0xa8>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <_ZN6Slider6updateEtt+0xaa>
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e027      	b.n	8002b44 <_ZN6Slider6updateEtt+0xfe>
        }
        else
        {
            isDraggerTouched = x >= draggerX - draggerRadius && x <= draggerX + draggerRadius && y >= draggerY - draggerRadius && y <= draggerY + draggerRadius;
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8b5b      	ldrh	r3, [r3, #26]
 8002afa:	4619      	mov	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8adb      	ldrh	r3, [r3, #22]
 8002b00:	1acb      	subs	r3, r1, r3
 8002b02:	429a      	cmp	r2, r3
 8002b04:	db1c      	blt.n	8002b40 <_ZN6Slider6updateEtt+0xfa>
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8b5b      	ldrh	r3, [r3, #26]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8adb      	ldrh	r3, [r3, #22]
 8002b12:	440b      	add	r3, r1
 8002b14:	429a      	cmp	r2, r3
 8002b16:	dc13      	bgt.n	8002b40 <_ZN6Slider6updateEtt+0xfa>
 8002b18:	883a      	ldrh	r2, [r7, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8b9b      	ldrh	r3, [r3, #28]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8adb      	ldrh	r3, [r3, #22]
 8002b24:	1acb      	subs	r3, r1, r3
 8002b26:	429a      	cmp	r2, r3
 8002b28:	db0a      	blt.n	8002b40 <_ZN6Slider6updateEtt+0xfa>
 8002b2a:	883a      	ldrh	r2, [r7, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8b9b      	ldrh	r3, [r3, #28]
 8002b30:	4619      	mov	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8adb      	ldrh	r3, [r3, #22]
 8002b36:	440b      	add	r3, r1
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	dc01      	bgt.n	8002b40 <_ZN6Slider6updateEtt+0xfa>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <_ZN6Slider6updateEtt+0xfc>
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
        }
        isDragging = isDraggerTouched;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	761a      	strb	r2, [r3, #24]
        value = (draggerY - this->y) * maxValue / height;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8b9b      	ldrh	r3, [r3, #28]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	88db      	ldrh	r3, [r3, #6]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	8a92      	ldrh	r2, [r2, #20]
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	8952      	ldrh	r2, [r2, #10]
 8002b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f8be 	bl	8000ce8 <__aeabi_i2f>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]
    }
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <_ZN8TouchPadC1EttPFvPS_iiEttt>:
    uint16_t dotY;
    uint16_t lastDotX = 0;
    uint16_t lastDotY = 0;
    void (*onPressed)(TouchPad *, int, int) = nullptr;

    TouchPad(uint16_t x, uint16_t y, void (*onPressed)(TouchPad *, int, int) = nullptr, uint16_t width = 150, uint16_t height = 150, uint16_t color = CYAN)
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	813b      	strh	r3, [r7, #8]
        : UIElement(x, y, width, height)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	8c3c      	ldrh	r4, [r7, #32]
 8002b92:	893a      	ldrh	r2, [r7, #8]
 8002b94:	8979      	ldrh	r1, [r7, #10]
 8002b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f7ff fd74 	bl	8002688 <_ZN9UIElementC1Etttt>
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <_ZN8TouchPadC1EttPFvPS_iiEttt+0x84>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	220a      	movs	r2, #10
 8002baa:	81da      	strh	r2, [r3, #14]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	829a      	strh	r2, [r3, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	82da      	strh	r2, [r3, #22]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
    {
        this->x = x;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	897a      	ldrh	r2, [r7, #10]
 8002bc2:	809a      	strh	r2, [r3, #4]
        this->y = y;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	893a      	ldrh	r2, [r7, #8]
 8002bc8:	80da      	strh	r2, [r3, #6]
        this->width = width;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8c3a      	ldrh	r2, [r7, #32]
 8002bce:	811a      	strh	r2, [r3, #8]
        this->height = height;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bd4:	815a      	strh	r2, [r3, #10]
        this->color = color;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002bda:	819a      	strh	r2, [r3, #12]
        dotX = width / 2;
 8002bdc:	8c3b      	ldrh	r3, [r7, #32]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	821a      	strh	r2, [r3, #16]
        dotY = height / 2;
 8002be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	825a      	strh	r2, [r3, #18]
        this->onPressed = onPressed;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
    }
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	0800adc8 	.word	0x0800adc8

08002c04 <_ZN8TouchPad6renderEv>:

    void render() override
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    {
        // render background
        LCD_OpenWindow(x, y, width, height);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8898      	ldrh	r0, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	88d9      	ldrh	r1, [r3, #6]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	891a      	ldrh	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	895b      	ldrh	r3, [r3, #10]
 8002c1c:	f000 fd24 	bl	8003668 <LCD_OpenWindow>
        LCD_FillColor(width * height, color);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	891b      	ldrh	r3, [r3, #8]
 8002c24:	461a      	mov	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	895b      	ldrh	r3, [r3, #10]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	899b      	ldrh	r3, [r3, #12]
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 fd6f 	bl	800371a <LCD_FillColor>

        // render dot
        renderDot();
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f82c 	bl	8002c9a <_ZN8TouchPad9renderDotEv>
    }
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_ZN8TouchPad8clearDotEv>:

    void clearDot()
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
    {
        LCD_OpenWindow(x + dotX, y + dotY, dotRadius, dotRadius);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	889a      	ldrh	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8a1b      	ldrh	r3, [r3, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b298      	uxth	r0, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	88da      	ldrh	r2, [r3, #6]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8a5b      	ldrh	r3, [r3, #18]
 8002c66:	4413      	add	r3, r2
 8002c68:	b299      	uxth	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	89da      	ldrh	r2, [r3, #14]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	89db      	ldrh	r3, [r3, #14]
 8002c72:	f000 fcf9 	bl	8003668 <LCD_OpenWindow>
        LCD_FillColor(dotRadius * dotRadius, color);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	89db      	ldrh	r3, [r3, #14]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	89db      	ldrh	r3, [r3, #14]
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	899b      	ldrh	r3, [r3, #12]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f000 fd44 	bl	800371a <LCD_FillColor>
    }
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ZN8TouchPad9renderDotEv>:

    void renderDot()
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
    {
        LCD_OpenWindow(x + dotX, y + dotY, dotRadius, dotRadius);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	889a      	ldrh	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8a1b      	ldrh	r3, [r3, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	b298      	uxth	r0, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	88da      	ldrh	r2, [r3, #6]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8a5b      	ldrh	r3, [r3, #18]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b299      	uxth	r1, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	89da      	ldrh	r2, [r3, #14]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	89db      	ldrh	r3, [r3, #14]
 8002cc2:	f000 fcd1 	bl	8003668 <LCD_OpenWindow>
        LCD_FillColor(dotRadius * dotRadius, RED);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	89db      	ldrh	r3, [r3, #14]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	89db      	ldrh	r3, [r3, #14]
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fd1e 	bl	800371a <LCD_FillColor>
    }
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZN8TouchPad5wrapXEt>:

    uint16_t wrapX(u_int16_t x)
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]
    {
        if (x > 500)
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cf8:	d902      	bls.n	8002d00 <_ZN8TouchPad5wrapXEt+0x1a>
            return dotX; // x=2048 if not touched
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8a1b      	ldrh	r3, [r3, #16]
 8002cfe:	e01f      	b.n	8002d40 <_ZN8TouchPad5wrapXEt+0x5a>
        if (x < this->x)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	889b      	ldrh	r3, [r3, #4]
 8002d04:	887a      	ldrh	r2, [r7, #2]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d202      	bcs.n	8002d10 <_ZN8TouchPad5wrapXEt+0x2a>
            return this->x;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	889b      	ldrh	r3, [r3, #4]
 8002d0e:	e017      	b.n	8002d40 <_ZN8TouchPad5wrapXEt+0x5a>
        if (x > this->x + width - dotRadius)
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	889b      	ldrh	r3, [r3, #4]
 8002d16:	4619      	mov	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	891b      	ldrh	r3, [r3, #8]
 8002d1c:	440b      	add	r3, r1
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	89c9      	ldrh	r1, [r1, #14]
 8002d22:	1a5b      	subs	r3, r3, r1
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dd0a      	ble.n	8002d3e <_ZN8TouchPad5wrapXEt+0x58>
            return this->x + width - dotRadius;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	889a      	ldrh	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	891b      	ldrh	r3, [r3, #8]
 8002d30:	4413      	add	r3, r2
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	89db      	ldrh	r3, [r3, #14]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	e000      	b.n	8002d40 <_ZN8TouchPad5wrapXEt+0x5a>
        return x;
 8002d3e:	887b      	ldrh	r3, [r7, #2]
    }
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <_ZN8TouchPad5wrapYEt>:

    u_int16_t wrapY(u_int16_t y)
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	807b      	strh	r3, [r7, #2]
    {
        if (y > 500)
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d5c:	d902      	bls.n	8002d64 <_ZN8TouchPad5wrapYEt+0x1a>
            return dotY; // y=2048 if not touched
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8a5b      	ldrh	r3, [r3, #18]
 8002d62:	e01f      	b.n	8002da4 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y < this->y)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	88db      	ldrh	r3, [r3, #6]
 8002d68:	887a      	ldrh	r2, [r7, #2]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d202      	bcs.n	8002d74 <_ZN8TouchPad5wrapYEt+0x2a>
            return this->y;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	88db      	ldrh	r3, [r3, #6]
 8002d72:	e017      	b.n	8002da4 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y > this->y + height - dotRadius)
 8002d74:	887a      	ldrh	r2, [r7, #2]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	88db      	ldrh	r3, [r3, #6]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	895b      	ldrh	r3, [r3, #10]
 8002d80:	440b      	add	r3, r1
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	89c9      	ldrh	r1, [r1, #14]
 8002d86:	1a5b      	subs	r3, r3, r1
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dd0a      	ble.n	8002da2 <_ZN8TouchPad5wrapYEt+0x58>
            return this->y + height - dotRadius;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	88da      	ldrh	r2, [r3, #6]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	895b      	ldrh	r3, [r3, #10]
 8002d94:	4413      	add	r3, r2
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	89db      	ldrh	r3, [r3, #14]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	e000      	b.n	8002da4 <_ZN8TouchPad5wrapYEt+0x5a>
        return y;
 8002da2:	887b      	ldrh	r3, [r7, #2]
    }
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <_ZN8TouchPad6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	807b      	strh	r3, [r7, #2]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	803b      	strh	r3, [r7, #0]
    {
        // if the touchpad is not touched, do nothing
        if (x > 500 || y > 500)
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dc4:	d865      	bhi.n	8002e92 <_ZN8TouchPad6updateEtt+0xe4>
 8002dc6:	883b      	ldrh	r3, [r7, #0]
 8002dc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dcc:	d861      	bhi.n	8002e92 <_ZN8TouchPad6updateEtt+0xe4>
            return;
        if (x < this->x || x > this->x + width || y < this->y || y > this->y + height)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	889b      	ldrh	r3, [r3, #4]
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d35e      	bcc.n	8002e96 <_ZN8TouchPad6updateEtt+0xe8>
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	889b      	ldrh	r3, [r3, #4]
 8002dde:	4619      	mov	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	891b      	ldrh	r3, [r3, #8]
 8002de4:	440b      	add	r3, r1
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dc55      	bgt.n	8002e96 <_ZN8TouchPad6updateEtt+0xe8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	88db      	ldrh	r3, [r3, #6]
 8002dee:	883a      	ldrh	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d350      	bcc.n	8002e96 <_ZN8TouchPad6updateEtt+0xe8>
 8002df4:	883a      	ldrh	r2, [r7, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	88db      	ldrh	r3, [r3, #6]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	895b      	ldrh	r3, [r3, #10]
 8002e00:	440b      	add	r3, r1
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dc47      	bgt.n	8002e96 <_ZN8TouchPad6updateEtt+0xe8>
            return;

        
        int _dotX = wrapX(x) - this->x;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff6b 	bl	8002ce6 <_ZN8TouchPad5wrapXEt>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	889b      	ldrh	r3, [r3, #4]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	60fb      	str	r3, [r7, #12]
        int _dotY = wrapY(y) - this->y;
 8002e1c:	883b      	ldrh	r3, [r7, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff92 	bl	8002d4a <_ZN8TouchPad5wrapYEt>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	88db      	ldrh	r3, [r3, #6]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	60bb      	str	r3, [r7, #8]
        if (lastDotX != _dotX || lastDotY != _dotY)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8a9b      	ldrh	r3, [r3, #20]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d105      	bne.n	8002e4a <_ZN8TouchPad6updateEtt+0x9c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8adb      	ldrh	r3, [r3, #22]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d015      	beq.n	8002e76 <_ZN8TouchPad6updateEtt+0xc8>
        {
            clearDot();
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fefd 	bl	8002c4a <_ZN8TouchPad8clearDotEv>
            dotX = _dotX;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	821a      	strh	r2, [r3, #16]
            dotY = _dotY;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	825a      	strh	r2, [r3, #18]
            renderDot();
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff1a 	bl	8002c9a <_ZN8TouchPad9renderDotEv>
            lastDotX = dotX;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8a1a      	ldrh	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	829a      	strh	r2, [r3, #20]
            lastDotY = dotY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8a5a      	ldrh	r2, [r3, #18]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	82da      	strh	r2, [r3, #22]
        } // render only when the coordinate changes

        // execute the function
        if (onPressed)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00c      	beq.n	8002e98 <_ZN8TouchPad6updateEtt+0xea>
            onPressed(this, dotX, dotY);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	8a12      	ldrh	r2, [r2, #16]
 8002e86:	4611      	mov	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	8a52      	ldrh	r2, [r2, #18]
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
 8002e90:	e002      	b.n	8002e98 <_ZN8TouchPad6updateEtt+0xea>
            return;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <_ZN8TouchPad6updateEtt+0xea>
            return;
 8002e96:	bf00      	nop
    }
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZN8TouchPad9getXRatioEv>:

    float getXRatio()
 8002e9e:	b590      	push	{r4, r7, lr}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    {
        return (float)dotX / width;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8a1b      	ldrh	r3, [r3, #16]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd ff18 	bl	8000ce0 <__aeabi_ui2f>
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	891b      	ldrh	r3, [r3, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd ff16 	bl	8000ce8 <__aeabi_i2f>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f7fe f819 	bl	8000ef8 <__aeabi_fdiv>
 8002ec6:	4603      	mov	r3, r0
    }
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <_ZN8TouchPad9getYRatioEv>:

    float getYRatio()
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    {
        return (float)dotY / height;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8a5b      	ldrh	r3, [r3, #18]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd feff 	bl	8000ce0 <__aeabi_ui2f>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	895b      	ldrh	r3, [r3, #10]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fefd 	bl	8000ce8 <__aeabi_i2f>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f7fe f800 	bl	8000ef8 <__aeabi_fdiv>
 8002ef8:	4603      	mov	r3, r0
    }
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd90      	pop	{r4, r7, pc}
	...

08002f04 <_ZZ6myfuncENKUlvE_clEv>:
  for (int i = 0; i < 2560; i++)
  {
    PulseDMABuff[i] = 36;
  }

  CWButton.onPressed = [](){yServo.spinClockwise(50);};
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	2132      	movs	r1, #50	; 0x32
 8002f0e:	4803      	ldr	r0, [pc, #12]	; (8002f1c <_ZZ6myfuncENKUlvE_clEv+0x18>)
 8002f10:	f7ff fb99 	bl	8002646 <_ZN8SERVO42C13spinClockwiseEh>
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000188 	.word	0x20000188

08002f20 <_ZZ6myfuncENUlvE_4_FUNEv>:
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff ffed 	bl	8002f04 <_ZZ6myfuncENKUlvE_clEv>
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZZ6myfuncENKUlvE_cvPFvvEEv>:
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <_ZZ6myfuncENKUlvE_cvPFvvEEv+0x14>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	08002f21 	.word	0x08002f21

08002f44 <_ZZ6myfuncENKUlvE0_clEv>:
  CWButton.onReleased = [](){yServo.spinClockwise(0);};
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4803      	ldr	r0, [pc, #12]	; (8002f5c <_ZZ6myfuncENKUlvE0_clEv+0x18>)
 8002f50:	f7ff fb79 	bl	8002646 <_ZN8SERVO42C13spinClockwiseEh>
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000188 	.word	0x20000188

08002f60 <_ZZ6myfuncENUlvE0_4_FUNEv>:
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7ff ffed 	bl	8002f44 <_ZZ6myfuncENKUlvE0_clEv>
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZZ6myfuncENKUlvE0_cvPFvvEEv>:
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <_ZZ6myfuncENKUlvE0_cvPFvvEEv+0x14>)
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	08002f61 	.word	0x08002f61

08002f84 <_ZZ6myfuncENKUlvE1_clEv>:
  CCWButton.onPressed = [](){yServo.spinCounterClockwise(50);};
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	2132      	movs	r1, #50	; 0x32
 8002f8e:	4803      	ldr	r0, [pc, #12]	; (8002f9c <_ZZ6myfuncENKUlvE1_clEv+0x18>)
 8002f90:	f7ff fb69 	bl	8002666 <_ZN8SERVO42C20spinCounterClockwiseEh>
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000188 	.word	0x20000188

08002fa0 <_ZZ6myfuncENUlvE1_4_FUNEv>:
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7ff ffed 	bl	8002f84 <_ZZ6myfuncENKUlvE1_clEv>
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_ZZ6myfuncENKUlvE1_cvPFvvEEv>:
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <_ZZ6myfuncENKUlvE1_cvPFvvEEv+0x14>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	08002fa1 	.word	0x08002fa1

08002fc4 <_ZZ6myfuncENKUlvE2_clEv>:
  CCWButton.onReleased = [](){yServo.spinCounterClockwise(0);};
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4803      	ldr	r0, [pc, #12]	; (8002fdc <_ZZ6myfuncENKUlvE2_clEv+0x18>)
 8002fd0:	f7ff fb49 	bl	8002666 <_ZN8SERVO42C20spinCounterClockwiseEh>
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000188 	.word	0x20000188

08002fe0 <_ZZ6myfuncENUlvE2_4_FUNEv>:
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff ffed 	bl	8002fc4 <_ZZ6myfuncENKUlvE2_clEv>
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_ZZ6myfuncENKUlvE2_cvPFvvEEv>:
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <_ZZ6myfuncENKUlvE2_cvPFvvEEv+0x14>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	08002fe1 	.word	0x08002fe1

08003004 <_ZZ6myfuncENKUlvE3_clEv>:
  testButton.onPressed = [](){
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    // xPulseMotor.pulse(200);
    PulseDMABuff[200] = 0;
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <_ZZ6myfuncENKUlvE3_clEv+0x30>)
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
    __HAL_TIM_SET_PRESCALER(&htim3, 1000-1);
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_ZZ6myfuncENKUlvE3_clEv+0x34>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)PulseDMABuff, 201);
 800301e:	23c9      	movs	r3, #201	; 0xc9
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <_ZZ6myfuncENKUlvE3_clEv+0x30>)
 8003022:	2100      	movs	r1, #0
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <_ZZ6myfuncENKUlvE3_clEv+0x34>)
 8003026:	f005 fb53 	bl	80086d0 <HAL_TIM_PWM_Start_DMA>
    // xServo.receiveEncoder();
    // printToLCD("x Encoder" + String(xServo.getEncoder()), 1);
  };
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000420 	.word	0x20000420
 8003038:	200030bc 	.word	0x200030bc

0800303c <_ZZ6myfuncENUlvE3_4_FUNEv>:
  testButton.onPressed = [](){
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  };
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff ffdf 	bl	8003004 <_ZZ6myfuncENKUlvE3_clEv>
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZZ6myfuncENKUlvE3_cvPFvvEEv>:
  testButton.onPressed = [](){
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  };
 8003050:	4b02      	ldr	r3, [pc, #8]	; (800305c <_ZZ6myfuncENKUlvE3_cvPFvvEEv+0x14>)
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	0800303d 	.word	0x0800303d

08003060 <_ZZ6myfuncENKUlvE4_clEv>:
  test2Button.onPressed = [](){
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
    // sprintf(str, "ErrorAngle: %.3f", xServo.getErrorAngle());
    // printToLCD(str, 2);
    // yServo.setPosition(testSlider.getValue());
    // debugLog(String(testTouchPad.getXRatio()*264),19);
    // xServo.setPosition(testTouchPad.getXRatio()*264);
    setPosition3d(testTouchPad.getXRatio()*264, testTouchPad.getYRatio()*146, 0);
 8003068:	480e      	ldr	r0, [pc, #56]	; (80030a4 <_ZZ6myfuncENKUlvE4_clEv+0x44>)
 800306a:	f7ff ff18 	bl	8002e9e <_ZN8TouchPad9getXRatioEv>
 800306e:	4603      	mov	r3, r0
 8003070:	490d      	ldr	r1, [pc, #52]	; (80030a8 <_ZZ6myfuncENKUlvE4_clEv+0x48>)
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fe8c 	bl	8000d90 <__aeabi_fmul>
 8003078:	4603      	mov	r3, r0
 800307a:	461c      	mov	r4, r3
 800307c:	4809      	ldr	r0, [pc, #36]	; (80030a4 <_ZZ6myfuncENKUlvE4_clEv+0x44>)
 800307e:	f7ff ff27 	bl	8002ed0 <_ZN8TouchPad9getYRatioEv>
 8003082:	4603      	mov	r3, r0
 8003084:	4909      	ldr	r1, [pc, #36]	; (80030ac <_ZZ6myfuncENKUlvE4_clEv+0x4c>)
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fe82 	bl	8000d90 <__aeabi_fmul>
 800308c:	4603      	mov	r3, r0
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4619      	mov	r1, r3
 8003094:	4620      	mov	r0, r4
 8003096:	f7fe ffbf 	bl	8002018 <_Z13setPosition3dfff>
  };
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000404 	.word	0x20000404
 80030a8:	43840000 	.word	0x43840000
 80030ac:	43120000 	.word	0x43120000

080030b0 <_ZZ6myfuncENUlvE4_4_FUNEv>:
  test2Button.onPressed = [](){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  };
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff ffd3 	bl	8003060 <_ZZ6myfuncENKUlvE4_clEv>
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_ZZ6myfuncENKUlvE4_cvPFvvEEv>:
  test2Button.onPressed = [](){
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  };
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <_ZZ6myfuncENKUlvE4_cvPFvvEEv+0x14>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	080030b1 	.word	0x080030b1

080030d4 <_ZZ6myfuncENKUlvE5_clEv>:
  test3Button.onPressed = [](){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b098      	sub	sp, #96	; 0x60
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
    yServo.receiveEncoder();
 80030dc:	2103      	movs	r1, #3
 80030de:	4811      	ldr	r0, [pc, #68]	; (8003124 <_ZZ6myfuncENKUlvE5_clEv+0x50>)
 80030e0:	f7fe fe94 	bl	8001e0c <_ZN8SERVO42C14receiveEncoderEi>
    char str[20];
    sprintf(str, "yPos=%.2f", yServo.getPosition());
 80030e4:	480f      	ldr	r0, [pc, #60]	; (8003124 <_ZZ6myfuncENKUlvE5_clEv+0x50>)
 80030e6:	f7fe fd97 	bl	8001c18 <_ZN8SERVO42C11getPositionEv>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa07 	bl	8000500 <__aeabi_f2d>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	f107 0008 	add.w	r0, r7, #8
 80030fa:	490b      	ldr	r1, [pc, #44]	; (8003128 <_ZZ6myfuncENKUlvE5_clEv+0x54>)
 80030fc:	f002 f958 	bl	80053b0 <sprintf_>
    printToLCD(str, 2);
 8003100:	f107 0208 	add.w	r2, r7, #8
 8003104:	f107 031c 	add.w	r3, r7, #28
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f9aa 	bl	8001464 <_ZN6StringC1EPKc>
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	2102      	movs	r1, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f003 f826 	bl	8006168 <_Z10printToLCDRK6Stringt>
  };
 800311c:	bf00      	nop
 800311e:	3760      	adds	r7, #96	; 0x60
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000188 	.word	0x20000188
 8003128:	0800ad3c 	.word	0x0800ad3c

0800312c <_ZZ6myfuncENUlvE5_4_FUNEv>:
  test3Button.onPressed = [](){
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  };
 8003130:	2000      	movs	r0, #0
 8003132:	f7ff ffcf 	bl	80030d4 <_ZZ6myfuncENKUlvE5_clEv>
 8003136:	bd80      	pop	{r7, pc}

08003138 <_ZZ6myfuncENKUlvE5_cvPFvvEEv>:
  test3Button.onPressed = [](){
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  };
 8003140:	4b02      	ldr	r3, [pc, #8]	; (800314c <_ZZ6myfuncENKUlvE5_cvPFvvEEv+0x14>)
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	0800312d 	.word	0x0800312d

08003150 <myfunc>:
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b09a      	sub	sp, #104	; 0x68
 8003154:	af00      	add	r7, sp, #0
  for (int i = 0; i < 2560; i++)
 8003156:	2300      	movs	r3, #0
 8003158:	667b      	str	r3, [r7, #100]	; 0x64
 800315a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800315c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003160:	da08      	bge.n	8003174 <myfunc+0x24>
    PulseDMABuff[i] = 36;
 8003162:	4a27      	ldr	r2, [pc, #156]	; (8003200 <myfunc+0xb0>)
 8003164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003166:	2124      	movs	r1, #36	; 0x24
 8003168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < 2560; i++)
 800316c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800316e:	3301      	adds	r3, #1
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
 8003172:	e7f2      	b.n	800315a <myfunc+0xa>
  CWButton.onPressed = [](){yServo.spinClockwise(50);};
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fed8 	bl	8002f2c <_ZZ6myfuncENKUlvE_cvPFvvEEv>
 800317c:	4603      	mov	r3, r0
 800317e:	4a21      	ldr	r2, [pc, #132]	; (8003204 <myfunc+0xb4>)
 8003180:	6293      	str	r3, [r2, #40]	; 0x28
  CWButton.onReleased = [](){yServo.spinClockwise(0);};
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fef0 	bl	8002f6c <_ZZ6myfuncENKUlvE0_cvPFvvEEv>
 800318c:	4603      	mov	r3, r0
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <myfunc+0xb4>)
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
  CCWButton.onPressed = [](){yServo.spinCounterClockwise(50);};
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff08 	bl	8002fac <_ZZ6myfuncENKUlvE1_cvPFvvEEv>
 800319c:	4603      	mov	r3, r0
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <myfunc+0xb8>)
 80031a0:	6293      	str	r3, [r2, #40]	; 0x28
  CCWButton.onReleased = [](){yServo.spinCounterClockwise(0);};
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff20 	bl	8002fec <_ZZ6myfuncENKUlvE2_cvPFvvEEv>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4a16      	ldr	r2, [pc, #88]	; (8003208 <myfunc+0xb8>)
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
  };
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ff46 	bl	8003048 <_ZZ6myfuncENKUlvE3_cvPFvvEEv>
 80031bc:	4603      	mov	r3, r0
  testButton.onPressed = [](){
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <myfunc+0xbc>)
 80031c0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 80031c2:	f107 0318 	add.w	r3, r7, #24
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff78 	bl	80030bc <_ZZ6myfuncENKUlvE4_cvPFvvEEv>
 80031cc:	4603      	mov	r3, r0
  test2Button.onPressed = [](){
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <myfunc+0xc0>)
 80031d0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ffae 	bl	8003138 <_ZZ6myfuncENKUlvE5_cvPFvvEEv>
 80031dc:	4603      	mov	r3, r0
  test3Button.onPressed = [](){
 80031de:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <myfunc+0xc4>)
 80031e0:	6293      	str	r3, [r2, #40]	; 0x28

  

  strType_XPT2046_Coordinate touch;
  printToLCD("Hello World 1", 1);
 80031e2:	f107 0320 	add.w	r3, r7, #32
 80031e6:	490c      	ldr	r1, [pc, #48]	; (8003218 <myfunc+0xc8>)
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe f93b 	bl	8001464 <_ZN6StringC1EPKc>
 80031ee:	f107 0320 	add.w	r3, r7, #32
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 ffb7 	bl	8006168 <_Z10printToLCDRK6Stringt>
    // HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
    // char str[3] = {};
    // sprintf(str, "%02X", data[0]);

    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
    UIElement::updateAllElements();
 80031fa:	f7fe f949 	bl	8001490 <_ZN9UIElement17updateAllElementsEv>
 80031fe:	e7fc      	b.n	80031fa <myfunc+0xaa>
 8003200:	20000420 	.word	0x20000420
 8003204:	2000037c 	.word	0x2000037c
 8003208:	20000348 	.word	0x20000348
 800320c:	200002e0 	.word	0x200002e0
 8003210:	20000314 	.word	0x20000314
 8003214:	200003b0 	.word	0x200003b0
 8003218:	0800ad48 	.word	0x0800ad48

0800321c <_Z41__static_initialization_and_destruction_0ii>:
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
    // HAL_Delay(500);
  }
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af04      	add	r7, sp, #16
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d169      	bne.n	8003300 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003232:	4293      	cmp	r3, r2
 8003234:	d164      	bne.n	8003300 <_Z41__static_initialization_and_destruction_0ii+0xe4>
Button testButton(170, 50, "YStep", 40, 40);
 8003236:	2300      	movs	r3, #0
 8003238:	9303      	str	r3, [sp, #12]
 800323a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	2328      	movs	r3, #40	; 0x28
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	2328      	movs	r3, #40	; 0x28
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800324a:	2232      	movs	r2, #50	; 0x32
 800324c:	21aa      	movs	r1, #170	; 0xaa
 800324e:	482f      	ldr	r0, [pc, #188]	; (800330c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8003250:	f7ff fa7a 	bl	8002748 <_ZN6ButtonC1EttPctttt>
Button test2Button(170, 0, "SetPos", 40, 40);
 8003254:	2300      	movs	r3, #0
 8003256:	9303      	str	r3, [sp, #12]
 8003258:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800325c:	9302      	str	r3, [sp, #8]
 800325e:	2328      	movs	r3, #40	; 0x28
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2328      	movs	r3, #40	; 0x28
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8003268:	2200      	movs	r2, #0
 800326a:	21aa      	movs	r1, #170	; 0xaa
 800326c:	4829      	ldr	r0, [pc, #164]	; (8003314 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800326e:	f7ff fa6b 	bl	8002748 <_ZN6ButtonC1EttPctttt>
Button CCWButton(30, 50, "YCCW", 40, 40);
 8003272:	2300      	movs	r3, #0
 8003274:	9303      	str	r3, [sp, #12]
 8003276:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800327a:	9302      	str	r3, [sp, #8]
 800327c:	2328      	movs	r3, #40	; 0x28
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	2328      	movs	r3, #40	; 0x28
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003286:	2232      	movs	r2, #50	; 0x32
 8003288:	211e      	movs	r1, #30
 800328a:	4824      	ldr	r0, [pc, #144]	; (800331c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800328c:	f7ff fa5c 	bl	8002748 <_ZN6ButtonC1EttPctttt>
Button CWButton(100, 50, "YCW", 40, 40);
 8003290:	2300      	movs	r3, #0
 8003292:	9303      	str	r3, [sp, #12]
 8003294:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003298:	9302      	str	r3, [sp, #8]
 800329a:	2328      	movs	r3, #40	; 0x28
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2328      	movs	r3, #40	; 0x28
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80032a4:	2232      	movs	r2, #50	; 0x32
 80032a6:	2164      	movs	r1, #100	; 0x64
 80032a8:	481e      	ldr	r0, [pc, #120]	; (8003324 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80032aa:	f7ff fa4d 	bl	8002748 <_ZN6ButtonC1EttPctttt>
Button test3Button(120, 0, "GetPos", 40, 40);
 80032ae:	2300      	movs	r3, #0
 80032b0:	9303      	str	r3, [sp, #12]
 80032b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80032b6:	9302      	str	r3, [sp, #8]
 80032b8:	2328      	movs	r3, #40	; 0x28
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2328      	movs	r3, #40	; 0x28
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	2178      	movs	r1, #120	; 0x78
 80032c6:	4819      	ldr	r0, [pc, #100]	; (800332c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80032c8:	f7ff fa3e 	bl	8002748 <_ZN6ButtonC1EttPctttt>
Slider testSlider(200, 120, 100);
 80032cc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80032d0:	9302      	str	r3, [sp, #8]
 80032d2:	2382      	movs	r3, #130	; 0x82
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	230a      	movs	r3, #10
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2364      	movs	r3, #100	; 0x64
 80032dc:	2278      	movs	r2, #120	; 0x78
 80032de:	21c8      	movs	r1, #200	; 0xc8
 80032e0:	4813      	ldr	r0, [pc, #76]	; (8003330 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80032e2:	f7ff fb09 	bl	80028f8 <_ZN6SliderC1Etttttt>
TouchPad testTouchPad(0, 120);
 80032e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80032ea:	9302      	str	r3, [sp, #8]
 80032ec:	2396      	movs	r3, #150	; 0x96
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	2396      	movs	r3, #150	; 0x96
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2300      	movs	r3, #0
 80032f6:	2278      	movs	r2, #120	; 0x78
 80032f8:	2100      	movs	r1, #0
 80032fa:	480e      	ldr	r0, [pc, #56]	; (8003334 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80032fc:	f7ff fc3e 	bl	8002b7c <_ZN8TouchPadC1EttPFvPS_iiEttt>
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	0800ad58 	.word	0x0800ad58
 800330c:	200002e0 	.word	0x200002e0
 8003310:	0800ad60 	.word	0x0800ad60
 8003314:	20000314 	.word	0x20000314
 8003318:	0800ad68 	.word	0x0800ad68
 800331c:	20000348 	.word	0x20000348
 8003320:	0800ad70 	.word	0x0800ad70
 8003324:	2000037c 	.word	0x2000037c
 8003328:	0800ad74 	.word	0x0800ad74
 800332c:	200003b0 	.word	0x200003b0
 8003330:	200003e4 	.word	0x200003e4
 8003334:	20000404 	.word	0x20000404

08003338 <_GLOBAL__sub_I_testButton>:
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
 800333c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003340:	2001      	movs	r0, #1
 8003342:	f7ff ff6b 	bl	800321c <_Z41__static_initialization_and_destruction_0ii>
 8003346:	bd80      	pop	{r7, pc}

08003348 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	e002      	b.n	8003358 <Delay+0x10>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3b01      	subs	r3, #1
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f9      	bne.n	8003352 <Delay+0xa>
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 800336a:	b580      	push	{r7, lr}
 800336c:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 800336e:	2001      	movs	r0, #1
 8003370:	f000 f826 	bl	80033c0 <LCD_BackLed_Control>
	LCD_Rst();
 8003374:	f000 f80c 	bl	8003390 <LCD_Rst>
	LCD_REG_Config();
 8003378:	f000 f85c 	bl	8003434 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 800337c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003380:	22f0      	movs	r2, #240	; 0xf0
 8003382:	2100      	movs	r1, #0
 8003384:	2000      	movs	r0, #0
 8003386:	f000 f9e7 	bl	8003758 <LCD_Clear>
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8003394:	2200      	movs	r2, #0
 8003396:	2102      	movs	r1, #2
 8003398:	4807      	ldr	r0, [pc, #28]	; (80033b8 <LCD_Rst+0x28>)
 800339a:	f004 fb28 	bl	80079ee <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800339e:	4807      	ldr	r0, [pc, #28]	; (80033bc <LCD_Rst+0x2c>)
 80033a0:	f7ff ffd2 	bl	8003348 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80033a4:	2201      	movs	r2, #1
 80033a6:	2102      	movs	r1, #2
 80033a8:	4803      	ldr	r0, [pc, #12]	; (80033b8 <LCD_Rst+0x28>)
 80033aa:	f004 fb20 	bl	80079ee <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80033ae:	4803      	ldr	r0, [pc, #12]	; (80033bc <LCD_Rst+0x2c>)
 80033b0:	f7ff ffca 	bl	8003348 <Delay>
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40011800 	.word	0x40011800
 80033bc:	0002bffc 	.word	0x0002bffc

080033c0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80033d0:	2200      	movs	r2, #0
 80033d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d6:	4807      	ldr	r0, [pc, #28]	; (80033f4 <LCD_BackLed_Control+0x34>)
 80033d8:	f004 fb09 	bl	80079ee <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80033dc:	e005      	b.n	80033ea <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80033de:	2201      	movs	r2, #1
 80033e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <LCD_BackLed_Control+0x34>)
 80033e6:	f004 fb02 	bl	80079ee <HAL_GPIO_WritePin>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40011400 	.word	0x40011400

080033f8 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8003402:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	8013      	strh	r3, [r2, #0]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <LCD_Write_Data+0x1c>)
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	8013      	strh	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	60020000 	.word	0x60020000

08003434 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8003438:	20cf      	movs	r0, #207	; 0xcf
 800343a:	f7ff ffdd 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800343e:	2000      	movs	r0, #0
 8003440:	f7ff ffe8 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8003444:	2081      	movs	r0, #129	; 0x81
 8003446:	f7ff ffe5 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800344a:	2030      	movs	r0, #48	; 0x30
 800344c:	f7ff ffe2 	bl	8003414 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8003450:	20ed      	movs	r0, #237	; 0xed
 8003452:	f7ff ffd1 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8003456:	2064      	movs	r0, #100	; 0x64
 8003458:	f7ff ffdc 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800345c:	2003      	movs	r0, #3
 800345e:	f7ff ffd9 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8003462:	2012      	movs	r0, #18
 8003464:	f7ff ffd6 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8003468:	2081      	movs	r0, #129	; 0x81
 800346a:	f7ff ffd3 	bl	8003414 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800346e:	20e8      	movs	r0, #232	; 0xe8
 8003470:	f7ff ffc2 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8003474:	2085      	movs	r0, #133	; 0x85
 8003476:	f7ff ffcd 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800347a:	2010      	movs	r0, #16
 800347c:	f7ff ffca 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8003480:	2078      	movs	r0, #120	; 0x78
 8003482:	f7ff ffc7 	bl	8003414 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8003486:	20cb      	movs	r0, #203	; 0xcb
 8003488:	f7ff ffb6 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 800348c:	2039      	movs	r0, #57	; 0x39
 800348e:	f7ff ffc1 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8003492:	202c      	movs	r0, #44	; 0x2c
 8003494:	f7ff ffbe 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff ffbb 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800349e:	2034      	movs	r0, #52	; 0x34
 80034a0:	f7ff ffb8 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80034a4:	2002      	movs	r0, #2
 80034a6:	f7ff ffb5 	bl	8003414 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80034aa:	20f7      	movs	r0, #247	; 0xf7
 80034ac:	f7ff ffa4 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80034b0:	2020      	movs	r0, #32
 80034b2:	f7ff ffaf 	bl	8003414 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80034b6:	20ea      	movs	r0, #234	; 0xea
 80034b8:	f7ff ff9e 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80034bc:	2000      	movs	r0, #0
 80034be:	f7ff ffa9 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7ff ffa6 	bl	8003414 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80034c8:	20b1      	movs	r0, #177	; 0xb1
 80034ca:	f7ff ff95 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7ff ffa0 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80034d4:	201b      	movs	r0, #27
 80034d6:	f7ff ff9d 	bl	8003414 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80034da:	20b6      	movs	r0, #182	; 0xb6
 80034dc:	f7ff ff8c 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80034e0:	200a      	movs	r0, #10
 80034e2:	f7ff ff97 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80034e6:	20a2      	movs	r0, #162	; 0xa2
 80034e8:	f7ff ff94 	bl	8003414 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80034ec:	20c0      	movs	r0, #192	; 0xc0
 80034ee:	f7ff ff83 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80034f2:	2035      	movs	r0, #53	; 0x35
 80034f4:	f7ff ff8e 	bl	8003414 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80034f8:	20c1      	movs	r0, #193	; 0xc1
 80034fa:	f7ff ff7d 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80034fe:	2011      	movs	r0, #17
 8003500:	f7ff ff88 	bl	8003414 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8003504:	20c5      	movs	r0, #197	; 0xc5
 8003506:	f7ff ff77 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800350a:	2045      	movs	r0, #69	; 0x45
 800350c:	f7ff ff82 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8003510:	2045      	movs	r0, #69	; 0x45
 8003512:	f7ff ff7f 	bl	8003414 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8003516:	20c7      	movs	r0, #199	; 0xc7
 8003518:	f7ff ff6e 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800351c:	20a2      	movs	r0, #162	; 0xa2
 800351e:	f7ff ff79 	bl	8003414 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8003522:	20f2      	movs	r0, #242	; 0xf2
 8003524:	f7ff ff68 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003528:	2000      	movs	r0, #0
 800352a:	f7ff ff73 	bl	8003414 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800352e:	2026      	movs	r0, #38	; 0x26
 8003530:	f7ff ff62 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8003534:	2001      	movs	r0, #1
 8003536:	f7ff ff6d 	bl	8003414 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800353a:	20e0      	movs	r0, #224	; 0xe0
 800353c:	f7ff ff5c 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8003540:	200f      	movs	r0, #15
 8003542:	f7ff ff67 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8003546:	2026      	movs	r0, #38	; 0x26
 8003548:	f7ff ff64 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 800354c:	2024      	movs	r0, #36	; 0x24
 800354e:	f7ff ff61 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8003552:	200b      	movs	r0, #11
 8003554:	f7ff ff5e 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8003558:	200e      	movs	r0, #14
 800355a:	f7ff ff5b 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800355e:	2009      	movs	r0, #9
 8003560:	f7ff ff58 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8003564:	2054      	movs	r0, #84	; 0x54
 8003566:	f7ff ff55 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800356a:	20a8      	movs	r0, #168	; 0xa8
 800356c:	f7ff ff52 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8003570:	2046      	movs	r0, #70	; 0x46
 8003572:	f7ff ff4f 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8003576:	200c      	movs	r0, #12
 8003578:	f7ff ff4c 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 800357c:	2017      	movs	r0, #23
 800357e:	f7ff ff49 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8003582:	2009      	movs	r0, #9
 8003584:	f7ff ff46 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8003588:	200f      	movs	r0, #15
 800358a:	f7ff ff43 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800358e:	2007      	movs	r0, #7
 8003590:	f7ff ff40 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003594:	2000      	movs	r0, #0
 8003596:	f7ff ff3d 	bl	8003414 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800359a:	20e1      	movs	r0, #225	; 0xe1
 800359c:	f7ff ff2c 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7ff ff37 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80035a6:	2019      	movs	r0, #25
 80035a8:	f7ff ff34 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80035ac:	201b      	movs	r0, #27
 80035ae:	f7ff ff31 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80035b2:	2004      	movs	r0, #4
 80035b4:	f7ff ff2e 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80035b8:	2010      	movs	r0, #16
 80035ba:	f7ff ff2b 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80035be:	2007      	movs	r0, #7
 80035c0:	f7ff ff28 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80035c4:	202a      	movs	r0, #42	; 0x2a
 80035c6:	f7ff ff25 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80035ca:	2047      	movs	r0, #71	; 0x47
 80035cc:	f7ff ff22 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80035d0:	2039      	movs	r0, #57	; 0x39
 80035d2:	f7ff ff1f 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80035d6:	2003      	movs	r0, #3
 80035d8:	f7ff ff1c 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80035dc:	2006      	movs	r0, #6
 80035de:	f7ff ff19 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80035e2:	2006      	movs	r0, #6
 80035e4:	f7ff ff16 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80035e8:	2030      	movs	r0, #48	; 0x30
 80035ea:	f7ff ff13 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80035ee:	2038      	movs	r0, #56	; 0x38
 80035f0:	f7ff ff10 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80035f4:	200f      	movs	r0, #15
 80035f6:	f7ff ff0d 	bl	8003414 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80035fa:	2036      	movs	r0, #54	; 0x36
 80035fc:	f7ff fefc 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8003600:	20c8      	movs	r0, #200	; 0xc8
 8003602:	f7ff ff07 	bl	8003414 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8003606:	202a      	movs	r0, #42	; 0x2a
 8003608:	f7ff fef6 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800360c:	2000      	movs	r0, #0
 800360e:	f7ff ff01 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003612:	2000      	movs	r0, #0
 8003614:	f7ff fefe 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003618:	2000      	movs	r0, #0
 800361a:	f7ff fefb 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800361e:	20ef      	movs	r0, #239	; 0xef
 8003620:	f7ff fef8 	bl	8003414 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8003624:	202b      	movs	r0, #43	; 0x2b
 8003626:	f7ff fee7 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800362a:	2000      	movs	r0, #0
 800362c:	f7ff fef2 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003630:	2000      	movs	r0, #0
 8003632:	f7ff feef 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8003636:	2001      	movs	r0, #1
 8003638:	f7ff feec 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800363c:	203f      	movs	r0, #63	; 0x3f
 800363e:	f7ff fee9 	bl	8003414 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8003642:	203a      	movs	r0, #58	; 0x3a
 8003644:	f7ff fed8 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8003648:	2055      	movs	r0, #85	; 0x55
 800364a:	f7ff fee3 	bl	8003414 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800364e:	2011      	movs	r0, #17
 8003650:	f7ff fed2 	bl	80033f8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8003654:	4803      	ldr	r0, [pc, #12]	; (8003664 <LCD_REG_Config+0x230>)
 8003656:	f7ff fe77 	bl	8003348 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800365a:	2029      	movs	r0, #41	; 0x29
 800365c:	f7ff fecc 	bl	80033f8 <LCD_Write_Cmd>
	
}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	0002bffc 	.word	0x0002bffc

08003668 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4623      	mov	r3, r4
 8003678:	80fb      	strh	r3, [r7, #6]
 800367a:	4603      	mov	r3, r0
 800367c:	80bb      	strh	r3, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	807b      	strh	r3, [r7, #2]
 8003682:	4613      	mov	r3, r2
 8003684:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8003686:	202a      	movs	r0, #42	; 0x2a
 8003688:	f7ff feb6 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff febe 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	b29b      	uxth	r3, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff feb8 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	887b      	ldrh	r3, [r7, #2]
 80036a8:	4413      	add	r3, r2
 80036aa:	3b01      	subs	r3, #1
 80036ac:	121b      	asrs	r3, r3, #8
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff feaf 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	4413      	add	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fea4 	bl	8003414 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80036cc:	202b      	movs	r0, #43	; 0x2b
 80036ce:	f7ff fe93 	bl	80033f8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80036d2:	88bb      	ldrh	r3, [r7, #4]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fe9b 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80036de:	88bb      	ldrh	r3, [r7, #4]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fe95 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80036ea:	88ba      	ldrh	r2, [r7, #4]
 80036ec:	883b      	ldrh	r3, [r7, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	3b01      	subs	r3, #1
 80036f2:	121b      	asrs	r3, r3, #8
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fe8c 	bl	8003414 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80036fc:	88ba      	ldrh	r2, [r7, #4]
 80036fe:	883b      	ldrh	r3, [r7, #0]
 8003700:	4413      	add	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fe81 	bl	8003414 <LCD_Write_Data>
	
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}

0800371a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800372a:	202c      	movs	r0, #44	; 0x2c
 800372c:	f7ff fe64 	bl	80033f8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	e006      	b.n	8003744 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fe6b 	bl	8003414 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3301      	adds	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d3f4      	bcc.n	8003736 <LCD_FillColor+0x1c>
		
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	4604      	mov	r4, r0
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	80fb      	strh	r3, [r7, #6]
 800376a:	4603      	mov	r3, r0
 800376c:	80bb      	strh	r3, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	807b      	strh	r3, [r7, #2]
 8003772:	4613      	mov	r3, r2
 8003774:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <LCD_Clear+0x58>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <LCD_Clear+0x2a>
 800377e:	2300      	movs	r3, #0
 8003780:	e001      	b.n	8003786 <LCD_Clear+0x2e>
 8003782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003786:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8003788:	883b      	ldrh	r3, [r7, #0]
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	88b9      	ldrh	r1, [r7, #4]
 800378e:	88f8      	ldrh	r0, [r7, #6]
 8003790:	f7ff ff6a 	bl	8003668 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	883a      	ldrh	r2, [r7, #0]
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	461a      	mov	r2, r3
 800379e:	89fb      	ldrh	r3, [r7, #14]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7ff ffb9 	bl	800371a <LCD_FillColor>
	
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd90      	pop	{r4, r7, pc}
 80037b0:	20002c20 	.word	0x20002c20

080037b4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
 80037be:	460b      	mov	r3, r1
 80037c0:	80bb      	strh	r3, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <LCD_DrawChar+0xb0>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <LCD_DrawChar+0x20>
 80037ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d2:	e000      	b.n	80037d6 <LCD_DrawChar+0x22>
 80037d4:	2300      	movs	r3, #0
 80037d6:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80037d8:	4b22      	ldr	r3, [pc, #136]	; (8003864 <LCD_DrawChar+0xb0>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <LCD_DrawChar+0x30>
 80037e0:	2300      	movs	r3, #0
 80037e2:	e001      	b.n	80037e8 <LCD_DrawChar+0x34>
 80037e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e8:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	3b20      	subs	r3, #32
 80037ee:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80037f0:	88b9      	ldrh	r1, [r7, #4]
 80037f2:	88f8      	ldrh	r0, [r7, #6]
 80037f4:	2310      	movs	r3, #16
 80037f6:	2208      	movs	r2, #8
 80037f8:	f7ff ff36 	bl	8003668 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80037fc:	202c      	movs	r0, #44	; 0x2c
 80037fe:	f7ff fdfb 	bl	80033f8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003802:	2300      	movs	r3, #0
 8003804:	75bb      	strb	r3, [r7, #22]
 8003806:	e024      	b.n	8003852 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	7dbb      	ldrb	r3, [r7, #22]
 800380c:	4916      	ldr	r1, [pc, #88]	; (8003868 <LCD_DrawChar+0xb4>)
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	440a      	add	r2, r1
 8003812:	4413      	add	r3, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003818:	2300      	movs	r3, #0
 800381a:	757b      	strb	r3, [r7, #21]
 800381c:	e013      	b.n	8003846 <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 8003828:	8a7b      	ldrh	r3, [r7, #18]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fdf2 	bl	8003414 <LCD_Write_Data>
 8003830:	e003      	b.n	800383a <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8003832:	8a3b      	ldrh	r3, [r7, #16]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fded 	bl	8003414 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003840:	7d7b      	ldrb	r3, [r7, #21]
 8003842:	3301      	adds	r3, #1
 8003844:	757b      	strb	r3, [r7, #21]
 8003846:	7d7b      	ldrb	r3, [r7, #21]
 8003848:	2b07      	cmp	r3, #7
 800384a:	d9e8      	bls.n	800381e <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800384c:	7dbb      	ldrb	r3, [r7, #22]
 800384e:	3301      	adds	r3, #1
 8003850:	75bb      	strb	r3, [r7, #22]
 8003852:	7dbb      	ldrb	r3, [r7, #22]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d9d7      	bls.n	8003808 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20002c20 	.word	0x20002c20
 8003868:	0800ae00 	.word	0x0800ae00

0800386c <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	603a      	str	r2, [r7, #0]
 8003876:	80fb      	strh	r3, [r7, #6]
 8003878:	460b      	mov	r3, r1
 800387a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800387c:	e01c      	b.n	80038b8 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2be8      	cmp	r3, #232	; 0xe8
 8003882:	d904      	bls.n	800388e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003884:	2300      	movs	r3, #0
 8003886:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8003888:	88bb      	ldrh	r3, [r7, #4]
 800388a:	3310      	adds	r3, #16
 800388c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800388e:	88bb      	ldrh	r3, [r7, #4]
 8003890:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003894:	d903      	bls.n	800389e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003896:	2300      	movs	r3, #0
 8003898:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800389a:	2300      	movs	r3, #0
 800389c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	88b9      	ldrh	r1, [r7, #4]
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff84 	bl	80037b4 <LCD_DrawChar>
		
		pStr ++;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	3308      	adds	r3, #8
 80038b6:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1de      	bne.n	800387e <LCD_DrawString+0x12>
		
	}
	
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	80fb      	strh	r3, [r7, #6]
 80038de:	4603      	mov	r3, r0
 80038e0:	80bb      	strh	r3, [r7, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	70fb      	strb	r3, [r7, #3]
 80038e6:	4613      	mov	r3, r2
 80038e8:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	3b20      	subs	r3, #32
 80038ee:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80038f0:	88b9      	ldrh	r1, [r7, #4]
 80038f2:	88f8      	ldrh	r0, [r7, #6]
 80038f4:	2310      	movs	r3, #16
 80038f6:	2208      	movs	r2, #8
 80038f8:	f7ff feb6 	bl	8003668 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80038fc:	202c      	movs	r0, #44	; 0x2c
 80038fe:	f7ff fd7b 	bl	80033f8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003902:	2300      	movs	r3, #0
 8003904:	73bb      	strb	r3, [r7, #14]
 8003906:	e024      	b.n	8003952 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8003908:	7b3a      	ldrb	r2, [r7, #12]
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	4915      	ldr	r1, [pc, #84]	; (8003964 <LCD_DrawChar_Color+0x98>)
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	440a      	add	r2, r1
 8003912:	4413      	add	r3, r2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003918:	2300      	movs	r3, #0
 800391a:	737b      	strb	r3, [r7, #13]
 800391c:	e013      	b.n	8003946 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8003928:	8c3b      	ldrh	r3, [r7, #32]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fd72 	bl	8003414 <LCD_Write_Data>
 8003930:	e003      	b.n	800393a <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8003932:	883b      	ldrh	r3, [r7, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fd6d 	bl	8003414 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003940:	7b7b      	ldrb	r3, [r7, #13]
 8003942:	3301      	adds	r3, #1
 8003944:	737b      	strb	r3, [r7, #13]
 8003946:	7b7b      	ldrb	r3, [r7, #13]
 8003948:	2b07      	cmp	r3, #7
 800394a:	d9e8      	bls.n	800391e <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	3301      	adds	r3, #1
 8003950:	73bb      	strb	r3, [r7, #14]
 8003952:	7bbb      	ldrb	r3, [r7, #14]
 8003954:	2b0f      	cmp	r3, #15
 8003956:	d9d7      	bls.n	8003908 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	bf00      	nop
 8003964:	0800ae00 	.word	0x0800ae00

08003968 <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b087      	sub	sp, #28
 800396c:	af02      	add	r7, sp, #8
 800396e:	60ba      	str	r2, [r7, #8]
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	81fb      	strh	r3, [r7, #14]
 8003976:	460b      	mov	r3, r1
 8003978:	81bb      	strh	r3, [r7, #12]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800397e:	e01f      	b.n	80039c0 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8003980:	89fb      	ldrh	r3, [r7, #14]
 8003982:	2be8      	cmp	r3, #232	; 0xe8
 8003984:	d904      	bls.n	8003990 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003986:	2300      	movs	r3, #0
 8003988:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 800398a:	89bb      	ldrh	r3, [r7, #12]
 800398c:	3310      	adds	r3, #16
 800398e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8003990:	89bb      	ldrh	r3, [r7, #12]
 8003992:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003996:	d903      	bls.n	80039a0 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003998:	2300      	movs	r3, #0
 800399a:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 800399c:	2300      	movs	r3, #0
 800399e:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	88fc      	ldrh	r4, [r7, #6]
 80039a6:	89b9      	ldrh	r1, [r7, #12]
 80039a8:	89f8      	ldrh	r0, [r7, #14]
 80039aa:	8c3b      	ldrh	r3, [r7, #32]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4623      	mov	r3, r4
 80039b0:	f7ff ff8c 	bl	80038cc <LCD_DrawChar_Color>
		
		pStr ++;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80039ba:	89fb      	ldrh	r3, [r7, #14]
 80039bc:	3308      	adds	r3, #8
 80039be:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1db      	bne.n	8003980 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
	...

080039d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039d8:	f002 fe8a 	bl	80066f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039dc:	f000 f83e 	bl	8003a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039e0:	f7fe fcfc 	bl	80023dc <MX_GPIO_Init>
  MX_DMA_Init();
 80039e4:	f7fe fc2a 	bl	800223c <MX_DMA_Init>
  MX_FSMC_Init();
 80039e8:	f7fe fc46 	bl	8002278 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80039ec:	f002 fa5a 	bl	8005ea4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80039f0:	f001 ffca 	bl	8005988 <MX_TIM2_Init>
  MX_TIM3_Init();
 80039f4:	f002 f83c 	bl	8005a70 <MX_TIM3_Init>
  MX_TIM5_Init();
 80039f8:	f002 f8b0 	bl	8005b5c <MX_TIM5_Init>
  MX_TIM1_Init();
 80039fc:	f001 ff1e 	bl	800583c <MX_TIM1_Init>
  MX_ADC1_Init();
 8003a00:	f7fe fb78 	bl	80020f4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8003a04:	f002 faa2 	bl	8005f4c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8003a08:	f002 fa76 	bl	8005ef8 <MX_USART2_UART_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a12:	480e      	ldr	r0, [pc, #56]	; (8003a4c <main+0x78>)
 8003a14:	f003 ffeb 	bl	80079ee <HAL_GPIO_WritePin>
	LCD_INIT();
 8003a18:	f7ff fca7 	bl	800336a <LCD_INIT>
	
	
	DEBUG_USART_Config();
 8003a1c:	f7fe fbe4 	bl	80021e8 <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8003a20:	f002 fa0c 	bl	8005e3c <TIMER_INIT>
	timer_min(1);
 8003a24:	2001      	movs	r0, #1
 8003a26:	f002 fa1b 	bl	8005e60 <timer_min>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003a2a:	2108      	movs	r1, #8
 8003a2c:	4808      	ldr	r0, [pc, #32]	; (8003a50 <main+0x7c>)
 8003a2e:	f004 fe1b 	bl	8008668 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <main+0x7c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3334      	adds	r3, #52	; 0x34
 8003a38:	3308      	adds	r3, #8
 8003a3a:	220a      	movs	r2, #10
 8003a3c:	601a      	str	r2, [r3, #0]
  // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  myfunc();
 8003a3e:	f7ff fb87 	bl	8003150 <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8003a42:	4904      	ldr	r1, [pc, #16]	; (8003a54 <main+0x80>)
 8003a44:	4804      	ldr	r0, [pc, #16]	; (8003a58 <main+0x84>)
 8003a46:	f002 fda5 	bl	8006594 <XPT2046_Get_TouchedPoint>
 8003a4a:	e7fa      	b.n	8003a42 <main+0x6e>
 8003a4c:	40011400 	.word	0x40011400
 8003a50:	2000307c 	.word	0x2000307c
 8003a54:	20000008 	.word	0x20000008
 8003a58:	20002c24 	.word	0x20002c24

08003a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b096      	sub	sp, #88	; 0x58
 8003a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a66:	2228      	movs	r2, #40	; 0x28
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f006 fc58 	bl	800a320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	60da      	str	r2, [r3, #12]
 8003a8c:	611a      	str	r2, [r3, #16]
 8003a8e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003a90:	2305      	movs	r3, #5
 8003a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ab0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003ab4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aba:	4618      	mov	r0, r3
 8003abc:	f003 ffd2 	bl	8007a64 <HAL_RCC_OscConfig>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003ac6:	f000 f82b 	bl	8003b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aca:	230f      	movs	r3, #15
 8003acc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ae0:	f107 031c 	add.w	r3, r7, #28
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 fa20 	bl	8007f2c <HAL_RCC_ClockConfig>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003af2:	f000 f815 	bl	8003b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8003af6:	2303      	movs	r3, #3
 8003af8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003afe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b04:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 fbcb 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003b14:	f000 f804 	bl	8003b20 <Error_Handler>
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3758      	adds	r7, #88	; 0x58
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4603      	mov	r3, r0
 8003b3a:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d204      	bcs.n	8003b4e <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	701a      	strb	r2, [r3, #0]
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e002      	b.n	8003b88 <_strnlen_s+0x16>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3301      	adds	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <_strnlen_s+0x28>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	1e5a      	subs	r2, r3, #1
 8003b94:	603a      	str	r2, [r7, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f3      	bne.n	8003b82 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1ad3      	subs	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	2b2f      	cmp	r3, #47	; 0x2f
 8003bb8:	d904      	bls.n	8003bc4 <_is_digit+0x1a>
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	2b39      	cmp	r3, #57	; 0x39
 8003bbe:	d801      	bhi.n	8003bc4 <_is_digit+0x1a>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <_is_digit+0x1c>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003be2:	e00e      	b.n	8003c02 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1c59      	adds	r1, r3, #1
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6011      	str	r1, [r2, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	4403      	add	r3, r0
 8003bfe:	3b30      	subs	r3, #48	; 0x30
 8003c00:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ffce 	bl	8003baa <_is_digit>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e7      	bne.n	8003be4 <_atoi+0xe>
  }
  return i;
 8003c14:	68fb      	ldr	r3, [r7, #12]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003c1e:	b590      	push	{r4, r7, lr}
 8003c20:	b087      	sub	sp, #28
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d125      	bne.n	8003c86 <_out_rev+0x68>
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d120      	bne.n	8003c86 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e00a      	b.n	8003c60 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	1c53      	adds	r3, r2, #1
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	68fc      	ldr	r4, [r7, #12]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	2020      	movs	r0, #32
 8003c58:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d3f0      	bcc.n	8003c4a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003c68:	e00d      	b.n	8003c86 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	4413      	add	r3, r2
 8003c76:	7818      	ldrb	r0, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	1c53      	adds	r3, r2, #1
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	68fc      	ldr	r4, [r7, #12]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	47a0      	blx	r4
  while (len) {
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ee      	bne.n	8003c6a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00e      	beq.n	8003cb4 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003c96:	e007      	b.n	8003ca8 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	1c53      	adds	r3, r2, #1
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	68fc      	ldr	r4, [r7, #12]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	2020      	movs	r0, #32
 8003ca6:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d8f1      	bhi.n	8003c98 <_out_rev+0x7a>
    }
  }

  return idx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd90      	pop	{r4, r7, pc}

08003cbe <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b088      	sub	sp, #32
 8003cc2:	af04      	add	r7, sp, #16
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d136      	bne.n	8003d44 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d018      	beq.n	8003d0e <_ntoa_format+0x50>
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d013      	beq.n	8003d0e <_ntoa_format+0x50>
 8003ce6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <_ntoa_format+0x3a>
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <_ntoa_format+0x50>
      width--;
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003cfe:	e006      	b.n	8003d0e <_ntoa_format+0x50>
      buf[len++] = '0';
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	61fa      	str	r2, [r7, #28]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4413      	add	r3, r2
 8003d0a:	2230      	movs	r2, #48	; 0x30
 8003d0c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d20a      	bcs.n	8003d2c <_ntoa_format+0x6e>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b1f      	cmp	r3, #31
 8003d1a:	d9f1      	bls.n	8003d00 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003d1c:	e006      	b.n	8003d2c <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	61fa      	str	r2, [r7, #28]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	2230      	movs	r2, #48	; 0x30
 8003d2a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d006      	beq.n	8003d44 <_ntoa_format+0x86>
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d202      	bcs.n	8003d44 <_ntoa_format+0x86>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b1f      	cmp	r3, #31
 8003d42:	d9ec      	bls.n	8003d1e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d058      	beq.n	8003e00 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d116      	bne.n	8003d86 <_ntoa_format+0xc8>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d013      	beq.n	8003d86 <_ntoa_format+0xc8>
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d003      	beq.n	8003d6e <_ntoa_format+0xb0>
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10b      	bne.n	8003d86 <_ntoa_format+0xc8>
      len--;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <_ntoa_format+0xc8>
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d102      	bne.n	8003d86 <_ntoa_format+0xc8>
        len--;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d10f      	bne.n	8003dac <_ntoa_format+0xee>
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <_ntoa_format+0xee>
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b1f      	cmp	r3, #31
 8003d9a:	d807      	bhi.n	8003dac <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4413      	add	r3, r2
 8003da6:	2278      	movs	r2, #120	; 0x78
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e01f      	b.n	8003dec <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2b10      	cmp	r3, #16
 8003db0:	d10f      	bne.n	8003dd2 <_ntoa_format+0x114>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <_ntoa_format+0x114>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b1f      	cmp	r3, #31
 8003dc0:	d807      	bhi.n	8003dd2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	61fa      	str	r2, [r7, #28]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4413      	add	r3, r2
 8003dcc:	2258      	movs	r2, #88	; 0x58
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e00c      	b.n	8003dec <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d109      	bne.n	8003dec <_ntoa_format+0x12e>
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b1f      	cmp	r3, #31
 8003ddc:	d806      	bhi.n	8003dec <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	61fa      	str	r2, [r7, #28]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4413      	add	r3, r2
 8003de8:	2262      	movs	r2, #98	; 0x62
 8003dea:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b1f      	cmp	r3, #31
 8003df0:	d806      	bhi.n	8003e00 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	61fa      	str	r2, [r7, #28]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	2230      	movs	r2, #48	; 0x30
 8003dfe:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	2b1f      	cmp	r3, #31
 8003e04:	d824      	bhi.n	8003e50 <_ntoa_format+0x192>
    if (negative) {
 8003e06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <_ntoa_format+0x160>
      buf[len++] = '-';
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	61fa      	str	r2, [r7, #28]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4413      	add	r3, r2
 8003e18:	222d      	movs	r2, #45	; 0x2d
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e018      	b.n	8003e50 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	61fa      	str	r2, [r7, #28]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4413      	add	r3, r2
 8003e32:	222b      	movs	r2, #43	; 0x2b
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e00b      	b.n	8003e50 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	61fa      	str	r2, [r7, #28]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	9302      	str	r3, [sp, #8]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fed9 	bl	8003c1e <_out_rev>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b096      	sub	sp, #88	; 0x58
 8003e7a:	af08      	add	r7, sp, #32
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e90:	f023 0310 	bic.w	r3, r3, #16
 8003e94:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <_ntoa_long+0x30>
 8003ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d032      	beq.n	8003f0c <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003eb0:	fb01 f202 	mul.w	r2, r1, r2
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003eba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ebe:	2b09      	cmp	r3, #9
 8003ec0:	d804      	bhi.n	8003ecc <_ntoa_long+0x56>
 8003ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ec6:	3330      	adds	r3, #48	; 0x30
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	e00d      	b.n	8003ee8 <_ntoa_long+0x72>
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <_ntoa_long+0x64>
 8003ed6:	2241      	movs	r2, #65	; 0x41
 8003ed8:	e000      	b.n	8003edc <_ntoa_long+0x66>
 8003eda:	2261      	movs	r2, #97	; 0x61
 8003edc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ee0:	4413      	add	r3, r2
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	3b0a      	subs	r3, #10
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	6379      	str	r1, [r7, #52]	; 0x34
 8003eee:	3338      	adds	r3, #56	; 0x38
 8003ef0:	443b      	add	r3, r7
 8003ef2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <_ntoa_long+0x96>
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	2b1f      	cmp	r3, #31
 8003f0a:	d9cc      	bls.n	8003ea6 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0e:	9306      	str	r3, [sp, #24]
 8003f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f12:	9305      	str	r3, [sp, #20]
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	9304      	str	r3, [sp, #16]
 8003f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1a:	9303      	str	r3, [sp, #12]
 8003f1c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003f20:	9302      	str	r3, [sp, #8]
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f107 0310 	add.w	r3, r7, #16
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff fec3 	bl	8003cbe <_ntoa_format>
 8003f38:	4603      	mov	r3, r0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3738      	adds	r7, #56	; 0x38
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b096      	sub	sp, #88	; 0x58
 8003f46:	af08      	add	r7, sp, #32
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003f54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5e:	f023 0310 	bic.w	r3, r3, #16
 8003f62:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <_ntoa_long_long+0x34>
 8003f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d037      	beq.n	8003fe6 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003f76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003f7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f7e:	f7fd f8ed 	bl	800115c <__aeabi_uldivmod>
 8003f82:	4613      	mov	r3, r2
 8003f84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	d804      	bhi.n	8003f9a <_ntoa_long_long+0x58>
 8003f90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f94:	3330      	adds	r3, #48	; 0x30
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	e00d      	b.n	8003fb6 <_ntoa_long_long+0x74>
 8003f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <_ntoa_long_long+0x66>
 8003fa4:	2241      	movs	r2, #65	; 0x41
 8003fa6:	e000      	b.n	8003faa <_ntoa_long_long+0x68>
 8003fa8:	2261      	movs	r2, #97	; 0x61
 8003faa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fae:	4413      	add	r3, r2
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3b0a      	subs	r3, #10
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	1c59      	adds	r1, r3, #1
 8003fba:	6379      	str	r1, [r7, #52]	; 0x34
 8003fbc:	3338      	adds	r3, #56	; 0x38
 8003fbe:	443b      	add	r3, r7
 8003fc0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003fcc:	f7fd f8c6 	bl	800115c <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003fd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d002      	beq.n	8003fe6 <_ntoa_long_long+0xa4>
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	2b1f      	cmp	r3, #31
 8003fe4:	d9c7      	bls.n	8003f76 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fea:	9206      	str	r2, [sp, #24]
 8003fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fee:	9205      	str	r2, [sp, #20]
 8003ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ff2:	9204      	str	r2, [sp, #16]
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ffa:	9302      	str	r3, [sp, #8]
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff fe56 	bl	8003cbe <_ntoa_format>
 8004012:	4603      	mov	r3, r0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3738      	adds	r7, #56	; 0x38
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	0000      	movs	r0, r0
	...

08004020 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b09d      	sub	sp, #116	; 0x74
 8004024:	af06      	add	r7, sp, #24
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800403e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004042:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004046:	f7fc fd1b 	bl	8000a80 <__aeabi_dcmpeq>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10f      	bne.n	8004070 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004052:	9303      	str	r3, [sp, #12]
 8004054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004056:	9302      	str	r3, [sp, #8]
 8004058:	2303      	movs	r3, #3
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	4b82      	ldr	r3, [pc, #520]	; (8004268 <_ftoa+0x248>)
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff fdd9 	bl	8003c1e <_out_rev>
 800406c:	4603      	mov	r3, r0
 800406e:	e224      	b.n	80044ba <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8004070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004074:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004078:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800407c:	f7fc fd0a 	bl	8000a94 <__aeabi_dcmplt>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00f      	beq.n	80040a6 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004088:	9303      	str	r3, [sp, #12]
 800408a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408c:	9302      	str	r3, [sp, #8]
 800408e:	2304      	movs	r3, #4
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	4b76      	ldr	r3, [pc, #472]	; (800426c <_ftoa+0x24c>)
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fdbe 	bl	8003c1e <_out_rev>
 80040a2:	4603      	mov	r3, r0
 80040a4:	e209      	b.n	80044ba <_ftoa+0x49a>
  if (value > DBL_MAX)
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040aa:	4b71      	ldr	r3, [pc, #452]	; (8004270 <_ftoa+0x250>)
 80040ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040b0:	f7fc fd0e 	bl	8000ad0 <__aeabi_dcmpgt>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01d      	beq.n	80040f6 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80040ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <_ftoa+0xa8>
 80040c4:	4b6b      	ldr	r3, [pc, #428]	; (8004274 <_ftoa+0x254>)
 80040c6:	e000      	b.n	80040ca <_ftoa+0xaa>
 80040c8:	4b6b      	ldr	r3, [pc, #428]	; (8004278 <_ftoa+0x258>)
 80040ca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040cc:	f002 0204 	and.w	r2, r2, #4
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d001      	beq.n	80040d8 <_ftoa+0xb8>
 80040d4:	2204      	movs	r2, #4
 80040d6:	e000      	b.n	80040da <_ftoa+0xba>
 80040d8:	2203      	movs	r2, #3
 80040da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80040dc:	9103      	str	r1, [sp, #12]
 80040de:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80040e0:	9102      	str	r1, [sp, #8]
 80040e2:	9201      	str	r2, [sp, #4]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fd96 	bl	8003c1e <_out_rev>
 80040f2:	4603      	mov	r3, r0
 80040f4:	e1e1      	b.n	80044ba <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80040f6:	a358      	add	r3, pc, #352	; (adr r3, 8004258 <_ftoa+0x238>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004100:	f7fc fce6 	bl	8000ad0 <__aeabi_dcmpgt>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <_ftoa+0xfe>
 800410a:	a355      	add	r3, pc, #340	; (adr r3, 8004260 <_ftoa+0x240>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004114:	f7fc fcbe 	bl	8000a94 <__aeabi_dcmplt>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d011      	beq.n	8004142 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800411e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004120:	9304      	str	r3, [sp, #16]
 8004122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004124:	9303      	str	r3, [sp, #12]
 8004126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004128:	9302      	str	r3, [sp, #8]
 800412a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800412e:	e9cd 2300 	strd	r2, r3, [sp]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f9c9 	bl	80044d0 <_etoa>
 800413e:	4603      	mov	r3, r0
 8004140:	e1bb      	b.n	80044ba <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004142:	2300      	movs	r3, #0
 8004144:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004154:	f7fc fc9e 	bl	8000a94 <__aeabi_dcmplt>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00e      	beq.n	800417c <_ftoa+0x15c>
    negative = true;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8004164:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004168:	f04f 0000 	mov.w	r0, #0
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	f7fc f866 	bl	8000240 <__aeabi_dsub>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800417c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10d      	bne.n	80041a2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004186:	2306      	movs	r3, #6
 8004188:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800418a:	e00a      	b.n	80041a2 <_ftoa+0x182>
    buf[len++] = '0';
 800418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	657a      	str	r2, [r7, #84]	; 0x54
 8004192:	3358      	adds	r3, #88	; 0x58
 8004194:	443b      	add	r3, r7
 8004196:	2230      	movs	r2, #48	; 0x30
 8004198:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800419c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800419e:	3b01      	subs	r3, #1
 80041a0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	2b1f      	cmp	r3, #31
 80041a6:	d802      	bhi.n	80041ae <_ftoa+0x18e>
 80041a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d8ee      	bhi.n	800418c <_ftoa+0x16c>
  }

  int whole = (int)value;
 80041ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041b2:	f7fc fc97 	bl	8000ae4 <__aeabi_d2iz>
 80041b6:	4603      	mov	r3, r0
 80041b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 80041ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80041bc:	f7fc f98e 	bl	80004dc <__aeabi_i2d>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041c8:	f7fc f83a 	bl	8000240 <__aeabi_dsub>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	4a29      	ldr	r2, [pc, #164]	; (800427c <_ftoa+0x25c>)
 80041d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc f9e6 	bl	80005b0 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 80041ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80041f0:	f7fc fca0 	bl	8000b34 <__aeabi_d2uiz>
 80041f4:	4603      	mov	r3, r0
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80041f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80041fa:	f7fc f95f 	bl	80004bc <__aeabi_ui2d>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004206:	f7fc f81b 	bl	8000240 <__aeabi_dsub>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <_ftoa+0x260>)
 8004218:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800421c:	f7fc fc58 	bl	8000ad0 <__aeabi_dcmpgt>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02e      	beq.n	8004284 <_ftoa+0x264>
    ++frac;
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	3301      	adds	r3, #1
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800422c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800422e:	f7fc f945 	bl	80004bc <__aeabi_ui2d>
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <_ftoa+0x25c>)
 8004234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f7fc fc3d 	bl	8000abc <__aeabi_dcmpge>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d032      	beq.n	80042ae <_ftoa+0x28e>
      frac = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	3301      	adds	r3, #1
 8004250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004252:	e02c      	b.n	80042ae <_ftoa+0x28e>
 8004254:	f3af 8000 	nop.w
 8004258:	00000000 	.word	0x00000000
 800425c:	41cdcd65 	.word	0x41cdcd65
 8004260:	00000000 	.word	0x00000000
 8004264:	c1cdcd65 	.word	0xc1cdcd65
 8004268:	0800ad7c 	.word	0x0800ad7c
 800426c:	0800ad80 	.word	0x0800ad80
 8004270:	7fefffff 	.word	0x7fefffff
 8004274:	0800ad88 	.word	0x0800ad88
 8004278:	0800ad90 	.word	0x0800ad90
 800427c:	0800b3f0 	.word	0x0800b3f0
 8004280:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	4b8e      	ldr	r3, [pc, #568]	; (80044c4 <_ftoa+0x4a4>)
 800428a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800428e:	f7fc fc01 	bl	8000a94 <__aeabi_dcmplt>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <_ftoa+0x288>
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80042a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042aa:	3301      	adds	r3, #1
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 80042ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d133      	bne.n	800431c <_ftoa+0x2fc>
    diff = value - (double)whole;
 80042b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80042b6:	f7fc f911 	bl	80004dc <__aeabi_i2d>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042c2:	f7fb ffbd 	bl	8000240 <__aeabi_dsub>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80042ce:	2301      	movs	r3, #1
 80042d0:	461c      	mov	r4, r3
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	4b7b      	ldr	r3, [pc, #492]	; (80044c4 <_ftoa+0x4a4>)
 80042d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042dc:	f7fc fbda 	bl	8000a94 <__aeabi_dcmplt>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <_ftoa+0x2ca>
 80042e6:	2300      	movs	r3, #0
 80042e8:	461c      	mov	r4, r3
 80042ea:	b2e3      	uxtb	r3, r4
 80042ec:	f083 0301 	eor.w	r3, r3, #1
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <_ftoa+0x2ea>
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	4b72      	ldr	r3, [pc, #456]	; (80044c4 <_ftoa+0x4a4>)
 80042fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004300:	f7fc fbe6 	bl	8000ad0 <__aeabi_dcmpgt>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d04c      	beq.n	80043a4 <_ftoa+0x384>
 800430a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d069      	beq.n	80043e8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004316:	3301      	adds	r3, #1
 8004318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800431a:	e065      	b.n	80043e8 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 800431c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431e:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004320:	e01f      	b.n	8004362 <_ftoa+0x342>
      --count;
 8004322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004324:	3b01      	subs	r3, #1
 8004326:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8004328:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800432a:	4b67      	ldr	r3, [pc, #412]	; (80044c8 <_ftoa+0x4a8>)
 800432c:	fba3 2301 	umull	r2, r3, r3, r1
 8004330:	08da      	lsrs	r2, r3, #3
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	1aca      	subs	r2, r1, r3
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004340:	1c59      	adds	r1, r3, #1
 8004342:	6579      	str	r1, [r7, #84]	; 0x54
 8004344:	3230      	adds	r2, #48	; 0x30
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	3358      	adds	r3, #88	; 0x58
 800434a:	443b      	add	r3, r7
 800434c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004352:	4a5d      	ldr	r2, [pc, #372]	; (80044c8 <_ftoa+0x4a8>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	08db      	lsrs	r3, r3, #3
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
 800435c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004364:	2b1f      	cmp	r3, #31
 8004366:	d9dc      	bls.n	8004322 <_ftoa+0x302>
 8004368:	e009      	b.n	800437e <_ftoa+0x35e>
        break;
 800436a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800436c:	e007      	b.n	800437e <_ftoa+0x35e>
      buf[len++] = '0';
 800436e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	657a      	str	r2, [r7, #84]	; 0x54
 8004374:	3358      	adds	r3, #88	; 0x58
 8004376:	443b      	add	r3, r7
 8004378:	2230      	movs	r2, #48	; 0x30
 800437a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800437e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004380:	2b1f      	cmp	r3, #31
 8004382:	d804      	bhi.n	800438e <_ftoa+0x36e>
 8004384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	647a      	str	r2, [r7, #68]	; 0x44
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ef      	bne.n	800436e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800438e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004390:	2b1f      	cmp	r3, #31
 8004392:	d829      	bhi.n	80043e8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8004394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	657a      	str	r2, [r7, #84]	; 0x54
 800439a:	3358      	adds	r3, #88	; 0x58
 800439c:	443b      	add	r3, r7
 800439e:	222e      	movs	r2, #46	; 0x2e
 80043a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80043a4:	e020      	b.n	80043e8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80043a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043a8:	4b48      	ldr	r3, [pc, #288]	; (80044cc <_ftoa+0x4ac>)
 80043aa:	fb83 1302 	smull	r1, r3, r3, r2
 80043ae:	1099      	asrs	r1, r3, #2
 80043b0:	17d3      	asrs	r3, r2, #31
 80043b2:	1ac9      	subs	r1, r1, r3
 80043b4:	460b      	mov	r3, r1
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	1ad1      	subs	r1, r2, r3
 80043be:	b2ca      	uxtb	r2, r1
 80043c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	6579      	str	r1, [r7, #84]	; 0x54
 80043c6:	3230      	adds	r2, #48	; 0x30
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	3358      	adds	r3, #88	; 0x58
 80043cc:	443b      	add	r3, r7
 80043ce:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80043d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d4:	4a3d      	ldr	r2, [pc, #244]	; (80044cc <_ftoa+0x4ac>)
 80043d6:	fb82 1203 	smull	r1, r2, r2, r3
 80043da:	1092      	asrs	r2, r2, #2
 80043dc:	17db      	asrs	r3, r3, #31
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80043e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ea:	2b1f      	cmp	r3, #31
 80043ec:	d9db      	bls.n	80043a6 <_ftoa+0x386>
 80043ee:	e000      	b.n	80043f2 <_ftoa+0x3d2>
      break;
 80043f0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80043f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d123      	bne.n	8004444 <_ftoa+0x424>
 80043fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01e      	beq.n	8004444 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004408:	2b00      	cmp	r3, #0
 800440a:	d014      	beq.n	8004436 <_ftoa+0x416>
 800440c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <_ftoa+0x3fe>
 8004414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <_ftoa+0x416>
      width--;
 800441e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004420:	3b01      	subs	r3, #1
 8004422:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004424:	e007      	b.n	8004436 <_ftoa+0x416>
      buf[len++] = '0';
 8004426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	657a      	str	r2, [r7, #84]	; 0x54
 800442c:	3358      	adds	r3, #88	; 0x58
 800442e:	443b      	add	r3, r7
 8004430:	2230      	movs	r2, #48	; 0x30
 8004432:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004436:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	429a      	cmp	r2, r3
 800443c:	d202      	bcs.n	8004444 <_ftoa+0x424>
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	2b1f      	cmp	r3, #31
 8004442:	d9f0      	bls.n	8004426 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	2b1f      	cmp	r3, #31
 8004448:	d827      	bhi.n	800449a <_ftoa+0x47a>
    if (negative) {
 800444a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <_ftoa+0x444>
      buf[len++] = '-';
 8004452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	657a      	str	r2, [r7, #84]	; 0x54
 8004458:	3358      	adds	r3, #88	; 0x58
 800445a:	443b      	add	r3, r7
 800445c:	222d      	movs	r2, #45	; 0x2d
 800445e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004462:	e01a      	b.n	800449a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8004464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	657a      	str	r2, [r7, #84]	; 0x54
 8004474:	3358      	adds	r3, #88	; 0x58
 8004476:	443b      	add	r3, r7
 8004478:	222b      	movs	r2, #43	; 0x2b
 800447a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800447e:	e00c      	b.n	800449a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8004480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <_ftoa+0x47a>
      buf[len++] = ' ';
 800448a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	657a      	str	r2, [r7, #84]	; 0x54
 8004490:	3358      	adds	r3, #88	; 0x58
 8004492:	443b      	add	r3, r7
 8004494:	2220      	movs	r2, #32
 8004496:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800449a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800449c:	9303      	str	r3, [sp, #12]
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	f107 0310 	add.w	r3, r7, #16
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff fbb3 	bl	8003c1e <_out_rev>
 80044b8:	4603      	mov	r3, r0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	375c      	adds	r7, #92	; 0x5c
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	3fe00000 	.word	0x3fe00000
 80044c8:	cccccccd 	.word	0xcccccccd
 80044cc:	66666667 	.word	0x66666667

080044d0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	b09d      	sub	sp, #116	; 0x74
 80044d6:	af06      	add	r7, sp, #24
 80044d8:	61f8      	str	r0, [r7, #28]
 80044da:	61b9      	str	r1, [r7, #24]
 80044dc:	617a      	str	r2, [r7, #20]
 80044de:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80044e0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80044e4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044e8:	f7fc faca 	bl	8000a80 <__aeabi_dcmpeq>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d014      	beq.n	800451c <_etoa+0x4c>
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044f6:	4bc4      	ldr	r3, [pc, #784]	; (8004808 <_etoa+0x338>)
 80044f8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044fc:	f7fc fae8 	bl	8000ad0 <__aeabi_dcmpgt>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <_etoa+0x4c>
 8004506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800450a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800450e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004512:	f7fc fabf 	bl	8000a94 <__aeabi_dcmplt>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d014      	beq.n	8004546 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800451c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800452c:	9302      	str	r3, [sp, #8]
 800452e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004532:	e9cd 2300 	strd	r2, r3, [sp]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	69f8      	ldr	r0, [r7, #28]
 800453e:	f7ff fd6f 	bl	8004020 <_ftoa>
 8004542:	4603      	mov	r3, r0
 8004544:	e247      	b.n	80049d6 <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 8004546:	2301      	movs	r3, #1
 8004548:	461e      	mov	r6, r3
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004556:	f7fc fa9d 	bl	8000a94 <__aeabi_dcmplt>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <_etoa+0x94>
 8004560:	2300      	movs	r3, #0
 8004562:	461e      	mov	r6, r3
 8004564:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8004568:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <_etoa+0xb8>
    value = -value;
 8004570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800457a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004584:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004594:	2306      	movs	r3, #6
 8004596:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800459a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800459e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80045a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	0d0a      	lsrs	r2, r1, #20
 80045b0:	2300      	movs	r3, #0
 80045b2:	4613      	mov	r3, r2
 80045b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80045bc:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80045be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c2:	4690      	mov	r8, r2
 80045c4:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80045c8:	4644      	mov	r4, r8
 80045ca:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80045ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80045d2:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80045d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80045d8:	f7fb ff80 	bl	80004dc <__aeabi_i2d>
 80045dc:	a37e      	add	r3, pc, #504	; (adr r3, 80047d8 <_etoa+0x308>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fb ffe5 	bl	80005b0 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	a37c      	add	r3, pc, #496	; (adr r3, 80047e0 <_etoa+0x310>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fb fe26 	bl	8000244 <__adddf3>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4614      	mov	r4, r2
 80045fe:	461d      	mov	r5, r3
 8004600:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	4b80      	ldr	r3, [pc, #512]	; (800480c <_etoa+0x33c>)
 800460a:	f7fb fe19 	bl	8000240 <__aeabi_dsub>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	a374      	add	r3, pc, #464	; (adr r3, 80047e8 <_etoa+0x318>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fb ffc8 	bl	80005b0 <__aeabi_dmul>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4620      	mov	r0, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f7fb fe0c 	bl	8000244 <__adddf3>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	f7fc fa56 	bl	8000ae4 <__aeabi_d2iz>
 8004638:	4603      	mov	r3, r0
 800463a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800463c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800463e:	f7fb ff4d 	bl	80004dc <__aeabi_i2d>
 8004642:	a36b      	add	r3, pc, #428	; (adr r3, 80047f0 <_etoa+0x320>)
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f7fb ffb2 	bl	80005b0 <__aeabi_dmul>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	4b6d      	ldr	r3, [pc, #436]	; (8004810 <_etoa+0x340>)
 800465a:	f7fb fdf3 	bl	8000244 <__adddf3>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	f7fc fa3d 	bl	8000ae4 <__aeabi_d2iz>
 800466a:	4603      	mov	r3, r0
 800466c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800466e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004670:	f7fb ff34 	bl	80004dc <__aeabi_i2d>
 8004674:	a360      	add	r3, pc, #384	; (adr r3, 80047f8 <_etoa+0x328>)
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f7fb ff99 	bl	80005b0 <__aeabi_dmul>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4614      	mov	r4, r2
 8004684:	461d      	mov	r5, r3
 8004686:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004688:	f7fb ff28 	bl	80004dc <__aeabi_i2d>
 800468c:	a35c      	add	r3, pc, #368	; (adr r3, 8004800 <_etoa+0x330>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb ff8d 	bl	80005b0 <__aeabi_dmul>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4620      	mov	r0, r4
 800469c:	4629      	mov	r1, r5
 800469e:	f7fb fdcf 	bl	8000240 <__aeabi_dsub>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80046aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80046b2:	f7fb ff7d 	bl	80005b0 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80046be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80046c4:	17da      	asrs	r2, r3, #31
 80046c6:	469a      	mov	sl, r3
 80046c8:	4693      	mov	fp, r2
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80046d6:	2200      	movs	r2, #0
 80046d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80046dc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	f7fb fdac 	bl	8000244 <__adddf3>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4690      	mov	r8, r2
 80046f2:	4699      	mov	r9, r3
 80046f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f8:	f04f 0000 	mov.w	r0, #0
 80046fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004700:	f7fb fd9e 	bl	8000240 <__aeabi_dsub>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4692      	mov	sl, r2
 800470a:	469b      	mov	fp, r3
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	4b40      	ldr	r3, [pc, #256]	; (8004814 <_etoa+0x344>)
 8004712:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004716:	f7fc f875 	bl	8000804 <__aeabi_ddiv>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <_etoa+0x348>)
 8004728:	f7fb fd8c 	bl	8000244 <__adddf3>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004734:	f7fc f866 	bl	8000804 <__aeabi_ddiv>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	4b35      	ldr	r3, [pc, #212]	; (800481c <_etoa+0x34c>)
 8004746:	f7fb fd7d 	bl	8000244 <__adddf3>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004752:	f7fc f857 	bl	8000804 <__aeabi_ddiv>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4650      	mov	r0, sl
 800475c:	4659      	mov	r1, fp
 800475e:	f7fb fd71 	bl	8000244 <__adddf3>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4640      	mov	r0, r8
 8004768:	4649      	mov	r1, r9
 800476a:	f7fc f84b 	bl	8000804 <__aeabi_ddiv>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <_etoa+0x350>)
 800477c:	f7fb fd62 	bl	8000244 <__adddf3>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f7fb ff12 	bl	80005b0 <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8004794:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004798:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800479c:	f7fc f97a 	bl	8000a94 <__aeabi_dcmplt>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00d      	beq.n	80047c2 <_etoa+0x2f2>
    expval--;
 80047a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a8:	3b01      	subs	r3, #1
 80047aa:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80047ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <_etoa+0x348>)
 80047b6:	f7fc f825 	bl	8000804 <__aeabi_ddiv>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80047c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c4:	2b63      	cmp	r3, #99	; 0x63
 80047c6:	dc2d      	bgt.n	8004824 <_etoa+0x354>
 80047c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ca:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80047ce:	db29      	blt.n	8004824 <_etoa+0x354>
 80047d0:	2304      	movs	r3, #4
 80047d2:	e028      	b.n	8004826 <_etoa+0x356>
 80047d4:	f3af 8000 	nop.w
 80047d8:	509f79fb 	.word	0x509f79fb
 80047dc:	3fd34413 	.word	0x3fd34413
 80047e0:	8b60c8b3 	.word	0x8b60c8b3
 80047e4:	3fc68a28 	.word	0x3fc68a28
 80047e8:	636f4361 	.word	0x636f4361
 80047ec:	3fd287a7 	.word	0x3fd287a7
 80047f0:	0979a371 	.word	0x0979a371
 80047f4:	400a934f 	.word	0x400a934f
 80047f8:	bbb55516 	.word	0xbbb55516
 80047fc:	40026bb1 	.word	0x40026bb1
 8004800:	fefa39ef 	.word	0xfefa39ef
 8004804:	3fe62e42 	.word	0x3fe62e42
 8004808:	7fefffff 	.word	0x7fefffff
 800480c:	3ff80000 	.word	0x3ff80000
 8004810:	3fe00000 	.word	0x3fe00000
 8004814:	402c0000 	.word	0x402c0000
 8004818:	40240000 	.word	0x40240000
 800481c:	40180000 	.word	0x40180000
 8004820:	3ff00000 	.word	0x3ff00000
 8004824:	2305      	movs	r3, #5
 8004826:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800482c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004830:	2b00      	cmp	r3, #0
 8004832:	d03d      	beq.n	80048b0 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004834:	a36a      	add	r3, pc, #424	; (adr r3, 80049e0 <_etoa+0x510>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800483e:	f7fc f93d 	bl	8000abc <__aeabi_dcmpge>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d024      	beq.n	8004892 <_etoa+0x3c2>
 8004848:	a367      	add	r3, pc, #412	; (adr r3, 80049e8 <_etoa+0x518>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004852:	f7fc f91f 	bl	8000a94 <__aeabi_dcmplt>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01a      	beq.n	8004892 <_etoa+0x3c2>
      if ((int)prec > expval) {
 800485c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004862:	429a      	cmp	r2, r3
 8004864:	da07      	bge.n	8004876 <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8004866:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800486a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004874:	e002      	b.n	800487c <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800487c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
 8004890:	e00e      	b.n	80048b0 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <_etoa+0x3e0>
 800489a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <_etoa+0x3e0>
        --prec;
 80048a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048aa:	3b01      	subs	r3, #1
 80048ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80048b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 80048b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80048ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048bc:	429a      	cmp	r2, r3
 80048be:	d904      	bls.n	80048ca <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80048c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	e001      	b.n	80048ce <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80048ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <_etoa+0x414>
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 80048e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <_etoa+0x42e>
    value /= conv.F;
 80048ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048f2:	f7fb ff87 	bl	8000804 <__aeabi_ddiv>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004902:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <_etoa+0x44c>
 800490a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004914:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e003      	b.n	8004924 <_etoa+0x454>
 800491c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004920:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492c:	9304      	str	r3, [sp, #16]
 800492e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004930:	9303      	str	r3, [sp, #12]
 8004932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004936:	9302      	str	r3, [sp, #8]
 8004938:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800493c:	e9cd 3400 	strd	r3, r4, [sp]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	69b9      	ldr	r1, [r7, #24]
 8004946:	69f8      	ldr	r0, [r7, #28]
 8004948:	f7ff fb6a 	bl	8004020 <_ftoa>
 800494c:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800494e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004950:	2b00      	cmp	r3, #0
 8004952:	d03f      	beq.n	80049d4 <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <_etoa+0x494>
 8004960:	2045      	movs	r0, #69	; 0x45
 8004962:	e000      	b.n	8004966 <_etoa+0x496>
 8004964:	2065      	movs	r0, #101	; 0x65
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	1c53      	adds	r3, r2, #1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	69fc      	ldr	r4, [r7, #28]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	69b9      	ldr	r1, [r7, #24]
 8004972:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004976:	2b00      	cmp	r3, #0
 8004978:	bfb8      	it	lt
 800497a:	425b      	neglt	r3, r3
 800497c:	4618      	mov	r0, r3
 800497e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004980:	0fdb      	lsrs	r3, r3, #31
 8004982:	b2db      	uxtb	r3, r3
 8004984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004986:	3a01      	subs	r2, #1
 8004988:	2105      	movs	r1, #5
 800498a:	9105      	str	r1, [sp, #20]
 800498c:	9204      	str	r2, [sp, #16]
 800498e:	2200      	movs	r2, #0
 8004990:	9203      	str	r2, [sp, #12]
 8004992:	220a      	movs	r2, #10
 8004994:	9202      	str	r2, [sp, #8]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	9000      	str	r0, [sp, #0]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	69b9      	ldr	r1, [r7, #24]
 80049a0:	69f8      	ldr	r0, [r7, #28]
 80049a2:	f7ff fa68 	bl	8003e76 <_ntoa_long>
 80049a6:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80049a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00f      	beq.n	80049d4 <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80049b4:	e007      	b.n	80049c6 <_etoa+0x4f6>
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	1c53      	adds	r3, r2, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	69fc      	ldr	r4, [r7, #28]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	2020      	movs	r0, #32
 80049c4:	47a0      	blx	r4
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d8f0      	bhi.n	80049b6 <_etoa+0x4e6>
    }
  }
  return idx;
 80049d4:	697b      	ldr	r3, [r7, #20]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	375c      	adds	r7, #92	; 0x5c
 80049da:	46bd      	mov	sp, r7
 80049dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e0:	eb1c432d 	.word	0xeb1c432d
 80049e4:	3f1a36e2 	.word	0x3f1a36e2
 80049e8:	00000000 	.word	0x00000000
 80049ec:	412e8480 	.word	0x412e8480

080049f0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	b0a3      	sub	sp, #140	; 0x8c
 80049f6:	af0a      	add	r7, sp, #40	; 0x28
 80049f8:	6178      	str	r0, [r7, #20]
 80049fa:	6139      	str	r1, [r7, #16]
 80049fc:	60fa      	str	r2, [r7, #12]
 80049fe:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 84ba 	bne.w	8005380 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8004a0c:	4ba3      	ldr	r3, [pc, #652]	; (8004c9c <_vsnprintf+0x2ac>)
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004a10:	f000 bcb6 	b.w	8005380 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b25      	cmp	r3, #37	; 0x25
 8004a1a:	d00d      	beq.n	8004a38 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	7818      	ldrb	r0, [r3, #0]
 8004a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a22:	1c53      	adds	r3, r2, #1
 8004a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a26:	697c      	ldr	r4, [r7, #20]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6939      	ldr	r1, [r7, #16]
 8004a2c:	47a0      	blx	r4
      format++;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	3301      	adds	r3, #1
 8004a32:	60bb      	str	r3, [r7, #8]
      continue;
 8004a34:	f000 bca4 	b.w	8005380 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	3b20      	subs	r3, #32
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d857      	bhi.n	8004afc <_vsnprintf+0x10c>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <_vsnprintf+0x64>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004ad5 	.word	0x08004ad5
 8004a58:	08004afd 	.word	0x08004afd
 8004a5c:	08004afd 	.word	0x08004afd
 8004a60:	08004ae9 	.word	0x08004ae9
 8004a64:	08004afd 	.word	0x08004afd
 8004a68:	08004afd 	.word	0x08004afd
 8004a6c:	08004afd 	.word	0x08004afd
 8004a70:	08004afd 	.word	0x08004afd
 8004a74:	08004afd 	.word	0x08004afd
 8004a78:	08004afd 	.word	0x08004afd
 8004a7c:	08004afd 	.word	0x08004afd
 8004a80:	08004ac1 	.word	0x08004ac1
 8004a84:	08004afd 	.word	0x08004afd
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004afd 	.word	0x08004afd
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004a99 	.word	0x08004a99
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8004aaa:	e02a      	b.n	8004b02 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	2301      	movs	r3, #1
 8004abc:	653b      	str	r3, [r7, #80]	; 0x50
 8004abe:	e020      	b.n	8004b02 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac2:	f043 0304 	orr.w	r3, r3, #4
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	2301      	movs	r3, #1
 8004ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad2:	e016      	b.n	8004b02 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad6:	f043 0308 	orr.w	r3, r3, #8
 8004ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae6:	e00c      	b.n	8004b02 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aea:	f043 0310 	orr.w	r3, r3, #16
 8004aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	2301      	movs	r3, #1
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
 8004afa:	e002      	b.n	8004b02 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004afc:	2300      	movs	r3, #0
 8004afe:	653b      	str	r3, [r7, #80]	; 0x50
 8004b00:	bf00      	nop
      }
    } while (n);
 8004b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d19c      	bne.n	8004a42 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff f84a 	bl	8003baa <_is_digit>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d006      	beq.n	8004b2a <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004b1c:	f107 0308 	add.w	r3, r7, #8
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff f858 	bl	8003bd6 <_atoi>
 8004b26:	65b8      	str	r0, [r7, #88]	; 0x58
 8004b28:	e01a      	b.n	8004b60 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b30:	d116      	bne.n	8004b60 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da07      	bge.n	8004b56 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	425b      	negs	r3, r3
 8004b52:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b54:	e001      	b.n	8004b5a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b2e      	cmp	r3, #46	; 0x2e
 8004b6a:	d127      	bne.n	8004bbc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8004b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b72:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff f813 	bl	8003baa <_is_digit>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8004b8a:	f107 0308 	add.w	r3, r7, #8
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff f821 	bl	8003bd6 <_atoi>
 8004b94:	6578      	str	r0, [r7, #84]	; 0x54
 8004b96:	e011      	b.n	8004bbc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9e:	d10d      	bne.n	8004bbc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ba4:	1d1a      	adds	r2, r3, #4
 8004ba6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004bb4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	3b68      	subs	r3, #104	; 0x68
 8004bc2:	2b12      	cmp	r3, #18
 8004bc4:	d866      	bhi.n	8004c94 <_vsnprintf+0x2a4>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <_vsnprintf+0x1dc>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004c3f 	.word	0x08004c3f
 8004bd0:	08004c95 	.word	0x08004c95
 8004bd4:	08004c75 	.word	0x08004c75
 8004bd8:	08004c95 	.word	0x08004c95
 8004bdc:	08004c19 	.word	0x08004c19
 8004be0:	08004c95 	.word	0x08004c95
 8004be4:	08004c95 	.word	0x08004c95
 8004be8:	08004c95 	.word	0x08004c95
 8004bec:	08004c95 	.word	0x08004c95
 8004bf0:	08004c95 	.word	0x08004c95
 8004bf4:	08004c95 	.word	0x08004c95
 8004bf8:	08004c95 	.word	0x08004c95
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004c95 	.word	0x08004c95
 8004c04:	08004c95 	.word	0x08004c95
 8004c08:	08004c95 	.word	0x08004c95
 8004c0c:	08004c95 	.word	0x08004c95
 8004c10:	08004c95 	.word	0x08004c95
 8004c14:	08004c85 	.word	0x08004c85
      case 'l' :
        flags |= FLAGS_LONG;
 8004c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b6c      	cmp	r3, #108	; 0x6c
 8004c2c:	d134      	bne.n	8004c98 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c34:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004c3c:	e02c      	b.n	8004c98 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b68      	cmp	r3, #104	; 0x68
 8004c52:	d125      	bne.n	8004ca0 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004c62:	e01d      	b.n	8004ca0 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60bb      	str	r3, [r7, #8]
        break;
 8004c72:	e016      	b.n	8004ca2 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60bb      	str	r3, [r7, #8]
        break;
 8004c82:	e00e      	b.n	8004ca2 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60bb      	str	r3, [r7, #8]
        break;
 8004c92:	e006      	b.n	8004ca2 <_vsnprintf+0x2b2>
      default :
        break;
 8004c94:	bf00      	nop
 8004c96:	e004      	b.n	8004ca2 <_vsnprintf+0x2b2>
        break;
 8004c98:	bf00      	nop
 8004c9a:	e002      	b.n	8004ca2 <_vsnprintf+0x2b2>
 8004c9c:	08003b59 	.word	0x08003b59
        break;
 8004ca0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	3b25      	subs	r3, #37	; 0x25
 8004ca8:	2b53      	cmp	r3, #83	; 0x53
 8004caa:	f200 835c 	bhi.w	8005366 <_vsnprintf+0x976>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <_vsnprintf+0x2c4>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	0800534f 	.word	0x0800534f
 8004cb8:	08005367 	.word	0x08005367
 8004cbc:	08005367 	.word	0x08005367
 8004cc0:	08005367 	.word	0x08005367
 8004cc4:	08005367 	.word	0x08005367
 8004cc8:	08005367 	.word	0x08005367
 8004ccc:	08005367 	.word	0x08005367
 8004cd0:	08005367 	.word	0x08005367
 8004cd4:	08005367 	.word	0x08005367
 8004cd8:	08005367 	.word	0x08005367
 8004cdc:	08005367 	.word	0x08005367
 8004ce0:	08005367 	.word	0x08005367
 8004ce4:	08005367 	.word	0x08005367
 8004ce8:	08005367 	.word	0x08005367
 8004cec:	08005367 	.word	0x08005367
 8004cf0:	08005367 	.word	0x08005367
 8004cf4:	08005367 	.word	0x08005367
 8004cf8:	08005367 	.word	0x08005367
 8004cfc:	08005367 	.word	0x08005367
 8004d00:	08005367 	.word	0x08005367
 8004d04:	08005367 	.word	0x08005367
 8004d08:	08005367 	.word	0x08005367
 8004d0c:	08005367 	.word	0x08005367
 8004d10:	08005367 	.word	0x08005367
 8004d14:	08005367 	.word	0x08005367
 8004d18:	08005367 	.word	0x08005367
 8004d1c:	08005367 	.word	0x08005367
 8004d20:	08005367 	.word	0x08005367
 8004d24:	08005367 	.word	0x08005367
 8004d28:	08005367 	.word	0x08005367
 8004d2c:	08005367 	.word	0x08005367
 8004d30:	08005367 	.word	0x08005367
 8004d34:	08005107 	.word	0x08005107
 8004d38:	080050bb 	.word	0x080050bb
 8004d3c:	08005107 	.word	0x08005107
 8004d40:	08005367 	.word	0x08005367
 8004d44:	08005367 	.word	0x08005367
 8004d48:	08005367 	.word	0x08005367
 8004d4c:	08005367 	.word	0x08005367
 8004d50:	08005367 	.word	0x08005367
 8004d54:	08005367 	.word	0x08005367
 8004d58:	08005367 	.word	0x08005367
 8004d5c:	08005367 	.word	0x08005367
 8004d60:	08005367 	.word	0x08005367
 8004d64:	08005367 	.word	0x08005367
 8004d68:	08005367 	.word	0x08005367
 8004d6c:	08005367 	.word	0x08005367
 8004d70:	08005367 	.word	0x08005367
 8004d74:	08005367 	.word	0x08005367
 8004d78:	08005367 	.word	0x08005367
 8004d7c:	08005367 	.word	0x08005367
 8004d80:	08004e05 	.word	0x08004e05
 8004d84:	08005367 	.word	0x08005367
 8004d88:	08005367 	.word	0x08005367
 8004d8c:	08005367 	.word	0x08005367
 8004d90:	08005367 	.word	0x08005367
 8004d94:	08005367 	.word	0x08005367
 8004d98:	08005367 	.word	0x08005367
 8004d9c:	08005367 	.word	0x08005367
 8004da0:	08005367 	.word	0x08005367
 8004da4:	08005367 	.word	0x08005367
 8004da8:	08004e05 	.word	0x08004e05
 8004dac:	08005173 	.word	0x08005173
 8004db0:	08004e05 	.word	0x08004e05
 8004db4:	08005107 	.word	0x08005107
 8004db8:	080050bb 	.word	0x080050bb
 8004dbc:	08005107 	.word	0x08005107
 8004dc0:	08005367 	.word	0x08005367
 8004dc4:	08004e05 	.word	0x08004e05
 8004dc8:	08005367 	.word	0x08005367
 8004dcc:	08005367 	.word	0x08005367
 8004dd0:	08005367 	.word	0x08005367
 8004dd4:	08005367 	.word	0x08005367
 8004dd8:	08005367 	.word	0x08005367
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	080052b3 	.word	0x080052b3
 8004de4:	08005367 	.word	0x08005367
 8004de8:	08005367 	.word	0x08005367
 8004dec:	080051eb 	.word	0x080051eb
 8004df0:	08005367 	.word	0x08005367
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08005367 	.word	0x08005367
 8004dfc:	08005367 	.word	0x08005367
 8004e00:	08004e05 	.word	0x08004e05
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b78      	cmp	r3, #120	; 0x78
 8004e0a:	d003      	beq.n	8004e14 <_vsnprintf+0x424>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b58      	cmp	r3, #88	; 0x58
 8004e12:	d102      	bne.n	8004e1a <_vsnprintf+0x42a>
          base = 16U;
 8004e14:	2310      	movs	r3, #16
 8004e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e18:	e013      	b.n	8004e42 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b6f      	cmp	r3, #111	; 0x6f
 8004e20:	d102      	bne.n	8004e28 <_vsnprintf+0x438>
          base =  8U;
 8004e22:	2308      	movs	r3, #8
 8004e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e26:	e00c      	b.n	8004e42 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b62      	cmp	r3, #98	; 0x62
 8004e2e:	d102      	bne.n	8004e36 <_vsnprintf+0x446>
          base =  2U;
 8004e30:	2302      	movs	r3, #2
 8004e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e34:	e005      	b.n	8004e42 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8004e36:	230a      	movs	r3, #10
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3c:	f023 0310 	bic.w	r3, r3, #16
 8004e40:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b58      	cmp	r3, #88	; 0x58
 8004e48:	d103      	bne.n	8004e52 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8004e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4c:	f043 0320 	orr.w	r3, r3, #32
 8004e50:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b69      	cmp	r3, #105	; 0x69
 8004e58:	d007      	beq.n	8004e6a <_vsnprintf+0x47a>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b64      	cmp	r3, #100	; 0x64
 8004e60:	d003      	beq.n	8004e6a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e64:	f023 030c 	bic.w	r3, r3, #12
 8004e68:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8004e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b69      	cmp	r3, #105	; 0x69
 8004e82:	d004      	beq.n	8004e8e <_vsnprintf+0x49e>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b64      	cmp	r3, #100	; 0x64
 8004e8a:	f040 8098 	bne.w	8004fbe <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d031      	beq.n	8004efc <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	f103 0208 	add.w	r2, r3, #8
 8004ea6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	da06      	bge.n	8004ec8 <_vsnprintf+0x4d8>
 8004eba:	2100      	movs	r1, #0
 8004ebc:	f1d2 0800 	rsbs	r8, r2, #0
 8004ec0:	eb61 0903 	sbc.w	r9, r1, r3
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	69f9      	ldr	r1, [r7, #28]
 8004eca:	0fc9      	lsrs	r1, r1, #31
 8004ecc:	b2c9      	uxtb	r1, r1
 8004ece:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ed0:	2400      	movs	r4, #0
 8004ed2:	4682      	mov	sl, r0
 8004ed4:	46a3      	mov	fp, r4
 8004ed6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004ed8:	9008      	str	r0, [sp, #32]
 8004eda:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004edc:	9007      	str	r0, [sp, #28]
 8004ede:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ee0:	9006      	str	r0, [sp, #24]
 8004ee2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004ee6:	9102      	str	r1, [sp, #8]
 8004ee8:	e9cd 2300 	strd	r2, r3, [sp]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef0:	6939      	ldr	r1, [r7, #16]
 8004ef2:	6978      	ldr	r0, [r7, #20]
 8004ef4:	f7ff f825 	bl	8003f42 <_ntoa_long_long>
 8004ef8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004efa:	e0da      	b.n	80050b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8004f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfb8      	it	lt
 8004f1a:	425b      	neglt	r3, r3
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	0fdb      	lsrs	r3, r3, #31
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f26:	9205      	str	r2, [sp, #20]
 8004f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f2a:	9204      	str	r2, [sp, #16]
 8004f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f2e:	9203      	str	r2, [sp, #12]
 8004f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f32:	9202      	str	r2, [sp, #8]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	9100      	str	r1, [sp, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f3c:	6939      	ldr	r1, [r7, #16]
 8004f3e:	6978      	ldr	r0, [r7, #20]
 8004f40:	f7fe ff99 	bl	8003e76 <_ntoa_long>
 8004f44:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004f46:	e0b4      	b.n	80050b2 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <_vsnprintf+0x572>
 8004f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	e012      	b.n	8004f88 <_vsnprintf+0x598>
 8004f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <_vsnprintf+0x58c>
 8004f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b21b      	sxth	r3, r3
 8004f7a:	e005      	b.n	8004f88 <_vsnprintf+0x598>
 8004f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfb8      	it	lt
 8004f90:	425b      	neglt	r3, r3
 8004f92:	4619      	mov	r1, r3
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	0fdb      	lsrs	r3, r3, #31
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f9c:	9205      	str	r2, [sp, #20]
 8004f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fa0:	9204      	str	r2, [sp, #16]
 8004fa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fa4:	9203      	str	r2, [sp, #12]
 8004fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	9100      	str	r1, [sp, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	6978      	ldr	r0, [r7, #20]
 8004fb6:	f7fe ff5e 	bl	8003e76 <_ntoa_long>
 8004fba:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004fbc:	e079      	b.n	80050b2 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d022      	beq.n	800500e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fcc:	3307      	adds	r3, #7
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	f103 0208 	add.w	r2, r3, #8
 8004fd6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004fe8:	9108      	str	r1, [sp, #32]
 8004fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fec:	9107      	str	r1, [sp, #28]
 8004fee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ff0:	9106      	str	r1, [sp, #24]
 8004ff2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	9102      	str	r1, [sp, #8]
 8004ffa:	e9cd 2300 	strd	r2, r3, [sp]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005002:	6939      	ldr	r1, [r7, #16]
 8005004:	6978      	ldr	r0, [r7, #20]
 8005006:	f7fe ff9c 	bl	8003f42 <_ntoa_long_long>
 800500a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800500c:	e051      	b.n	80050b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800500e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d018      	beq.n	800504a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800501c:	1d1a      	adds	r2, r3, #4
 800501e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005026:	9205      	str	r2, [sp, #20]
 8005028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502a:	9204      	str	r2, [sp, #16]
 800502c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800502e:	9203      	str	r2, [sp, #12]
 8005030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005032:	9202      	str	r2, [sp, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	9201      	str	r2, [sp, #4]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503e:	6939      	ldr	r1, [r7, #16]
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f7fe ff18 	bl	8003e76 <_ntoa_long>
 8005046:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005048:	e033      	b.n	80050b2 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800504a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <_vsnprintf+0x674>
 8005054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005058:	1d1a      	adds	r2, r3, #4
 800505a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e012      	b.n	800508a <_vsnprintf+0x69a>
 8005064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <_vsnprintf+0x68e>
 800506e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005072:	1d1a      	adds	r2, r3, #4
 8005074:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	e005      	b.n	800508a <_vsnprintf+0x69a>
 800507e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800508c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	2300      	movs	r3, #0
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a8:	6939      	ldr	r1, [r7, #16]
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7fe fee3 	bl	8003e76 <_ntoa_long>
 80050b0:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60bb      	str	r3, [r7, #8]
        break;
 80050b8:	e162      	b.n	8005380 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b46      	cmp	r3, #70	; 0x46
 80050c0:	d103      	bne.n	80050ca <_vsnprintf+0x6da>
 80050c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c4:	f043 0320 	orr.w	r3, r3, #32
 80050c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80050ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ce:	3307      	adds	r3, #7
 80050d0:	f023 0307 	bic.w	r3, r3, #7
 80050d4:	f103 0208 	add.w	r2, r3, #8
 80050d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050e2:	9104      	str	r1, [sp, #16]
 80050e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050e6:	9103      	str	r1, [sp, #12]
 80050e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ea:	9102      	str	r1, [sp, #8]
 80050ec:	e9cd 2300 	strd	r2, r3, [sp]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050f4:	6939      	ldr	r1, [r7, #16]
 80050f6:	6978      	ldr	r0, [r7, #20]
 80050f8:	f7fe ff92 	bl	8004020 <_ftoa>
 80050fc:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3301      	adds	r3, #1
 8005102:	60bb      	str	r3, [r7, #8]
        break;
 8005104:	e13c      	b.n	8005380 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b67      	cmp	r3, #103	; 0x67
 800510c:	d003      	beq.n	8005116 <_vsnprintf+0x726>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b47      	cmp	r3, #71	; 0x47
 8005114:	d103      	bne.n	800511e <_vsnprintf+0x72e>
 8005116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005118:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800511c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b45      	cmp	r3, #69	; 0x45
 8005124:	d003      	beq.n	800512e <_vsnprintf+0x73e>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b47      	cmp	r3, #71	; 0x47
 800512c:	d103      	bne.n	8005136 <_vsnprintf+0x746>
 800512e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005130:	f043 0320 	orr.w	r3, r3, #32
 8005134:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800513a:	3307      	adds	r3, #7
 800513c:	f023 0307 	bic.w	r3, r3, #7
 8005140:	f103 0208 	add.w	r2, r3, #8
 8005144:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800514e:	9104      	str	r1, [sp, #16]
 8005150:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005152:	9103      	str	r1, [sp, #12]
 8005154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005156:	9102      	str	r1, [sp, #8]
 8005158:	e9cd 2300 	strd	r2, r3, [sp]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	6978      	ldr	r0, [r7, #20]
 8005164:	f7ff f9b4 	bl	80044d0 <_etoa>
 8005168:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	3301      	adds	r3, #1
 800516e:	60bb      	str	r3, [r7, #8]
        break;
 8005170:	e106      	b.n	8005380 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8005172:	2301      	movs	r3, #1
 8005174:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10e      	bne.n	800519e <_vsnprintf+0x7ae>
          while (l++ < width) {
 8005180:	e007      	b.n	8005192 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8005182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005184:	1c53      	adds	r3, r2, #1
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005188:	697c      	ldr	r4, [r7, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6939      	ldr	r1, [r7, #16]
 800518e:	2020      	movs	r0, #32
 8005190:	47a0      	blx	r4
          while (l++ < width) {
 8005192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	647a      	str	r2, [r7, #68]	; 0x44
 8005198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800519a:	429a      	cmp	r2, r3
 800519c:	d8f1      	bhi.n	8005182 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800519e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b2d8      	uxtb	r0, r3
 80051ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ae:	1c53      	adds	r3, r2, #1
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b2:	697c      	ldr	r4, [r7, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80051ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00e      	beq.n	80051e2 <_vsnprintf+0x7f2>
          while (l++ < width) {
 80051c4:	e007      	b.n	80051d6 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 80051c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051c8:	1c53      	adds	r3, r2, #1
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	697c      	ldr	r4, [r7, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6939      	ldr	r1, [r7, #16]
 80051d2:	2020      	movs	r0, #32
 80051d4:	47a0      	blx	r4
          while (l++ < width) {
 80051d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	647a      	str	r2, [r7, #68]	; 0x44
 80051dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051de:	429a      	cmp	r2, r3
 80051e0:	d8f1      	bhi.n	80051c6 <_vsnprintf+0x7d6>
          }
        }
        format++;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60bb      	str	r3, [r7, #8]
        break;
 80051e8:	e0ca      	b.n	8005380 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80051ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051ee:	1d1a      	adds	r2, r3, #4
 80051f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80051f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <_vsnprintf+0x812>
 80051fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005200:	e001      	b.n	8005206 <_vsnprintf+0x816>
 8005202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005206:	4619      	mov	r1, r3
 8005208:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800520a:	f7fe fcb2 	bl	8003b72 <_strnlen_s>
 800520e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 800521a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800521c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521e:	4293      	cmp	r3, r2
 8005220:	bf28      	it	cs
 8005222:	4613      	movcs	r3, r2
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11a      	bne.n	8005266 <_vsnprintf+0x876>
          while (l++ < width) {
 8005230:	e007      	b.n	8005242 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8005232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005234:	1c53      	adds	r3, r2, #1
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005238:	697c      	ldr	r4, [r7, #20]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6939      	ldr	r1, [r7, #16]
 800523e:	2020      	movs	r0, #32
 8005240:	47a0      	blx	r4
          while (l++ < width) {
 8005242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800524a:	429a      	cmp	r2, r3
 800524c:	d8f1      	bhi.n	8005232 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800524e:	e00a      	b.n	8005266 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8005250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	643a      	str	r2, [r7, #64]	; 0x40
 8005256:	7818      	ldrb	r0, [r3, #0]
 8005258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800525a:	1c53      	adds	r3, r2, #1
 800525c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800525e:	697c      	ldr	r4, [r7, #20]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <_vsnprintf+0x892>
 800526e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0eb      	beq.n	8005250 <_vsnprintf+0x860>
 8005278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527a:	1e5a      	subs	r2, r3, #1
 800527c:	657a      	str	r2, [r7, #84]	; 0x54
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e6      	bne.n	8005250 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00e      	beq.n	80052aa <_vsnprintf+0x8ba>
          while (l++ < width) {
 800528c:	e007      	b.n	800529e <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 800528e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005290:	1c53      	adds	r3, r2, #1
 8005292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005294:	697c      	ldr	r4, [r7, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6939      	ldr	r1, [r7, #16]
 800529a:	2020      	movs	r0, #32
 800529c:	47a0      	blx	r4
          while (l++ < width) {
 800529e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d8f1      	bhi.n	800528e <_vsnprintf+0x89e>
          }
        }
        format++;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60bb      	str	r3, [r7, #8]
        break;
 80052b0:	e066      	b.n	8005380 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80052b2:	2308      	movs	r3, #8
 80052b4:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80052b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80052bc:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80052be:	2300      	movs	r3, #0
 80052c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80052c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d023      	beq.n	8005314 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80052cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	2300      	movs	r3, #0
 80052dc:	603a      	str	r2, [r7, #0]
 80052de:	607b      	str	r3, [r7, #4]
 80052e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e2:	9308      	str	r3, [sp, #32]
 80052e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e6:	9307      	str	r3, [sp, #28]
 80052e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ea:	9306      	str	r3, [sp, #24]
 80052ec:	f04f 0210 	mov.w	r2, #16
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052f8:	2300      	movs	r3, #0
 80052fa:	9302      	str	r3, [sp, #8]
 80052fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005300:	e9cd 3400 	strd	r3, r4, [sp]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005308:	6939      	ldr	r1, [r7, #16]
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7fe fe19 	bl	8003f42 <_ntoa_long_long>
 8005310:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005312:	e018      	b.n	8005346 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8005314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005318:	1d1a      	adds	r2, r3, #4
 800531a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005324:	9305      	str	r3, [sp, #20]
 8005326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532c:	9303      	str	r3, [sp, #12]
 800532e:	2310      	movs	r3, #16
 8005330:	9302      	str	r3, [sp, #8]
 8005332:	2300      	movs	r3, #0
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	9200      	str	r2, [sp, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800533c:	6939      	ldr	r1, [r7, #16]
 800533e:	6978      	ldr	r0, [r7, #20]
 8005340:	f7fe fd99 	bl	8003e76 <_ntoa_long>
 8005344:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3301      	adds	r3, #1
 800534a:	60bb      	str	r3, [r7, #8]
        break;
 800534c:	e018      	b.n	8005380 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800534e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005350:	1c53      	adds	r3, r2, #1
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	697c      	ldr	r4, [r7, #20]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6939      	ldr	r1, [r7, #16]
 800535a:	2025      	movs	r0, #37	; 0x25
 800535c:	47a0      	blx	r4
        format++;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	3301      	adds	r3, #1
 8005362:	60bb      	str	r3, [r7, #8]
        break;
 8005364:	e00c      	b.n	8005380 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	7818      	ldrb	r0, [r3, #0]
 800536a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800536c:	1c53      	adds	r3, r2, #1
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005370:	697c      	ldr	r4, [r7, #20]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6939      	ldr	r1, [r7, #16]
 8005376:	47a0      	blx	r4
        format++;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3301      	adds	r3, #1
 800537c:	60bb      	str	r3, [r7, #8]
        break;
 800537e:	bf00      	nop
  while (*format)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f47f ab45 	bne.w	8004a14 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800538a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <_vsnprintf+0x9a8>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1e5a      	subs	r2, r3, #1
 8005396:	e000      	b.n	800539a <_vsnprintf+0x9aa>
 8005398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800539a:	697c      	ldr	r4, [r7, #20]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6939      	ldr	r1, [r7, #16]
 80053a0:	2000      	movs	r0, #0
 80053a2:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3764      	adds	r7, #100	; 0x64
 80053aa:	46bd      	mov	sp, r7
 80053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080053b0 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80053b0:	b40e      	push	{r1, r2, r3}
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b087      	sub	sp, #28
 80053b6:	af02      	add	r7, sp, #8
 80053b8:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80053ba:	f107 0320 	add.w	r3, r7, #32
 80053be:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4805      	ldr	r0, [pc, #20]	; (80053e4 <sprintf_+0x34>)
 80053ce:	f7ff fb0f 	bl	80049f0 <_vsnprintf>
 80053d2:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80053d4:	68fb      	ldr	r3, [r7, #12]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053e0:	b003      	add	sp, #12
 80053e2:	4770      	bx	lr
 80053e4:	08003b2d 	.word	0x08003b2d

080053e8 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80053fa:	3301      	adds	r3, #1
 80053fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005400:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	429a      	cmp	r2, r3
 800540c:	d009      	beq.n	8005422 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	79f9      	ldrb	r1, [r7, #7]
 8005418:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d017      	beq.n	800547e <Uart_isr+0x52>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <Uart_isr+0xbc>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff ffba 	bl	80053e8 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 8005474:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <Uart_isr+0xc0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	605a      	str	r2, [r3, #4]
        return;
 800547c:	e031      	b.n	80054e2 <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02c      	beq.n	80054e2 <Uart_isr+0xb6>
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d027      	beq.n	80054e2 <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <Uart_isr+0xc4>)
 8005494:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005498:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <Uart_isr+0xc4>)
 800549a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800549e:	429a      	cmp	r2, r3
 80054a0:	d108      	bne.n	80054b4 <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80054b2:	e015      	b.n	80054e0 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <Uart_isr+0xc4>)
 80054b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80054ba:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <Uart_isr+0xc4>)
 80054bc:	5cd3      	ldrb	r3, [r2, r3]
 80054be:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <Uart_isr+0xc4>)
 80054c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80054c6:	3301      	adds	r3, #1
 80054c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054cc:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <Uart_isr+0xc4>)
 80054ce:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	7bba      	ldrb	r2, [r7, #14]
 80054de:	605a      	str	r2, [r3, #4]
    	return;
 80054e0:	bf00      	nop
    }
}
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20003034 	.word	0x20003034
 80054ec:	20000218 	.word	0x20000218
 80054f0:	20002c2c 	.word	0x20002c2c

080054f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <HAL_MspInit+0x5c>)
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	4a14      	ldr	r2, [pc, #80]	; (8005550 <HAL_MspInit+0x5c>)
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	6193      	str	r3, [r2, #24]
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_MspInit+0x5c>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005512:	4b0f      	ldr	r3, [pc, #60]	; (8005550 <HAL_MspInit+0x5c>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	4a0e      	ldr	r2, [pc, #56]	; (8005550 <HAL_MspInit+0x5c>)
 8005518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551c:	61d3      	str	r3, [r2, #28]
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <HAL_MspInit+0x5c>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_MspInit+0x60>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <HAL_MspInit+0x60>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	40021000 	.word	0x40021000
 8005554:	40010000 	.word	0x40010000

08005558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005568:	e7fe      	b.n	8005568 <HardFault_Handler+0x4>

0800556a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800556e:	e7fe      	b.n	800556e <MemManage_Handler+0x4>

08005570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005574:	e7fe      	b.n	8005574 <BusFault_Handler+0x4>

08005576 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800557a:	e7fe      	b.n	800557a <UsageFault_Handler+0x4>

0800557c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800558c:	bf00      	nop
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <SysTick_Handler+0x20>)
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <SysTick_Handler+0x18>
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <SysTick_Handler+0x20>)
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <SysTick_Handler+0x20>)
 80055b6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055b8:	f001 f8e0 	bl	800677c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055bc:	bf00      	nop
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20002c28 	.word	0x20002c28

080055c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80055c8:	4b08      	ldr	r3, [pc, #32]	; (80055ec <EXTI0_IRQHandler+0x28>)
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <EXTI0_IRQHandler+0x28>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 80055da:	2001      	movs	r0, #1
 80055dc:	f002 fa38 	bl	8007a50 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80055e0:	2001      	movs	r0, #1
 80055e2:	f002 fa1d 	bl	8007a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80055e6:	bf00      	nop
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40010400 	.word	0x40010400

080055f0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <EXTI4_IRQHandler+0x2c>)
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <EXTI4_IRQHandler+0x30>)
 8005602:	2201      	movs	r2, #1
 8005604:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <EXTI4_IRQHandler+0x2c>)
 8005608:	2210      	movs	r2, #16
 800560a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 800560c:	2010      	movs	r0, #16
 800560e:	f002 fa1f 	bl	8007a50 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005612:	2010      	movs	r0, #16
 8005614:	f002 fa04 	bl	8007a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005618:	bf00      	nop
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40010400 	.word	0x40010400
 8005620:	20003244 	.word	0x20003244

08005624 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <DMA1_Channel6_IRQHandler+0x10>)
 800562a:	f001 fdc7 	bl	80071bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	2000313c 	.word	0x2000313c

08005638 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <TIM3_IRQHandler+0x3c>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	3b01      	subs	r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <TIM3_IRQHandler+0x3c>)
 8005646:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <TIM3_IRQHandler+0x3c>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10c      	bne.n	800566a <TIM3_IRQHandler+0x32>
 8005650:	4b09      	ldr	r3, [pc, #36]	; (8005678 <TIM3_IRQHandler+0x40>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d108      	bne.n	800566a <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 8005658:	4808      	ldr	r0, [pc, #32]	; (800567c <TIM3_IRQHandler+0x44>)
 800565a:	f002 ff62 	bl	8008522 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 800565e:	4807      	ldr	r0, [pc, #28]	; (800567c <TIM3_IRQHandler+0x44>)
 8005660:	f002 ffa3 	bl	80085aa <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <TIM3_IRQHandler+0x40>)
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800566a:	4804      	ldr	r0, [pc, #16]	; (800567c <TIM3_IRQHandler+0x44>)
 800566c:	f003 f912 	bl	8008894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005670:	bf00      	nop
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20003180 	.word	0x20003180
 8005678:	20003181 	.word	0x20003181
 800567c:	200030bc 	.word	0x200030bc

08005680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <USART1_IRQHandler+0x38>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b20      	cmp	r3, #32
 8005696:	d107      	bne.n	80056a8 <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 8005698:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <USART1_IRQHandler+0x38>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <USART1_IRQHandler+0x3c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	79fa      	ldrb	r2, [r7, #7]
 80056a6:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056a8:	4805      	ldr	r0, [pc, #20]	; (80056c0 <USART1_IRQHandler+0x40>)
 80056aa:	f004 f971 	bl	8009990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000218 	.word	0x20000218
 80056bc:	20000258 	.word	0x20000258
 80056c0:	20003184 	.word	0x20003184

080056c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <USART3_IRQHandler+0x10>)
 80056ca:	f7ff feaf 	bl	800542c <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20003204 	.word	0x20003204

080056d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <EXTI15_10_IRQHandler+0x2c>)
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <EXTI15_10_IRQHandler+0x20>
	{
		// extern void debug_alarm_set();
		// debug_alarm_set();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <EXTI15_10_IRQHandler+0x2c>)
 80056ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056ee:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 80056f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056f4:	f002 f9ac 	bl	8007a50 <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80056f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056fc:	f002 f990 	bl	8007a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005700:	bf00      	nop
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40010400 	.word	0x40010400

08005708 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <TIM5_IRQHandler+0x14>)
 800570e:	2201      	movs	r2, #1
 8005710:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005712:	4803      	ldr	r0, [pc, #12]	; (8005720 <TIM5_IRQHandler+0x18>)
 8005714:	f003 f8be 	bl	8008894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005718:	bf00      	nop
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20000000 	.word	0x20000000
 8005720:	200030fc 	.word	0x200030fc

08005724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
	return 1;
 8005728:	2301      	movs	r3, #1
}
 800572a:	4618      	mov	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <_kill>:

int _kill(int pid, int sig)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800573c:	f004 fdc6 	bl	800a2cc <__errno>
 8005740:	4603      	mov	r3, r0
 8005742:	2216      	movs	r2, #22
 8005744:	601a      	str	r2, [r3, #0]
	return -1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <_exit>:

void _exit (int status)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800575a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff ffe7 	bl	8005732 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005764:	e7fe      	b.n	8005764 <_exit+0x12>
	...

08005768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <_sbrk+0x5c>)
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <_sbrk+0x60>)
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800577c:	4b13      	ldr	r3, [pc, #76]	; (80057cc <_sbrk+0x64>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <_sbrk+0x64>)
 8005786:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <_sbrk+0x68>)
 8005788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <_sbrk+0x64>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d207      	bcs.n	80057a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005798:	f004 fd98 	bl	800a2cc <__errno>
 800579c:	4603      	mov	r3, r0
 800579e:	220c      	movs	r2, #12
 80057a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a6:	e009      	b.n	80057bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057a8:	4b08      	ldr	r3, [pc, #32]	; (80057cc <_sbrk+0x64>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <_sbrk+0x64>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4413      	add	r3, r2
 80057b6:	4a05      	ldr	r2, [pc, #20]	; (80057cc <_sbrk+0x64>)
 80057b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057ba:	68fb      	ldr	r3, [r7, #12]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20010000 	.word	0x20010000
 80057c8:	00000400 	.word	0x00000400
 80057cc:	20003038 	.word	0x20003038
 80057d0:	20003260 	.word	0x20003260

080057d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80057d8:	4b15      	ldr	r3, [pc, #84]	; (8005830 <SystemInit+0x5c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <SystemInit+0x5c>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <SystemInit+0x5c>)
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4911      	ldr	r1, [pc, #68]	; (8005830 <SystemInit+0x5c>)
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <SystemInit+0x60>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80057f0:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <SystemInit+0x5c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a0e      	ldr	r2, [pc, #56]	; (8005830 <SystemInit+0x5c>)
 80057f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80057fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <SystemInit+0x5c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <SystemInit+0x5c>)
 8005806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800580c:	4b08      	ldr	r3, [pc, #32]	; (8005830 <SystemInit+0x5c>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a07      	ldr	r2, [pc, #28]	; (8005830 <SystemInit+0x5c>)
 8005812:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005816:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <SystemInit+0x5c>)
 800581a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800581e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <SystemInit+0x64>)
 8005822:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005826:	609a      	str	r2, [r3, #8]
#endif 
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr
 8005830:	40021000 	.word	0x40021000
 8005834:	f8ff0000 	.word	0xf8ff0000
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b094      	sub	sp, #80	; 0x50
 8005840:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005842:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005850:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800585a:	f107 031c 	add.w	r3, r7, #28
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	609a      	str	r2, [r3, #8]
 8005866:	60da      	str	r2, [r3, #12]
 8005868:	611a      	str	r2, [r3, #16]
 800586a:	615a      	str	r2, [r3, #20]
 800586c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800586e:	463b      	mov	r3, r7
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	611a      	str	r2, [r3, #16]
 800587c:	615a      	str	r2, [r3, #20]
 800587e:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8005880:	4b3f      	ldr	r3, [pc, #252]	; (8005980 <MX_TIM1_Init+0x144>)
 8005882:	4a40      	ldr	r2, [pc, #256]	; (8005984 <MX_TIM1_Init+0x148>)
 8005884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8005886:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <MX_TIM1_Init+0x144>)
 8005888:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800588c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800588e:	4b3c      	ldr	r3, [pc, #240]	; (8005980 <MX_TIM1_Init+0x144>)
 8005890:	2200      	movs	r2, #0
 8005892:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8005894:	4b3a      	ldr	r3, [pc, #232]	; (8005980 <MX_TIM1_Init+0x144>)
 8005896:	f240 4265 	movw	r2, #1125	; 0x465
 800589a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800589c:	4b38      	ldr	r3, [pc, #224]	; (8005980 <MX_TIM1_Init+0x144>)
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80058a2:	4b37      	ldr	r3, [pc, #220]	; (8005980 <MX_TIM1_Init+0x144>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <MX_TIM1_Init+0x144>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80058ae:	4834      	ldr	r0, [pc, #208]	; (8005980 <MX_TIM1_Init+0x144>)
 80058b0:	f002 fdf2 	bl	8008498 <HAL_TIM_Base_Init>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80058ba:	f7fe f931 	bl	8003b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80058c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058c8:	4619      	mov	r1, r3
 80058ca:	482d      	ldr	r0, [pc, #180]	; (8005980 <MX_TIM1_Init+0x144>)
 80058cc:	f003 f9b0 	bl	8008c30 <HAL_TIM_ConfigClockSource>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80058d6:	f7fe f923 	bl	8003b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80058da:	4829      	ldr	r0, [pc, #164]	; (8005980 <MX_TIM1_Init+0x144>)
 80058dc:	f002 fe8f 	bl	80085fe <HAL_TIM_PWM_Init>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80058e6:	f7fe f91b 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058ea:	2300      	movs	r3, #0
 80058ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058f6:	4619      	mov	r1, r3
 80058f8:	4821      	ldr	r0, [pc, #132]	; (8005980 <MX_TIM1_Init+0x144>)
 80058fa:	f003 fe66 	bl	80095ca <HAL_TIMEx_MasterConfigSynchronization>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8005904:	f7fe f90c 	bl	8003b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005908:	2360      	movs	r3, #96	; 0x60
 800590a:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 800590c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005910:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005916:	2300      	movs	r3, #0
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800591a:	2300      	movs	r3, #0
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800591e:	2300      	movs	r3, #0
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005926:	f107 031c 	add.w	r3, r7, #28
 800592a:	2200      	movs	r2, #0
 800592c:	4619      	mov	r1, r3
 800592e:	4814      	ldr	r0, [pc, #80]	; (8005980 <MX_TIM1_Init+0x144>)
 8005930:	f003 f8b8 	bl	8008aa4 <HAL_TIM_PWM_ConfigChannel>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800593a:	f7fe f8f1 	bl	8003b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800593e:	2300      	movs	r3, #0
 8005940:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005946:	2300      	movs	r3, #0
 8005948:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005956:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800595c:	463b      	mov	r3, r7
 800595e:	4619      	mov	r1, r3
 8005960:	4807      	ldr	r0, [pc, #28]	; (8005980 <MX_TIM1_Init+0x144>)
 8005962:	f003 fdda 	bl	800951a <HAL_TIMEx_ConfigBreakDeadTime>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800596c:	f7fe f8d8 	bl	8003b20 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005970:	4803      	ldr	r0, [pc, #12]	; (8005980 <MX_TIM1_Init+0x144>)
 8005972:	f000 f9db 	bl	8005d2c <HAL_TIM_MspPostInit>

}
 8005976:	bf00      	nop
 8005978:	3750      	adds	r7, #80	; 0x50
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2000303c 	.word	0x2000303c
 8005984:	40012c00 	.word	0x40012c00

08005988 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800598e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	609a      	str	r2, [r3, #8]
 800599a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800599c:	f107 0320 	add.w	r3, r7, #32
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	611a      	str	r2, [r3, #16]
 80059b4:	615a      	str	r2, [r3, #20]
 80059b6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80059b8:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80059c0:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059c2:	2247      	movs	r2, #71	; 0x47
 80059c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80059cc:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059ce:	2264      	movs	r2, #100	; 0x64
 80059d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059d2:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059d8:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059da:	2280      	movs	r2, #128	; 0x80
 80059dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059de:	4823      	ldr	r0, [pc, #140]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059e0:	f002 fd5a 	bl	8008498 <HAL_TIM_Base_Init>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80059ea:	f7fe f899 	bl	8003b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80059f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059f8:	4619      	mov	r1, r3
 80059fa:	481c      	ldr	r0, [pc, #112]	; (8005a6c <MX_TIM2_Init+0xe4>)
 80059fc:	f003 f918 	bl	8008c30 <HAL_TIM_ConfigClockSource>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8005a06:	f7fe f88b 	bl	8003b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005a0a:	4818      	ldr	r0, [pc, #96]	; (8005a6c <MX_TIM2_Init+0xe4>)
 8005a0c:	f002 fdf7 	bl	80085fe <HAL_TIM_PWM_Init>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8005a16:	f7fe f883 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a22:	f107 0320 	add.w	r3, r7, #32
 8005a26:	4619      	mov	r1, r3
 8005a28:	4810      	ldr	r0, [pc, #64]	; (8005a6c <MX_TIM2_Init+0xe4>)
 8005a2a:	f003 fdce 	bl	80095ca <HAL_TIMEx_MasterConfigSynchronization>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8005a34:	f7fe f874 	bl	8003b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a38:	2360      	movs	r3, #96	; 0x60
 8005a3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8005a3c:	2332      	movs	r3, #50	; 0x32
 8005a3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4807      	ldr	r0, [pc, #28]	; (8005a6c <MX_TIM2_Init+0xe4>)
 8005a50:	f003 f828 	bl	8008aa4 <HAL_TIM_PWM_ConfigChannel>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8005a5a:	f7fe f861 	bl	8003b20 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005a5e:	4803      	ldr	r0, [pc, #12]	; (8005a6c <MX_TIM2_Init+0xe4>)
 8005a60:	f000 f964 	bl	8005d2c <HAL_TIM_MspPostInit>

}
 8005a64:	bf00      	nop
 8005a66:	3738      	adds	r7, #56	; 0x38
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	2000307c 	.word	0x2000307c

08005a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08e      	sub	sp, #56	; 0x38
 8005a74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	609a      	str	r2, [r3, #8]
 8005a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a84:	f107 0320 	add.w	r3, r7, #32
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a8e:	1d3b      	adds	r3, r7, #4
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	611a      	str	r2, [r3, #16]
 8005a9c:	615a      	str	r2, [r3, #20]
 8005a9e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005aa2:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <MX_TIM3_Init+0xe8>)
 8005aa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8005aa6:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005aa8:	f242 720f 	movw	r2, #9999	; 0x270f
 8005aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aae:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 72-1;
 8005ab4:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005ab6:	2247      	movs	r2, #71	; 0x47
 8005ab8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aba:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ac0:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ac6:	4823      	ldr	r0, [pc, #140]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005ac8:	f002 fce6 	bl	8008498 <HAL_TIM_Base_Init>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005ad2:	f7fe f825 	bl	8003b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	481c      	ldr	r0, [pc, #112]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005ae4:	f003 f8a4 	bl	8008c30 <HAL_TIM_ConfigClockSource>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005aee:	f7fe f817 	bl	8003b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005af2:	4818      	ldr	r0, [pc, #96]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005af4:	f002 fd83 	bl	80085fe <HAL_TIM_PWM_Init>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005afe:	f7fe f80f 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b02:	2300      	movs	r3, #0
 8005b04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8005b06:	2380      	movs	r3, #128	; 0x80
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b0a:	f107 0320 	add.w	r3, r7, #32
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4810      	ldr	r0, [pc, #64]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005b12:	f003 fd5a 	bl	80095ca <HAL_TIMEx_MasterConfigSynchronization>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005b1c:	f7fe f800 	bl	8003b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b20:	2360      	movs	r3, #96	; 0x60
 8005b22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 8005b24:	2324      	movs	r3, #36	; 0x24
 8005b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	2200      	movs	r2, #0
 8005b34:	4619      	mov	r1, r3
 8005b36:	4807      	ldr	r0, [pc, #28]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005b38:	f002 ffb4 	bl	8008aa4 <HAL_TIM_PWM_ConfigChannel>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005b42:	f7fd ffed 	bl	8003b20 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005b46:	4803      	ldr	r0, [pc, #12]	; (8005b54 <MX_TIM3_Init+0xe4>)
 8005b48:	f000 f8f0 	bl	8005d2c <HAL_TIM_MspPostInit>

}
 8005b4c:	bf00      	nop
 8005b4e:	3738      	adds	r7, #56	; 0x38
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200030bc 	.word	0x200030bc
 8005b58:	40000400 	.word	0x40000400

08005b5c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	605a      	str	r2, [r3, #4]
 8005b6c:	609a      	str	r2, [r3, #8]
 8005b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b70:	463b      	mov	r3, r7
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8005b78:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <MX_TIM5_Init+0x98>)
 8005b7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005b80:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005b84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b86:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8005b8c:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005b8e:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8005b92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b94:	4b16      	ldr	r3, [pc, #88]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005b9c:	2280      	movs	r2, #128	; 0x80
 8005b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005ba0:	4813      	ldr	r0, [pc, #76]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005ba2:	f002 fc79 	bl	8008498 <HAL_TIM_Base_Init>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005bac:	f7fd ffb8 	bl	8003b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005bb6:	f107 0308 	add.w	r3, r7, #8
 8005bba:	4619      	mov	r1, r3
 8005bbc:	480c      	ldr	r0, [pc, #48]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005bbe:	f003 f837 	bl	8008c30 <HAL_TIM_ConfigClockSource>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005bc8:	f7fd ffaa 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4805      	ldr	r0, [pc, #20]	; (8005bf0 <MX_TIM5_Init+0x94>)
 8005bda:	f003 fcf6 	bl	80095ca <HAL_TIMEx_MasterConfigSynchronization>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005be4:	f7fd ff9c 	bl	8003b20 <Error_Handler>
  }

}
 8005be8:	bf00      	nop
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	200030fc 	.word	0x200030fc
 8005bf4:	40000c00 	.word	0x40000c00

08005bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a43      	ldr	r2, [pc, #268]	; (8005d14 <HAL_TIM_Base_MspInit+0x11c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10c      	bne.n	8005c24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c0a:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c14:	6193      	str	r3, [r2, #24]
 8005c16:	4b40      	ldr	r3, [pc, #256]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005c22:	e073      	b.n	8005d0c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2c:	d10c      	bne.n	8005c48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	4a39      	ldr	r2, [pc, #228]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	61d3      	str	r3, [r2, #28]
 8005c3a:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	693b      	ldr	r3, [r7, #16]
}
 8005c46:	e061      	b.n	8005d0c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM3)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <HAL_TIM_Base_MspInit+0x124>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d143      	bne.n	8005cda <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c52:	4b31      	ldr	r3, [pc, #196]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4a30      	ldr	r2, [pc, #192]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c58:	f043 0302 	orr.w	r3, r3, #2
 8005c5c:	61d3      	str	r3, [r2, #28]
 8005c5e:	4b2e      	ldr	r3, [pc, #184]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c6c:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_TIM_Base_MspInit+0x12c>)
 8005c6e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c70:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c72:	2210      	movs	r2, #16
 8005c74:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c76:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8005c7c:	4b28      	ldr	r3, [pc, #160]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c7e:	2280      	movs	r2, #128	; 0x80
 8005c80:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c82:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c88:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c8a:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c90:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8005c92:	4b23      	ldr	r3, [pc, #140]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005c98:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005c9a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005c9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8005ca0:	481f      	ldr	r0, [pc, #124]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005ca2:	f001 f8ad 	bl	8006e00 <HAL_DMA_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_TIM_Base_MspInit+0xb8>
      Error_Handler();
 8005cac:	f7fd ff38 	bl	8003b20 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <HAL_TIM_Base_MspInit+0x128>)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2100      	movs	r1, #0
 8005ccc:	201d      	movs	r0, #29
 8005cce:	f001 f860 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005cd2:	201d      	movs	r0, #29
 8005cd4:	f001 f879 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8005cd8:	e018      	b.n	8005d0c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <HAL_TIM_Base_MspInit+0x130>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d113      	bne.n	8005d0c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005cea:	f043 0308 	orr.w	r3, r3, #8
 8005cee:	61d3      	str	r3, [r2, #28]
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_TIM_Base_MspInit+0x120>)
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	2032      	movs	r0, #50	; 0x32
 8005d02:	f001 f846 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005d06:	2032      	movs	r0, #50	; 0x32
 8005d08:	f001 f85f 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8005d0c:	bf00      	nop
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	2000313c 	.word	0x2000313c
 8005d24:	4002006c 	.word	0x4002006c
 8005d28:	40000c00 	.word	0x40000c00

08005d2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08a      	sub	sp, #40	; 0x28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a37      	ldr	r2, [pc, #220]	; (8005e24 <HAL_TIM_MspPostInit+0xf8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d119      	bne.n	8005d80 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d4c:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	4a35      	ldr	r2, [pc, #212]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005d52:	f043 0304 	orr.w	r3, r3, #4
 8005d56:	6193      	str	r3, [r2, #24]
 8005d58:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	4619      	mov	r1, r3
 8005d78:	482c      	ldr	r0, [pc, #176]	; (8005e2c <HAL_TIM_MspPostInit+0x100>)
 8005d7a:	f001 fc89 	bl	8007690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005d7e:	e04d      	b.n	8005e1c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d88:	d12b      	bne.n	8005de2 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d8a:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005d90:	f043 0308 	orr.w	r3, r3, #8
 8005d94:	6193      	str	r3, [r2, #24]
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da8:	2302      	movs	r3, #2
 8005daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dac:	2302      	movs	r3, #2
 8005dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005db0:	f107 0314 	add.w	r3, r7, #20
 8005db4:	4619      	mov	r1, r3
 8005db6:	481e      	ldr	r0, [pc, #120]	; (8005e30 <HAL_TIM_MspPostInit+0x104>)
 8005db8:	f001 fc6a 	bl	8007690 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <HAL_TIM_MspPostInit+0x108>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dda:	4a16      	ldr	r2, [pc, #88]	; (8005e34 <HAL_TIM_MspPostInit+0x108>)
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	6053      	str	r3, [r2, #4]
}
 8005de0:	e01c      	b.n	8005e1c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a14      	ldr	r2, [pc, #80]	; (8005e38 <HAL_TIM_MspPostInit+0x10c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d117      	bne.n	8005e1c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	4a0d      	ldr	r2, [pc, #52]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005df2:	f043 0304 	orr.w	r3, r3, #4
 8005df6:	6193      	str	r3, [r2, #24]
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_TIM_MspPostInit+0xfc>)
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e04:	2340      	movs	r3, #64	; 0x40
 8005e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	4619      	mov	r1, r3
 8005e16:	4805      	ldr	r0, [pc, #20]	; (8005e2c <HAL_TIM_MspPostInit+0x100>)
 8005e18:	f001 fc3a 	bl	8007690 <HAL_GPIO_Init>
}
 8005e1c:	bf00      	nop
 8005e1e:	3728      	adds	r7, #40	; 0x28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40010800 	.word	0x40010800
 8005e30:	40010c00 	.word	0x40010c00
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400

08005e3c <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <TIMER_INIT+0x20>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0201 	mvn.w	r2, #1
 8005e48:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8005e4a:	4804      	ldr	r0, [pc, #16]	; (8005e5c <TIMER_INIT+0x20>)
 8005e4c:	f002 fb4f 	bl	80084ee <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8005e50:	4802      	ldr	r0, [pc, #8]	; (8005e5c <TIMER_INIT+0x20>)
 8005e52:	f002 fb90 	bl	8008576 <HAL_TIM_Base_Start_IT>
}
 8005e56:	bf00      	nop
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200030fc 	.word	0x200030fc

08005e60 <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <timer_min+0x38>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f06f 0201 	mvn.w	r2, #1
 8005e72:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <timer_min+0x3c>)
 8005e7c:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <timer_min+0x40>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8005e84:	4804      	ldr	r0, [pc, #16]	; (8005e98 <timer_min+0x38>)
 8005e86:	f002 fb32 	bl	80084ee <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8005e8a:	4803      	ldr	r0, [pc, #12]	; (8005e98 <timer_min+0x38>)
 8005e8c:	f002 fb73 	bl	8008576 <HAL_TIM_Base_Start_IT>
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200030bc 	.word	0x200030bc
 8005e9c:	20003180 	.word	0x20003180
 8005ea0:	20003181 	.word	0x20003181

08005ea4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005ea8:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eaa:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <MX_USART1_UART_Init+0x50>)
 8005eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005eae:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eca:	220c      	movs	r2, #12
 8005ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005eda:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005edc:	f003 fbcb 	bl	8009676 <HAL_UART_Init>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005ee6:	f7fd fe1b 	bl	8003b20 <Error_Handler>
  }

}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20003184 	.word	0x20003184
 8005ef4:	40013800 	.word	0x40013800

08005ef8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005efc:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005efe:	4a12      	ldr	r2, [pc, #72]	; (8005f48 <MX_USART2_UART_Init+0x50>)
 8005f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f04:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8005f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f1e:	220c      	movs	r2, #12
 8005f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f2e:	4805      	ldr	r0, [pc, #20]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f30:	f003 fba1 	bl	8009676 <HAL_UART_Init>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f3a:	f7fd fdf1 	bl	8003b20 <Error_Handler>
  }

}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200031c4 	.word	0x200031c4
 8005f48:	40004400 	.word	0x40004400

08005f4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f52:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <MX_USART3_UART_Init+0x50>)
 8005f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f70:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f72:	220c      	movs	r2, #12
 8005f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f82:	4805      	ldr	r0, [pc, #20]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f84:	f003 fb77 	bl	8009676 <HAL_UART_Init>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005f8e:	f7fd fdc7 	bl	8003b20 <Error_Handler>
  }

}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20003204 	.word	0x20003204
 8005f9c:	40004800 	.word	0x40004800

08005fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	; 0x38
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a64      	ldr	r2, [pc, #400]	; (800614c <HAL_UART_MspInit+0x1ac>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d13a      	bne.n	8006036 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fc0:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	4a62      	ldr	r2, [pc, #392]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8005fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fca:	6193      	str	r3, [r2, #24]
 8005fcc:	4b60      	ldr	r3, [pc, #384]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd8:	4b5d      	ldr	r3, [pc, #372]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	4a5c      	ldr	r2, [pc, #368]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8005fde:	f043 0304 	orr.w	r3, r3, #4
 8005fe2:	6193      	str	r3, [r2, #24]
 8005fe4:	4b5a      	ldr	r3, [pc, #360]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006002:	4619      	mov	r1, r3
 8006004:	4853      	ldr	r0, [pc, #332]	; (8006154 <HAL_UART_MspInit+0x1b4>)
 8006006:	f001 fb43 	bl	8007690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800600a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006010:	2300      	movs	r3, #0
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006014:	2300      	movs	r3, #0
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601c:	4619      	mov	r1, r3
 800601e:	484d      	ldr	r0, [pc, #308]	; (8006154 <HAL_UART_MspInit+0x1b4>)
 8006020:	f001 fb36 	bl	8007690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006024:	2200      	movs	r2, #0
 8006026:	2100      	movs	r1, #0
 8006028:	2025      	movs	r0, #37	; 0x25
 800602a:	f000 feb2 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800602e:	2025      	movs	r0, #37	; 0x25
 8006030:	f000 fecb 	bl	8006dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006034:	e086      	b.n	8006144 <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART2)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a47      	ldr	r2, [pc, #284]	; (8006158 <HAL_UART_MspInit+0x1b8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d130      	bne.n	80060a2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006040:	4b43      	ldr	r3, [pc, #268]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	4a42      	ldr	r2, [pc, #264]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8006046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800604a:	61d3      	str	r3, [r2, #28]
 800604c:	4b40      	ldr	r3, [pc, #256]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006058:	4b3d      	ldr	r3, [pc, #244]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	4a3c      	ldr	r2, [pc, #240]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 800605e:	f043 0304 	orr.w	r3, r3, #4
 8006062:	6193      	str	r3, [r2, #24]
 8006064:	4b3a      	ldr	r3, [pc, #232]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006070:	2304      	movs	r3, #4
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006074:	2302      	movs	r3, #2
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006078:	2303      	movs	r3, #3
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006080:	4619      	mov	r1, r3
 8006082:	4834      	ldr	r0, [pc, #208]	; (8006154 <HAL_UART_MspInit+0x1b4>)
 8006084:	f001 fb04 	bl	8007690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006088:	2308      	movs	r3, #8
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800608c:	2300      	movs	r3, #0
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006090:	2300      	movs	r3, #0
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006098:	4619      	mov	r1, r3
 800609a:	482e      	ldr	r0, [pc, #184]	; (8006154 <HAL_UART_MspInit+0x1b4>)
 800609c:	f001 faf8 	bl	8007690 <HAL_GPIO_Init>
}
 80060a0:	e050      	b.n	8006144 <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART3)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2d      	ldr	r2, [pc, #180]	; (800615c <HAL_UART_MspInit+0x1bc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d14b      	bne.n	8006144 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80060ac:	4b28      	ldr	r3, [pc, #160]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	4a27      	ldr	r2, [pc, #156]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 80060b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060b6:	61d3      	str	r3, [r2, #28]
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c4:	4b22      	ldr	r3, [pc, #136]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	4a21      	ldr	r2, [pc, #132]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 80060ca:	f043 0310 	orr.w	r3, r3, #16
 80060ce:	6193      	str	r3, [r2, #24]
 80060d0:	4b1f      	ldr	r3, [pc, #124]	; (8006150 <HAL_UART_MspInit+0x1b0>)
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80060dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e2:	2302      	movs	r3, #2
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060e6:	2303      	movs	r3, #3
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ee:	4619      	mov	r1, r3
 80060f0:	481b      	ldr	r0, [pc, #108]	; (8006160 <HAL_UART_MspInit+0x1c0>)
 80060f2:	f001 facd 	bl	8007690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80060f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060fc:	2300      	movs	r3, #0
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006100:	2300      	movs	r3, #0
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006108:	4619      	mov	r1, r3
 800610a:	4815      	ldr	r0, [pc, #84]	; (8006160 <HAL_UART_MspInit+0x1c0>)
 800610c:	f001 fac0 	bl	8007690 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <HAL_UART_MspInit+0x1c4>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	f043 0310 	orr.w	r3, r3, #16
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
 800612e:	4a0d      	ldr	r2, [pc, #52]	; (8006164 <HAL_UART_MspInit+0x1c4>)
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006134:	2200      	movs	r2, #0
 8006136:	2100      	movs	r1, #0
 8006138:	2027      	movs	r0, #39	; 0x27
 800613a:	f000 fe2a 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800613e:	2027      	movs	r0, #39	; 0x27
 8006140:	f000 fe43 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8006144:	bf00      	nop
 8006146:	3738      	adds	r7, #56	; 0x38
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40013800 	.word	0x40013800
 8006150:	40021000 	.word	0x40021000
 8006154:	40010800 	.word	0x40010800
 8006158:	40004400 	.word	0x40004400
 800615c:	40004800 	.word	0x40004800
 8006160:	40011000 	.word	0x40011000
 8006164:	40010000 	.word	0x40010000

08006168 <_Z10printToLCDRK6Stringt>:
    newStr.len = strlen(s) + str.len;
    strcpy(newStr.str, s);
    strcat(newStr.str, str.str);
    return newStr;
};
void printToLCD(const String& string, uint16_t row){
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
  char str[20];
  sprintf(str, "                   ");
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	490e      	ldr	r1, [pc, #56]	; (80061b4 <_Z10printToLCDRK6Stringt+0x4c>)
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff f918 	bl	80053b0 <sprintf_>
  LCD_DrawString(0, row*15, str);
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	461a      	mov	r2, r3
 8006184:	0112      	lsls	r2, r2, #4
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	b29b      	uxth	r3, r3
 800618a:	f107 020c 	add.w	r2, r7, #12
 800618e:	4619      	mov	r1, r3
 8006190:	2000      	movs	r0, #0
 8006192:	f7fd fb6b 	bl	800386c <LCD_DrawString>
  LCD_DrawString(0, row*15, string.str);
 8006196:	887b      	ldrh	r3, [r7, #2]
 8006198:	461a      	mov	r2, r3
 800619a:	0112      	lsls	r2, r2, #4
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	b29b      	uxth	r3, r3
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4619      	mov	r1, r3
 80061a4:	2000      	movs	r0, #0
 80061a6:	f7fd fb61 	bl	800386c <LCD_DrawString>
}
 80061aa:	bf00      	nop
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	0800ad94 	.word	0x0800ad94

080061b8 <_Z8debugLogRK6Stringt>:
        sprintf(str, "%02X", arr[i]);
        LCD_DrawString(i*15, row*15, str);
    }
}

void debugLog(const String& string, uint16_t row){
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
    printToLCD(string, row);
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff ffcd 	bl	8006168 <_Z10printToLCDRK6Stringt>
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	e00a      	b.n	80061fa <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 80061e4:	230c      	movs	r3, #12
 80061e6:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 80061e8:	bf00      	nop
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	1e5a      	subs	r2, r3, #1
 80061ee:	72fa      	strb	r2, [r7, #11]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1fa      	bne.n	80061ea <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3301      	adds	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3f0      	bcc.n	80061e4 <XPT2046_DelayUS+0xe>
			;

	}

}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
	...

08006210 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 800621a:	2200      	movs	r2, #0
 800621c:	2104      	movs	r1, #4
 800621e:	481d      	ldr	r0, [pc, #116]	; (8006294 <XPT2046_WriteCMD+0x84>)
 8006220:	f001 fbe5 	bl	80079ee <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8006224:	2200      	movs	r2, #0
 8006226:	2101      	movs	r1, #1
 8006228:	481a      	ldr	r0, [pc, #104]	; (8006294 <XPT2046_WriteCMD+0x84>)
 800622a:	f001 fbe0 	bl	80079ee <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
 8006232:	e027      	b.n	8006284 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8006234:	79fa      	ldrb	r2, [r7, #7]
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	f1c3 0307 	rsb	r3, r3, #7
 800623c:	fa42 f303 	asr.w	r3, r2, r3
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <XPT2046_WriteCMD+0x44>
 8006248:	2201      	movs	r2, #1
 800624a:	2104      	movs	r1, #4
 800624c:	4811      	ldr	r0, [pc, #68]	; (8006294 <XPT2046_WriteCMD+0x84>)
 800624e:	f001 fbce 	bl	80079ee <HAL_GPIO_WritePin>
 8006252:	e004      	b.n	800625e <XPT2046_WriteCMD+0x4e>
 8006254:	2200      	movs	r2, #0
 8006256:	2104      	movs	r1, #4
 8006258:	480e      	ldr	r0, [pc, #56]	; (8006294 <XPT2046_WriteCMD+0x84>)
 800625a:	f001 fbc8 	bl	80079ee <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 800625e:	2005      	movs	r0, #5
 8006260:	f7ff ffb9 	bl	80061d6 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8006264:	2201      	movs	r2, #1
 8006266:	2101      	movs	r1, #1
 8006268:	480a      	ldr	r0, [pc, #40]	; (8006294 <XPT2046_WriteCMD+0x84>)
 800626a:	f001 fbc0 	bl	80079ee <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 800626e:	2005      	movs	r0, #5
 8006270:	f7ff ffb1 	bl	80061d6 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8006274:	2200      	movs	r2, #0
 8006276:	2101      	movs	r1, #1
 8006278:	4806      	ldr	r0, [pc, #24]	; (8006294 <XPT2046_WriteCMD+0x84>)
 800627a:	f001 fbb8 	bl	80079ee <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	3301      	adds	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b07      	cmp	r3, #7
 8006288:	d9d4      	bls.n	8006234 <XPT2046_WriteCMD+0x24>
	}

}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40011800 	.word	0x40011800

08006298 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 800629e:	2300      	movs	r3, #0
 80062a0:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 80062a2:	2200      	movs	r2, #0
 80062a4:	2104      	movs	r1, #4
 80062a6:	4819      	ldr	r0, [pc, #100]	; (800630c <XPT2046_ReadCMD+0x74>)
 80062a8:	f001 fba1 	bl	80079ee <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80062ac:	2201      	movs	r2, #1
 80062ae:	2101      	movs	r1, #1
 80062b0:	4816      	ldr	r0, [pc, #88]	; (800630c <XPT2046_ReadCMD+0x74>)
 80062b2:	f001 fb9c 	bl	80079ee <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 80062b6:	2300      	movs	r3, #0
 80062b8:	71fb      	strb	r3, [r7, #7]
 80062ba:	e01e      	b.n	80062fa <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 80062bc:	2200      	movs	r2, #0
 80062be:	2101      	movs	r1, #1
 80062c0:	4812      	ldr	r0, [pc, #72]	; (800630c <XPT2046_ReadCMD+0x74>)
 80062c2:	f001 fb94 	bl	80079ee <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 80062c6:	2108      	movs	r1, #8
 80062c8:	4810      	ldr	r0, [pc, #64]	; (800630c <XPT2046_ReadCMD+0x74>)
 80062ca:	f001 fb79 	bl	80079c0 <HAL_GPIO_ReadPin>
 80062ce:	4603      	mov	r3, r0
 80062d0:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 80062d2:	887a      	ldrh	r2, [r7, #2]
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	f1c3 030b 	rsb	r3, r3, #11
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	b21a      	sxth	r2, r3
 80062e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 80062ea:	2201      	movs	r2, #1
 80062ec:	2101      	movs	r1, #1
 80062ee:	4807      	ldr	r0, [pc, #28]	; (800630c <XPT2046_ReadCMD+0x74>)
 80062f0:	f001 fb7d 	bl	80079ee <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	3301      	adds	r3, #1
 80062f8:	71fb      	strb	r3, [r7, #7]
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	2b0b      	cmp	r3, #11
 80062fe:	d9dd      	bls.n	80062bc <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8006300:	88bb      	ldrh	r3, [r7, #4]

}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40011800 	.word	0x40011800

08006310 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff ff77 	bl	8006210 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8006322:	f7ff ffb9 	bl	8006298 <XPT2046_ReadCMD>
 8006326:	4603      	mov	r3, r0

}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 800633a:	2090      	movs	r0, #144	; 0x90
 800633c:	f7ff ffe8 	bl	8006310 <XPT2046_ReadAdc>
 8006340:	4603      	mov	r3, r0
 8006342:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8006344:	2001      	movs	r0, #1
 8006346:	f7ff ff46 	bl	80061d6 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 800634a:	20d0      	movs	r0, #208	; 0xd0
 800634c:	f7ff ffe0 	bl	8006310 <XPT2046_ReadAdc>
 8006350:	4603      	mov	r3, r0
 8006352:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	89fa      	ldrh	r2, [r7, #14]
 8006358:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	89ba      	ldrh	r2, [r7, #12]
 800635e:	801a      	strh	r2, [r3, #0]

}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b092      	sub	sp, #72	; 0x48
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8006370:	2300      	movs	r3, #0
 8006372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	2228      	movs	r2, #40	; 0x28
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f003 ffce 	bl	800a320 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8006384:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006388:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800638c:	4611      	mov	r1, r2
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff ffce 	bl	8006330 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8006394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006398:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	3348      	adds	r3, #72	; 0x48
 80063a0:	443b      	add	r3, r7
 80063a2:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 80063a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063aa:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80063ae:	330a      	adds	r3, #10
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	3348      	adds	r3, #72	; 0x48
 80063b4:	443b      	add	r3, r7
 80063b6:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 80063ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063be:	3301      	adds	r3, #1
 80063c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 80063c4:	2110      	movs	r1, #16
 80063c6:	4871      	ldr	r0, [pc, #452]	; (800658c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80063c8:	f001 fafa 	bl	80079c0 <HAL_GPIO_ReadPin>
 80063cc:	4603      	mov	r3, r0
			&& (ucCount < 10));
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d103      	bne.n	80063da <XPT2046_ReadAdc_Smooth_XY+0x72>
 80063d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d9d4      	bls.n	8006384 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 80063da:	2110      	movs	r1, #16
 80063dc:	486b      	ldr	r0, [pc, #428]	; (800658c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80063de:	f001 faef 	bl	80079c0 <HAL_GPIO_ReadPin>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 80063e8:	4b69      	ldr	r3, [pc, #420]	; (8006590 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 80063ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063f2:	2b0a      	cmp	r3, #10
 80063f4:	f040 80c4 	bne.w	8006580 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 80063f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80063fc:	643b      	str	r3, [r7, #64]	; 0x40
 80063fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8006402:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006412:	e02b      	b.n	800646c <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8006414:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	3348      	adds	r3, #72	; 0x48
 800641c:	443b      	add	r3, r7
 800641e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006422:	461a      	mov	r2, r3
 8006424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006426:	4293      	cmp	r3, r2
 8006428:	dd08      	ble.n	800643c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 800642a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	3348      	adds	r3, #72	; 0x48
 8006432:	443b      	add	r3, r7
 8006434:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006438:	643b      	str	r3, [r7, #64]	; 0x40
 800643a:	e012      	b.n	8006462 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 800643c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	3348      	adds	r3, #72	; 0x48
 8006444:	443b      	add	r3, r7
 8006446:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800644a:	461a      	mov	r2, r3
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	4293      	cmp	r3, r2
 8006450:	da07      	bge.n	8006462 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8006452:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	3348      	adds	r3, #72	; 0x48
 800645a:	443b      	add	r3, r7
 800645c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8006462:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006466:	3301      	adds	r3, #1
 8006468:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800646c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006470:	2b09      	cmp	r3, #9
 8006472:	d9cf      	bls.n	8006414 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800647a:	e02f      	b.n	80064dc <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 800647c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006480:	330a      	adds	r3, #10
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	3348      	adds	r3, #72	; 0x48
 8006486:	443b      	add	r3, r7
 8006488:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800648c:	461a      	mov	r2, r3
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	4293      	cmp	r3, r2
 8006492:	dd09      	ble.n	80064a8 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8006494:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006498:	330a      	adds	r3, #10
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	3348      	adds	r3, #72	; 0x48
 800649e:	443b      	add	r3, r7
 80064a0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064a6:	e014      	b.n	80064d2 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 80064a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80064ac:	330a      	adds	r3, #10
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	3348      	adds	r3, #72	; 0x48
 80064b2:	443b      	add	r3, r7
 80064b4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80064b8:	461a      	mov	r2, r3
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064bc:	4293      	cmp	r3, r2
 80064be:	da08      	bge.n	80064d2 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 80064c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80064c4:	330a      	adds	r3, #10
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	3348      	adds	r3, #72	; 0x48
 80064ca:	443b      	add	r3, r7
 80064cc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 80064d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80064d6:	3301      	adds	r3, #1
 80064d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80064dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80064e0:	2b09      	cmp	r3, #9
 80064e2:	d9cb      	bls.n	800647c <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80064e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80064e8:	461a      	mov	r2, r3
 80064ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80064ee:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 80064f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80064fa:	4413      	add	r3, r2
 80064fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006500:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8006502:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006506:	4413      	add	r3, r2
 8006508:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800650c:	4413      	add	r3, r2
 800650e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006512:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8006514:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006518:	4413      	add	r3, r2
 800651a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800651e:	441a      	add	r2, r3
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006526:	1ad3      	subs	r3, r2, r3
				>> 3;
 8006528:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8006530:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006534:	461a      	mov	r2, r3
 8006536:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800653a:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 800653c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006540:	4413      	add	r3, r2
 8006542:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006546:	4413      	add	r3, r2
 8006548:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800654c:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 800654e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006552:	4413      	add	r3, r2
 8006554:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8006558:	4413      	add	r3, r2
 800655a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800655e:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8006560:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8006564:	4413      	add	r3, r2
 8006566:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800656a:	441a      	add	r2, r3
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	1ad3      	subs	r3, r2, r3
				>> 3;
 8006574:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8006576:	b29a      	uxth	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	805a      	strh	r2, [r3, #2]

		return 1;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8006580:	2300      	movs	r3, #0

}
 8006582:	4618      	mov	r0, r3
 8006584:	3748      	adds	r7, #72	; 0x48
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40011800 	.word	0x40011800
 8006590:	20003244 	.word	0x20003244

08006594 <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8006594:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 80065a0:	2301      	movs	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80065a4:	f107 0308 	add.w	r3, r7, #8
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff fedd 	bl	8006368 <XPT2046_ReadAdc_Smooth_XY>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d06e      	beq.n	8006692 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80065ba:	893b      	ldrh	r3, [r7, #8]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7f9 ff8d 	bl	80004dc <__aeabi_i2d>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4620      	mov	r0, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7f9 fff1 	bl	80005b0 <__aeabi_dmul>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4690      	mov	r8, r2
 80065d4:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80065dc:	897b      	ldrh	r3, [r7, #10]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7f9 ff7c 	bl	80004dc <__aeabi_i2d>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4620      	mov	r0, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7f9 ffe0 	bl	80005b0 <__aeabi_dmul>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7f9 fe24 	bl	8000244 <__adddf3>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800660a:	f7f9 fe1b 	bl	8000244 <__adddf3>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	f7fa fa8d 	bl	8000b34 <__aeabi_d2uiz>
 800661a:	4603      	mov	r3, r0
 800661c:	b29a      	uxth	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006628:	893b      	ldrh	r3, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f7f9 ff56 	bl	80004dc <__aeabi_i2d>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7f9 ffba 	bl	80005b0 <__aeabi_dmul>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4690      	mov	r8, r2
 8006642:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	4618      	mov	r0, r3
 800664e:	f7f9 ff45 	bl	80004dc <__aeabi_i2d>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7f9 ffa9 	bl	80005b0 <__aeabi_dmul>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7f9 fded 	bl	8000244 <__adddf3>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006678:	f7f9 fde4 	bl	8000244 <__adddf3>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8006680:	4610      	mov	r0, r2
 8006682:	4619      	mov	r1, r3
 8006684:	f7fa fa56 	bl	8000b34 <__aeabi_d2uiz>
 8006688:	4603      	mov	r3, r0
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	805a      	strh	r2, [r3, #2]
 8006690:	e001      	b.n	8006696 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 8006696:	7bfb      	ldrb	r3, [r7, #15]

}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080066a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80066a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80066a6:	e003      	b.n	80066b0 <LoopCopyDataInit>

080066a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80066aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80066ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80066ae:	3104      	adds	r1, #4

080066b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80066b0:	480a      	ldr	r0, [pc, #40]	; (80066dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80066b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80066b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80066b8:	d3f6      	bcc.n	80066a8 <CopyDataInit>
  ldr r2, =_sbss
 80066ba:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80066bc:	e002      	b.n	80066c4 <LoopFillZerobss>

080066be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80066be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80066c0:	f842 3b04 	str.w	r3, [r2], #4

080066c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80066c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80066c8:	d3f9      	bcc.n	80066be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80066ca:	f7ff f883 	bl	80057d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066ce:	f003 fe03 	bl	800a2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80066d2:	f7fd f97f 	bl	80039d4 <main>
  bx lr
 80066d6:	4770      	bx	lr
  ldr r3, =_sidata
 80066d8:	0800b4a4 	.word	0x0800b4a4
  ldr r0, =_sdata
 80066dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80066e0:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 80066e4:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 80066e8:	2000325c 	.word	0x2000325c

080066ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80066ec:	e7fe      	b.n	80066ec <ADC1_2_IRQHandler>
	...

080066f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066f4:	4b08      	ldr	r3, [pc, #32]	; (8006718 <HAL_Init+0x28>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a07      	ldr	r2, [pc, #28]	; (8006718 <HAL_Init+0x28>)
 80066fa:	f043 0310 	orr.w	r3, r3, #16
 80066fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006700:	2003      	movs	r0, #3
 8006702:	f000 fb3b 	bl	8006d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006706:	2000      	movs	r0, #0
 8006708:	f000 f808 	bl	800671c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800670c:	f7fe fef2 	bl	80054f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40022000 	.word	0x40022000

0800671c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006724:	4b12      	ldr	r3, [pc, #72]	; (8006770 <HAL_InitTick+0x54>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_InitTick+0x58>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4619      	mov	r1, r3
 800672e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006732:	fbb3 f3f1 	udiv	r3, r3, r1
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fb53 	bl	8006de6 <HAL_SYSTICK_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e00e      	b.n	8006768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b0f      	cmp	r3, #15
 800674e:	d80a      	bhi.n	8006766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006750:	2200      	movs	r2, #0
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006758:	f000 fb1b 	bl	8006d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800675c:	4a06      	ldr	r2, [pc, #24]	; (8006778 <HAL_InitTick+0x5c>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000004 	.word	0x20000004
 8006774:	2000003c 	.word	0x2000003c
 8006778:	20000038 	.word	0x20000038

0800677c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_IncTick+0x1c>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <HAL_IncTick+0x20>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4413      	add	r3, r2
 800678c:	4a03      	ldr	r2, [pc, #12]	; (800679c <HAL_IncTick+0x20>)
 800678e:	6013      	str	r3, [r2, #0]
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr
 8006798:	2000003c 	.word	0x2000003c
 800679c:	20003248 	.word	0x20003248

080067a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return uwTick;
 80067a4:	4b02      	ldr	r3, [pc, #8]	; (80067b0 <HAL_GetTick+0x10>)
 80067a6:	681b      	ldr	r3, [r3, #0]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr
 80067b0:	20003248 	.word	0x20003248

080067b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e0ce      	b.n	8006974 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fb fcbc 	bl	8002170 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f9bd 	bl	8006b78 <ADC_ConversionStop_Disable>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	f040 80a9 	bne.w	8006962 <HAL_ADC_Init+0x1ae>
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 80a5 	bne.w	8006962 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006820:	f023 0302 	bic.w	r3, r3, #2
 8006824:	f043 0202 	orr.w	r2, r3, #2
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4951      	ldr	r1, [pc, #324]	; (800697c <HAL_ADC_Init+0x1c8>)
 8006836:	428b      	cmp	r3, r1
 8006838:	d10a      	bne.n	8006850 <HAL_ADC_Init+0x9c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006842:	d002      	beq.n	800684a <HAL_ADC_Init+0x96>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	e004      	b.n	8006854 <HAL_ADC_Init+0xa0>
 800684a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800684e:	e001      	b.n	8006854 <HAL_ADC_Init+0xa0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006854:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800685c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	4313      	orrs	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686c:	d003      	beq.n	8006876 <HAL_ADC_Init+0xc2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d102      	bne.n	800687c <HAL_ADC_Init+0xc8>
 8006876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800687a:	e000      	b.n	800687e <HAL_ADC_Init+0xca>
 800687c:	2300      	movs	r3, #0
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d119      	bne.n	80068c0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	3b01      	subs	r3, #1
 800689a:	035a      	lsls	r2, r3, #13
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	e00b      	b.n	80068c0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f043 0201 	orr.w	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	4b29      	ldr	r3, [pc, #164]	; (8006980 <HAL_ADC_Init+0x1cc>)
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f0:	d003      	beq.n	80068fa <HAL_ADC_Init+0x146>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d104      	bne.n	8006904 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	3b01      	subs	r3, #1
 8006900:	051b      	lsls	r3, r3, #20
 8006902:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	430a      	orrs	r2, r1
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	4b19      	ldr	r3, [pc, #100]	; (8006984 <HAL_ADC_Init+0x1d0>)
 8006920:	4013      	ands	r3, r2
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d10b      	bne.n	8006940 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800693e:	e018      	b.n	8006972 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f023 0312 	bic.w	r3, r3, #18
 8006948:	f043 0210 	orr.w	r2, r3, #16
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	f043 0201 	orr.w	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006960:	e007      	b.n	8006972 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f043 0210 	orr.w	r2, r3, #16
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40013c00 	.word	0x40013c00
 8006980:	ffe1f7fd 	.word	0xffe1f7fd
 8006984:	ff1f0efe 	.word	0xff1f0efe

08006988 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_ADC_ConfigChannel+0x20>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e0dc      	b.n	8006b62 <HAL_ADC_ConfigChannel+0x1da>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b06      	cmp	r3, #6
 80069b6:	d81c      	bhi.n	80069f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	3b05      	subs	r3, #5
 80069ca:	221f      	movs	r2, #31
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	43db      	mvns	r3, r3
 80069d2:	4019      	ands	r1, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	3b05      	subs	r3, #5
 80069e4:	fa00 f203 	lsl.w	r2, r0, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	635a      	str	r2, [r3, #52]	; 0x34
 80069f0:	e03c      	b.n	8006a6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b0c      	cmp	r3, #12
 80069f8:	d81c      	bhi.n	8006a34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	3b23      	subs	r3, #35	; 0x23
 8006a0c:	221f      	movs	r2, #31
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	4019      	ands	r1, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	3b23      	subs	r3, #35	; 0x23
 8006a26:	fa00 f203 	lsl.w	r2, r0, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
 8006a32:	e01b      	b.n	8006a6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	3b41      	subs	r3, #65	; 0x41
 8006a46:	221f      	movs	r2, #31
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	4019      	ands	r1, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3b41      	subs	r3, #65	; 0x41
 8006a60:	fa00 f203 	lsl.w	r2, r0, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b09      	cmp	r3, #9
 8006a72:	d91c      	bls.n	8006aae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68d9      	ldr	r1, [r3, #12]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	3b1e      	subs	r3, #30
 8006a86:	2207      	movs	r2, #7
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	4019      	ands	r1, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	6898      	ldr	r0, [r3, #8]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3b1e      	subs	r3, #30
 8006aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	60da      	str	r2, [r3, #12]
 8006aac:	e019      	b.n	8006ae2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6919      	ldr	r1, [r3, #16]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	4413      	add	r3, r2
 8006abe:	2207      	movs	r2, #7
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	4019      	ands	r1, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	6898      	ldr	r0, [r3, #8]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	4413      	add	r3, r2
 8006ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d003      	beq.n	8006af2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006aee:	2b11      	cmp	r3, #17
 8006af0:	d132      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <HAL_ADC_ConfigChannel+0x1e4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d125      	bne.n	8006b48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d126      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006b18:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b10      	cmp	r3, #16
 8006b20:	d11a      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <HAL_ADC_ConfigChannel+0x1e8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a13      	ldr	r2, [pc, #76]	; (8006b74 <HAL_ADC_ConfigChannel+0x1ec>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	0c9a      	lsrs	r2, r3, #18
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006b38:	e002      	b.n	8006b40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f9      	bne.n	8006b3a <HAL_ADC_ConfigChannel+0x1b2>
 8006b46:	e007      	b.n	8006b58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f043 0220 	orr.w	r2, r3, #32
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr
 8006b6c:	40012400 	.word	0x40012400
 8006b70:	20000004 	.word	0x20000004
 8006b74:	431bde83 	.word	0x431bde83

08006b78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d127      	bne.n	8006be2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ba2:	f7ff fdfd 	bl	80067a0 <HAL_GetTick>
 8006ba6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006ba8:	e014      	b.n	8006bd4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006baa:	f7ff fdf9 	bl	80067a0 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d90d      	bls.n	8006bd4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	f043 0210 	orr.w	r2, r3, #16
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	f043 0201 	orr.w	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e007      	b.n	8006be4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d0e3      	beq.n	8006baa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bfc:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <NVIC_SetPriorityGrouping+0x44>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c08:	4013      	ands	r3, r2
 8006c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c1e:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <NVIC_SetPriorityGrouping+0x44>)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	60d3      	str	r3, [r2, #12]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	e000ed00 	.word	0xe000ed00

08006c34 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c38:	4b04      	ldr	r3, [pc, #16]	; (8006c4c <NVIC_GetPriorityGrouping+0x18>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	f003 0307 	and.w	r3, r3, #7
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	e000ed00 	.word	0xe000ed00

08006c50 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	f003 021f 	and.w	r2, r3, #31
 8006c60:	4906      	ldr	r1, [pc, #24]	; (8006c7c <NVIC_EnableIRQ+0x2c>)
 8006c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2001      	movs	r0, #1
 8006c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr
 8006c7c:	e000e100 	.word	0xe000e100

08006c80 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da0b      	bge.n	8006cac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	490c      	ldr	r1, [pc, #48]	; (8006ccc <NVIC_SetPriority+0x4c>)
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	3b04      	subs	r3, #4
 8006ca2:	0112      	lsls	r2, r2, #4
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006caa:	e009      	b.n	8006cc0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	4907      	ldr	r1, [pc, #28]	; (8006cd0 <NVIC_SetPriority+0x50>)
 8006cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb6:	0112      	lsls	r2, r2, #4
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	e000ed00 	.word	0xe000ed00
 8006cd0:	e000e100 	.word	0xe000e100

08006cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f1c3 0307 	rsb	r3, r3, #7
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	bf28      	it	cs
 8006cf2:	2304      	movcs	r3, #4
 8006cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	2b06      	cmp	r3, #6
 8006cfc:	d902      	bls.n	8006d04 <NVIC_EncodePriority+0x30>
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3b03      	subs	r3, #3
 8006d02:	e000      	b.n	8006d06 <NVIC_EncodePriority+0x32>
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	43da      	mvns	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	401a      	ands	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	fa01 f303 	lsl.w	r3, r1, r3
 8006d26:	43d9      	mvns	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d2c:	4313      	orrs	r3, r2
         );
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3724      	adds	r7, #36	; 0x24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d48:	d301      	bcc.n	8006d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e00f      	b.n	8006d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d4e:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <SysTick_Config+0x40>)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d56:	210f      	movs	r1, #15
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d5c:	f7ff ff90 	bl	8006c80 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <SysTick_Config+0x40>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d66:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <SysTick_Config+0x40>)
 8006d68:	2207      	movs	r2, #7
 8006d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	e000e010 	.word	0xe000e010

08006d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff ff31 	bl	8006bec <NVIC_SetPriorityGrouping>
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	4603      	mov	r3, r0
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006da4:	f7ff ff46 	bl	8006c34 <NVIC_GetPriorityGrouping>
 8006da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	6978      	ldr	r0, [r7, #20]
 8006db0:	f7ff ff90 	bl	8006cd4 <NVIC_EncodePriority>
 8006db4:	4602      	mov	r2, r0
 8006db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff5f 	bl	8006c80 <NVIC_SetPriority>
}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff ff39 	bl	8006c50 <NVIC_EnableIRQ>
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ffa2 	bl	8006d38 <SysTick_Config>
 8006df4:	4603      	mov	r3, r0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e059      	b.n	8006eca <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ed4 <HAL_DMA_Init+0xd4>)
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d80f      	bhi.n	8006e42 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <HAL_DMA_Init+0xd8>)
 8006e2a:	4413      	add	r3, r2
 8006e2c:	4a2b      	ldr	r2, [pc, #172]	; (8006edc <HAL_DMA_Init+0xdc>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	009a      	lsls	r2, r3, #2
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <HAL_DMA_Init+0xe0>)
 8006e3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e40:	e00e      	b.n	8006e60 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	4b26      	ldr	r3, [pc, #152]	; (8006ee4 <HAL_DMA_Init+0xe4>)
 8006e4a:	4413      	add	r3, r2
 8006e4c:	4a23      	ldr	r2, [pc, #140]	; (8006edc <HAL_DMA_Init+0xdc>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	009a      	lsls	r2, r3, #2
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <HAL_DMA_Init+0xe8>)
 8006e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006e76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006e7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr
 8006ed4:	40020407 	.word	0x40020407
 8006ed8:	bffdfff8 	.word	0xbffdfff8
 8006edc:	cccccccd 	.word	0xcccccccd
 8006ee0:	40020000 	.word	0x40020000
 8006ee4:	bffdfbf8 	.word	0xbffdfbf8
 8006ee8:	40020400 	.word	0x40020400

08006eec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_DMA_Start_IT+0x20>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e04a      	b.n	8006fa2 <HAL_DMA_Start_IT+0xb6>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d13a      	bne.n	8006f94 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fb76 	bl	8007634 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 020e 	orr.w	r2, r2, #14
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e00f      	b.n	8006f82 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0204 	bic.w	r2, r2, #4
 8006f70:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 020a 	orr.w	r2, r2, #10
 8006f80:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0201 	orr.w	r2, r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e005      	b.n	8006fa0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d005      	beq.n	8006fce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
 8006fcc:	e0d6      	b.n	800717c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 020e 	bic.w	r2, r2, #14
 8006fdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4b64      	ldr	r3, [pc, #400]	; (8007188 <HAL_DMA_Abort_IT+0x1dc>)
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d958      	bls.n	80070ac <HAL_DMA_Abort_IT+0x100>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a63      	ldr	r2, [pc, #396]	; (800718c <HAL_DMA_Abort_IT+0x1e0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d04f      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xf8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a61      	ldr	r2, [pc, #388]	; (8007190 <HAL_DMA_Abort_IT+0x1e4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d048      	beq.n	80070a0 <HAL_DMA_Abort_IT+0xf4>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a60      	ldr	r2, [pc, #384]	; (8007194 <HAL_DMA_Abort_IT+0x1e8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d040      	beq.n	800709a <HAL_DMA_Abort_IT+0xee>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5e      	ldr	r2, [pc, #376]	; (8007198 <HAL_DMA_Abort_IT+0x1ec>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d038      	beq.n	8007094 <HAL_DMA_Abort_IT+0xe8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a5d      	ldr	r2, [pc, #372]	; (800719c <HAL_DMA_Abort_IT+0x1f0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d030      	beq.n	800708e <HAL_DMA_Abort_IT+0xe2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a5b      	ldr	r2, [pc, #364]	; (80071a0 <HAL_DMA_Abort_IT+0x1f4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d028      	beq.n	8007088 <HAL_DMA_Abort_IT+0xdc>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a53      	ldr	r2, [pc, #332]	; (8007188 <HAL_DMA_Abort_IT+0x1dc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d020      	beq.n	8007082 <HAL_DMA_Abort_IT+0xd6>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a57      	ldr	r2, [pc, #348]	; (80071a4 <HAL_DMA_Abort_IT+0x1f8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d019      	beq.n	800707e <HAL_DMA_Abort_IT+0xd2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a56      	ldr	r2, [pc, #344]	; (80071a8 <HAL_DMA_Abort_IT+0x1fc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d012      	beq.n	800707a <HAL_DMA_Abort_IT+0xce>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a54      	ldr	r2, [pc, #336]	; (80071ac <HAL_DMA_Abort_IT+0x200>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00a      	beq.n	8007074 <HAL_DMA_Abort_IT+0xc8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a53      	ldr	r2, [pc, #332]	; (80071b0 <HAL_DMA_Abort_IT+0x204>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d102      	bne.n	800706e <HAL_DMA_Abort_IT+0xc2>
 8007068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800706c:	e01b      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 800706e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007072:	e018      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 8007074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007078:	e015      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 800707a:	2310      	movs	r3, #16
 800707c:	e013      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 800707e:	2301      	movs	r3, #1
 8007080:	e011      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 8007082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007086:	e00e      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 8007088:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800708c:	e00b      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 800708e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007092:	e008      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 8007094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007098:	e005      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 800709a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800709e:	e002      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 80070a0:	2310      	movs	r3, #16
 80070a2:	e000      	b.n	80070a6 <HAL_DMA_Abort_IT+0xfa>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4a43      	ldr	r2, [pc, #268]	; (80071b4 <HAL_DMA_Abort_IT+0x208>)
 80070a8:	6053      	str	r3, [r2, #4]
 80070aa:	e057      	b.n	800715c <HAL_DMA_Abort_IT+0x1b0>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a36      	ldr	r2, [pc, #216]	; (800718c <HAL_DMA_Abort_IT+0x1e0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d04f      	beq.n	8007156 <HAL_DMA_Abort_IT+0x1aa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a35      	ldr	r2, [pc, #212]	; (8007190 <HAL_DMA_Abort_IT+0x1e4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d048      	beq.n	8007152 <HAL_DMA_Abort_IT+0x1a6>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a33      	ldr	r2, [pc, #204]	; (8007194 <HAL_DMA_Abort_IT+0x1e8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d040      	beq.n	800714c <HAL_DMA_Abort_IT+0x1a0>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a32      	ldr	r2, [pc, #200]	; (8007198 <HAL_DMA_Abort_IT+0x1ec>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d038      	beq.n	8007146 <HAL_DMA_Abort_IT+0x19a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a30      	ldr	r2, [pc, #192]	; (800719c <HAL_DMA_Abort_IT+0x1f0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d030      	beq.n	8007140 <HAL_DMA_Abort_IT+0x194>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a2f      	ldr	r2, [pc, #188]	; (80071a0 <HAL_DMA_Abort_IT+0x1f4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d028      	beq.n	800713a <HAL_DMA_Abort_IT+0x18e>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a26      	ldr	r2, [pc, #152]	; (8007188 <HAL_DMA_Abort_IT+0x1dc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d020      	beq.n	8007134 <HAL_DMA_Abort_IT+0x188>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2b      	ldr	r2, [pc, #172]	; (80071a4 <HAL_DMA_Abort_IT+0x1f8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d019      	beq.n	8007130 <HAL_DMA_Abort_IT+0x184>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a29      	ldr	r2, [pc, #164]	; (80071a8 <HAL_DMA_Abort_IT+0x1fc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d012      	beq.n	800712c <HAL_DMA_Abort_IT+0x180>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a28      	ldr	r2, [pc, #160]	; (80071ac <HAL_DMA_Abort_IT+0x200>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00a      	beq.n	8007126 <HAL_DMA_Abort_IT+0x17a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a26      	ldr	r2, [pc, #152]	; (80071b0 <HAL_DMA_Abort_IT+0x204>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d102      	bne.n	8007120 <HAL_DMA_Abort_IT+0x174>
 800711a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800711e:	e01b      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007124:	e018      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800712a:	e015      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 800712c:	2310      	movs	r3, #16
 800712e:	e013      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007130:	2301      	movs	r3, #1
 8007132:	e011      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007138:	e00e      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 800713a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800713e:	e00b      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007144:	e008      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800714a:	e005      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 800714c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007150:	e002      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007152:	2310      	movs	r3, #16
 8007154:	e000      	b.n	8007158 <HAL_DMA_Abort_IT+0x1ac>
 8007156:	2301      	movs	r3, #1
 8007158:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <HAL_DMA_Abort_IT+0x20c>)
 800715a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
    } 
  }
  return status;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	40020080 	.word	0x40020080
 800718c:	40020008 	.word	0x40020008
 8007190:	4002001c 	.word	0x4002001c
 8007194:	40020030 	.word	0x40020030
 8007198:	40020044 	.word	0x40020044
 800719c:	40020058 	.word	0x40020058
 80071a0:	4002006c 	.word	0x4002006c
 80071a4:	40020408 	.word	0x40020408
 80071a8:	4002041c 	.word	0x4002041c
 80071ac:	40020430 	.word	0x40020430
 80071b0:	40020444 	.word	0x40020444
 80071b4:	40020400 	.word	0x40020400
 80071b8:	40020000 	.word	0x40020000

080071bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	2204      	movs	r2, #4
 80071da:	409a      	lsls	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80f1 	beq.w	80073c8 <HAL_DMA_IRQHandler+0x20c>
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80eb 	beq.w	80073c8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d107      	bne.n	8007210 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0204 	bic.w	r2, r2, #4
 800720e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	4b5f      	ldr	r3, [pc, #380]	; (8007394 <HAL_DMA_IRQHandler+0x1d8>)
 8007218:	429a      	cmp	r2, r3
 800721a:	d958      	bls.n	80072ce <HAL_DMA_IRQHandler+0x112>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a5d      	ldr	r2, [pc, #372]	; (8007398 <HAL_DMA_IRQHandler+0x1dc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d04f      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x10a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a5c      	ldr	r2, [pc, #368]	; (800739c <HAL_DMA_IRQHandler+0x1e0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d048      	beq.n	80072c2 <HAL_DMA_IRQHandler+0x106>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a5a      	ldr	r2, [pc, #360]	; (80073a0 <HAL_DMA_IRQHandler+0x1e4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d040      	beq.n	80072bc <HAL_DMA_IRQHandler+0x100>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a59      	ldr	r2, [pc, #356]	; (80073a4 <HAL_DMA_IRQHandler+0x1e8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d038      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xfa>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a57      	ldr	r2, [pc, #348]	; (80073a8 <HAL_DMA_IRQHandler+0x1ec>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d030      	beq.n	80072b0 <HAL_DMA_IRQHandler+0xf4>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a56      	ldr	r2, [pc, #344]	; (80073ac <HAL_DMA_IRQHandler+0x1f0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d028      	beq.n	80072aa <HAL_DMA_IRQHandler+0xee>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a4d      	ldr	r2, [pc, #308]	; (8007394 <HAL_DMA_IRQHandler+0x1d8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d020      	beq.n	80072a4 <HAL_DMA_IRQHandler+0xe8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a52      	ldr	r2, [pc, #328]	; (80073b0 <HAL_DMA_IRQHandler+0x1f4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d019      	beq.n	80072a0 <HAL_DMA_IRQHandler+0xe4>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a50      	ldr	r2, [pc, #320]	; (80073b4 <HAL_DMA_IRQHandler+0x1f8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d012      	beq.n	800729c <HAL_DMA_IRQHandler+0xe0>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a4f      	ldr	r2, [pc, #316]	; (80073b8 <HAL_DMA_IRQHandler+0x1fc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00a      	beq.n	8007296 <HAL_DMA_IRQHandler+0xda>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a4d      	ldr	r2, [pc, #308]	; (80073bc <HAL_DMA_IRQHandler+0x200>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d102      	bne.n	8007290 <HAL_DMA_IRQHandler+0xd4>
 800728a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800728e:	e01b      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 8007290:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007294:	e018      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 8007296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800729a:	e015      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 800729c:	2340      	movs	r3, #64	; 0x40
 800729e:	e013      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072a0:	2304      	movs	r3, #4
 80072a2:	e011      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80072a8:	e00e      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072ae:	e00b      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80072b4:	e008      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072ba:	e005      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c0:	e002      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072c2:	2340      	movs	r3, #64	; 0x40
 80072c4:	e000      	b.n	80072c8 <HAL_DMA_IRQHandler+0x10c>
 80072c6:	2304      	movs	r3, #4
 80072c8:	4a3d      	ldr	r2, [pc, #244]	; (80073c0 <HAL_DMA_IRQHandler+0x204>)
 80072ca:	6053      	str	r3, [r2, #4]
 80072cc:	e057      	b.n	800737e <HAL_DMA_IRQHandler+0x1c2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a31      	ldr	r2, [pc, #196]	; (8007398 <HAL_DMA_IRQHandler+0x1dc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d04f      	beq.n	8007378 <HAL_DMA_IRQHandler+0x1bc>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a2f      	ldr	r2, [pc, #188]	; (800739c <HAL_DMA_IRQHandler+0x1e0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d048      	beq.n	8007374 <HAL_DMA_IRQHandler+0x1b8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2e      	ldr	r2, [pc, #184]	; (80073a0 <HAL_DMA_IRQHandler+0x1e4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d040      	beq.n	800736e <HAL_DMA_IRQHandler+0x1b2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2c      	ldr	r2, [pc, #176]	; (80073a4 <HAL_DMA_IRQHandler+0x1e8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d038      	beq.n	8007368 <HAL_DMA_IRQHandler+0x1ac>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2b      	ldr	r2, [pc, #172]	; (80073a8 <HAL_DMA_IRQHandler+0x1ec>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d030      	beq.n	8007362 <HAL_DMA_IRQHandler+0x1a6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a29      	ldr	r2, [pc, #164]	; (80073ac <HAL_DMA_IRQHandler+0x1f0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d028      	beq.n	800735c <HAL_DMA_IRQHandler+0x1a0>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a21      	ldr	r2, [pc, #132]	; (8007394 <HAL_DMA_IRQHandler+0x1d8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d020      	beq.n	8007356 <HAL_DMA_IRQHandler+0x19a>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a25      	ldr	r2, [pc, #148]	; (80073b0 <HAL_DMA_IRQHandler+0x1f4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d019      	beq.n	8007352 <HAL_DMA_IRQHandler+0x196>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <HAL_DMA_IRQHandler+0x1f8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d012      	beq.n	800734e <HAL_DMA_IRQHandler+0x192>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <HAL_DMA_IRQHandler+0x1fc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00a      	beq.n	8007348 <HAL_DMA_IRQHandler+0x18c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a21      	ldr	r2, [pc, #132]	; (80073bc <HAL_DMA_IRQHandler+0x200>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d102      	bne.n	8007342 <HAL_DMA_IRQHandler+0x186>
 800733c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007340:	e01b      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007346:	e018      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734c:	e015      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 800734e:	2340      	movs	r3, #64	; 0x40
 8007350:	e013      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007352:	2304      	movs	r3, #4
 8007354:	e011      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007356:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800735a:	e00e      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 800735c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007360:	e00b      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007362:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007366:	e008      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800736c:	e005      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 800736e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007372:	e002      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007374:	2340      	movs	r3, #64	; 0x40
 8007376:	e000      	b.n	800737a <HAL_DMA_IRQHandler+0x1be>
 8007378:	2304      	movs	r3, #4
 800737a:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <HAL_DMA_IRQHandler+0x208>)
 800737c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8136 	beq.w	80075f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007390:	e130      	b.n	80075f4 <HAL_DMA_IRQHandler+0x438>
 8007392:	bf00      	nop
 8007394:	40020080 	.word	0x40020080
 8007398:	40020008 	.word	0x40020008
 800739c:	4002001c 	.word	0x4002001c
 80073a0:	40020030 	.word	0x40020030
 80073a4:	40020044 	.word	0x40020044
 80073a8:	40020058 	.word	0x40020058
 80073ac:	4002006c 	.word	0x4002006c
 80073b0:	40020408 	.word	0x40020408
 80073b4:	4002041c 	.word	0x4002041c
 80073b8:	40020430 	.word	0x40020430
 80073bc:	40020444 	.word	0x40020444
 80073c0:	40020400 	.word	0x40020400
 80073c4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	2202      	movs	r2, #2
 80073ce:	409a      	lsls	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80dd 	beq.w	8007594 <HAL_DMA_IRQHandler+0x3d8>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80d7 	beq.w	8007594 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 020a 	bic.w	r2, r2, #10
 8007402:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	4b7b      	ldr	r3, [pc, #492]	; (8007600 <HAL_DMA_IRQHandler+0x444>)
 8007414:	429a      	cmp	r2, r3
 8007416:	d958      	bls.n	80074ca <HAL_DMA_IRQHandler+0x30e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a79      	ldr	r2, [pc, #484]	; (8007604 <HAL_DMA_IRQHandler+0x448>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d04f      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x306>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a78      	ldr	r2, [pc, #480]	; (8007608 <HAL_DMA_IRQHandler+0x44c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d048      	beq.n	80074be <HAL_DMA_IRQHandler+0x302>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a76      	ldr	r2, [pc, #472]	; (800760c <HAL_DMA_IRQHandler+0x450>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d040      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x2fc>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a75      	ldr	r2, [pc, #468]	; (8007610 <HAL_DMA_IRQHandler+0x454>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d038      	beq.n	80074b2 <HAL_DMA_IRQHandler+0x2f6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a73      	ldr	r2, [pc, #460]	; (8007614 <HAL_DMA_IRQHandler+0x458>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d030      	beq.n	80074ac <HAL_DMA_IRQHandler+0x2f0>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a72      	ldr	r2, [pc, #456]	; (8007618 <HAL_DMA_IRQHandler+0x45c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d028      	beq.n	80074a6 <HAL_DMA_IRQHandler+0x2ea>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a69      	ldr	r2, [pc, #420]	; (8007600 <HAL_DMA_IRQHandler+0x444>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d020      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x2e4>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a6e      	ldr	r2, [pc, #440]	; (800761c <HAL_DMA_IRQHandler+0x460>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d019      	beq.n	800749c <HAL_DMA_IRQHandler+0x2e0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a6c      	ldr	r2, [pc, #432]	; (8007620 <HAL_DMA_IRQHandler+0x464>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d012      	beq.n	8007498 <HAL_DMA_IRQHandler+0x2dc>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a6b      	ldr	r2, [pc, #428]	; (8007624 <HAL_DMA_IRQHandler+0x468>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00a      	beq.n	8007492 <HAL_DMA_IRQHandler+0x2d6>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a69      	ldr	r2, [pc, #420]	; (8007628 <HAL_DMA_IRQHandler+0x46c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d102      	bne.n	800748c <HAL_DMA_IRQHandler+0x2d0>
 8007486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800748a:	e01b      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 800748c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007490:	e018      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 8007492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007496:	e015      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 8007498:	2320      	movs	r3, #32
 800749a:	e013      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 800749c:	2302      	movs	r3, #2
 800749e:	e011      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 80074a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074a4:	e00e      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 80074a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074aa:	e00b      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 80074ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074b0:	e008      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 80074b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074b6:	e005      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 80074b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074bc:	e002      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 80074be:	2320      	movs	r3, #32
 80074c0:	e000      	b.n	80074c4 <HAL_DMA_IRQHandler+0x308>
 80074c2:	2302      	movs	r3, #2
 80074c4:	4a59      	ldr	r2, [pc, #356]	; (800762c <HAL_DMA_IRQHandler+0x470>)
 80074c6:	6053      	str	r3, [r2, #4]
 80074c8:	e057      	b.n	800757a <HAL_DMA_IRQHandler+0x3be>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a4d      	ldr	r2, [pc, #308]	; (8007604 <HAL_DMA_IRQHandler+0x448>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d04f      	beq.n	8007574 <HAL_DMA_IRQHandler+0x3b8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a4b      	ldr	r2, [pc, #300]	; (8007608 <HAL_DMA_IRQHandler+0x44c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d048      	beq.n	8007570 <HAL_DMA_IRQHandler+0x3b4>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a4a      	ldr	r2, [pc, #296]	; (800760c <HAL_DMA_IRQHandler+0x450>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d040      	beq.n	800756a <HAL_DMA_IRQHandler+0x3ae>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a48      	ldr	r2, [pc, #288]	; (8007610 <HAL_DMA_IRQHandler+0x454>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d038      	beq.n	8007564 <HAL_DMA_IRQHandler+0x3a8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a47      	ldr	r2, [pc, #284]	; (8007614 <HAL_DMA_IRQHandler+0x458>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d030      	beq.n	800755e <HAL_DMA_IRQHandler+0x3a2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a45      	ldr	r2, [pc, #276]	; (8007618 <HAL_DMA_IRQHandler+0x45c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d028      	beq.n	8007558 <HAL_DMA_IRQHandler+0x39c>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a3d      	ldr	r2, [pc, #244]	; (8007600 <HAL_DMA_IRQHandler+0x444>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d020      	beq.n	8007552 <HAL_DMA_IRQHandler+0x396>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a41      	ldr	r2, [pc, #260]	; (800761c <HAL_DMA_IRQHandler+0x460>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d019      	beq.n	800754e <HAL_DMA_IRQHandler+0x392>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a40      	ldr	r2, [pc, #256]	; (8007620 <HAL_DMA_IRQHandler+0x464>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d012      	beq.n	800754a <HAL_DMA_IRQHandler+0x38e>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a3e      	ldr	r2, [pc, #248]	; (8007624 <HAL_DMA_IRQHandler+0x468>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00a      	beq.n	8007544 <HAL_DMA_IRQHandler+0x388>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a3d      	ldr	r2, [pc, #244]	; (8007628 <HAL_DMA_IRQHandler+0x46c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d102      	bne.n	800753e <HAL_DMA_IRQHandler+0x382>
 8007538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800753c:	e01b      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 800753e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007542:	e018      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 8007544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007548:	e015      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 800754a:	2320      	movs	r3, #32
 800754c:	e013      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 800754e:	2302      	movs	r3, #2
 8007550:	e011      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 8007552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007556:	e00e      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 8007558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800755c:	e00b      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 800755e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007562:	e008      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 8007564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007568:	e005      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 800756a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800756e:	e002      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 8007570:	2320      	movs	r3, #32
 8007572:	e000      	b.n	8007576 <HAL_DMA_IRQHandler+0x3ba>
 8007574:	2302      	movs	r3, #2
 8007576:	4a2e      	ldr	r2, [pc, #184]	; (8007630 <HAL_DMA_IRQHandler+0x474>)
 8007578:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d034      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007592:	e02f      	b.n	80075f4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2208      	movs	r2, #8
 800759a:	409a      	lsls	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4013      	ands	r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d028      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x43a>
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d023      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 020e 	bic.w	r2, r2, #14
 80075bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c6:	2101      	movs	r1, #1
 80075c8:	fa01 f202 	lsl.w	r2, r1, r2
 80075cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
    }
  }
  return;
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
}
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40020080 	.word	0x40020080
 8007604:	40020008 	.word	0x40020008
 8007608:	4002001c 	.word	0x4002001c
 800760c:	40020030 	.word	0x40020030
 8007610:	40020044 	.word	0x40020044
 8007614:	40020058 	.word	0x40020058
 8007618:	4002006c 	.word	0x4002006c
 800761c:	40020408 	.word	0x40020408
 8007620:	4002041c 	.word	0x4002041c
 8007624:	40020430 	.word	0x40020430
 8007628:	40020444 	.word	0x40020444
 800762c:	40020400 	.word	0x40020400
 8007630:	40020000 	.word	0x40020000

08007634 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	2101      	movs	r1, #1
 800764c:	fa01 f202 	lsl.w	r2, r1, r2
 8007650:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b10      	cmp	r3, #16
 8007660:	d108      	bne.n	8007674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007672:	e007      	b.n	8007684 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	60da      	str	r2, [r3, #12]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr
	...

08007690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007690:	b480      	push	{r7}
 8007692:	b08b      	sub	sp, #44	; 0x2c
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800769e:	2300      	movs	r3, #0
 80076a0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80076ae:	2300      	movs	r3, #0
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
 80076b2:	e179      	b.n	80079a8 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80076b4:	2201      	movs	r2, #1
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	4013      	ands	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	f040 8168 	bne.w	80079a2 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4a96      	ldr	r2, [pc, #600]	; (8007930 <HAL_GPIO_Init+0x2a0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d05e      	beq.n	800779a <HAL_GPIO_Init+0x10a>
 80076dc:	4a94      	ldr	r2, [pc, #592]	; (8007930 <HAL_GPIO_Init+0x2a0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d875      	bhi.n	80077ce <HAL_GPIO_Init+0x13e>
 80076e2:	4a94      	ldr	r2, [pc, #592]	; (8007934 <HAL_GPIO_Init+0x2a4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d058      	beq.n	800779a <HAL_GPIO_Init+0x10a>
 80076e8:	4a92      	ldr	r2, [pc, #584]	; (8007934 <HAL_GPIO_Init+0x2a4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d86f      	bhi.n	80077ce <HAL_GPIO_Init+0x13e>
 80076ee:	4a92      	ldr	r2, [pc, #584]	; (8007938 <HAL_GPIO_Init+0x2a8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d052      	beq.n	800779a <HAL_GPIO_Init+0x10a>
 80076f4:	4a90      	ldr	r2, [pc, #576]	; (8007938 <HAL_GPIO_Init+0x2a8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d869      	bhi.n	80077ce <HAL_GPIO_Init+0x13e>
 80076fa:	4a90      	ldr	r2, [pc, #576]	; (800793c <HAL_GPIO_Init+0x2ac>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d04c      	beq.n	800779a <HAL_GPIO_Init+0x10a>
 8007700:	4a8e      	ldr	r2, [pc, #568]	; (800793c <HAL_GPIO_Init+0x2ac>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d863      	bhi.n	80077ce <HAL_GPIO_Init+0x13e>
 8007706:	4a8e      	ldr	r2, [pc, #568]	; (8007940 <HAL_GPIO_Init+0x2b0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d046      	beq.n	800779a <HAL_GPIO_Init+0x10a>
 800770c:	4a8c      	ldr	r2, [pc, #560]	; (8007940 <HAL_GPIO_Init+0x2b0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d85d      	bhi.n	80077ce <HAL_GPIO_Init+0x13e>
 8007712:	2b12      	cmp	r3, #18
 8007714:	d82a      	bhi.n	800776c <HAL_GPIO_Init+0xdc>
 8007716:	2b12      	cmp	r3, #18
 8007718:	d859      	bhi.n	80077ce <HAL_GPIO_Init+0x13e>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <HAL_GPIO_Init+0x90>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	0800779b 	.word	0x0800779b
 8007724:	08007775 	.word	0x08007775
 8007728:	08007787 	.word	0x08007787
 800772c:	080077c9 	.word	0x080077c9
 8007730:	080077cf 	.word	0x080077cf
 8007734:	080077cf 	.word	0x080077cf
 8007738:	080077cf 	.word	0x080077cf
 800773c:	080077cf 	.word	0x080077cf
 8007740:	080077cf 	.word	0x080077cf
 8007744:	080077cf 	.word	0x080077cf
 8007748:	080077cf 	.word	0x080077cf
 800774c:	080077cf 	.word	0x080077cf
 8007750:	080077cf 	.word	0x080077cf
 8007754:	080077cf 	.word	0x080077cf
 8007758:	080077cf 	.word	0x080077cf
 800775c:	080077cf 	.word	0x080077cf
 8007760:	080077cf 	.word	0x080077cf
 8007764:	0800777d 	.word	0x0800777d
 8007768:	08007791 	.word	0x08007791
 800776c:	4a75      	ldr	r2, [pc, #468]	; (8007944 <HAL_GPIO_Init+0x2b4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007772:	e02c      	b.n	80077ce <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	623b      	str	r3, [r7, #32]
          break;
 800777a:	e029      	b.n	80077d0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	3304      	adds	r3, #4
 8007782:	623b      	str	r3, [r7, #32]
          break;
 8007784:	e024      	b.n	80077d0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	3308      	adds	r3, #8
 800778c:	623b      	str	r3, [r7, #32]
          break;
 800778e:	e01f      	b.n	80077d0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	330c      	adds	r3, #12
 8007796:	623b      	str	r3, [r7, #32]
          break;
 8007798:	e01a      	b.n	80077d0 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80077a2:	2304      	movs	r3, #4
 80077a4:	623b      	str	r3, [r7, #32]
          break;
 80077a6:	e013      	b.n	80077d0 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d105      	bne.n	80077bc <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80077b0:	2308      	movs	r3, #8
 80077b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	611a      	str	r2, [r3, #16]
          break;
 80077ba:	e009      	b.n	80077d0 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80077bc:	2308      	movs	r3, #8
 80077be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	615a      	str	r2, [r3, #20]
          break;
 80077c6:	e003      	b.n	80077d0 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80077c8:	2300      	movs	r3, #0
 80077ca:	623b      	str	r3, [r7, #32]
          break;
 80077cc:	e000      	b.n	80077d0 <HAL_GPIO_Init+0x140>
          break;
 80077ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	2bff      	cmp	r3, #255	; 0xff
 80077d4:	d801      	bhi.n	80077da <HAL_GPIO_Init+0x14a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	e001      	b.n	80077de <HAL_GPIO_Init+0x14e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3304      	adds	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	d802      	bhi.n	80077ec <HAL_GPIO_Init+0x15c>
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	e002      	b.n	80077f2 <HAL_GPIO_Init+0x162>
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	3b08      	subs	r3, #8
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	210f      	movs	r1, #15
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	401a      	ands	r2, r3
 8007804:	6a39      	ldr	r1, [r7, #32]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	fa01 f303 	lsl.w	r3, r1, r3
 800780c:	431a      	orrs	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80c1 	beq.w	80079a2 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007820:	4b49      	ldr	r3, [pc, #292]	; (8007948 <HAL_GPIO_Init+0x2b8>)
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	4a48      	ldr	r2, [pc, #288]	; (8007948 <HAL_GPIO_Init+0x2b8>)
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	6193      	str	r3, [r2, #24]
 800782c:	4b46      	ldr	r3, [pc, #280]	; (8007948 <HAL_GPIO_Init+0x2b8>)
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8007838:	4a44      	ldr	r2, [pc, #272]	; (800794c <HAL_GPIO_Init+0x2bc>)
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	089b      	lsrs	r3, r3, #2
 800783e:	3302      	adds	r3, #2
 8007840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007844:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	220f      	movs	r2, #15
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	43db      	mvns	r3, r3
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4013      	ands	r3, r2
 800785a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a3c      	ldr	r2, [pc, #240]	; (8007950 <HAL_GPIO_Init+0x2c0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d01f      	beq.n	80078a4 <HAL_GPIO_Init+0x214>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a3b      	ldr	r2, [pc, #236]	; (8007954 <HAL_GPIO_Init+0x2c4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d019      	beq.n	80078a0 <HAL_GPIO_Init+0x210>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a3a      	ldr	r2, [pc, #232]	; (8007958 <HAL_GPIO_Init+0x2c8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <HAL_GPIO_Init+0x20c>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a39      	ldr	r2, [pc, #228]	; (800795c <HAL_GPIO_Init+0x2cc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00d      	beq.n	8007898 <HAL_GPIO_Init+0x208>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a38      	ldr	r2, [pc, #224]	; (8007960 <HAL_GPIO_Init+0x2d0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d007      	beq.n	8007894 <HAL_GPIO_Init+0x204>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a37      	ldr	r2, [pc, #220]	; (8007964 <HAL_GPIO_Init+0x2d4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d101      	bne.n	8007890 <HAL_GPIO_Init+0x200>
 800788c:	2305      	movs	r3, #5
 800788e:	e00a      	b.n	80078a6 <HAL_GPIO_Init+0x216>
 8007890:	2306      	movs	r3, #6
 8007892:	e008      	b.n	80078a6 <HAL_GPIO_Init+0x216>
 8007894:	2304      	movs	r3, #4
 8007896:	e006      	b.n	80078a6 <HAL_GPIO_Init+0x216>
 8007898:	2303      	movs	r3, #3
 800789a:	e004      	b.n	80078a6 <HAL_GPIO_Init+0x216>
 800789c:	2302      	movs	r3, #2
 800789e:	e002      	b.n	80078a6 <HAL_GPIO_Init+0x216>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <HAL_GPIO_Init+0x216>
 80078a4:	2300      	movs	r3, #0
 80078a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a8:	f002 0203 	and.w	r2, r2, #3
 80078ac:	0092      	lsls	r2, r2, #2
 80078ae:	4093      	lsls	r3, r2
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80078b6:	4925      	ldr	r1, [pc, #148]	; (800794c <HAL_GPIO_Init+0x2bc>)
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	089b      	lsrs	r3, r3, #2
 80078bc:	3302      	adds	r3, #2
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d006      	beq.n	80078de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80078d0:	4b25      	ldr	r3, [pc, #148]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4924      	ldr	r1, [pc, #144]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	4313      	orrs	r3, r2
 80078da:	600b      	str	r3, [r1, #0]
 80078dc:	e006      	b.n	80078ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80078de:	4b22      	ldr	r3, [pc, #136]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	4920      	ldr	r1, [pc, #128]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80078f8:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	491a      	ldr	r1, [pc, #104]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	4313      	orrs	r3, r2
 8007902:	604b      	str	r3, [r1, #4]
 8007904:	e006      	b.n	8007914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007906:	4b18      	ldr	r3, [pc, #96]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	43db      	mvns	r3, r3
 800790e:	4916      	ldr	r1, [pc, #88]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 8007910:	4013      	ands	r3, r2
 8007912:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d025      	beq.n	800796c <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007920:	4b11      	ldr	r3, [pc, #68]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	4910      	ldr	r1, [pc, #64]	; (8007968 <HAL_GPIO_Init+0x2d8>)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	4313      	orrs	r3, r2
 800792a:	608b      	str	r3, [r1, #8]
 800792c:	e025      	b.n	800797a <HAL_GPIO_Init+0x2ea>
 800792e:	bf00      	nop
 8007930:	10320000 	.word	0x10320000
 8007934:	10310000 	.word	0x10310000
 8007938:	10220000 	.word	0x10220000
 800793c:	10210000 	.word	0x10210000
 8007940:	10120000 	.word	0x10120000
 8007944:	10110000 	.word	0x10110000
 8007948:	40021000 	.word	0x40021000
 800794c:	40010000 	.word	0x40010000
 8007950:	40010800 	.word	0x40010800
 8007954:	40010c00 	.word	0x40010c00
 8007958:	40011000 	.word	0x40011000
 800795c:	40011400 	.word	0x40011400
 8007960:	40011800 	.word	0x40011800
 8007964:	40011c00 	.word	0x40011c00
 8007968:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800796c:	4b13      	ldr	r3, [pc, #76]	; (80079bc <HAL_GPIO_Init+0x32c>)
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	43db      	mvns	r3, r3
 8007974:	4911      	ldr	r1, [pc, #68]	; (80079bc <HAL_GPIO_Init+0x32c>)
 8007976:	4013      	ands	r3, r2
 8007978:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007986:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <HAL_GPIO_Init+0x32c>)
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	490c      	ldr	r1, [pc, #48]	; (80079bc <HAL_GPIO_Init+0x32c>)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	4313      	orrs	r3, r2
 8007990:	60cb      	str	r3, [r1, #12]
 8007992:	e006      	b.n	80079a2 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007994:	4b09      	ldr	r3, [pc, #36]	; (80079bc <HAL_GPIO_Init+0x32c>)
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	43db      	mvns	r3, r3
 800799c:	4907      	ldr	r1, [pc, #28]	; (80079bc <HAL_GPIO_Init+0x32c>)
 800799e:	4013      	ands	r3, r2
 80079a0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	3301      	adds	r3, #1
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	2b0f      	cmp	r3, #15
 80079ac:	f67f ae82 	bls.w	80076b4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	372c      	adds	r7, #44	; 0x2c
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	40010400 	.word	0x40010400

080079c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	887b      	ldrh	r3, [r7, #2]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
 80079dc:	e001      	b.n	80079e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr

080079ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	807b      	strh	r3, [r7, #2]
 80079fa:	4613      	mov	r3, r2
 80079fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079fe:	787b      	ldrb	r3, [r7, #1]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a04:	887a      	ldrh	r2, [r7, #2]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a0a:	e003      	b.n	8007a14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a0c:	887b      	ldrh	r3, [r7, #2]
 8007a0e:	041a      	lsls	r2, r3, #16
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	611a      	str	r2, [r3, #16]
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr
	...

08007a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a2a:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d006      	beq.n	8007a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a36:	4a05      	ldr	r2, [pc, #20]	; (8007a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f806 	bl	8007a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40010400 	.word	0x40010400

08007a50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bc80      	pop	{r7}
 8007a62:	4770      	bx	lr

08007a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 8087 	beq.w	8007b8c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007a7e:	4b92      	ldr	r3, [pc, #584]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f003 030c 	and.w	r3, r3, #12
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d00c      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007a8a:	4b8f      	ldr	r3, [pc, #572]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 030c 	and.w	r3, r3, #12
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d112      	bne.n	8007abc <HAL_RCC_OscConfig+0x58>
 8007a96:	4b8c      	ldr	r3, [pc, #560]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa2:	d10b      	bne.n	8007abc <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa4:	4b88      	ldr	r3, [pc, #544]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d06c      	beq.n	8007b8a <HAL_RCC_OscConfig+0x126>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d168      	bne.n	8007b8a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e22d      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac4:	d106      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x70>
 8007ac6:	4b80      	ldr	r3, [pc, #512]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a7f      	ldr	r2, [pc, #508]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	e02e      	b.n	8007b32 <HAL_RCC_OscConfig+0xce>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10c      	bne.n	8007af6 <HAL_RCC_OscConfig+0x92>
 8007adc:	4b7a      	ldr	r3, [pc, #488]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a79      	ldr	r2, [pc, #484]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	4b77      	ldr	r3, [pc, #476]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a76      	ldr	r2, [pc, #472]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	e01d      	b.n	8007b32 <HAL_RCC_OscConfig+0xce>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007afe:	d10c      	bne.n	8007b1a <HAL_RCC_OscConfig+0xb6>
 8007b00:	4b71      	ldr	r3, [pc, #452]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a70      	ldr	r2, [pc, #448]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	4b6e      	ldr	r3, [pc, #440]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a6d      	ldr	r2, [pc, #436]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	e00b      	b.n	8007b32 <HAL_RCC_OscConfig+0xce>
 8007b1a:	4b6b      	ldr	r3, [pc, #428]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a6a      	ldr	r2, [pc, #424]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	4b68      	ldr	r3, [pc, #416]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a67      	ldr	r2, [pc, #412]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b30:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d013      	beq.n	8007b62 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b3a:	f7fe fe31 	bl	80067a0 <HAL_GetTick>
 8007b3e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b42:	f7fe fe2d 	bl	80067a0 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b64      	cmp	r3, #100	; 0x64
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e1e1      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b54:	4b5c      	ldr	r3, [pc, #368]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <HAL_RCC_OscConfig+0xde>
 8007b60:	e014      	b.n	8007b8c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b62:	f7fe fe1d 	bl	80067a0 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b6a:	f7fe fe19 	bl	80067a0 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b64      	cmp	r3, #100	; 0x64
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e1cd      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b7c:	4b52      	ldr	r3, [pc, #328]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1f0      	bne.n	8007b6a <HAL_RCC_OscConfig+0x106>
 8007b88:	e000      	b.n	8007b8c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d063      	beq.n	8007c60 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007b98:	4b4b      	ldr	r3, [pc, #300]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f003 030c 	and.w	r3, r3, #12
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007ba4:	4b48      	ldr	r3, [pc, #288]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f003 030c 	and.w	r3, r3, #12
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d11c      	bne.n	8007bea <HAL_RCC_OscConfig+0x186>
 8007bb0:	4b45      	ldr	r3, [pc, #276]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d116      	bne.n	8007bea <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bbc:	4b42      	ldr	r3, [pc, #264]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x170>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d001      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e1a1      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd4:	4b3c      	ldr	r3, [pc, #240]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	4939      	ldr	r1, [pc, #228]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007be8:	e03a      	b.n	8007c60 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d020      	beq.n	8007c34 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bf2:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <HAL_RCC_OscConfig+0x268>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf8:	f7fe fdd2 	bl	80067a0 <HAL_GetTick>
 8007bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bfe:	e008      	b.n	8007c12 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c00:	f7fe fdce 	bl	80067a0 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e182      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c12:	4b2d      	ldr	r3, [pc, #180]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0f0      	beq.n	8007c00 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c1e:	4b2a      	ldr	r3, [pc, #168]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	4926      	ldr	r1, [pc, #152]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	600b      	str	r3, [r1, #0]
 8007c32:	e015      	b.n	8007c60 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c34:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <HAL_RCC_OscConfig+0x268>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3a:	f7fe fdb1 	bl	80067a0 <HAL_GetTick>
 8007c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c40:	e008      	b.n	8007c54 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c42:	f7fe fdad 	bl	80067a0 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e161      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c54:	4b1c      	ldr	r3, [pc, #112]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f0      	bne.n	8007c42 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d039      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d019      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c74:	4b16      	ldr	r3, [pc, #88]	; (8007cd0 <HAL_RCC_OscConfig+0x26c>)
 8007c76:	2201      	movs	r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c7a:	f7fe fd91 	bl	80067a0 <HAL_GetTick>
 8007c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c80:	e008      	b.n	8007c94 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c82:	f7fe fd8d 	bl	80067a0 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e141      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c94:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <HAL_RCC_OscConfig+0x264>)
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	f000 fadf 	bl	8008264 <RCC_Delay>
 8007ca6:	e01b      	b.n	8007ce0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ca8:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <HAL_RCC_OscConfig+0x26c>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cae:	f7fe fd77 	bl	80067a0 <HAL_GetTick>
 8007cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cb4:	e00e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cb6:	f7fe fd73 	bl	80067a0 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d907      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e127      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	42420000 	.word	0x42420000
 8007cd0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cd4:	4b92      	ldr	r3, [pc, #584]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1ea      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 80a6 	beq.w	8007e3a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cf2:	4b8b      	ldr	r3, [pc, #556]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10d      	bne.n	8007d1a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cfe:	4b88      	ldr	r3, [pc, #544]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	4a87      	ldr	r2, [pc, #540]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d08:	61d3      	str	r3, [r2, #28]
 8007d0a:	4b85      	ldr	r3, [pc, #532]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007d16:	2301      	movs	r3, #1
 8007d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d1a:	4b82      	ldr	r3, [pc, #520]	; (8007f24 <HAL_RCC_OscConfig+0x4c0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d118      	bne.n	8007d58 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d26:	4b7f      	ldr	r3, [pc, #508]	; (8007f24 <HAL_RCC_OscConfig+0x4c0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a7e      	ldr	r2, [pc, #504]	; (8007f24 <HAL_RCC_OscConfig+0x4c0>)
 8007d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d32:	f7fe fd35 	bl	80067a0 <HAL_GetTick>
 8007d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d38:	e008      	b.n	8007d4c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d3a:	f7fe fd31 	bl	80067a0 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b64      	cmp	r3, #100	; 0x64
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e0e5      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d4c:	4b75      	ldr	r3, [pc, #468]	; (8007f24 <HAL_RCC_OscConfig+0x4c0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0f0      	beq.n	8007d3a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d106      	bne.n	8007d6e <HAL_RCC_OscConfig+0x30a>
 8007d60:	4b6f      	ldr	r3, [pc, #444]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	4a6e      	ldr	r2, [pc, #440]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	6213      	str	r3, [r2, #32]
 8007d6c:	e02d      	b.n	8007dca <HAL_RCC_OscConfig+0x366>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10c      	bne.n	8007d90 <HAL_RCC_OscConfig+0x32c>
 8007d76:	4b6a      	ldr	r3, [pc, #424]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	4a69      	ldr	r2, [pc, #420]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	6213      	str	r3, [r2, #32]
 8007d82:	4b67      	ldr	r3, [pc, #412]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	4a66      	ldr	r2, [pc, #408]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d88:	f023 0304 	bic.w	r3, r3, #4
 8007d8c:	6213      	str	r3, [r2, #32]
 8007d8e:	e01c      	b.n	8007dca <HAL_RCC_OscConfig+0x366>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d10c      	bne.n	8007db2 <HAL_RCC_OscConfig+0x34e>
 8007d98:	4b61      	ldr	r3, [pc, #388]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	4a60      	ldr	r2, [pc, #384]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007d9e:	f043 0304 	orr.w	r3, r3, #4
 8007da2:	6213      	str	r3, [r2, #32]
 8007da4:	4b5e      	ldr	r3, [pc, #376]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	4a5d      	ldr	r2, [pc, #372]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007daa:	f043 0301 	orr.w	r3, r3, #1
 8007dae:	6213      	str	r3, [r2, #32]
 8007db0:	e00b      	b.n	8007dca <HAL_RCC_OscConfig+0x366>
 8007db2:	4b5b      	ldr	r3, [pc, #364]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	4a5a      	ldr	r2, [pc, #360]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	6213      	str	r3, [r2, #32]
 8007dbe:	4b58      	ldr	r3, [pc, #352]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	4a57      	ldr	r2, [pc, #348]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007dc4:	f023 0304 	bic.w	r3, r3, #4
 8007dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d015      	beq.n	8007dfe <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dd2:	f7fe fce5 	bl	80067a0 <HAL_GetTick>
 8007dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dd8:	e00a      	b.n	8007df0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dda:	f7fe fce1 	bl	80067a0 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e093      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df0:	4b4b      	ldr	r3, [pc, #300]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0ee      	beq.n	8007dda <HAL_RCC_OscConfig+0x376>
 8007dfc:	e014      	b.n	8007e28 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dfe:	f7fe fccf 	bl	80067a0 <HAL_GetTick>
 8007e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e04:	e00a      	b.n	8007e1c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e06:	f7fe fccb 	bl	80067a0 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e07d      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e1c:	4b40      	ldr	r3, [pc, #256]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1ee      	bne.n	8007e06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e2e:	4b3c      	ldr	r3, [pc, #240]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	4a3b      	ldr	r2, [pc, #236]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d069      	beq.n	8007f16 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e42:	4b37      	ldr	r3, [pc, #220]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f003 030c 	and.w	r3, r3, #12
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d061      	beq.n	8007f12 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d146      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e56:	4b34      	ldr	r3, [pc, #208]	; (8007f28 <HAL_RCC_OscConfig+0x4c4>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e5c:	f7fe fca0 	bl	80067a0 <HAL_GetTick>
 8007e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e64:	f7fe fc9c 	bl	80067a0 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e050      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e76:	4b2a      	ldr	r3, [pc, #168]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f0      	bne.n	8007e64 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e8a:	d108      	bne.n	8007e9e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007e8c:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	4921      	ldr	r1, [pc, #132]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e9e:	4b20      	ldr	r3, [pc, #128]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a19      	ldr	r1, [r3, #32]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	491b      	ldr	r1, [pc, #108]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eb6:	4b1c      	ldr	r3, [pc, #112]	; (8007f28 <HAL_RCC_OscConfig+0x4c4>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ebc:	f7fe fc70 	bl	80067a0 <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ec4:	f7fe fc6c 	bl	80067a0 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e020      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ed6:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x460>
 8007ee2:	e018      	b.n	8007f16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <HAL_RCC_OscConfig+0x4c4>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eea:	f7fe fc59 	bl	80067a0 <HAL_GetTick>
 8007eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ef2:	f7fe fc55 	bl	80067a0 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e009      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f04:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <HAL_RCC_OscConfig+0x4bc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f0      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x48e>
 8007f10:	e001      	b.n	8007f16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40021000 	.word	0x40021000
 8007f24:	40007000 	.word	0x40007000
 8007f28:	42420060 	.word	0x42420060

08007f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8007f3a:	4b7e      	ldr	r3, [pc, #504]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d910      	bls.n	8007f6a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f48:	4b7a      	ldr	r3, [pc, #488]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f023 0207 	bic.w	r2, r3, #7
 8007f50:	4978      	ldr	r1, [pc, #480]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007f58:	4b76      	ldr	r3, [pc, #472]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d001      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e0e0      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d020      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f82:	4b6d      	ldr	r3, [pc, #436]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	4a6c      	ldr	r2, [pc, #432]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007f88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f8c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0308 	and.w	r3, r3, #8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f9a:	4b67      	ldr	r3, [pc, #412]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4a66      	ldr	r2, [pc, #408]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007fa0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007fa4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fa6:	4b64      	ldr	r3, [pc, #400]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	4961      	ldr	r1, [pc, #388]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d06a      	beq.n	800809a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d107      	bne.n	8007fdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fcc:	4b5a      	ldr	r3, [pc, #360]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d115      	bne.n	8008004 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0a7      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fe4:	4b54      	ldr	r3, [pc, #336]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d109      	bne.n	8008004 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e09b      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ff4:	4b50      	ldr	r3, [pc, #320]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e093      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008004:	4b4c      	ldr	r3, [pc, #304]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f023 0203 	bic.w	r2, r3, #3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	4949      	ldr	r1, [pc, #292]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008016:	f7fe fbc3 	bl	80067a0 <HAL_GetTick>
 800801a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d112      	bne.n	800804a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008024:	e00a      	b.n	800803c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008026:	f7fe fbbb 	bl	80067a0 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	f241 3288 	movw	r2, #5000	; 0x1388
 8008034:	4293      	cmp	r3, r2
 8008036:	d901      	bls.n	800803c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e077      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800803c:	4b3e      	ldr	r3, [pc, #248]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f003 030c 	and.w	r3, r3, #12
 8008044:	2b04      	cmp	r3, #4
 8008046:	d1ee      	bne.n	8008026 <HAL_RCC_ClockConfig+0xfa>
 8008048:	e027      	b.n	800809a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d11d      	bne.n	800808e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008052:	e00a      	b.n	800806a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008054:	f7fe fba4 	bl	80067a0 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008062:	4293      	cmp	r3, r2
 8008064:	d901      	bls.n	800806a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e060      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800806a:	4b33      	ldr	r3, [pc, #204]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f003 030c 	and.w	r3, r3, #12
 8008072:	2b08      	cmp	r3, #8
 8008074:	d1ee      	bne.n	8008054 <HAL_RCC_ClockConfig+0x128>
 8008076:	e010      	b.n	800809a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008078:	f7fe fb92 	bl	80067a0 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	f241 3288 	movw	r2, #5000	; 0x1388
 8008086:	4293      	cmp	r3, r2
 8008088:	d901      	bls.n	800808e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e04e      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800808e:	4b2a      	ldr	r3, [pc, #168]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f003 030c 	and.w	r3, r3, #12
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1ee      	bne.n	8008078 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800809a:	4b26      	ldr	r3, [pc, #152]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d210      	bcs.n	80080ca <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080a8:	4b22      	ldr	r3, [pc, #136]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f023 0207 	bic.w	r2, r3, #7
 80080b0:	4920      	ldr	r1, [pc, #128]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <HAL_RCC_ClockConfig+0x208>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d001      	beq.n	80080ca <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e030      	b.n	800812c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080d6:	4b18      	ldr	r3, [pc, #96]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	4915      	ldr	r1, [pc, #84]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d009      	beq.n	8008108 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080f4:	4b10      	ldr	r3, [pc, #64]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	490d      	ldr	r1, [pc, #52]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8008104:	4313      	orrs	r3, r2
 8008106:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008108:	f000 f81c 	bl	8008144 <HAL_RCC_GetSysClockFreq>
 800810c:	4602      	mov	r2, r0
 800810e:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <HAL_RCC_ClockConfig+0x20c>)
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	091b      	lsrs	r3, r3, #4
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	4908      	ldr	r1, [pc, #32]	; (800813c <HAL_RCC_ClockConfig+0x210>)
 800811a:	5ccb      	ldrb	r3, [r1, r3]
 800811c:	fa22 f303 	lsr.w	r3, r2, r3
 8008120:	4a07      	ldr	r2, [pc, #28]	; (8008140 <HAL_RCC_ClockConfig+0x214>)
 8008122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008124:	2000      	movs	r0, #0
 8008126:	f7fe faf9 	bl	800671c <HAL_InitTick>
  
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40022000 	.word	0x40022000
 8008138:	40021000 	.word	0x40021000
 800813c:	0800b440 	.word	0x0800b440
 8008140:	20000004 	.word	0x20000004

08008144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008144:	b490      	push	{r4, r7}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800814a:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800814c:	1d3c      	adds	r4, r7, #4
 800814e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008154:	f240 2301 	movw	r3, #513	; 0x201
 8008158:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	2300      	movs	r3, #0
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	2300      	movs	r3, #0
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800816e:	4b21      	ldr	r3, [pc, #132]	; (80081f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f003 030c 	and.w	r3, r3, #12
 800817a:	2b04      	cmp	r3, #4
 800817c:	d002      	beq.n	8008184 <HAL_RCC_GetSysClockFreq+0x40>
 800817e:	2b08      	cmp	r3, #8
 8008180:	d003      	beq.n	800818a <HAL_RCC_GetSysClockFreq+0x46>
 8008182:	e02b      	b.n	80081dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008184:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008186:	623b      	str	r3, [r7, #32]
      break;
 8008188:	e02b      	b.n	80081e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	0c9b      	lsrs	r3, r3, #18
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	3328      	adds	r3, #40	; 0x28
 8008194:	443b      	add	r3, r7
 8008196:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800819a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d012      	beq.n	80081cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80081a6:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	0c5b      	lsrs	r3, r3, #17
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	3328      	adds	r3, #40	; 0x28
 80081b2:	443b      	add	r3, r7
 80081b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80081b8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	4a0e      	ldr	r2, [pc, #56]	; (80081f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80081be:	fb03 f202 	mul.w	r2, r3, r2
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	e004      	b.n	80081d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	4a0b      	ldr	r2, [pc, #44]	; (80081fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80081d0:	fb02 f303 	mul.w	r3, r2, r3
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	623b      	str	r3, [r7, #32]
      break;
 80081da:	e002      	b.n	80081e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80081dc:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80081de:	623b      	str	r3, [r7, #32]
      break;
 80081e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081e2:	6a3b      	ldr	r3, [r7, #32]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3728      	adds	r7, #40	; 0x28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc90      	pop	{r4, r7}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	0800adb0 	.word	0x0800adb0
 80081f4:	40021000 	.word	0x40021000
 80081f8:	007a1200 	.word	0x007a1200
 80081fc:	003d0900 	.word	0x003d0900

08008200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008204:	4b02      	ldr	r3, [pc, #8]	; (8008210 <HAL_RCC_GetHCLKFreq+0x10>)
 8008206:	681b      	ldr	r3, [r3, #0]
}
 8008208:	4618      	mov	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr
 8008210:	20000004 	.word	0x20000004

08008214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008218:	f7ff fff2 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 800821c:	4602      	mov	r2, r0
 800821e:	4b05      	ldr	r3, [pc, #20]	; (8008234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	0a1b      	lsrs	r3, r3, #8
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	4903      	ldr	r1, [pc, #12]	; (8008238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800822a:	5ccb      	ldrb	r3, [r1, r3]
 800822c:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8008230:	4618      	mov	r0, r3
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40021000 	.word	0x40021000
 8008238:	0800b450 	.word	0x0800b450

0800823c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008240:	f7ff ffde 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008244:	4602      	mov	r2, r0
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	0adb      	lsrs	r3, r3, #11
 800824c:	f003 0307 	and.w	r3, r3, #7
 8008250:	4903      	ldr	r1, [pc, #12]	; (8008260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008252:	5ccb      	ldrb	r3, [r1, r3]
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8008258:	4618      	mov	r0, r3
 800825a:	bd80      	pop	{r7, pc}
 800825c:	40021000 	.word	0x40021000
 8008260:	0800b450 	.word	0x0800b450

08008264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800826c:	4b0b      	ldr	r3, [pc, #44]	; (800829c <RCC_Delay+0x38>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0b      	ldr	r2, [pc, #44]	; (80082a0 <RCC_Delay+0x3c>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	0a5b      	lsrs	r3, r3, #9
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8008280:	bf00      	nop
}
 8008282:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	1e5a      	subs	r2, r3, #1
 8008288:	60fa      	str	r2, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f8      	bne.n	8008280 <RCC_Delay+0x1c>
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	20000004 	.word	0x20000004
 80082a0:	10624dd3 	.word	0x10624dd3

080082a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d07d      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80082c0:	2300      	movs	r3, #0
 80082c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082c4:	4b4f      	ldr	r3, [pc, #316]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10d      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082d0:	4b4c      	ldr	r3, [pc, #304]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	4a4b      	ldr	r2, [pc, #300]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082da:	61d3      	str	r3, [r2, #28]
 80082dc:	4b49      	ldr	r3, [pc, #292]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e4:	60bb      	str	r3, [r7, #8]
 80082e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082e8:	2301      	movs	r3, #1
 80082ea:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ec:	4b46      	ldr	r3, [pc, #280]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d118      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082f8:	4b43      	ldr	r3, [pc, #268]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a42      	ldr	r2, [pc, #264]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80082fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008302:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008304:	f7fe fa4c 	bl	80067a0 <HAL_GetTick>
 8008308:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830a:	e008      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800830c:	f7fe fa48 	bl	80067a0 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b64      	cmp	r3, #100	; 0x64
 8008318:	d901      	bls.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e06d      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831e:	4b3a      	ldr	r3, [pc, #232]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0f0      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800832a:	4b36      	ldr	r3, [pc, #216]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008332:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d02e      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	429a      	cmp	r2, r3
 8008346:	d027      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008348:	4b2e      	ldr	r3, [pc, #184]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008350:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008352:	4b2e      	ldr	r3, [pc, #184]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008358:	4b2c      	ldr	r3, [pc, #176]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800835e:	4a29      	ldr	r2, [pc, #164]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d014      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800836e:	f7fe fa17 	bl	80067a0 <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008374:	e00a      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008376:	f7fe fa13 	bl	80067a0 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	f241 3288 	movw	r2, #5000	; 0x1388
 8008384:	4293      	cmp	r3, r2
 8008386:	d901      	bls.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e036      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800838c:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0ee      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008398:	4b1a      	ldr	r3, [pc, #104]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4917      	ldr	r1, [pc, #92]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d105      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083b0:	4b14      	ldr	r3, [pc, #80]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	4a13      	ldr	r2, [pc, #76]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083c8:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	490b      	ldr	r1, [pc, #44]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d008      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083e6:	4b07      	ldr	r3, [pc, #28]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	4904      	ldr	r1, [pc, #16]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	40021000 	.word	0x40021000
 8008408:	40007000 	.word	0x40007000
 800840c:	42420440 	.word	0x42420440

08008410 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e034      	b.n	8008490 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7f9 ffc4 	bl	80023c8 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3308      	adds	r3, #8
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f001 fe36 	bl	800a0bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	461a      	mov	r2, r3
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	f001 feae 	bl	800a1bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6858      	ldr	r0, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	f001 fed9 	bl	800a224 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	6892      	ldr	r2, [r2, #8]
 800847a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	6892      	ldr	r2, [r2, #8]
 8008486:	f041 0101 	orr.w	r1, r1, #1
 800848a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e01d      	b.n	80084e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fd fb9a 	bl	8005bf8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f000 fd16 	bl	8008f08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2202      	movs	r2, #2
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f042 0201 	orr.w	r2, r2, #1
 800850c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr

08008522 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6a1a      	ldr	r2, [r3, #32]
 8008538:	f241 1311 	movw	r3, #4369	; 0x1111
 800853c:	4013      	ands	r3, r2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10f      	bne.n	8008562 <HAL_TIM_Base_Stop+0x40>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6a1a      	ldr	r2, [r3, #32]
 8008548:	f240 4344 	movw	r3, #1092	; 0x444
 800854c:	4013      	ands	r3, r2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d107      	bne.n	8008562 <HAL_TIM_Base_Stop+0x40>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0201 	bic.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 0201 	orr.w	r2, r2, #1
 800858c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f042 0201 	orr.w	r2, r2, #1
 800859c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc80      	pop	{r7}
 80085a8:	4770      	bx	lr

080085aa <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0201 	bic.w	r2, r2, #1
 80085c0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6a1a      	ldr	r2, [r3, #32]
 80085c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80085cc:	4013      	ands	r3, r2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10f      	bne.n	80085f2 <HAL_TIM_Base_Stop_IT+0x48>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a1a      	ldr	r2, [r3, #32]
 80085d8:	f240 4344 	movw	r3, #1092	; 0x444
 80085dc:	4013      	ands	r3, r2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d107      	bne.n	80085f2 <HAL_TIM_Base_Stop_IT+0x48>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0201 	bic.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr

080085fe <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e01d      	b.n	800864c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d106      	bne.n	800862a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f815 	bl	8008654 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f000 fc63 	bl	8008f08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
	...

08008668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2201      	movs	r2, #1
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 ff2b 	bl	80094d6 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a10      	ldr	r2, [pc, #64]	; (80086c8 <HAL_TIM_PWM_Start+0x60>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <HAL_TIM_PWM_Start+0x2c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a0f      	ldr	r2, [pc, #60]	; (80086cc <HAL_TIM_PWM_Start+0x64>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d101      	bne.n	8008698 <HAL_TIM_PWM_Start+0x30>
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <HAL_TIM_PWM_Start+0x32>
 8008698:	2300      	movs	r3, #0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40012c00 	.word	0x40012c00
 80086cc:	40013400 	.word	0x40013400

080086d0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d101      	bne.n	80086ee <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 80086ea:	2302      	movs	r3, #2
 80086ec:	e0c6      	b.n	800887c <HAL_TIM_PWM_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10b      	bne.n	8008712 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d104      	bne.n	800870a <HAL_TIM_PWM_Start_DMA+0x3a>
 8008700:	887b      	ldrh	r3, [r7, #2]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e0b8      	b.n	800887c <HAL_TIM_PWM_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2202      	movs	r2, #2
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b0c      	cmp	r3, #12
 8008716:	f200 8089 	bhi.w	800882c <HAL_TIM_PWM_Start_DMA+0x15c>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <HAL_TIM_PWM_Start_DMA+0x50>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008755 	.word	0x08008755
 8008724:	0800882d 	.word	0x0800882d
 8008728:	0800882d 	.word	0x0800882d
 800872c:	0800882d 	.word	0x0800882d
 8008730:	0800878b 	.word	0x0800878b
 8008734:	0800882d 	.word	0x0800882d
 8008738:	0800882d 	.word	0x0800882d
 800873c:	0800882d 	.word	0x0800882d
 8008740:	080087c1 	.word	0x080087c1
 8008744:	0800882d 	.word	0x0800882d
 8008748:	0800882d 	.word	0x0800882d
 800874c:	0800882d 	.word	0x0800882d
 8008750:	080087f7 	.word	0x080087f7
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	4a4a      	ldr	r2, [pc, #296]	; (8008884 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800875a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	4a49      	ldr	r2, [pc, #292]	; (8008888 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008762:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3334      	adds	r3, #52	; 0x34
 8008770:	461a      	mov	r2, r3
 8008772:	887b      	ldrh	r3, [r7, #2]
 8008774:	f7fe fbba 	bl	8006eec <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008786:	60da      	str	r2, [r3, #12]
    }
    break;
 8008788:	e051      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	4a3d      	ldr	r2, [pc, #244]	; (8008884 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8008790:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	4a3c      	ldr	r2, [pc, #240]	; (8008888 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008798:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3338      	adds	r3, #56	; 0x38
 80087a6:	461a      	mov	r2, r3
 80087a8:	887b      	ldrh	r3, [r7, #2]
 80087aa:	f7fe fb9f 	bl	8006eec <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087bc:	60da      	str	r2, [r3, #12]
    }
    break;
 80087be:	e036      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	4a2f      	ldr	r2, [pc, #188]	; (8008884 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 80087c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	4a2e      	ldr	r2, [pc, #184]	; (8008888 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	333c      	adds	r3, #60	; 0x3c
 80087dc:	461a      	mov	r2, r3
 80087de:	887b      	ldrh	r3, [r7, #2]
 80087e0:	f7fe fb84 	bl	8006eec <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087f2:	60da      	str	r2, [r3, #12]
    }
    break;
 80087f4:	e01b      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	4a22      	ldr	r2, [pc, #136]	; (8008884 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 80087fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	4a21      	ldr	r2, [pc, #132]	; (8008888 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3340      	adds	r3, #64	; 0x40
 8008812:	461a      	mov	r2, r3
 8008814:	887b      	ldrh	r3, [r7, #2]
 8008816:	f7fe fb69 	bl	8006eec <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008828:	60da      	str	r2, [r3, #12]
    }
    break;
 800882a:	e000      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 800882c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2201      	movs	r2, #1
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fe4d 	bl	80094d6 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a12      	ldr	r2, [pc, #72]	; (800888c <HAL_TIM_PWM_Start_DMA+0x1bc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_TIM_PWM_Start_DMA+0x180>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a11      	ldr	r2, [pc, #68]	; (8008890 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d101      	bne.n	8008854 <HAL_TIM_PWM_Start_DMA+0x184>
 8008850:	2301      	movs	r3, #1
 8008852:	e000      	b.n	8008856 <HAL_TIM_PWM_Start_DMA+0x186>
 8008854:	2300      	movs	r3, #0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	08008e97 	.word	0x08008e97
 8008888:	08008e73 	.word	0x08008e73
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40013400 	.word	0x40013400

08008894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d122      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d11b      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f06f 0202 	mvn.w	r2, #2
 80088c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 faa7 	bl	8008e2a <HAL_TIM_IC_CaptureCallback>
 80088dc:	e005      	b.n	80088ea <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa9a 	bl	8008e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 faa9 	bl	8008e3c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d122      	bne.n	8008944 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b04      	cmp	r3, #4
 800890a:	d11b      	bne.n	8008944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f06f 0204 	mvn.w	r2, #4
 8008914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa7d 	bl	8008e2a <HAL_TIM_IC_CaptureCallback>
 8008930:	e005      	b.n	800893e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa70 	bl	8008e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fa7f 	bl	8008e3c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b08      	cmp	r3, #8
 8008950:	d122      	bne.n	8008998 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b08      	cmp	r3, #8
 800895e:	d11b      	bne.n	8008998 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f06f 0208 	mvn.w	r2, #8
 8008968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2204      	movs	r2, #4
 800896e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa53 	bl	8008e2a <HAL_TIM_IC_CaptureCallback>
 8008984:	e005      	b.n	8008992 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa46 	bl	8008e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fa55 	bl	8008e3c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f003 0310 	and.w	r3, r3, #16
 80089a2:	2b10      	cmp	r3, #16
 80089a4:	d122      	bne.n	80089ec <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b10      	cmp	r3, #16
 80089b2:	d11b      	bne.n	80089ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f06f 0210 	mvn.w	r2, #16
 80089bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2208      	movs	r2, #8
 80089c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa29 	bl	8008e2a <HAL_TIM_IC_CaptureCallback>
 80089d8:	e005      	b.n	80089e6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa1c 	bl	8008e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fa2b 	bl	8008e3c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d10e      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d107      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f06f 0201 	mvn.w	r2, #1
 8008a10:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9f7 	bl	8008e06 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b80      	cmp	r3, #128	; 0x80
 8008a24:	d10e      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a30:	2b80      	cmp	r3, #128	; 0x80
 8008a32:	d107      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fe10 	bl	8009664 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b40      	cmp	r3, #64	; 0x40
 8008a50:	d10e      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5c:	2b40      	cmp	r3, #64	; 0x40
 8008a5e:	d107      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a68:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9ef 	bl	8008e4e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d10e      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0320 	and.w	r3, r3, #32
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	d107      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0220 	mvn.w	r2, #32
 8008a94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fddb 	bl	8009652 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d101      	bne.n	8008abe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008aba:	2302      	movs	r3, #2
 8008abc:	e0b4      	b.n	8008c28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b0c      	cmp	r3, #12
 8008ad2:	f200 809f 	bhi.w	8008c14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008ad6:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008b11 	.word	0x08008b11
 8008ae0:	08008c15 	.word	0x08008c15
 8008ae4:	08008c15 	.word	0x08008c15
 8008ae8:	08008c15 	.word	0x08008c15
 8008aec:	08008b51 	.word	0x08008b51
 8008af0:	08008c15 	.word	0x08008c15
 8008af4:	08008c15 	.word	0x08008c15
 8008af8:	08008c15 	.word	0x08008c15
 8008afc:	08008b93 	.word	0x08008b93
 8008b00:	08008c15 	.word	0x08008c15
 8008b04:	08008c15 	.word	0x08008c15
 8008b08:	08008c15 	.word	0x08008c15
 8008b0c:	08008bd3 	.word	0x08008bd3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fa74 	bl	8009004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0208 	orr.w	r2, r2, #8
 8008b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699a      	ldr	r2, [r3, #24]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0204 	bic.w	r2, r2, #4
 8008b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6999      	ldr	r1, [r3, #24]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	619a      	str	r2, [r3, #24]
    }
    break;
 8008b4e:	e062      	b.n	8008c16 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 faca 	bl	80090f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	699a      	ldr	r2, [r3, #24]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6999      	ldr	r1, [r3, #24]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	021a      	lsls	r2, r3, #8
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	619a      	str	r2, [r3, #24]
    }
    break;
 8008b90:	e041      	b.n	8008c16 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68b9      	ldr	r1, [r7, #8]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 fb23 	bl	80091e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69da      	ldr	r2, [r3, #28]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f042 0208 	orr.w	r2, r2, #8
 8008bac:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	69da      	ldr	r2, [r3, #28]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0204 	bic.w	r2, r2, #4
 8008bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69d9      	ldr	r1, [r3, #28]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	61da      	str	r2, [r3, #28]
    }
    break;
 8008bd0:	e021      	b.n	8008c16 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fb7d 	bl	80092d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69da      	ldr	r2, [r3, #28]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bec:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69da      	ldr	r2, [r3, #28]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69d9      	ldr	r1, [r3, #28]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	021a      	lsls	r2, r3, #8
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	61da      	str	r2, [r3, #28]
    }
    break;
 8008c12:	e000      	b.n	8008c16 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8008c14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d101      	bne.n	8008c4c <HAL_TIM_ConfigClockSource+0x1c>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e0d8      	b.n	8008dfe <HAL_TIM_ConfigClockSource+0x1ce>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c84:	d052      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0xfc>
 8008c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c8a:	f200 80ae 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c92:	d027      	beq.n	8008ce4 <HAL_TIM_ConfigClockSource+0xb4>
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c98:	f200 80a7 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008c9c:	2b70      	cmp	r3, #112	; 0x70
 8008c9e:	d02a      	beq.n	8008cf6 <HAL_TIM_ConfigClockSource+0xc6>
 8008ca0:	2b70      	cmp	r3, #112	; 0x70
 8008ca2:	f200 80a2 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008ca6:	2b60      	cmp	r3, #96	; 0x60
 8008ca8:	d063      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0x142>
 8008caa:	2b60      	cmp	r3, #96	; 0x60
 8008cac:	f200 809d 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008cb0:	2b50      	cmp	r3, #80	; 0x50
 8008cb2:	d04e      	beq.n	8008d52 <HAL_TIM_ConfigClockSource+0x122>
 8008cb4:	2b50      	cmp	r3, #80	; 0x50
 8008cb6:	f200 8098 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008cba:	2b40      	cmp	r3, #64	; 0x40
 8008cbc:	d069      	beq.n	8008d92 <HAL_TIM_ConfigClockSource+0x162>
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	f200 8093 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008cc4:	2b30      	cmp	r3, #48	; 0x30
 8008cc6:	f000 8089 	beq.w	8008ddc <HAL_TIM_ConfigClockSource+0x1ac>
 8008cca:	2b30      	cmp	r3, #48	; 0x30
 8008ccc:	f200 808d 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d07c      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x19e>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	f200 8088 	bhi.w	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d069      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x182>
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d06e      	beq.n	8008dc0 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8008ce2:	e082      	b.n	8008dea <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0207 	bic.w	r2, r2, #7
 8008cf2:	609a      	str	r2, [r3, #8]
    break;
 8008cf4:	e07a      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	6899      	ldr	r1, [r3, #8]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f000 fbc5 	bl	8009494 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	609a      	str	r2, [r3, #8]
    break;
 8008d2a:	e05f      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	6899      	ldr	r1, [r3, #8]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f000 fbaa 	bl	8009494 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d4e:	609a      	str	r2, [r3, #8]
    break;
 8008d50:	e04c      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	6859      	ldr	r1, [r3, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f000 fb14 	bl	800938c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2150      	movs	r1, #80	; 0x50
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fb73 	bl	8009456 <TIM_ITRx_SetConfig>
    break;
 8008d70:	e03c      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	6859      	ldr	r1, [r3, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f000 fb36 	bl	80093f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2160      	movs	r1, #96	; 0x60
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fb63 	bl	8009456 <TIM_ITRx_SetConfig>
    break;
 8008d90:	e02c      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	6859      	ldr	r1, [r3, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f000 faf4 	bl	800938c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2140      	movs	r1, #64	; 0x40
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fb53 	bl	8009456 <TIM_ITRx_SetConfig>
    break;
 8008db0:	e01c      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2100      	movs	r1, #0
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fb4c 	bl	8009456 <TIM_ITRx_SetConfig>
    break;
 8008dbe:	e015      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2110      	movs	r1, #16
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fb45 	bl	8009456 <TIM_ITRx_SetConfig>
    break;
 8008dcc:	e00e      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2120      	movs	r1, #32
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fb3e 	bl	8009456 <TIM_ITRx_SetConfig>
    break;
 8008dda:	e007      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2130      	movs	r1, #48	; 0x30
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fb37 	bl	8009456 <TIM_ITRx_SetConfig>
    break;
 8008de8:	e000      	b.n	8008dec <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8008dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bc80      	pop	{r7}
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bc80      	pop	{r7}
 8008e28:	4770      	bx	lr

08008e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr

08008e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr

08008e72 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff ffe9 	bl	8008e60 <HAL_TIM_ErrorCallback>
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d103      	bne.n	8008ebe <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	771a      	strb	r2, [r3, #28]
 8008ebc:	e019      	b.n	8008ef2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d103      	bne.n	8008ed0 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	771a      	strb	r2, [r3, #28]
 8008ece:	e010      	b.n	8008ef2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d103      	bne.n	8008ee2 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2204      	movs	r2, #4
 8008ede:	771a      	strb	r2, [r3, #28]
 8008ee0:	e007      	b.n	8008ef2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d102      	bne.n	8008ef2 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2208      	movs	r2, #8
 8008ef0:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff ffa2 	bl	8008e3c <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	771a      	strb	r2, [r3, #28]
}
 8008efe:	bf00      	nop
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a34      	ldr	r2, [pc, #208]	; (8008ff0 <TIM_Base_SetConfig+0xe8>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d013      	beq.n	8008f4c <TIM_Base_SetConfig+0x44>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a33      	ldr	r2, [pc, #204]	; (8008ff4 <TIM_Base_SetConfig+0xec>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00f      	beq.n	8008f4c <TIM_Base_SetConfig+0x44>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f32:	d00b      	beq.n	8008f4c <TIM_Base_SetConfig+0x44>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a30      	ldr	r2, [pc, #192]	; (8008ff8 <TIM_Base_SetConfig+0xf0>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <TIM_Base_SetConfig+0x44>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a2f      	ldr	r2, [pc, #188]	; (8008ffc <TIM_Base_SetConfig+0xf4>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <TIM_Base_SetConfig+0x44>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a2e      	ldr	r2, [pc, #184]	; (8009000 <TIM_Base_SetConfig+0xf8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d108      	bne.n	8008f5e <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a23      	ldr	r2, [pc, #140]	; (8008ff0 <TIM_Base_SetConfig+0xe8>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d013      	beq.n	8008f8e <TIM_Base_SetConfig+0x86>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a22      	ldr	r2, [pc, #136]	; (8008ff4 <TIM_Base_SetConfig+0xec>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d00f      	beq.n	8008f8e <TIM_Base_SetConfig+0x86>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f74:	d00b      	beq.n	8008f8e <TIM_Base_SetConfig+0x86>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a1f      	ldr	r2, [pc, #124]	; (8008ff8 <TIM_Base_SetConfig+0xf0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d007      	beq.n	8008f8e <TIM_Base_SetConfig+0x86>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a1e      	ldr	r2, [pc, #120]	; (8008ffc <TIM_Base_SetConfig+0xf4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d003      	beq.n	8008f8e <TIM_Base_SetConfig+0x86>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a1d      	ldr	r2, [pc, #116]	; (8009000 <TIM_Base_SetConfig+0xf8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d108      	bne.n	8008fa0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fa6:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <TIM_Base_SetConfig+0xe8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_Base_SetConfig+0xd0>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a08      	ldr	r2, [pc, #32]	; (8008ff4 <TIM_Base_SetConfig+0xec>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d103      	bne.n	8008fe0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	615a      	str	r2, [r3, #20]
}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr
 8008ff0:	40012c00 	.word	0x40012c00
 8008ff4:	40013400 	.word	0x40013400
 8008ff8:	40000400 	.word	0x40000400
 8008ffc:	40000800 	.word	0x40000800
 8009000:	40000c00 	.word	0x40000c00

08009004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f023 0201 	bic.w	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 0302 	bic.w	r3, r3, #2
 8009058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	4313      	orrs	r3, r2
 8009062:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a20      	ldr	r2, [pc, #128]	; (80090e8 <TIM_OC1_SetConfig+0xe4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d003      	beq.n	8009074 <TIM_OC1_SetConfig+0x70>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1f      	ldr	r2, [pc, #124]	; (80090ec <TIM_OC1_SetConfig+0xe8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d10c      	bne.n	800908e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f023 0308 	bic.w	r3, r3, #8
 800907a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f023 0304 	bic.w	r3, r3, #4
 800908c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a15      	ldr	r2, [pc, #84]	; (80090e8 <TIM_OC1_SetConfig+0xe4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d003      	beq.n	800909e <TIM_OC1_SetConfig+0x9a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a14      	ldr	r2, [pc, #80]	; (80090ec <TIM_OC1_SetConfig+0xe8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d111      	bne.n	80090c2 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	621a      	str	r2, [r3, #32]
}
 80090dc:	bf00      	nop
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40012c00 	.word	0x40012c00
 80090ec:	40013400 	.word	0x40013400

080090f0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f023 0210 	bic.w	r2, r3, #16
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f023 0320 	bic.w	r3, r3, #32
 8009146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a21      	ldr	r2, [pc, #132]	; (80091dc <TIM_OC2_SetConfig+0xec>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d003      	beq.n	8009164 <TIM_OC2_SetConfig+0x74>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a20      	ldr	r2, [pc, #128]	; (80091e0 <TIM_OC2_SetConfig+0xf0>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d10d      	bne.n	8009180 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800916a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4313      	orrs	r3, r2
 8009176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800917e:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a16      	ldr	r2, [pc, #88]	; (80091dc <TIM_OC2_SetConfig+0xec>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d003      	beq.n	8009190 <TIM_OC2_SetConfig+0xa0>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a15      	ldr	r2, [pc, #84]	; (80091e0 <TIM_OC2_SetConfig+0xf0>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d113      	bne.n	80091b8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800919e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	621a      	str	r2, [r3, #32]
}
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr
 80091dc:	40012c00 	.word	0x40012c00
 80091e0:	40013400 	.word	0x40013400

080091e4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800921e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f023 0303 	bic.w	r3, r3, #3
 8009226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	4313      	orrs	r3, r2
 8009244:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <TIM_OC3_SetConfig+0xec>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d003      	beq.n	8009256 <TIM_OC3_SetConfig+0x72>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <TIM_OC3_SetConfig+0xf0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d10d      	bne.n	8009272 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800925c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	4313      	orrs	r3, r2
 8009268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009270:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a16      	ldr	r2, [pc, #88]	; (80092d0 <TIM_OC3_SetConfig+0xec>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d003      	beq.n	8009282 <TIM_OC3_SetConfig+0x9e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a15      	ldr	r2, [pc, #84]	; (80092d4 <TIM_OC3_SetConfig+0xf0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d113      	bne.n	80092aa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	621a      	str	r2, [r3, #32]
}
 80092c4:	bf00      	nop
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bc80      	pop	{r7}
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40012c00 	.word	0x40012c00
 80092d4:	40013400 	.word	0x40013400

080092d8 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009312:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800931a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	4313      	orrs	r3, r2
 8009326:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800932e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	031b      	lsls	r3, r3, #12
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a11      	ldr	r2, [pc, #68]	; (8009384 <TIM_OC4_SetConfig+0xac>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC4_SetConfig+0x74>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a10      	ldr	r2, [pc, #64]	; (8009388 <TIM_OC4_SetConfig+0xb0>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d109      	bne.n	8009360 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009352:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	019b      	lsls	r3, r3, #6
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	621a      	str	r2, [r3, #32]
}
 800937a:	bf00      	nop
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	bc80      	pop	{r7}
 8009382:	4770      	bx	lr
 8009384:	40012c00 	.word	0x40012c00
 8009388:	40013400 	.word	0x40013400

0800938c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	f023 0201 	bic.w	r2, r3, #1
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	011b      	lsls	r3, r3, #4
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f023 030a 	bic.w	r3, r3, #10
 80093d0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr

080093f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	f023 0210 	bic.w	r2, r3, #16
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	031b      	lsls	r3, r3, #12
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	621a      	str	r2, [r3, #32]
}
 800944c:	bf00      	nop
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr

08009456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009472:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8009474:	887b      	ldrh	r3, [r7, #2]
 8009476:	f043 0307 	orr.w	r3, r3, #7
 800947a:	b29b      	uxth	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	609a      	str	r2, [r3, #8]
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	bc80      	pop	{r7}
 8009492:	4770      	bx	lr

08009494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	021a      	lsls	r2, r3, #8
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4313      	orrs	r3, r2
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	609a      	str	r2, [r3, #8]
}
 80094cc:	bf00      	nop
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bc80      	pop	{r7}
 80094d4:	4770      	bx	lr

080094d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b087      	sub	sp, #28
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80094e6:	2201      	movs	r2, #1
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a1a      	ldr	r2, [r3, #32]
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	43db      	mvns	r3, r3
 80094f8:	401a      	ands	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a1a      	ldr	r2, [r3, #32]
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	fa01 f303 	lsl.w	r3, r1, r3
 800950a:	431a      	orrs	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	621a      	str	r2, [r3, #32]
}
 8009510:	bf00      	nop
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr

0800951a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009532:	2302      	movs	r3, #2
 8009534:	e044      	b.n	80095c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4313      	orrs	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	4313      	orrs	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bc80      	pop	{r7}
 80095c8:	4770      	bx	lr

080095ca <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095de:	2302      	movs	r3, #2
 80095e0:	e032      	b.n	8009648 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2202      	movs	r2, #2
 80095ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009600:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6859      	ldr	r1, [r3, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	430a      	orrs	r2, r1
 8009612:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009622:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6899      	ldr	r1, [r3, #8]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr

08009652 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	bc80      	pop	{r7}
 8009674:	4770      	bx	lr

08009676 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e03f      	b.n	8009708 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	d106      	bne.n	80096a2 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fc fc7f 	bl	8005fa0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	; 0x24
 80096a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096b8:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fbe6 	bl	8009e8c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691a      	ldr	r2, [r3, #16]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	695a      	ldr	r2, [r3, #20]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096de:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096ee:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2220      	movs	r2, #32
 80096fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af02      	add	r7, sp, #8
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	4613      	mov	r3, r2
 800971e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b20      	cmp	r3, #32
 800972e:	f040 8083 	bne.w	8009838 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <HAL_UART_Transmit+0x2e>
 8009738:	88fb      	ldrh	r3, [r7, #6]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e07b      	b.n	800983a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009748:	2b01      	cmp	r3, #1
 800974a:	d101      	bne.n	8009750 <HAL_UART_Transmit+0x40>
 800974c:	2302      	movs	r3, #2
 800974e:	e074      	b.n	800983a <HAL_UART_Transmit+0x12a>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2221      	movs	r2, #33	; 0x21
 8009762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009766:	f7fd f81b 	bl	80067a0 <HAL_GetTick>
 800976a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	88fa      	ldrh	r2, [r7, #6]
 8009776:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8009778:	e042      	b.n	8009800 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009790:	d122      	bne.n	80097d8 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2200      	movs	r2, #0
 800979a:	2180      	movs	r1, #128	; 0x80
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 fa0c 	bl	8009bba <UART_WaitOnFlagUntilTimeout>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e046      	b.n	800983a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097be:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d103      	bne.n	80097d0 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	3302      	adds	r3, #2
 80097cc:	60bb      	str	r3, [r7, #8]
 80097ce:	e017      	b.n	8009800 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	3301      	adds	r3, #1
 80097d4:	60bb      	str	r3, [r7, #8]
 80097d6:	e013      	b.n	8009800 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2200      	movs	r2, #0
 80097e0:	2180      	movs	r1, #128	; 0x80
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 f9e9 	bl	8009bba <UART_WaitOnFlagUntilTimeout>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d001      	beq.n	80097f2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e023      	b.n	800983a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	60ba      	str	r2, [r7, #8]
 80097f8:	781a      	ldrb	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1b7      	bne.n	800977a <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2200      	movs	r2, #0
 8009812:	2140      	movs	r1, #64	; 0x40
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f9d0 	bl	8009bba <UART_WaitOnFlagUntilTimeout>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e00a      	b.n	800983a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	e000      	b.n	800983a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009838:	2302      	movs	r3, #2
  }
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b088      	sub	sp, #32
 8009846:	af02      	add	r7, sp, #8
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	603b      	str	r3, [r7, #0]
 800984e:	4613      	mov	r3, r2
 8009850:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b20      	cmp	r3, #32
 8009860:	f040 8090 	bne.w	8009984 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <HAL_UART_Receive+0x2e>
 800986a:	88fb      	ldrh	r3, [r7, #6]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e088      	b.n	8009986 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800987a:	2b01      	cmp	r3, #1
 800987c:	d101      	bne.n	8009882 <HAL_UART_Receive+0x40>
 800987e:	2302      	movs	r3, #2
 8009880:	e081      	b.n	8009986 <HAL_UART_Receive+0x144>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2222      	movs	r2, #34	; 0x22
 8009894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009898:	f7fc ff82 	bl	80067a0 <HAL_GetTick>
 800989c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	88fa      	ldrh	r2, [r7, #6]
 80098a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	88fa      	ldrh	r2, [r7, #6]
 80098a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80098aa:	e05c      	b.n	8009966 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c2:	d12b      	bne.n	800991c <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2200      	movs	r2, #0
 80098cc:	2120      	movs	r1, #32
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 f973 	bl	8009bba <UART_WaitOnFlagUntilTimeout>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e053      	b.n	8009986 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10c      	bne.n	8009904 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3302      	adds	r3, #2
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	e030      	b.n	8009966 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	b29b      	uxth	r3, r3
 800990c:	b2db      	uxtb	r3, r3
 800990e:	b29a      	uxth	r2, r3
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3301      	adds	r3, #1
 8009918:	60bb      	str	r3, [r7, #8]
 800991a:	e024      	b.n	8009966 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2200      	movs	r2, #0
 8009924:	2120      	movs	r1, #32
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 f947 	bl	8009bba <UART_WaitOnFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e027      	b.n	8009986 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d108      	bne.n	8009950 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6859      	ldr	r1, [r3, #4]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	60ba      	str	r2, [r7, #8]
 800994a:	b2ca      	uxtb	r2, r1
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	e00a      	b.n	8009966 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	1c59      	adds	r1, r3, #1
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800996a:	b29b      	uxth	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d19d      	bne.n	80098ac <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2220      	movs	r2, #32
 8009974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	e000      	b.n	8009986 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009984:	2302      	movs	r3, #2
  }
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10d      	bne.n	80099e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d008      	beq.n	80099e2 <HAL_UART_IRQHandler+0x52>
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f9d5 	bl	8009d8a <UART_Receive_IT>
      return;
 80099e0:	e0cb      	b.n	8009b7a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80ab 	beq.w	8009b40 <HAL_UART_IRQHandler+0x1b0>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f003 0301 	and.w	r3, r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <HAL_UART_IRQHandler+0x70>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 80a0 	beq.w	8009b40 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <HAL_UART_IRQHandler+0x90>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a18:	f043 0201 	orr.w	r2, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <HAL_UART_IRQHandler+0xb0>
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d005      	beq.n	8009a40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a38:	f043 0202 	orr.w	r2, r3, #2
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <HAL_UART_IRQHandler+0xd0>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a58:	f043 0204 	orr.w	r2, r3, #4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	f003 0308 	and.w	r3, r3, #8
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <HAL_UART_IRQHandler+0xf0>
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a78:	f043 0208 	orr.w	r2, r3, #8
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d077      	beq.n	8009b78 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d007      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x112>
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f974 	bl	8009d8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	bf14      	ite	ne
 8009ab0:	2301      	movne	r3, #1
 8009ab2:	2300      	moveq	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abc:	f003 0308 	and.w	r3, r3, #8
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <HAL_UART_IRQHandler+0x13a>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d031      	beq.n	8009b2e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f8bf 	bl	8009c4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d023      	beq.n	8009b26 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695a      	ldr	r2, [r3, #20]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d013      	beq.n	8009b1e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afa:	4a21      	ldr	r2, [pc, #132]	; (8009b80 <HAL_UART_IRQHandler+0x1f0>)
 8009afc:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fd fa52 	bl	8006fac <HAL_DMA_Abort_IT>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d016      	beq.n	8009b3c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1c:	e00e      	b.n	8009b3c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f842 	bl	8009ba8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b24:	e00a      	b.n	8009b3c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f83e 	bl	8009ba8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b2c:	e006      	b.n	8009b3c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f83a 	bl	8009ba8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009b3a:	e01d      	b.n	8009b78 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b3c:	bf00      	nop
    return;
 8009b3e:	e01b      	b.n	8009b78 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d008      	beq.n	8009b5c <HAL_UART_IRQHandler+0x1cc>
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f8ab 	bl	8009cb0 <UART_Transmit_IT>
    return;
 8009b5a:	e00e      	b.n	8009b7a <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <HAL_UART_IRQHandler+0x1ea>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d004      	beq.n	8009b7a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8f2 	bl	8009d5a <UART_EndTransmit_IT>
    return;
 8009b76:	e000      	b.n	8009b7a <HAL_UART_IRQHandler+0x1ea>
    return;
 8009b78:	bf00      	nop
  }
}
 8009b7a:	3720      	adds	r7, #32
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	08009c89 	.word	0x08009c89

08009b84 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bc80      	pop	{r7}
 8009b94:	4770      	bx	lr

08009b96 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bc80      	pop	{r7}
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr

08009bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	603b      	str	r3, [r7, #0]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8009bca:	e02c      	b.n	8009c26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd2:	d028      	beq.n	8009c26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d007      	beq.n	8009bea <UART_WaitOnFlagUntilTimeout+0x30>
 8009bda:	f7fc fde1 	bl	80067a0 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d21d      	bcs.n	8009c26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009bf8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695a      	ldr	r2, [r3, #20]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0201 	bic.w	r2, r2, #1
 8009c08:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e00f      	b.n	8009c46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	bf0c      	ite	eq
 8009c36:	2301      	moveq	r3, #1
 8009c38:	2300      	movne	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d0c3      	beq.n	8009bcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009c64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	695a      	ldr	r2, [r3, #20]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0201 	bic.w	r2, r2, #1
 8009c74:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009c7e:	bf00      	nop
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bc80      	pop	{r7}
 8009c86:	4770      	bx	lr

08009c88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7ff ff80 	bl	8009ba8 <HAL_UART_ErrorCallback>
}
 8009ca8:	bf00      	nop
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b21      	cmp	r3, #33	; 0x21
 8009cc2:	d144      	bne.n	8009d4e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ccc:	d11a      	bne.n	8009d04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ce2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d105      	bne.n	8009cf8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	1c9a      	adds	r2, r3, #2
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	621a      	str	r2, [r3, #32]
 8009cf6:	e00e      	b.n	8009d16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	621a      	str	r2, [r3, #32]
 8009d02:	e008      	b.n	8009d16 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	1c59      	adds	r1, r3, #1
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	6211      	str	r1, [r2, #32]
 8009d0e:	781a      	ldrb	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	4619      	mov	r1, r3
 8009d24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10f      	bne.n	8009d4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e000      	b.n	8009d50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009d4e:	2302      	movs	r3, #2
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bc80      	pop	{r7}
 8009d58:	4770      	bx	lr

08009d5a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d70:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff ff02 	bl	8009b84 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b22      	cmp	r3, #34	; 0x22
 8009d9c:	d171      	bne.n	8009e82 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da6:	d123      	bne.n	8009df0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10e      	bne.n	8009dd4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dcc:	1c9a      	adds	r2, r3, #2
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8009dd2:	e029      	b.n	8009e28 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	629a      	str	r2, [r3, #40]	; 0x28
 8009dee:	e01b      	b.n	8009e28 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6858      	ldr	r0, [r3, #4]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	1c59      	adds	r1, r3, #1
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6291      	str	r1, [r2, #40]	; 0x28
 8009e08:	b2c2      	uxtb	r2, r0
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e00c      	b.n	8009e28 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1a:	1c58      	adds	r0, r3, #1
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	6288      	str	r0, [r1, #40]	; 0x28
 8009e20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e24:	b2d2      	uxtb	r2, r2
 8009e26:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	4619      	mov	r1, r3
 8009e36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d120      	bne.n	8009e7e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0220 	bic.w	r2, r2, #32
 8009e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e5a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0201 	bic.w	r2, r2, #1
 8009e6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff fe8e 	bl	8009b96 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e002      	b.n	8009e84 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e000      	b.n	8009e84 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009e82:	2302      	movs	r3, #2
  }
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e8c:	b5b0      	push	{r4, r5, r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009ece:	f023 030c 	bic.w	r3, r3, #12
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6812      	ldr	r2, [r2, #0]
 8009ed6:	68f9      	ldr	r1, [r7, #12]
 8009ed8:	430b      	orrs	r3, r1
 8009eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	699a      	ldr	r2, [r3, #24]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a6f      	ldr	r2, [pc, #444]	; (800a0b4 <UART_SetConfig+0x228>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d16b      	bne.n	8009fd4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009efc:	f7fe f99e 	bl	800823c <HAL_RCC_GetPCLK2Freq>
 8009f00:	4602      	mov	r2, r0
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	009a      	lsls	r2, r3, #2
 8009f0a:	441a      	add	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f16:	4a68      	ldr	r2, [pc, #416]	; (800a0b8 <UART_SetConfig+0x22c>)
 8009f18:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1c:	095b      	lsrs	r3, r3, #5
 8009f1e:	011c      	lsls	r4, r3, #4
 8009f20:	f7fe f98c 	bl	800823c <HAL_RCC_GetPCLK2Freq>
 8009f24:	4602      	mov	r2, r0
 8009f26:	4613      	mov	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	009a      	lsls	r2, r3, #2
 8009f2e:	441a      	add	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	fbb2 f5f3 	udiv	r5, r2, r3
 8009f3a:	f7fe f97f 	bl	800823c <HAL_RCC_GetPCLK2Freq>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	009a      	lsls	r2, r3, #2
 8009f48:	441a      	add	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f54:	4a58      	ldr	r2, [pc, #352]	; (800a0b8 <UART_SetConfig+0x22c>)
 8009f56:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5a:	095b      	lsrs	r3, r3, #5
 8009f5c:	2264      	movs	r2, #100	; 0x64
 8009f5e:	fb02 f303 	mul.w	r3, r2, r3
 8009f62:	1aeb      	subs	r3, r5, r3
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	3332      	adds	r3, #50	; 0x32
 8009f68:	4a53      	ldr	r2, [pc, #332]	; (800a0b8 <UART_SetConfig+0x22c>)
 8009f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f6e:	095b      	lsrs	r3, r3, #5
 8009f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f74:	441c      	add	r4, r3
 8009f76:	f7fe f961 	bl	800823c <HAL_RCC_GetPCLK2Freq>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009a      	lsls	r2, r3, #2
 8009f84:	441a      	add	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8009f90:	f7fe f954 	bl	800823c <HAL_RCC_GetPCLK2Freq>
 8009f94:	4602      	mov	r2, r0
 8009f96:	4613      	mov	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009a      	lsls	r2, r3, #2
 8009f9e:	441a      	add	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009faa:	4a43      	ldr	r2, [pc, #268]	; (800a0b8 <UART_SetConfig+0x22c>)
 8009fac:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb0:	095b      	lsrs	r3, r3, #5
 8009fb2:	2264      	movs	r2, #100	; 0x64
 8009fb4:	fb02 f303 	mul.w	r3, r2, r3
 8009fb8:	1aeb      	subs	r3, r5, r3
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	3332      	adds	r3, #50	; 0x32
 8009fbe:	4a3e      	ldr	r2, [pc, #248]	; (800a0b8 <UART_SetConfig+0x22c>)
 8009fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc4:	095b      	lsrs	r3, r3, #5
 8009fc6:	f003 020f 	and.w	r2, r3, #15
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4422      	add	r2, r4
 8009fd0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009fd2:	e06a      	b.n	800a0aa <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009fd4:	f7fe f91e 	bl	8008214 <HAL_RCC_GetPCLK1Freq>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009a      	lsls	r2, r3, #2
 8009fe2:	441a      	add	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fee:	4a32      	ldr	r2, [pc, #200]	; (800a0b8 <UART_SetConfig+0x22c>)
 8009ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	011c      	lsls	r4, r3, #4
 8009ff8:	f7fe f90c 	bl	8008214 <HAL_RCC_GetPCLK1Freq>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009a      	lsls	r2, r3, #2
 800a006:	441a      	add	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	fbb2 f5f3 	udiv	r5, r2, r3
 800a012:	f7fe f8ff 	bl	8008214 <HAL_RCC_GetPCLK1Freq>
 800a016:	4602      	mov	r2, r0
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009a      	lsls	r2, r3, #2
 800a020:	441a      	add	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	fbb2 f3f3 	udiv	r3, r2, r3
 800a02c:	4a22      	ldr	r2, [pc, #136]	; (800a0b8 <UART_SetConfig+0x22c>)
 800a02e:	fba2 2303 	umull	r2, r3, r2, r3
 800a032:	095b      	lsrs	r3, r3, #5
 800a034:	2264      	movs	r2, #100	; 0x64
 800a036:	fb02 f303 	mul.w	r3, r2, r3
 800a03a:	1aeb      	subs	r3, r5, r3
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	3332      	adds	r3, #50	; 0x32
 800a040:	4a1d      	ldr	r2, [pc, #116]	; (800a0b8 <UART_SetConfig+0x22c>)
 800a042:	fba2 2303 	umull	r2, r3, r2, r3
 800a046:	095b      	lsrs	r3, r3, #5
 800a048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a04c:	441c      	add	r4, r3
 800a04e:	f7fe f8e1 	bl	8008214 <HAL_RCC_GetPCLK1Freq>
 800a052:	4602      	mov	r2, r0
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009a      	lsls	r2, r3, #2
 800a05c:	441a      	add	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	fbb2 f5f3 	udiv	r5, r2, r3
 800a068:	f7fe f8d4 	bl	8008214 <HAL_RCC_GetPCLK1Freq>
 800a06c:	4602      	mov	r2, r0
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009a      	lsls	r2, r3, #2
 800a076:	441a      	add	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a082:	4a0d      	ldr	r2, [pc, #52]	; (800a0b8 <UART_SetConfig+0x22c>)
 800a084:	fba2 2303 	umull	r2, r3, r2, r3
 800a088:	095b      	lsrs	r3, r3, #5
 800a08a:	2264      	movs	r2, #100	; 0x64
 800a08c:	fb02 f303 	mul.w	r3, r2, r3
 800a090:	1aeb      	subs	r3, r5, r3
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	3332      	adds	r3, #50	; 0x32
 800a096:	4a08      	ldr	r2, [pc, #32]	; (800a0b8 <UART_SetConfig+0x22c>)
 800a098:	fba2 2303 	umull	r2, r3, r2, r3
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	f003 020f 	and.w	r2, r3, #15
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4422      	add	r2, r4
 800a0a8:	609a      	str	r2, [r3, #8]
}
 800a0aa:	bf00      	nop
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	40013800 	.word	0x40013800
 800a0b8:	51eb851f 	.word	0x51eb851f

0800a0bc <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	f023 0101 	bic.w	r1, r3, #1
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	2b08      	cmp	r3, #8
 800a0e4:	d132      	bne.n	800a14c <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0f0:	4b31      	ldr	r3, [pc, #196]	; (800a1b8 <FSMC_NORSRAM_Init+0xfc>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	6851      	ldr	r1, [r2, #4]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	6892      	ldr	r2, [r2, #8]
 800a0fc:	4311      	orrs	r1, r2
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	68d2      	ldr	r2, [r2, #12]
 800a102:	4311      	orrs	r1, r2
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	6912      	ldr	r2, [r2, #16]
 800a108:	4311      	orrs	r1, r2
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	6952      	ldr	r2, [r2, #20]
 800a10e:	4311      	orrs	r1, r2
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	6992      	ldr	r2, [r2, #24]
 800a114:	4311      	orrs	r1, r2
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	69d2      	ldr	r2, [r2, #28]
 800a11a:	4311      	orrs	r1, r2
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	6a12      	ldr	r2, [r2, #32]
 800a120:	4311      	orrs	r1, r2
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a126:	4311      	orrs	r1, r2
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a12c:	4311      	orrs	r1, r2
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a132:	4311      	orrs	r1, r2
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a138:	430a      	orrs	r2, r1
 800a13a:	4313      	orrs	r3, r2
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a14a:	e02f      	b.n	800a1ac <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a156:	4b18      	ldr	r3, [pc, #96]	; (800a1b8 <FSMC_NORSRAM_Init+0xfc>)
 800a158:	4013      	ands	r3, r2
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	6851      	ldr	r1, [r2, #4]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	6892      	ldr	r2, [r2, #8]
 800a162:	4311      	orrs	r1, r2
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	68d2      	ldr	r2, [r2, #12]
 800a168:	4311      	orrs	r1, r2
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	6912      	ldr	r2, [r2, #16]
 800a16e:	4311      	orrs	r1, r2
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	6952      	ldr	r2, [r2, #20]
 800a174:	4311      	orrs	r1, r2
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	6992      	ldr	r2, [r2, #24]
 800a17a:	4311      	orrs	r1, r2
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	69d2      	ldr	r2, [r2, #28]
 800a180:	4311      	orrs	r1, r2
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	6a12      	ldr	r2, [r2, #32]
 800a186:	4311      	orrs	r1, r2
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a18c:	4311      	orrs	r1, r2
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a192:	4311      	orrs	r1, r2
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a198:	4311      	orrs	r1, r2
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a19e:	4311      	orrs	r1, r2
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	4319      	orrs	r1, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bc80      	pop	{r7}
 800a1b6:	4770      	bx	lr
 800a1b8:	fff70081 	.word	0xfff70081

0800a1bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	021b      	lsls	r3, r3, #8
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	041b      	lsls	r3, r3, #16
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	051b      	lsls	r3, r3, #20
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	3b02      	subs	r3, #2
 800a202:	061b      	lsls	r3, r3, #24
 800a204:	431a      	orrs	r2, r3
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	3201      	adds	r2, #1
 800a210:	4319      	orrs	r1, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr

0800a224 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a238:	d11d      	bne.n	800a276 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a244:	4013      	ands	r3, r2
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	6811      	ldr	r1, [r2, #0]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	6852      	ldr	r2, [r2, #4]
 800a24e:	0112      	lsls	r2, r2, #4
 800a250:	4311      	orrs	r1, r2
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	6892      	ldr	r2, [r2, #8]
 800a256:	0212      	lsls	r2, r2, #8
 800a258:	4311      	orrs	r1, r2
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	6992      	ldr	r2, [r2, #24]
 800a25e:	4311      	orrs	r1, r2
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	68d2      	ldr	r2, [r2, #12]
 800a264:	0412      	lsls	r2, r2, #16
 800a266:	430a      	orrs	r2, r1
 800a268:	ea43 0102 	orr.w	r1, r3, r2
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a274:	e005      	b.n	800a282 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a27e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	bc80      	pop	{r7}
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	cff00000 	.word	0xcff00000

0800a294 <__cxa_pure_virtual>:
 800a294:	b508      	push	{r3, lr}
 800a296:	f000 f80d 	bl	800a2b4 <_ZSt9terminatev>

0800a29a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a29a:	b508      	push	{r3, lr}
 800a29c:	4780      	blx	r0
 800a29e:	f000 f80e 	bl	800a2be <abort>
	...

0800a2a4 <_ZSt13get_terminatev>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	; (800a2b0 <_ZSt13get_terminatev+0xc>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	f3bf 8f5b 	dmb	ish
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	20000040 	.word	0x20000040

0800a2b4 <_ZSt9terminatev>:
 800a2b4:	b508      	push	{r3, lr}
 800a2b6:	f7ff fff5 	bl	800a2a4 <_ZSt13get_terminatev>
 800a2ba:	f7ff ffee 	bl	800a29a <_ZN10__cxxabiv111__terminateEPFvvE>

0800a2be <abort>:
 800a2be:	2006      	movs	r0, #6
 800a2c0:	b508      	push	{r3, lr}
 800a2c2:	f000 f85d 	bl	800a380 <raise>
 800a2c6:	2001      	movs	r0, #1
 800a2c8:	f7fb fa43 	bl	8005752 <_exit>

0800a2cc <__errno>:
 800a2cc:	4b01      	ldr	r3, [pc, #4]	; (800a2d4 <__errno+0x8>)
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000044 	.word	0x20000044

0800a2d8 <__libc_init_array>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	2600      	movs	r6, #0
 800a2dc:	4d0c      	ldr	r5, [pc, #48]	; (800a310 <__libc_init_array+0x38>)
 800a2de:	4c0d      	ldr	r4, [pc, #52]	; (800a314 <__libc_init_array+0x3c>)
 800a2e0:	1b64      	subs	r4, r4, r5
 800a2e2:	10a4      	asrs	r4, r4, #2
 800a2e4:	42a6      	cmp	r6, r4
 800a2e6:	d109      	bne.n	800a2fc <__libc_init_array+0x24>
 800a2e8:	f000 fcf8 	bl	800acdc <_init>
 800a2ec:	2600      	movs	r6, #0
 800a2ee:	4d0a      	ldr	r5, [pc, #40]	; (800a318 <__libc_init_array+0x40>)
 800a2f0:	4c0a      	ldr	r4, [pc, #40]	; (800a31c <__libc_init_array+0x44>)
 800a2f2:	1b64      	subs	r4, r4, r5
 800a2f4:	10a4      	asrs	r4, r4, #2
 800a2f6:	42a6      	cmp	r6, r4
 800a2f8:	d105      	bne.n	800a306 <__libc_init_array+0x2e>
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a300:	4798      	blx	r3
 800a302:	3601      	adds	r6, #1
 800a304:	e7ee      	b.n	800a2e4 <__libc_init_array+0xc>
 800a306:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30a:	4798      	blx	r3
 800a30c:	3601      	adds	r6, #1
 800a30e:	e7f2      	b.n	800a2f6 <__libc_init_array+0x1e>
 800a310:	0800b494 	.word	0x0800b494
 800a314:	0800b494 	.word	0x0800b494
 800a318:	0800b494 	.word	0x0800b494
 800a31c:	0800b4a0 	.word	0x0800b4a0

0800a320 <memset>:
 800a320:	4603      	mov	r3, r0
 800a322:	4402      	add	r2, r0
 800a324:	4293      	cmp	r3, r2
 800a326:	d100      	bne.n	800a32a <memset+0xa>
 800a328:	4770      	bx	lr
 800a32a:	f803 1b01 	strb.w	r1, [r3], #1
 800a32e:	e7f9      	b.n	800a324 <memset+0x4>

0800a330 <_raise_r>:
 800a330:	291f      	cmp	r1, #31
 800a332:	b538      	push	{r3, r4, r5, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	460d      	mov	r5, r1
 800a338:	d904      	bls.n	800a344 <_raise_r+0x14>
 800a33a:	2316      	movs	r3, #22
 800a33c:	6003      	str	r3, [r0, #0]
 800a33e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a346:	b112      	cbz	r2, 800a34e <_raise_r+0x1e>
 800a348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a34c:	b94b      	cbnz	r3, 800a362 <_raise_r+0x32>
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 f830 	bl	800a3b4 <_getpid_r>
 800a354:	462a      	mov	r2, r5
 800a356:	4601      	mov	r1, r0
 800a358:	4620      	mov	r0, r4
 800a35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35e:	f000 b817 	b.w	800a390 <_kill_r>
 800a362:	2b01      	cmp	r3, #1
 800a364:	d00a      	beq.n	800a37c <_raise_r+0x4c>
 800a366:	1c59      	adds	r1, r3, #1
 800a368:	d103      	bne.n	800a372 <_raise_r+0x42>
 800a36a:	2316      	movs	r3, #22
 800a36c:	6003      	str	r3, [r0, #0]
 800a36e:	2001      	movs	r0, #1
 800a370:	e7e7      	b.n	800a342 <_raise_r+0x12>
 800a372:	2400      	movs	r4, #0
 800a374:	4628      	mov	r0, r5
 800a376:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a37a:	4798      	blx	r3
 800a37c:	2000      	movs	r0, #0
 800a37e:	e7e0      	b.n	800a342 <_raise_r+0x12>

0800a380 <raise>:
 800a380:	4b02      	ldr	r3, [pc, #8]	; (800a38c <raise+0xc>)
 800a382:	4601      	mov	r1, r0
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	f7ff bfd3 	b.w	800a330 <_raise_r>
 800a38a:	bf00      	nop
 800a38c:	20000044 	.word	0x20000044

0800a390 <_kill_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	2300      	movs	r3, #0
 800a394:	4d06      	ldr	r5, [pc, #24]	; (800a3b0 <_kill_r+0x20>)
 800a396:	4604      	mov	r4, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	4611      	mov	r1, r2
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	f7fb f9c8 	bl	8005732 <_kill>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	d102      	bne.n	800a3ac <_kill_r+0x1c>
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	b103      	cbz	r3, 800a3ac <_kill_r+0x1c>
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	bd38      	pop	{r3, r4, r5, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20003254 	.word	0x20003254

0800a3b4 <_getpid_r>:
 800a3b4:	f7fb b9b6 	b.w	8005724 <_getpid>

0800a3b8 <siprintf>:
 800a3b8:	b40e      	push	{r1, r2, r3}
 800a3ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3be:	b500      	push	{lr}
 800a3c0:	b09c      	sub	sp, #112	; 0x70
 800a3c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a3c4:	9002      	str	r0, [sp, #8]
 800a3c6:	9006      	str	r0, [sp, #24]
 800a3c8:	9107      	str	r1, [sp, #28]
 800a3ca:	9104      	str	r1, [sp, #16]
 800a3cc:	4808      	ldr	r0, [pc, #32]	; (800a3f0 <siprintf+0x38>)
 800a3ce:	4909      	ldr	r1, [pc, #36]	; (800a3f4 <siprintf+0x3c>)
 800a3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d4:	9105      	str	r1, [sp, #20]
 800a3d6:	6800      	ldr	r0, [r0, #0]
 800a3d8:	a902      	add	r1, sp, #8
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	f000 f914 	bl	800a608 <_svfiprintf_r>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	9b02      	ldr	r3, [sp, #8]
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	b01c      	add	sp, #112	; 0x70
 800a3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3ec:	b003      	add	sp, #12
 800a3ee:	4770      	bx	lr
 800a3f0:	20000044 	.word	0x20000044
 800a3f4:	ffff0208 	.word	0xffff0208

0800a3f8 <strcat>:
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	7814      	ldrb	r4, [r2, #0]
 800a3fe:	4613      	mov	r3, r2
 800a400:	3201      	adds	r2, #1
 800a402:	2c00      	cmp	r4, #0
 800a404:	d1fa      	bne.n	800a3fc <strcat+0x4>
 800a406:	3b01      	subs	r3, #1
 800a408:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a40c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a410:	2a00      	cmp	r2, #0
 800a412:	d1f9      	bne.n	800a408 <strcat+0x10>
 800a414:	bd10      	pop	{r4, pc}

0800a416 <strcpy>:
 800a416:	4603      	mov	r3, r0
 800a418:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a41c:	f803 2b01 	strb.w	r2, [r3], #1
 800a420:	2a00      	cmp	r2, #0
 800a422:	d1f9      	bne.n	800a418 <strcpy+0x2>
 800a424:	4770      	bx	lr
	...

0800a428 <sbrk_aligned>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	4e0e      	ldr	r6, [pc, #56]	; (800a464 <sbrk_aligned+0x3c>)
 800a42c:	460c      	mov	r4, r1
 800a42e:	6831      	ldr	r1, [r6, #0]
 800a430:	4605      	mov	r5, r0
 800a432:	b911      	cbnz	r1, 800a43a <sbrk_aligned+0x12>
 800a434:	f000 fb7e 	bl	800ab34 <_sbrk_r>
 800a438:	6030      	str	r0, [r6, #0]
 800a43a:	4621      	mov	r1, r4
 800a43c:	4628      	mov	r0, r5
 800a43e:	f000 fb79 	bl	800ab34 <_sbrk_r>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d00a      	beq.n	800a45c <sbrk_aligned+0x34>
 800a446:	1cc4      	adds	r4, r0, #3
 800a448:	f024 0403 	bic.w	r4, r4, #3
 800a44c:	42a0      	cmp	r0, r4
 800a44e:	d007      	beq.n	800a460 <sbrk_aligned+0x38>
 800a450:	1a21      	subs	r1, r4, r0
 800a452:	4628      	mov	r0, r5
 800a454:	f000 fb6e 	bl	800ab34 <_sbrk_r>
 800a458:	3001      	adds	r0, #1
 800a45a:	d101      	bne.n	800a460 <sbrk_aligned+0x38>
 800a45c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a460:	4620      	mov	r0, r4
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	20003250 	.word	0x20003250

0800a468 <_malloc_r>:
 800a468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46c:	1ccd      	adds	r5, r1, #3
 800a46e:	f025 0503 	bic.w	r5, r5, #3
 800a472:	3508      	adds	r5, #8
 800a474:	2d0c      	cmp	r5, #12
 800a476:	bf38      	it	cc
 800a478:	250c      	movcc	r5, #12
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	4607      	mov	r7, r0
 800a47e:	db01      	blt.n	800a484 <_malloc_r+0x1c>
 800a480:	42a9      	cmp	r1, r5
 800a482:	d905      	bls.n	800a490 <_malloc_r+0x28>
 800a484:	230c      	movs	r3, #12
 800a486:	2600      	movs	r6, #0
 800a488:	603b      	str	r3, [r7, #0]
 800a48a:	4630      	mov	r0, r6
 800a48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a490:	4e2e      	ldr	r6, [pc, #184]	; (800a54c <_malloc_r+0xe4>)
 800a492:	f000 fb95 	bl	800abc0 <__malloc_lock>
 800a496:	6833      	ldr	r3, [r6, #0]
 800a498:	461c      	mov	r4, r3
 800a49a:	bb34      	cbnz	r4, 800a4ea <_malloc_r+0x82>
 800a49c:	4629      	mov	r1, r5
 800a49e:	4638      	mov	r0, r7
 800a4a0:	f7ff ffc2 	bl	800a428 <sbrk_aligned>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	d14d      	bne.n	800a546 <_malloc_r+0xde>
 800a4aa:	6834      	ldr	r4, [r6, #0]
 800a4ac:	4626      	mov	r6, r4
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	d140      	bne.n	800a534 <_malloc_r+0xcc>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	eb04 0803 	add.w	r8, r4, r3
 800a4bc:	f000 fb3a 	bl	800ab34 <_sbrk_r>
 800a4c0:	4580      	cmp	r8, r0
 800a4c2:	d13a      	bne.n	800a53a <_malloc_r+0xd2>
 800a4c4:	6821      	ldr	r1, [r4, #0]
 800a4c6:	3503      	adds	r5, #3
 800a4c8:	1a6d      	subs	r5, r5, r1
 800a4ca:	f025 0503 	bic.w	r5, r5, #3
 800a4ce:	3508      	adds	r5, #8
 800a4d0:	2d0c      	cmp	r5, #12
 800a4d2:	bf38      	it	cc
 800a4d4:	250c      	movcc	r5, #12
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	4629      	mov	r1, r5
 800a4da:	f7ff ffa5 	bl	800a428 <sbrk_aligned>
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d02b      	beq.n	800a53a <_malloc_r+0xd2>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	442b      	add	r3, r5
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	e00e      	b.n	800a508 <_malloc_r+0xa0>
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	1b52      	subs	r2, r2, r5
 800a4ee:	d41e      	bmi.n	800a52e <_malloc_r+0xc6>
 800a4f0:	2a0b      	cmp	r2, #11
 800a4f2:	d916      	bls.n	800a522 <_malloc_r+0xba>
 800a4f4:	1961      	adds	r1, r4, r5
 800a4f6:	42a3      	cmp	r3, r4
 800a4f8:	6025      	str	r5, [r4, #0]
 800a4fa:	bf18      	it	ne
 800a4fc:	6059      	strne	r1, [r3, #4]
 800a4fe:	6863      	ldr	r3, [r4, #4]
 800a500:	bf08      	it	eq
 800a502:	6031      	streq	r1, [r6, #0]
 800a504:	5162      	str	r2, [r4, r5]
 800a506:	604b      	str	r3, [r1, #4]
 800a508:	4638      	mov	r0, r7
 800a50a:	f104 060b 	add.w	r6, r4, #11
 800a50e:	f000 fb5d 	bl	800abcc <__malloc_unlock>
 800a512:	f026 0607 	bic.w	r6, r6, #7
 800a516:	1d23      	adds	r3, r4, #4
 800a518:	1af2      	subs	r2, r6, r3
 800a51a:	d0b6      	beq.n	800a48a <_malloc_r+0x22>
 800a51c:	1b9b      	subs	r3, r3, r6
 800a51e:	50a3      	str	r3, [r4, r2]
 800a520:	e7b3      	b.n	800a48a <_malloc_r+0x22>
 800a522:	6862      	ldr	r2, [r4, #4]
 800a524:	42a3      	cmp	r3, r4
 800a526:	bf0c      	ite	eq
 800a528:	6032      	streq	r2, [r6, #0]
 800a52a:	605a      	strne	r2, [r3, #4]
 800a52c:	e7ec      	b.n	800a508 <_malloc_r+0xa0>
 800a52e:	4623      	mov	r3, r4
 800a530:	6864      	ldr	r4, [r4, #4]
 800a532:	e7b2      	b.n	800a49a <_malloc_r+0x32>
 800a534:	4634      	mov	r4, r6
 800a536:	6876      	ldr	r6, [r6, #4]
 800a538:	e7b9      	b.n	800a4ae <_malloc_r+0x46>
 800a53a:	230c      	movs	r3, #12
 800a53c:	4638      	mov	r0, r7
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	f000 fb44 	bl	800abcc <__malloc_unlock>
 800a544:	e7a1      	b.n	800a48a <_malloc_r+0x22>
 800a546:	6025      	str	r5, [r4, #0]
 800a548:	e7de      	b.n	800a508 <_malloc_r+0xa0>
 800a54a:	bf00      	nop
 800a54c:	2000324c 	.word	0x2000324c

0800a550 <__ssputs_r>:
 800a550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	688e      	ldr	r6, [r1, #8]
 800a556:	4682      	mov	sl, r0
 800a558:	429e      	cmp	r6, r3
 800a55a:	460c      	mov	r4, r1
 800a55c:	4690      	mov	r8, r2
 800a55e:	461f      	mov	r7, r3
 800a560:	d838      	bhi.n	800a5d4 <__ssputs_r+0x84>
 800a562:	898a      	ldrh	r2, [r1, #12]
 800a564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a568:	d032      	beq.n	800a5d0 <__ssputs_r+0x80>
 800a56a:	6825      	ldr	r5, [r4, #0]
 800a56c:	6909      	ldr	r1, [r1, #16]
 800a56e:	3301      	adds	r3, #1
 800a570:	eba5 0901 	sub.w	r9, r5, r1
 800a574:	6965      	ldr	r5, [r4, #20]
 800a576:	444b      	add	r3, r9
 800a578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a57c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a580:	106d      	asrs	r5, r5, #1
 800a582:	429d      	cmp	r5, r3
 800a584:	bf38      	it	cc
 800a586:	461d      	movcc	r5, r3
 800a588:	0553      	lsls	r3, r2, #21
 800a58a:	d531      	bpl.n	800a5f0 <__ssputs_r+0xa0>
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7ff ff6b 	bl	800a468 <_malloc_r>
 800a592:	4606      	mov	r6, r0
 800a594:	b950      	cbnz	r0, 800a5ac <__ssputs_r+0x5c>
 800a596:	230c      	movs	r3, #12
 800a598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a59c:	f8ca 3000 	str.w	r3, [sl]
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ac:	464a      	mov	r2, r9
 800a5ae:	6921      	ldr	r1, [r4, #16]
 800a5b0:	f000 fade 	bl	800ab70 <memcpy>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	6126      	str	r6, [r4, #16]
 800a5c2:	444e      	add	r6, r9
 800a5c4:	6026      	str	r6, [r4, #0]
 800a5c6:	463e      	mov	r6, r7
 800a5c8:	6165      	str	r5, [r4, #20]
 800a5ca:	eba5 0509 	sub.w	r5, r5, r9
 800a5ce:	60a5      	str	r5, [r4, #8]
 800a5d0:	42be      	cmp	r6, r7
 800a5d2:	d900      	bls.n	800a5d6 <__ssputs_r+0x86>
 800a5d4:	463e      	mov	r6, r7
 800a5d6:	4632      	mov	r2, r6
 800a5d8:	4641      	mov	r1, r8
 800a5da:	6820      	ldr	r0, [r4, #0]
 800a5dc:	f000 fad6 	bl	800ab8c <memmove>
 800a5e0:	68a3      	ldr	r3, [r4, #8]
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	1b9b      	subs	r3, r3, r6
 800a5e6:	60a3      	str	r3, [r4, #8]
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	4433      	add	r3, r6
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	e7db      	b.n	800a5a8 <__ssputs_r+0x58>
 800a5f0:	462a      	mov	r2, r5
 800a5f2:	f000 fb39 	bl	800ac68 <_realloc_r>
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1e1      	bne.n	800a5c0 <__ssputs_r+0x70>
 800a5fc:	4650      	mov	r0, sl
 800a5fe:	6921      	ldr	r1, [r4, #16]
 800a600:	f000 faea 	bl	800abd8 <_free_r>
 800a604:	e7c7      	b.n	800a596 <__ssputs_r+0x46>
	...

0800a608 <_svfiprintf_r>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	4698      	mov	r8, r3
 800a60e:	898b      	ldrh	r3, [r1, #12]
 800a610:	4607      	mov	r7, r0
 800a612:	061b      	lsls	r3, r3, #24
 800a614:	460d      	mov	r5, r1
 800a616:	4614      	mov	r4, r2
 800a618:	b09d      	sub	sp, #116	; 0x74
 800a61a:	d50e      	bpl.n	800a63a <_svfiprintf_r+0x32>
 800a61c:	690b      	ldr	r3, [r1, #16]
 800a61e:	b963      	cbnz	r3, 800a63a <_svfiprintf_r+0x32>
 800a620:	2140      	movs	r1, #64	; 0x40
 800a622:	f7ff ff21 	bl	800a468 <_malloc_r>
 800a626:	6028      	str	r0, [r5, #0]
 800a628:	6128      	str	r0, [r5, #16]
 800a62a:	b920      	cbnz	r0, 800a636 <_svfiprintf_r+0x2e>
 800a62c:	230c      	movs	r3, #12
 800a62e:	603b      	str	r3, [r7, #0]
 800a630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a634:	e0d1      	b.n	800a7da <_svfiprintf_r+0x1d2>
 800a636:	2340      	movs	r3, #64	; 0x40
 800a638:	616b      	str	r3, [r5, #20]
 800a63a:	2300      	movs	r3, #0
 800a63c:	9309      	str	r3, [sp, #36]	; 0x24
 800a63e:	2320      	movs	r3, #32
 800a640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a644:	2330      	movs	r3, #48	; 0x30
 800a646:	f04f 0901 	mov.w	r9, #1
 800a64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a7f4 <_svfiprintf_r+0x1ec>
 800a652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a656:	4623      	mov	r3, r4
 800a658:	469a      	mov	sl, r3
 800a65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a65e:	b10a      	cbz	r2, 800a664 <_svfiprintf_r+0x5c>
 800a660:	2a25      	cmp	r2, #37	; 0x25
 800a662:	d1f9      	bne.n	800a658 <_svfiprintf_r+0x50>
 800a664:	ebba 0b04 	subs.w	fp, sl, r4
 800a668:	d00b      	beq.n	800a682 <_svfiprintf_r+0x7a>
 800a66a:	465b      	mov	r3, fp
 800a66c:	4622      	mov	r2, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff ff6d 	bl	800a550 <__ssputs_r>
 800a676:	3001      	adds	r0, #1
 800a678:	f000 80aa 	beq.w	800a7d0 <_svfiprintf_r+0x1c8>
 800a67c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a67e:	445a      	add	r2, fp
 800a680:	9209      	str	r2, [sp, #36]	; 0x24
 800a682:	f89a 3000 	ldrb.w	r3, [sl]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80a2 	beq.w	800a7d0 <_svfiprintf_r+0x1c8>
 800a68c:	2300      	movs	r3, #0
 800a68e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a696:	f10a 0a01 	add.w	sl, sl, #1
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	9307      	str	r3, [sp, #28]
 800a69e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6a4:	4654      	mov	r4, sl
 800a6a6:	2205      	movs	r2, #5
 800a6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ac:	4851      	ldr	r0, [pc, #324]	; (800a7f4 <_svfiprintf_r+0x1ec>)
 800a6ae:	f000 fa51 	bl	800ab54 <memchr>
 800a6b2:	9a04      	ldr	r2, [sp, #16]
 800a6b4:	b9d8      	cbnz	r0, 800a6ee <_svfiprintf_r+0xe6>
 800a6b6:	06d0      	lsls	r0, r2, #27
 800a6b8:	bf44      	itt	mi
 800a6ba:	2320      	movmi	r3, #32
 800a6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c0:	0711      	lsls	r1, r2, #28
 800a6c2:	bf44      	itt	mi
 800a6c4:	232b      	movmi	r3, #43	; 0x2b
 800a6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d0:	d015      	beq.n	800a6fe <_svfiprintf_r+0xf6>
 800a6d2:	4654      	mov	r4, sl
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f04f 0c0a 	mov.w	ip, #10
 800a6da:	9a07      	ldr	r2, [sp, #28]
 800a6dc:	4621      	mov	r1, r4
 800a6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e2:	3b30      	subs	r3, #48	; 0x30
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d94e      	bls.n	800a786 <_svfiprintf_r+0x17e>
 800a6e8:	b1b0      	cbz	r0, 800a718 <_svfiprintf_r+0x110>
 800a6ea:	9207      	str	r2, [sp, #28]
 800a6ec:	e014      	b.n	800a718 <_svfiprintf_r+0x110>
 800a6ee:	eba0 0308 	sub.w	r3, r0, r8
 800a6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	46a2      	mov	sl, r4
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	e7d2      	b.n	800a6a4 <_svfiprintf_r+0x9c>
 800a6fe:	9b03      	ldr	r3, [sp, #12]
 800a700:	1d19      	adds	r1, r3, #4
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	9103      	str	r1, [sp, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	bfbb      	ittet	lt
 800a70a:	425b      	neglt	r3, r3
 800a70c:	f042 0202 	orrlt.w	r2, r2, #2
 800a710:	9307      	strge	r3, [sp, #28]
 800a712:	9307      	strlt	r3, [sp, #28]
 800a714:	bfb8      	it	lt
 800a716:	9204      	strlt	r2, [sp, #16]
 800a718:	7823      	ldrb	r3, [r4, #0]
 800a71a:	2b2e      	cmp	r3, #46	; 0x2e
 800a71c:	d10c      	bne.n	800a738 <_svfiprintf_r+0x130>
 800a71e:	7863      	ldrb	r3, [r4, #1]
 800a720:	2b2a      	cmp	r3, #42	; 0x2a
 800a722:	d135      	bne.n	800a790 <_svfiprintf_r+0x188>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	3402      	adds	r4, #2
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	9203      	str	r2, [sp, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bfb8      	it	lt
 800a732:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a736:	9305      	str	r3, [sp, #20]
 800a738:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a7f8 <_svfiprintf_r+0x1f0>
 800a73c:	2203      	movs	r2, #3
 800a73e:	4650      	mov	r0, sl
 800a740:	7821      	ldrb	r1, [r4, #0]
 800a742:	f000 fa07 	bl	800ab54 <memchr>
 800a746:	b140      	cbz	r0, 800a75a <_svfiprintf_r+0x152>
 800a748:	2340      	movs	r3, #64	; 0x40
 800a74a:	eba0 000a 	sub.w	r0, r0, sl
 800a74e:	fa03 f000 	lsl.w	r0, r3, r0
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	3401      	adds	r4, #1
 800a756:	4303      	orrs	r3, r0
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75e:	2206      	movs	r2, #6
 800a760:	4826      	ldr	r0, [pc, #152]	; (800a7fc <_svfiprintf_r+0x1f4>)
 800a762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a766:	f000 f9f5 	bl	800ab54 <memchr>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d038      	beq.n	800a7e0 <_svfiprintf_r+0x1d8>
 800a76e:	4b24      	ldr	r3, [pc, #144]	; (800a800 <_svfiprintf_r+0x1f8>)
 800a770:	bb1b      	cbnz	r3, 800a7ba <_svfiprintf_r+0x1b2>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	3307      	adds	r3, #7
 800a776:	f023 0307 	bic.w	r3, r3, #7
 800a77a:	3308      	adds	r3, #8
 800a77c:	9303      	str	r3, [sp, #12]
 800a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a780:	4433      	add	r3, r6
 800a782:	9309      	str	r3, [sp, #36]	; 0x24
 800a784:	e767      	b.n	800a656 <_svfiprintf_r+0x4e>
 800a786:	460c      	mov	r4, r1
 800a788:	2001      	movs	r0, #1
 800a78a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a78e:	e7a5      	b.n	800a6dc <_svfiprintf_r+0xd4>
 800a790:	2300      	movs	r3, #0
 800a792:	f04f 0c0a 	mov.w	ip, #10
 800a796:	4619      	mov	r1, r3
 800a798:	3401      	adds	r4, #1
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	4620      	mov	r0, r4
 800a79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a2:	3a30      	subs	r2, #48	; 0x30
 800a7a4:	2a09      	cmp	r2, #9
 800a7a6:	d903      	bls.n	800a7b0 <_svfiprintf_r+0x1a8>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0c5      	beq.n	800a738 <_svfiprintf_r+0x130>
 800a7ac:	9105      	str	r1, [sp, #20]
 800a7ae:	e7c3      	b.n	800a738 <_svfiprintf_r+0x130>
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b8:	e7f0      	b.n	800a79c <_svfiprintf_r+0x194>
 800a7ba:	ab03      	add	r3, sp, #12
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	462a      	mov	r2, r5
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	4b10      	ldr	r3, [pc, #64]	; (800a804 <_svfiprintf_r+0x1fc>)
 800a7c4:	a904      	add	r1, sp, #16
 800a7c6:	f3af 8000 	nop.w
 800a7ca:	1c42      	adds	r2, r0, #1
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	d1d6      	bne.n	800a77e <_svfiprintf_r+0x176>
 800a7d0:	89ab      	ldrh	r3, [r5, #12]
 800a7d2:	065b      	lsls	r3, r3, #25
 800a7d4:	f53f af2c 	bmi.w	800a630 <_svfiprintf_r+0x28>
 800a7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7da:	b01d      	add	sp, #116	; 0x74
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e0:	ab03      	add	r3, sp, #12
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <_svfiprintf_r+0x1fc>)
 800a7ea:	a904      	add	r1, sp, #16
 800a7ec:	f000 f87c 	bl	800a8e8 <_printf_i>
 800a7f0:	e7eb      	b.n	800a7ca <_svfiprintf_r+0x1c2>
 800a7f2:	bf00      	nop
 800a7f4:	0800b458 	.word	0x0800b458
 800a7f8:	0800b45e 	.word	0x0800b45e
 800a7fc:	0800b462 	.word	0x0800b462
 800a800:	00000000 	.word	0x00000000
 800a804:	0800a551 	.word	0x0800a551

0800a808 <_printf_common>:
 800a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	4616      	mov	r6, r2
 800a80e:	4699      	mov	r9, r3
 800a810:	688a      	ldr	r2, [r1, #8]
 800a812:	690b      	ldr	r3, [r1, #16]
 800a814:	4607      	mov	r7, r0
 800a816:	4293      	cmp	r3, r2
 800a818:	bfb8      	it	lt
 800a81a:	4613      	movlt	r3, r2
 800a81c:	6033      	str	r3, [r6, #0]
 800a81e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a822:	460c      	mov	r4, r1
 800a824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a828:	b10a      	cbz	r2, 800a82e <_printf_common+0x26>
 800a82a:	3301      	adds	r3, #1
 800a82c:	6033      	str	r3, [r6, #0]
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	0699      	lsls	r1, r3, #26
 800a832:	bf42      	ittt	mi
 800a834:	6833      	ldrmi	r3, [r6, #0]
 800a836:	3302      	addmi	r3, #2
 800a838:	6033      	strmi	r3, [r6, #0]
 800a83a:	6825      	ldr	r5, [r4, #0]
 800a83c:	f015 0506 	ands.w	r5, r5, #6
 800a840:	d106      	bne.n	800a850 <_printf_common+0x48>
 800a842:	f104 0a19 	add.w	sl, r4, #25
 800a846:	68e3      	ldr	r3, [r4, #12]
 800a848:	6832      	ldr	r2, [r6, #0]
 800a84a:	1a9b      	subs	r3, r3, r2
 800a84c:	42ab      	cmp	r3, r5
 800a84e:	dc28      	bgt.n	800a8a2 <_printf_common+0x9a>
 800a850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a854:	1e13      	subs	r3, r2, #0
 800a856:	6822      	ldr	r2, [r4, #0]
 800a858:	bf18      	it	ne
 800a85a:	2301      	movne	r3, #1
 800a85c:	0692      	lsls	r2, r2, #26
 800a85e:	d42d      	bmi.n	800a8bc <_printf_common+0xb4>
 800a860:	4649      	mov	r1, r9
 800a862:	4638      	mov	r0, r7
 800a864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a868:	47c0      	blx	r8
 800a86a:	3001      	adds	r0, #1
 800a86c:	d020      	beq.n	800a8b0 <_printf_common+0xa8>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	68e5      	ldr	r5, [r4, #12]
 800a872:	f003 0306 	and.w	r3, r3, #6
 800a876:	2b04      	cmp	r3, #4
 800a878:	bf18      	it	ne
 800a87a:	2500      	movne	r5, #0
 800a87c:	6832      	ldr	r2, [r6, #0]
 800a87e:	f04f 0600 	mov.w	r6, #0
 800a882:	68a3      	ldr	r3, [r4, #8]
 800a884:	bf08      	it	eq
 800a886:	1aad      	subeq	r5, r5, r2
 800a888:	6922      	ldr	r2, [r4, #16]
 800a88a:	bf08      	it	eq
 800a88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a890:	4293      	cmp	r3, r2
 800a892:	bfc4      	itt	gt
 800a894:	1a9b      	subgt	r3, r3, r2
 800a896:	18ed      	addgt	r5, r5, r3
 800a898:	341a      	adds	r4, #26
 800a89a:	42b5      	cmp	r5, r6
 800a89c:	d11a      	bne.n	800a8d4 <_printf_common+0xcc>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e008      	b.n	800a8b4 <_printf_common+0xac>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	47c0      	blx	r8
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d103      	bne.n	800a8b8 <_printf_common+0xb0>
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	e7c4      	b.n	800a846 <_printf_common+0x3e>
 800a8bc:	2030      	movs	r0, #48	; 0x30
 800a8be:	18e1      	adds	r1, r4, r3
 800a8c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8ca:	4422      	add	r2, r4
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8d2:	e7c5      	b.n	800a860 <_printf_common+0x58>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	4649      	mov	r1, r9
 800a8da:	4638      	mov	r0, r7
 800a8dc:	47c0      	blx	r8
 800a8de:	3001      	adds	r0, #1
 800a8e0:	d0e6      	beq.n	800a8b0 <_printf_common+0xa8>
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	e7d9      	b.n	800a89a <_printf_common+0x92>
	...

0800a8e8 <_printf_i>:
 800a8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	7e0f      	ldrb	r7, [r1, #24]
 800a8ee:	4691      	mov	r9, r2
 800a8f0:	2f78      	cmp	r7, #120	; 0x78
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	469a      	mov	sl, r3
 800a8f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8fe:	d807      	bhi.n	800a910 <_printf_i+0x28>
 800a900:	2f62      	cmp	r7, #98	; 0x62
 800a902:	d80a      	bhi.n	800a91a <_printf_i+0x32>
 800a904:	2f00      	cmp	r7, #0
 800a906:	f000 80d9 	beq.w	800aabc <_printf_i+0x1d4>
 800a90a:	2f58      	cmp	r7, #88	; 0x58
 800a90c:	f000 80a4 	beq.w	800aa58 <_printf_i+0x170>
 800a910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a918:	e03a      	b.n	800a990 <_printf_i+0xa8>
 800a91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a91e:	2b15      	cmp	r3, #21
 800a920:	d8f6      	bhi.n	800a910 <_printf_i+0x28>
 800a922:	a101      	add	r1, pc, #4	; (adr r1, 800a928 <_printf_i+0x40>)
 800a924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a928:	0800a981 	.word	0x0800a981
 800a92c:	0800a995 	.word	0x0800a995
 800a930:	0800a911 	.word	0x0800a911
 800a934:	0800a911 	.word	0x0800a911
 800a938:	0800a911 	.word	0x0800a911
 800a93c:	0800a911 	.word	0x0800a911
 800a940:	0800a995 	.word	0x0800a995
 800a944:	0800a911 	.word	0x0800a911
 800a948:	0800a911 	.word	0x0800a911
 800a94c:	0800a911 	.word	0x0800a911
 800a950:	0800a911 	.word	0x0800a911
 800a954:	0800aaa3 	.word	0x0800aaa3
 800a958:	0800a9c5 	.word	0x0800a9c5
 800a95c:	0800aa85 	.word	0x0800aa85
 800a960:	0800a911 	.word	0x0800a911
 800a964:	0800a911 	.word	0x0800a911
 800a968:	0800aac5 	.word	0x0800aac5
 800a96c:	0800a911 	.word	0x0800a911
 800a970:	0800a9c5 	.word	0x0800a9c5
 800a974:	0800a911 	.word	0x0800a911
 800a978:	0800a911 	.word	0x0800a911
 800a97c:	0800aa8d 	.word	0x0800aa8d
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	1d1a      	adds	r2, r3, #4
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	602a      	str	r2, [r5, #0]
 800a988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a990:	2301      	movs	r3, #1
 800a992:	e0a4      	b.n	800aade <_printf_i+0x1f6>
 800a994:	6820      	ldr	r0, [r4, #0]
 800a996:	6829      	ldr	r1, [r5, #0]
 800a998:	0606      	lsls	r6, r0, #24
 800a99a:	f101 0304 	add.w	r3, r1, #4
 800a99e:	d50a      	bpl.n	800a9b6 <_printf_i+0xce>
 800a9a0:	680e      	ldr	r6, [r1, #0]
 800a9a2:	602b      	str	r3, [r5, #0]
 800a9a4:	2e00      	cmp	r6, #0
 800a9a6:	da03      	bge.n	800a9b0 <_printf_i+0xc8>
 800a9a8:	232d      	movs	r3, #45	; 0x2d
 800a9aa:	4276      	negs	r6, r6
 800a9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b0:	230a      	movs	r3, #10
 800a9b2:	485e      	ldr	r0, [pc, #376]	; (800ab2c <_printf_i+0x244>)
 800a9b4:	e019      	b.n	800a9ea <_printf_i+0x102>
 800a9b6:	680e      	ldr	r6, [r1, #0]
 800a9b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	bf18      	it	ne
 800a9c0:	b236      	sxthne	r6, r6
 800a9c2:	e7ef      	b.n	800a9a4 <_printf_i+0xbc>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	6820      	ldr	r0, [r4, #0]
 800a9c8:	1d19      	adds	r1, r3, #4
 800a9ca:	6029      	str	r1, [r5, #0]
 800a9cc:	0601      	lsls	r1, r0, #24
 800a9ce:	d501      	bpl.n	800a9d4 <_printf_i+0xec>
 800a9d0:	681e      	ldr	r6, [r3, #0]
 800a9d2:	e002      	b.n	800a9da <_printf_i+0xf2>
 800a9d4:	0646      	lsls	r6, r0, #25
 800a9d6:	d5fb      	bpl.n	800a9d0 <_printf_i+0xe8>
 800a9d8:	881e      	ldrh	r6, [r3, #0]
 800a9da:	2f6f      	cmp	r7, #111	; 0x6f
 800a9dc:	bf0c      	ite	eq
 800a9de:	2308      	moveq	r3, #8
 800a9e0:	230a      	movne	r3, #10
 800a9e2:	4852      	ldr	r0, [pc, #328]	; (800ab2c <_printf_i+0x244>)
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ea:	6865      	ldr	r5, [r4, #4]
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	bfa8      	it	ge
 800a9f0:	6821      	ldrge	r1, [r4, #0]
 800a9f2:	60a5      	str	r5, [r4, #8]
 800a9f4:	bfa4      	itt	ge
 800a9f6:	f021 0104 	bicge.w	r1, r1, #4
 800a9fa:	6021      	strge	r1, [r4, #0]
 800a9fc:	b90e      	cbnz	r6, 800aa02 <_printf_i+0x11a>
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	d04d      	beq.n	800aa9e <_printf_i+0x1b6>
 800aa02:	4615      	mov	r5, r2
 800aa04:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa08:	fb03 6711 	mls	r7, r3, r1, r6
 800aa0c:	5dc7      	ldrb	r7, [r0, r7]
 800aa0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa12:	4637      	mov	r7, r6
 800aa14:	42bb      	cmp	r3, r7
 800aa16:	460e      	mov	r6, r1
 800aa18:	d9f4      	bls.n	800aa04 <_printf_i+0x11c>
 800aa1a:	2b08      	cmp	r3, #8
 800aa1c:	d10b      	bne.n	800aa36 <_printf_i+0x14e>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	07de      	lsls	r6, r3, #31
 800aa22:	d508      	bpl.n	800aa36 <_printf_i+0x14e>
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	6861      	ldr	r1, [r4, #4]
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	bfde      	ittt	le
 800aa2c:	2330      	movle	r3, #48	; 0x30
 800aa2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa32:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa36:	1b52      	subs	r2, r2, r5
 800aa38:	6122      	str	r2, [r4, #16]
 800aa3a:	464b      	mov	r3, r9
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4640      	mov	r0, r8
 800aa40:	f8cd a000 	str.w	sl, [sp]
 800aa44:	aa03      	add	r2, sp, #12
 800aa46:	f7ff fedf 	bl	800a808 <_printf_common>
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d14c      	bne.n	800aae8 <_printf_i+0x200>
 800aa4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa52:	b004      	add	sp, #16
 800aa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa58:	4834      	ldr	r0, [pc, #208]	; (800ab2c <_printf_i+0x244>)
 800aa5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa5e:	6829      	ldr	r1, [r5, #0]
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa66:	6029      	str	r1, [r5, #0]
 800aa68:	061d      	lsls	r5, r3, #24
 800aa6a:	d514      	bpl.n	800aa96 <_printf_i+0x1ae>
 800aa6c:	07df      	lsls	r7, r3, #31
 800aa6e:	bf44      	itt	mi
 800aa70:	f043 0320 	orrmi.w	r3, r3, #32
 800aa74:	6023      	strmi	r3, [r4, #0]
 800aa76:	b91e      	cbnz	r6, 800aa80 <_printf_i+0x198>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	f023 0320 	bic.w	r3, r3, #32
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	2310      	movs	r3, #16
 800aa82:	e7af      	b.n	800a9e4 <_printf_i+0xfc>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	f043 0320 	orr.w	r3, r3, #32
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	2378      	movs	r3, #120	; 0x78
 800aa8e:	4828      	ldr	r0, [pc, #160]	; (800ab30 <_printf_i+0x248>)
 800aa90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa94:	e7e3      	b.n	800aa5e <_printf_i+0x176>
 800aa96:	0659      	lsls	r1, r3, #25
 800aa98:	bf48      	it	mi
 800aa9a:	b2b6      	uxthmi	r6, r6
 800aa9c:	e7e6      	b.n	800aa6c <_printf_i+0x184>
 800aa9e:	4615      	mov	r5, r2
 800aaa0:	e7bb      	b.n	800aa1a <_printf_i+0x132>
 800aaa2:	682b      	ldr	r3, [r5, #0]
 800aaa4:	6826      	ldr	r6, [r4, #0]
 800aaa6:	1d18      	adds	r0, r3, #4
 800aaa8:	6961      	ldr	r1, [r4, #20]
 800aaaa:	6028      	str	r0, [r5, #0]
 800aaac:	0635      	lsls	r5, r6, #24
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	d501      	bpl.n	800aab6 <_printf_i+0x1ce>
 800aab2:	6019      	str	r1, [r3, #0]
 800aab4:	e002      	b.n	800aabc <_printf_i+0x1d4>
 800aab6:	0670      	lsls	r0, r6, #25
 800aab8:	d5fb      	bpl.n	800aab2 <_printf_i+0x1ca>
 800aaba:	8019      	strh	r1, [r3, #0]
 800aabc:	2300      	movs	r3, #0
 800aabe:	4615      	mov	r5, r2
 800aac0:	6123      	str	r3, [r4, #16]
 800aac2:	e7ba      	b.n	800aa3a <_printf_i+0x152>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	2100      	movs	r1, #0
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	602a      	str	r2, [r5, #0]
 800aacc:	681d      	ldr	r5, [r3, #0]
 800aace:	6862      	ldr	r2, [r4, #4]
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f83f 	bl	800ab54 <memchr>
 800aad6:	b108      	cbz	r0, 800aadc <_printf_i+0x1f4>
 800aad8:	1b40      	subs	r0, r0, r5
 800aada:	6060      	str	r0, [r4, #4]
 800aadc:	6863      	ldr	r3, [r4, #4]
 800aade:	6123      	str	r3, [r4, #16]
 800aae0:	2300      	movs	r3, #0
 800aae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae6:	e7a8      	b.n	800aa3a <_printf_i+0x152>
 800aae8:	462a      	mov	r2, r5
 800aaea:	4649      	mov	r1, r9
 800aaec:	4640      	mov	r0, r8
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	47d0      	blx	sl
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d0ab      	beq.n	800aa4e <_printf_i+0x166>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	079b      	lsls	r3, r3, #30
 800aafa:	d413      	bmi.n	800ab24 <_printf_i+0x23c>
 800aafc:	68e0      	ldr	r0, [r4, #12]
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	4298      	cmp	r0, r3
 800ab02:	bfb8      	it	lt
 800ab04:	4618      	movlt	r0, r3
 800ab06:	e7a4      	b.n	800aa52 <_printf_i+0x16a>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	4632      	mov	r2, r6
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	4640      	mov	r0, r8
 800ab10:	47d0      	blx	sl
 800ab12:	3001      	adds	r0, #1
 800ab14:	d09b      	beq.n	800aa4e <_printf_i+0x166>
 800ab16:	3501      	adds	r5, #1
 800ab18:	68e3      	ldr	r3, [r4, #12]
 800ab1a:	9903      	ldr	r1, [sp, #12]
 800ab1c:	1a5b      	subs	r3, r3, r1
 800ab1e:	42ab      	cmp	r3, r5
 800ab20:	dcf2      	bgt.n	800ab08 <_printf_i+0x220>
 800ab22:	e7eb      	b.n	800aafc <_printf_i+0x214>
 800ab24:	2500      	movs	r5, #0
 800ab26:	f104 0619 	add.w	r6, r4, #25
 800ab2a:	e7f5      	b.n	800ab18 <_printf_i+0x230>
 800ab2c:	0800b469 	.word	0x0800b469
 800ab30:	0800b47a 	.word	0x0800b47a

0800ab34 <_sbrk_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	2300      	movs	r3, #0
 800ab38:	4d05      	ldr	r5, [pc, #20]	; (800ab50 <_sbrk_r+0x1c>)
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7fa fe12 	bl	8005768 <_sbrk>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_sbrk_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_sbrk_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20003254 	.word	0x20003254

0800ab54 <memchr>:
 800ab54:	4603      	mov	r3, r0
 800ab56:	b510      	push	{r4, lr}
 800ab58:	b2c9      	uxtb	r1, r1
 800ab5a:	4402      	add	r2, r0
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	d101      	bne.n	800ab66 <memchr+0x12>
 800ab62:	2000      	movs	r0, #0
 800ab64:	e003      	b.n	800ab6e <memchr+0x1a>
 800ab66:	7804      	ldrb	r4, [r0, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	428c      	cmp	r4, r1
 800ab6c:	d1f6      	bne.n	800ab5c <memchr+0x8>
 800ab6e:	bd10      	pop	{r4, pc}

0800ab70 <memcpy>:
 800ab70:	440a      	add	r2, r1
 800ab72:	4291      	cmp	r1, r2
 800ab74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab78:	d100      	bne.n	800ab7c <memcpy+0xc>
 800ab7a:	4770      	bx	lr
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab82:	4291      	cmp	r1, r2
 800ab84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab88:	d1f9      	bne.n	800ab7e <memcpy+0xe>
 800ab8a:	bd10      	pop	{r4, pc}

0800ab8c <memmove>:
 800ab8c:	4288      	cmp	r0, r1
 800ab8e:	b510      	push	{r4, lr}
 800ab90:	eb01 0402 	add.w	r4, r1, r2
 800ab94:	d902      	bls.n	800ab9c <memmove+0x10>
 800ab96:	4284      	cmp	r4, r0
 800ab98:	4623      	mov	r3, r4
 800ab9a:	d807      	bhi.n	800abac <memmove+0x20>
 800ab9c:	1e43      	subs	r3, r0, #1
 800ab9e:	42a1      	cmp	r1, r4
 800aba0:	d008      	beq.n	800abb4 <memmove+0x28>
 800aba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abaa:	e7f8      	b.n	800ab9e <memmove+0x12>
 800abac:	4601      	mov	r1, r0
 800abae:	4402      	add	r2, r0
 800abb0:	428a      	cmp	r2, r1
 800abb2:	d100      	bne.n	800abb6 <memmove+0x2a>
 800abb4:	bd10      	pop	{r4, pc}
 800abb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abbe:	e7f7      	b.n	800abb0 <memmove+0x24>

0800abc0 <__malloc_lock>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__malloc_lock+0x8>)
 800abc2:	f000 b880 	b.w	800acc6 <__retarget_lock_acquire_recursive>
 800abc6:	bf00      	nop
 800abc8:	20003258 	.word	0x20003258

0800abcc <__malloc_unlock>:
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <__malloc_unlock+0x8>)
 800abce:	f000 b87b 	b.w	800acc8 <__retarget_lock_release_recursive>
 800abd2:	bf00      	nop
 800abd4:	20003258 	.word	0x20003258

0800abd8 <_free_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4605      	mov	r5, r0
 800abdc:	2900      	cmp	r1, #0
 800abde:	d040      	beq.n	800ac62 <_free_r+0x8a>
 800abe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe4:	1f0c      	subs	r4, r1, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfb8      	it	lt
 800abea:	18e4      	addlt	r4, r4, r3
 800abec:	f7ff ffe8 	bl	800abc0 <__malloc_lock>
 800abf0:	4a1c      	ldr	r2, [pc, #112]	; (800ac64 <_free_r+0x8c>)
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	b933      	cbnz	r3, 800ac04 <_free_r+0x2c>
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	6014      	str	r4, [r2, #0]
 800abfa:	4628      	mov	r0, r5
 800abfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac00:	f7ff bfe4 	b.w	800abcc <__malloc_unlock>
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	d908      	bls.n	800ac1a <_free_r+0x42>
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	1821      	adds	r1, r4, r0
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	bf01      	itttt	eq
 800ac10:	6819      	ldreq	r1, [r3, #0]
 800ac12:	685b      	ldreq	r3, [r3, #4]
 800ac14:	1809      	addeq	r1, r1, r0
 800ac16:	6021      	streq	r1, [r4, #0]
 800ac18:	e7ed      	b.n	800abf6 <_free_r+0x1e>
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b10b      	cbz	r3, 800ac24 <_free_r+0x4c>
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d9fa      	bls.n	800ac1a <_free_r+0x42>
 800ac24:	6811      	ldr	r1, [r2, #0]
 800ac26:	1850      	adds	r0, r2, r1
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	d10b      	bne.n	800ac44 <_free_r+0x6c>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	4401      	add	r1, r0
 800ac30:	1850      	adds	r0, r2, r1
 800ac32:	4283      	cmp	r3, r0
 800ac34:	6011      	str	r1, [r2, #0]
 800ac36:	d1e0      	bne.n	800abfa <_free_r+0x22>
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	4401      	add	r1, r0
 800ac3e:	6011      	str	r1, [r2, #0]
 800ac40:	6053      	str	r3, [r2, #4]
 800ac42:	e7da      	b.n	800abfa <_free_r+0x22>
 800ac44:	d902      	bls.n	800ac4c <_free_r+0x74>
 800ac46:	230c      	movs	r3, #12
 800ac48:	602b      	str	r3, [r5, #0]
 800ac4a:	e7d6      	b.n	800abfa <_free_r+0x22>
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	1821      	adds	r1, r4, r0
 800ac50:	428b      	cmp	r3, r1
 800ac52:	bf01      	itttt	eq
 800ac54:	6819      	ldreq	r1, [r3, #0]
 800ac56:	685b      	ldreq	r3, [r3, #4]
 800ac58:	1809      	addeq	r1, r1, r0
 800ac5a:	6021      	streq	r1, [r4, #0]
 800ac5c:	6063      	str	r3, [r4, #4]
 800ac5e:	6054      	str	r4, [r2, #4]
 800ac60:	e7cb      	b.n	800abfa <_free_r+0x22>
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	2000324c 	.word	0x2000324c

0800ac68 <_realloc_r>:
 800ac68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	4614      	mov	r4, r2
 800ac70:	460e      	mov	r6, r1
 800ac72:	b921      	cbnz	r1, 800ac7e <_realloc_r+0x16>
 800ac74:	4611      	mov	r1, r2
 800ac76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7a:	f7ff bbf5 	b.w	800a468 <_malloc_r>
 800ac7e:	b92a      	cbnz	r2, 800ac8c <_realloc_r+0x24>
 800ac80:	f7ff ffaa 	bl	800abd8 <_free_r>
 800ac84:	4625      	mov	r5, r4
 800ac86:	4628      	mov	r0, r5
 800ac88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac8c:	f000 f81d 	bl	800acca <_malloc_usable_size_r>
 800ac90:	4284      	cmp	r4, r0
 800ac92:	4607      	mov	r7, r0
 800ac94:	d802      	bhi.n	800ac9c <_realloc_r+0x34>
 800ac96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac9a:	d812      	bhi.n	800acc2 <_realloc_r+0x5a>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4640      	mov	r0, r8
 800aca0:	f7ff fbe2 	bl	800a468 <_malloc_r>
 800aca4:	4605      	mov	r5, r0
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d0ed      	beq.n	800ac86 <_realloc_r+0x1e>
 800acaa:	42bc      	cmp	r4, r7
 800acac:	4622      	mov	r2, r4
 800acae:	4631      	mov	r1, r6
 800acb0:	bf28      	it	cs
 800acb2:	463a      	movcs	r2, r7
 800acb4:	f7ff ff5c 	bl	800ab70 <memcpy>
 800acb8:	4631      	mov	r1, r6
 800acba:	4640      	mov	r0, r8
 800acbc:	f7ff ff8c 	bl	800abd8 <_free_r>
 800acc0:	e7e1      	b.n	800ac86 <_realloc_r+0x1e>
 800acc2:	4635      	mov	r5, r6
 800acc4:	e7df      	b.n	800ac86 <_realloc_r+0x1e>

0800acc6 <__retarget_lock_acquire_recursive>:
 800acc6:	4770      	bx	lr

0800acc8 <__retarget_lock_release_recursive>:
 800acc8:	4770      	bx	lr

0800acca <_malloc_usable_size_r>:
 800acca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acce:	1f18      	subs	r0, r3, #4
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	bfbc      	itt	lt
 800acd4:	580b      	ldrlt	r3, [r1, r0]
 800acd6:	18c0      	addlt	r0, r0, r3
 800acd8:	4770      	bx	lr
	...

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
