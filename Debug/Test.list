
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800a588  0800a588  0001a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad3c  0800ad3c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad3c  0800ad3c  0001ad3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad44  0800ad44  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800ad44  0800ad44  0001ad44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad50  0800ad50  0001ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800ad54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000964  200000a8  0800adfc  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  0800adfc  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab32  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e6a  00000000  00000000  0003ac03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  00040fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dea9  00000000  00000000  00042358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cefb  00000000  00000000  00060201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008daa1  00000000  00000000  0007d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ab9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f4  00000000  00000000  0010abf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a8 	.word	0x200000a8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a570 	.word	0x0800a570

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000ac 	.word	0x200000ac
 8000224:	0800a570 	.word	0x0800a570

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_fmul>:
 8000d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d98:	bf1e      	ittt	ne
 8000d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9e:	ea92 0f0c 	teqne	r2, ip
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d06f      	beq.n	8000e88 <__aeabi_fmul+0xf8>
 8000da8:	441a      	add	r2, r3
 8000daa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dae:	0240      	lsls	r0, r0, #9
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000db6:	d01e      	beq.n	8000df6 <__aeabi_fmul+0x66>
 8000db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd0:	bf3e      	ittt	cc
 8000dd2:	0049      	lslcc	r1, r1, #1
 8000dd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd8:	005b      	lslcc	r3, r3, #1
 8000dda:	ea40 0001 	orr.w	r0, r0, r1
 8000dde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de2:	2afd      	cmp	r2, #253	; 0xfd
 8000de4:	d81d      	bhi.n	8000e22 <__aeabi_fmul+0x92>
 8000de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dee:	bf08      	it	eq
 8000df0:	f020 0001 	biceq.w	r0, r0, #1
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfe:	bf08      	it	eq
 8000e00:	0249      	lsleq	r1, r1, #9
 8000e02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0a:	3a7f      	subs	r2, #127	; 0x7f
 8000e0c:	bfc2      	ittt	gt
 8000e0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e16:	4770      	bxgt	lr
 8000e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	3a01      	subs	r2, #1
 8000e22:	dc5d      	bgt.n	8000ee0 <__aeabi_fmul+0x150>
 8000e24:	f112 0f19 	cmn.w	r2, #25
 8000e28:	bfdc      	itt	le
 8000e2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e2e:	4770      	bxle	lr
 8000e30:	f1c2 0200 	rsb	r2, r2, #0
 8000e34:	0041      	lsls	r1, r0, #1
 8000e36:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3a:	f1c2 0220 	rsb	r2, r2, #32
 8000e3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e46:	f140 0000 	adc.w	r0, r0, #0
 8000e4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e4e:	bf08      	it	eq
 8000e50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e54:	4770      	bx	lr
 8000e56:	f092 0f00 	teq	r2, #0
 8000e5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5e:	bf02      	ittt	eq
 8000e60:	0040      	lsleq	r0, r0, #1
 8000e62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e66:	3a01      	subeq	r2, #1
 8000e68:	d0f9      	beq.n	8000e5e <__aeabi_fmul+0xce>
 8000e6a:	ea40 000c 	orr.w	r0, r0, ip
 8000e6e:	f093 0f00 	teq	r3, #0
 8000e72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	bf02      	ittt	eq
 8000e78:	0049      	lsleq	r1, r1, #1
 8000e7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7e:	3b01      	subeq	r3, #1
 8000e80:	d0f9      	beq.n	8000e76 <__aeabi_fmul+0xe6>
 8000e82:	ea41 010c 	orr.w	r1, r1, ip
 8000e86:	e78f      	b.n	8000da8 <__aeabi_fmul+0x18>
 8000e88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	bf18      	it	ne
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d00a      	beq.n	8000eae <__aeabi_fmul+0x11e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1d8      	bne.n	8000e56 <__aeabi_fmul+0xc6>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	4770      	bx	lr
 8000eae:	f090 0f00 	teq	r0, #0
 8000eb2:	bf17      	itett	ne
 8000eb4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb8:	4608      	moveq	r0, r1
 8000eba:	f091 0f00 	teqne	r1, #0
 8000ebe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec2:	d014      	beq.n	8000eee <__aeabi_fmul+0x15e>
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	d101      	bne.n	8000ece <__aeabi_fmul+0x13e>
 8000eca:	0242      	lsls	r2, r0, #9
 8000ecc:	d10f      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000ece:	ea93 0f0c 	teq	r3, ip
 8000ed2:	d103      	bne.n	8000edc <__aeabi_fmul+0x14c>
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	bf18      	it	ne
 8000ed8:	4608      	movne	r0, r1
 8000eda:	d108      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eec:	4770      	bx	lr
 8000eee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_fdiv>:
 8000ef8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000efc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f00:	bf1e      	ittt	ne
 8000f02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f06:	ea92 0f0c 	teqne	r2, ip
 8000f0a:	ea93 0f0c 	teqne	r3, ip
 8000f0e:	d069      	beq.n	8000fe4 <__aeabi_fdiv+0xec>
 8000f10:	eba2 0203 	sub.w	r2, r2, r3
 8000f14:	ea80 0c01 	eor.w	ip, r0, r1
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f1e:	d037      	beq.n	8000f90 <__aeabi_fdiv+0x98>
 8000f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f30:	428b      	cmp	r3, r1
 8000f32:	bf38      	it	cc
 8000f34:	005b      	lslcc	r3, r3, #1
 8000f36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	bf24      	itt	cs
 8000f42:	1a5b      	subcs	r3, r3, r1
 8000f44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5a:	bf24      	itt	cs
 8000f5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f68:	bf24      	itt	cs
 8000f6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	bf18      	it	ne
 8000f76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7a:	d1e0      	bne.n	8000f3e <__aeabi_fdiv+0x46>
 8000f7c:	2afd      	cmp	r2, #253	; 0xfd
 8000f7e:	f63f af50 	bhi.w	8000e22 <__aeabi_fmul+0x92>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f88:	bf08      	it	eq
 8000f8a:	f020 0001 	biceq.w	r0, r0, #1
 8000f8e:	4770      	bx	lr
 8000f90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f98:	327f      	adds	r2, #127	; 0x7f
 8000f9a:	bfc2      	ittt	gt
 8000f9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa4:	4770      	bxgt	lr
 8000fa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	e737      	b.n	8000e22 <__aeabi_fmul+0x92>
 8000fb2:	f092 0f00 	teq	r2, #0
 8000fb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fba:	bf02      	ittt	eq
 8000fbc:	0040      	lsleq	r0, r0, #1
 8000fbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc2:	3a01      	subeq	r2, #1
 8000fc4:	d0f9      	beq.n	8000fba <__aeabi_fdiv+0xc2>
 8000fc6:	ea40 000c 	orr.w	r0, r0, ip
 8000fca:	f093 0f00 	teq	r3, #0
 8000fce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	bf02      	ittt	eq
 8000fd4:	0049      	lsleq	r1, r1, #1
 8000fd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fda:	3b01      	subeq	r3, #1
 8000fdc:	d0f9      	beq.n	8000fd2 <__aeabi_fdiv+0xda>
 8000fde:	ea41 010c 	orr.w	r1, r1, ip
 8000fe2:	e795      	b.n	8000f10 <__aeabi_fdiv+0x18>
 8000fe4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d108      	bne.n	8001000 <__aeabi_fdiv+0x108>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	f47f af7d 	bne.w	8000eee <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	f47f af70 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e776      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001000:	ea93 0f0c 	teq	r3, ip
 8001004:	d104      	bne.n	8001010 <__aeabi_fdiv+0x118>
 8001006:	024b      	lsls	r3, r1, #9
 8001008:	f43f af4c 	beq.w	8000ea4 <__aeabi_fmul+0x114>
 800100c:	4608      	mov	r0, r1
 800100e:	e76e      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001010:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001014:	bf18      	it	ne
 8001016:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101a:	d1ca      	bne.n	8000fb2 <__aeabi_fdiv+0xba>
 800101c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001020:	f47f af5c 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8001024:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001028:	f47f af3c 	bne.w	8000ea4 <__aeabi_fmul+0x114>
 800102c:	e75f      	b.n	8000eee <__aeabi_fmul+0x15e>
 800102e:	bf00      	nop

08001030 <__gesf2>:
 8001030:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001034:	e006      	b.n	8001044 <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__lesf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	e002      	b.n	8001044 <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__cmpsf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001048:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800104c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001054:	bf18      	it	ne
 8001056:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800105a:	d011      	beq.n	8001080 <__cmpsf2+0x40>
 800105c:	b001      	add	sp, #4
 800105e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001062:	bf18      	it	ne
 8001064:	ea90 0f01 	teqne	r0, r1
 8001068:	bf58      	it	pl
 800106a:	ebb2 0003 	subspl.w	r0, r2, r3
 800106e:	bf88      	it	hi
 8001070:	17c8      	asrhi	r0, r1, #31
 8001072:	bf38      	it	cc
 8001074:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001078:	bf18      	it	ne
 800107a:	f040 0001 	orrne.w	r0, r0, #1
 800107e:	4770      	bx	lr
 8001080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001084:	d102      	bne.n	800108c <__cmpsf2+0x4c>
 8001086:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108a:	d105      	bne.n	8001098 <__cmpsf2+0x58>
 800108c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001090:	d1e4      	bne.n	800105c <__cmpsf2+0x1c>
 8001092:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001096:	d0e1      	beq.n	800105c <__cmpsf2+0x1c>
 8001098:	f85d 0b04 	ldr.w	r0, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_cfrcmple>:
 80010a0:	4684      	mov	ip, r0
 80010a2:	4608      	mov	r0, r1
 80010a4:	4661      	mov	r1, ip
 80010a6:	e7ff      	b.n	80010a8 <__aeabi_cfcmpeq>

080010a8 <__aeabi_cfcmpeq>:
 80010a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010aa:	f7ff ffc9 	bl	8001040 <__cmpsf2>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	bf48      	it	mi
 80010b2:	f110 0f00 	cmnmi.w	r0, #0
 80010b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b8 <__aeabi_fcmpeq>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff fff4 	bl	80010a8 <__aeabi_cfcmpeq>
 80010c0:	bf0c      	ite	eq
 80010c2:	2001      	moveq	r0, #1
 80010c4:	2000      	movne	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmplt>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffea 	bl	80010a8 <__aeabi_cfcmpeq>
 80010d4:	bf34      	ite	cc
 80010d6:	2001      	movcc	r0, #1
 80010d8:	2000      	movcs	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmple>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffe0 	bl	80010a8 <__aeabi_cfcmpeq>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpge>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffd2 	bl	80010a0 <__aeabi_cfrcmple>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpgt>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffc8 	bl	80010a0 <__aeabi_cfrcmple>
 8001110:	bf34      	ite	cc
 8001112:	2001      	movcc	r0, #1
 8001114:	2000      	movcs	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <__aeabi_uldivmod>:
 800115c:	b953      	cbnz	r3, 8001174 <__aeabi_uldivmod+0x18>
 800115e:	b94a      	cbnz	r2, 8001174 <__aeabi_uldivmod+0x18>
 8001160:	2900      	cmp	r1, #0
 8001162:	bf08      	it	eq
 8001164:	2800      	cmpeq	r0, #0
 8001166:	bf1c      	itt	ne
 8001168:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800116c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001170:	f000 b976 	b.w	8001460 <__aeabi_idiv0>
 8001174:	f1ad 0c08 	sub.w	ip, sp, #8
 8001178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800117c:	f000 f806 	bl	800118c <__udivmoddi4>
 8001180:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001188:	b004      	add	sp, #16
 800118a:	4770      	bx	lr

0800118c <__udivmoddi4>:
 800118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001190:	9e08      	ldr	r6, [sp, #32]
 8001192:	460d      	mov	r5, r1
 8001194:	4604      	mov	r4, r0
 8001196:	4688      	mov	r8, r1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d14d      	bne.n	8001238 <__udivmoddi4+0xac>
 800119c:	428a      	cmp	r2, r1
 800119e:	4694      	mov	ip, r2
 80011a0:	d968      	bls.n	8001274 <__udivmoddi4+0xe8>
 80011a2:	fab2 f282 	clz	r2, r2
 80011a6:	b152      	cbz	r2, 80011be <__udivmoddi4+0x32>
 80011a8:	fa01 f302 	lsl.w	r3, r1, r2
 80011ac:	f1c2 0120 	rsb	r1, r2, #32
 80011b0:	fa20 f101 	lsr.w	r1, r0, r1
 80011b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b8:	ea41 0803 	orr.w	r8, r1, r3
 80011bc:	4094      	lsls	r4, r2
 80011be:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011c2:	fbb8 f7f1 	udiv	r7, r8, r1
 80011c6:	fa1f fe8c 	uxth.w	lr, ip
 80011ca:	fb01 8817 	mls	r8, r1, r7, r8
 80011ce:	fb07 f00e 	mul.w	r0, r7, lr
 80011d2:	0c23      	lsrs	r3, r4, #16
 80011d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011d8:	4298      	cmp	r0, r3
 80011da:	d90a      	bls.n	80011f2 <__udivmoddi4+0x66>
 80011dc:	eb1c 0303 	adds.w	r3, ip, r3
 80011e0:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80011e4:	f080 811e 	bcs.w	8001424 <__udivmoddi4+0x298>
 80011e8:	4298      	cmp	r0, r3
 80011ea:	f240 811b 	bls.w	8001424 <__udivmoddi4+0x298>
 80011ee:	3f02      	subs	r7, #2
 80011f0:	4463      	add	r3, ip
 80011f2:	1a1b      	subs	r3, r3, r0
 80011f4:	fbb3 f0f1 	udiv	r0, r3, r1
 80011f8:	fb01 3310 	mls	r3, r1, r0, r3
 80011fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8001200:	b2a4      	uxth	r4, r4
 8001202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001206:	45a6      	cmp	lr, r4
 8001208:	d90a      	bls.n	8001220 <__udivmoddi4+0x94>
 800120a:	eb1c 0404 	adds.w	r4, ip, r4
 800120e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001212:	f080 8109 	bcs.w	8001428 <__udivmoddi4+0x29c>
 8001216:	45a6      	cmp	lr, r4
 8001218:	f240 8106 	bls.w	8001428 <__udivmoddi4+0x29c>
 800121c:	4464      	add	r4, ip
 800121e:	3802      	subs	r0, #2
 8001220:	2100      	movs	r1, #0
 8001222:	eba4 040e 	sub.w	r4, r4, lr
 8001226:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800122a:	b11e      	cbz	r6, 8001234 <__udivmoddi4+0xa8>
 800122c:	2300      	movs	r3, #0
 800122e:	40d4      	lsrs	r4, r2
 8001230:	e9c6 4300 	strd	r4, r3, [r6]
 8001234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001238:	428b      	cmp	r3, r1
 800123a:	d908      	bls.n	800124e <__udivmoddi4+0xc2>
 800123c:	2e00      	cmp	r6, #0
 800123e:	f000 80ee 	beq.w	800141e <__udivmoddi4+0x292>
 8001242:	2100      	movs	r1, #0
 8001244:	e9c6 0500 	strd	r0, r5, [r6]
 8001248:	4608      	mov	r0, r1
 800124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124e:	fab3 f183 	clz	r1, r3
 8001252:	2900      	cmp	r1, #0
 8001254:	d14a      	bne.n	80012ec <__udivmoddi4+0x160>
 8001256:	42ab      	cmp	r3, r5
 8001258:	d302      	bcc.n	8001260 <__udivmoddi4+0xd4>
 800125a:	4282      	cmp	r2, r0
 800125c:	f200 80fc 	bhi.w	8001458 <__udivmoddi4+0x2cc>
 8001260:	1a84      	subs	r4, r0, r2
 8001262:	eb65 0303 	sbc.w	r3, r5, r3
 8001266:	2001      	movs	r0, #1
 8001268:	4698      	mov	r8, r3
 800126a:	2e00      	cmp	r6, #0
 800126c:	d0e2      	beq.n	8001234 <__udivmoddi4+0xa8>
 800126e:	e9c6 4800 	strd	r4, r8, [r6]
 8001272:	e7df      	b.n	8001234 <__udivmoddi4+0xa8>
 8001274:	b902      	cbnz	r2, 8001278 <__udivmoddi4+0xec>
 8001276:	deff      	udf	#255	; 0xff
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	2a00      	cmp	r2, #0
 800127e:	f040 8091 	bne.w	80013a4 <__udivmoddi4+0x218>
 8001282:	eba1 000c 	sub.w	r0, r1, ip
 8001286:	2101      	movs	r1, #1
 8001288:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800128c:	fa1f fe8c 	uxth.w	lr, ip
 8001290:	fbb0 f3f7 	udiv	r3, r0, r7
 8001294:	fb07 0013 	mls	r0, r7, r3, r0
 8001298:	0c25      	lsrs	r5, r4, #16
 800129a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800129e:	fb0e f003 	mul.w	r0, lr, r3
 80012a2:	42a8      	cmp	r0, r5
 80012a4:	d908      	bls.n	80012b8 <__udivmoddi4+0x12c>
 80012a6:	eb1c 0505 	adds.w	r5, ip, r5
 80012aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012ae:	d202      	bcs.n	80012b6 <__udivmoddi4+0x12a>
 80012b0:	42a8      	cmp	r0, r5
 80012b2:	f200 80ce 	bhi.w	8001452 <__udivmoddi4+0x2c6>
 80012b6:	4643      	mov	r3, r8
 80012b8:	1a2d      	subs	r5, r5, r0
 80012ba:	fbb5 f0f7 	udiv	r0, r5, r7
 80012be:	fb07 5510 	mls	r5, r7, r0, r5
 80012c2:	fb0e fe00 	mul.w	lr, lr, r0
 80012c6:	b2a4      	uxth	r4, r4
 80012c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012cc:	45a6      	cmp	lr, r4
 80012ce:	d908      	bls.n	80012e2 <__udivmoddi4+0x156>
 80012d0:	eb1c 0404 	adds.w	r4, ip, r4
 80012d4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012d8:	d202      	bcs.n	80012e0 <__udivmoddi4+0x154>
 80012da:	45a6      	cmp	lr, r4
 80012dc:	f200 80b6 	bhi.w	800144c <__udivmoddi4+0x2c0>
 80012e0:	4628      	mov	r0, r5
 80012e2:	eba4 040e 	sub.w	r4, r4, lr
 80012e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ea:	e79e      	b.n	800122a <__udivmoddi4+0x9e>
 80012ec:	f1c1 0720 	rsb	r7, r1, #32
 80012f0:	408b      	lsls	r3, r1
 80012f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012fa:	fa25 fa07 	lsr.w	sl, r5, r7
 80012fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001302:	fbba f8f9 	udiv	r8, sl, r9
 8001306:	fa20 f307 	lsr.w	r3, r0, r7
 800130a:	fb09 aa18 	mls	sl, r9, r8, sl
 800130e:	408d      	lsls	r5, r1
 8001310:	fa1f fe8c 	uxth.w	lr, ip
 8001314:	431d      	orrs	r5, r3
 8001316:	fa00 f301 	lsl.w	r3, r0, r1
 800131a:	fb08 f00e 	mul.w	r0, r8, lr
 800131e:	0c2c      	lsrs	r4, r5, #16
 8001320:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001324:	42a0      	cmp	r0, r4
 8001326:	fa02 f201 	lsl.w	r2, r2, r1
 800132a:	d90b      	bls.n	8001344 <__udivmoddi4+0x1b8>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001334:	f080 8088 	bcs.w	8001448 <__udivmoddi4+0x2bc>
 8001338:	42a0      	cmp	r0, r4
 800133a:	f240 8085 	bls.w	8001448 <__udivmoddi4+0x2bc>
 800133e:	f1a8 0802 	sub.w	r8, r8, #2
 8001342:	4464      	add	r4, ip
 8001344:	1a24      	subs	r4, r4, r0
 8001346:	fbb4 f0f9 	udiv	r0, r4, r9
 800134a:	fb09 4410 	mls	r4, r9, r0, r4
 800134e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001352:	b2ad      	uxth	r5, r5
 8001354:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001358:	45a6      	cmp	lr, r4
 800135a:	d908      	bls.n	800136e <__udivmoddi4+0x1e2>
 800135c:	eb1c 0404 	adds.w	r4, ip, r4
 8001360:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001364:	d26c      	bcs.n	8001440 <__udivmoddi4+0x2b4>
 8001366:	45a6      	cmp	lr, r4
 8001368:	d96a      	bls.n	8001440 <__udivmoddi4+0x2b4>
 800136a:	3802      	subs	r0, #2
 800136c:	4464      	add	r4, ip
 800136e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001372:	fba0 9502 	umull	r9, r5, r0, r2
 8001376:	eba4 040e 	sub.w	r4, r4, lr
 800137a:	42ac      	cmp	r4, r5
 800137c:	46c8      	mov	r8, r9
 800137e:	46ae      	mov	lr, r5
 8001380:	d356      	bcc.n	8001430 <__udivmoddi4+0x2a4>
 8001382:	d053      	beq.n	800142c <__udivmoddi4+0x2a0>
 8001384:	2e00      	cmp	r6, #0
 8001386:	d069      	beq.n	800145c <__udivmoddi4+0x2d0>
 8001388:	ebb3 0208 	subs.w	r2, r3, r8
 800138c:	eb64 040e 	sbc.w	r4, r4, lr
 8001390:	fa22 f301 	lsr.w	r3, r2, r1
 8001394:	fa04 f707 	lsl.w	r7, r4, r7
 8001398:	431f      	orrs	r7, r3
 800139a:	40cc      	lsrs	r4, r1
 800139c:	e9c6 7400 	strd	r7, r4, [r6]
 80013a0:	2100      	movs	r1, #0
 80013a2:	e747      	b.n	8001234 <__udivmoddi4+0xa8>
 80013a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013a8:	f1c2 0120 	rsb	r1, r2, #32
 80013ac:	fa25 f301 	lsr.w	r3, r5, r1
 80013b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b4:	fa20 f101 	lsr.w	r1, r0, r1
 80013b8:	4095      	lsls	r5, r2
 80013ba:	430d      	orrs	r5, r1
 80013bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80013c0:	fb07 3311 	mls	r3, r7, r1, r3
 80013c4:	fa1f fe8c 	uxth.w	lr, ip
 80013c8:	0c28      	lsrs	r0, r5, #16
 80013ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ce:	fb01 f30e 	mul.w	r3, r1, lr
 80013d2:	4283      	cmp	r3, r0
 80013d4:	fa04 f402 	lsl.w	r4, r4, r2
 80013d8:	d908      	bls.n	80013ec <__udivmoddi4+0x260>
 80013da:	eb1c 0000 	adds.w	r0, ip, r0
 80013de:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80013e2:	d22f      	bcs.n	8001444 <__udivmoddi4+0x2b8>
 80013e4:	4283      	cmp	r3, r0
 80013e6:	d92d      	bls.n	8001444 <__udivmoddi4+0x2b8>
 80013e8:	3902      	subs	r1, #2
 80013ea:	4460      	add	r0, ip
 80013ec:	1ac0      	subs	r0, r0, r3
 80013ee:	fbb0 f3f7 	udiv	r3, r0, r7
 80013f2:	fb07 0013 	mls	r0, r7, r3, r0
 80013f6:	b2ad      	uxth	r5, r5
 80013f8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013fc:	fb03 f00e 	mul.w	r0, r3, lr
 8001400:	42a8      	cmp	r0, r5
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x28a>
 8001404:	eb1c 0505 	adds.w	r5, ip, r5
 8001408:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800140c:	d216      	bcs.n	800143c <__udivmoddi4+0x2b0>
 800140e:	42a8      	cmp	r0, r5
 8001410:	d914      	bls.n	800143c <__udivmoddi4+0x2b0>
 8001412:	3b02      	subs	r3, #2
 8001414:	4465      	add	r5, ip
 8001416:	1a28      	subs	r0, r5, r0
 8001418:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800141c:	e738      	b.n	8001290 <__udivmoddi4+0x104>
 800141e:	4631      	mov	r1, r6
 8001420:	4630      	mov	r0, r6
 8001422:	e707      	b.n	8001234 <__udivmoddi4+0xa8>
 8001424:	462f      	mov	r7, r5
 8001426:	e6e4      	b.n	80011f2 <__udivmoddi4+0x66>
 8001428:	4618      	mov	r0, r3
 800142a:	e6f9      	b.n	8001220 <__udivmoddi4+0x94>
 800142c:	454b      	cmp	r3, r9
 800142e:	d2a9      	bcs.n	8001384 <__udivmoddi4+0x1f8>
 8001430:	ebb9 0802 	subs.w	r8, r9, r2
 8001434:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001438:	3801      	subs	r0, #1
 800143a:	e7a3      	b.n	8001384 <__udivmoddi4+0x1f8>
 800143c:	4643      	mov	r3, r8
 800143e:	e7ea      	b.n	8001416 <__udivmoddi4+0x28a>
 8001440:	4628      	mov	r0, r5
 8001442:	e794      	b.n	800136e <__udivmoddi4+0x1e2>
 8001444:	4641      	mov	r1, r8
 8001446:	e7d1      	b.n	80013ec <__udivmoddi4+0x260>
 8001448:	46d0      	mov	r8, sl
 800144a:	e77b      	b.n	8001344 <__udivmoddi4+0x1b8>
 800144c:	4464      	add	r4, ip
 800144e:	3802      	subs	r0, #2
 8001450:	e747      	b.n	80012e2 <__udivmoddi4+0x156>
 8001452:	3b02      	subs	r3, #2
 8001454:	4465      	add	r5, ip
 8001456:	e72f      	b.n	80012b8 <__udivmoddi4+0x12c>
 8001458:	4608      	mov	r0, r1
 800145a:	e706      	b.n	800126a <__udivmoddi4+0xde>
 800145c:	4631      	mov	r1, r6
 800145e:	e6e9      	b.n	8001234 <__udivmoddi4+0xa8>

08001460 <__aeabi_idiv0>:
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <_ZN6StringC1EPKc>:
    char str[STRING_LEN];
    int len;
    String(){
        len = 0;
    }
    String(const char* s){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
        len = strlen(s);
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f7fe feda 	bl	8000228 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(str, s);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f008 fc12 	bl	8009caa <strcpy>
    }
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN9UIElement17updateAllElementsEv>:
#define SHOW_LOCATION 1
UIElement *UIElement::allElements[MAX_UI_ELEMENTS] = {};
uint8_t UIElement::elementNum = 0;

void UIElement::updateAllElements()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0b6      	sub	sp, #216	; 0xd8
 8001494:	af00      	add	r7, sp, #0
    static bool firstCall = false;
    if (!firstCall)
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <_ZN9UIElement17updateAllElementsEv+0x100>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f083 0301 	eor.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d02c      	beq.n	80014fe <_ZN9UIElement17updateAllElementsEv+0x6e>
    {
        for (int i = 0; i < elementNum; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <_ZN9UIElement17updateAllElementsEv+0x104>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014b4:	4293      	cmp	r3, r2
 80014b6:	da13      	bge.n	80014e0 <_ZN9UIElement17updateAllElementsEv+0x50>
        {
            allElements[i]->render();
 80014b8:	4a37      	ldr	r2, [pc, #220]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 80014ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c2:	4935      	ldr	r1, [pc, #212]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 80014c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4610      	mov	r0, r2
 80014d2:	4798      	blx	r3
        for (int i = 0; i < elementNum; i++)
 80014d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014d8:	3301      	adds	r3, #1
 80014da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80014de:	e7e4      	b.n	80014aa <_ZN9UIElement17updateAllElementsEv+0x1a>
        }
        printToLCD("x=   , y=   ", 0);
 80014e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014e4:	492d      	ldr	r1, [pc, #180]	; (800159c <_ZN9UIElement17updateAllElementsEv+0x10c>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ffbc 	bl	8001464 <_ZN6StringC1EPKc>
 80014ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 fed4 	bl	80062a0 <_Z10printToLCDRK6Stringt>
        firstCall = true;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <_ZN9UIElement17updateAllElementsEv+0x100>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
    }
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 80014fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001502:	4927      	ldr	r1, [pc, #156]	; (80015a0 <_ZN9UIElement17updateAllElementsEv+0x110>)
 8001504:	4618      	mov	r0, r3
 8001506:	f005 f8e1 	bl	80066cc <XPT2046_Get_TouchedPoint>
    // Refresh the coordinate only when touched
    // if ((touch.x < 230 || touch.y < 300) && (touch.x > 0 && touch.y > 0))
    // {
        // if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
        // {
            sprintf(str, "x=%d, y=%d", touch.x, touch.y);
 800150a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800150e:	461a      	mov	r2, r3
 8001510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001514:	1d38      	adds	r0, r7, #4
 8001516:	4923      	ldr	r1, [pc, #140]	; (80015a4 <_ZN9UIElement17updateAllElementsEv+0x114>)
 8001518:	f008 fb98 	bl	8009c4c <siprintf>
            printToLCD(str, 0);
 800151c:	1d3a      	adds	r2, r7, #4
 800151e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff9d 	bl	8001464 <_ZN6StringC1EPKc>
 800152a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f004 feb5 	bl	80062a0 <_Z10printToLCDRK6Stringt>
        // }
    // }
#endif
    for (int i = 0; i < elementNum; i++)
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_ZN9UIElement17updateAllElementsEv+0x104>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001546:	4293      	cmp	r3, r2
 8001548:	da17      	bge.n	800157a <_ZN9UIElement17updateAllElementsEv+0xea>
    {
        allElements[i]->update(touch.x, touch.y);
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 800154c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001550:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <_ZN9UIElement17updateAllElementsEv+0x108>)
 8001556:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3304      	adds	r3, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8001568:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800156c:	4798      	blx	r3
    for (int i = 0; i < elementNum; i++)
 800156e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001572:	3301      	adds	r3, #1
 8001574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001578:	e7e0      	b.n	800153c <_ZN9UIElement17updateAllElementsEv+0xac>
    }
    touch.x = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    touch.y = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    // Update all UI elements
 8001586:	bf00      	nop
 8001588:	37d8      	adds	r7, #216	; 0xd8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000145 	.word	0x20000145
 8001594:	20000144 	.word	0x20000144
 8001598:	200000c4 	.word	0x200000c4
 800159c:	0800a588 	.word	0x0800a588
 80015a0:	20000008 	.word	0x20000008
 80015a4:	0800a598 	.word	0x0800a598

080015a8 <_ZN6StringC1Ev>:
    String(){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
        len = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <_ZN6StringC1Ei>:
    String(const String& s){
        len = s.len;
        strcpy(str, s.str);
    }
    String(int n){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
        len = sprintf(str, "%d", n);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	4906      	ldr	r1, [pc, #24]	; (80015ec <_ZN6StringC1Ei+0x28>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 fb39 	bl	8009c4c <siprintf>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	0800a5a4 	.word	0x0800a5a4

080015f0 <_ZN6StringC1Em>:
    String(uint8_t n): String((int)n){}
    String(uint16_t n): String((int)n){}
    String(uint32_t n): String((int)n){}
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffe0 	bl	80015c4 <_ZN6StringC1Ei>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <_ZN6StringC1EPhi>:
    String(float f){
        len = sprintf(str, "%.2f", f);
    }
    String(double f) : String((float)f){
    }
    String(uint8_t* arr, int len){
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
        // byte array to hex string
        for (int i=0; i<len; i++){
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	da11      	bge.n	800164c <_ZN6StringC1EPhi+0x3c>
            sprintf(str+i*3, "%02X ", arr[i]);
 8001628:	68f9      	ldr	r1, [r7, #12]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	18c8      	adds	r0, r1, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4906      	ldr	r1, [pc, #24]	; (8001658 <_ZN6StringC1EPhi+0x48>)
 8001640:	f008 fb04 	bl	8009c4c <siprintf>
        for (int i=0; i<len; i++){
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e7e9      	b.n	8001620 <_ZN6StringC1EPhi+0x10>
        }
    }
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	0800a5a8 	.word	0x0800a5a8

0800165c <_ZN6StringplEPKc>:
    String& operator=(const String& s){
        len = s.len;
        strcpy(str, s.str);
        return *this;
    }
    String operator+(const char* s){
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
        String newStr;
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff ff9d 	bl	80015a8 <_ZN6StringC1Ev>
        newStr.len = len + strlen(s);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	461c      	mov	r4, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7fe fdd7 	bl	8000228 <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	4423      	add	r3, r4
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(newStr.str, str);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f008 fb0d 	bl	8009caa <strcpy>
        strcat(newStr.str, s);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	f008 faf9 	bl	8009c8c <strcat>
        return newStr;
 800169a:	bf00      	nop
    }
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}

080016a4 <_ZN6StringplERKS_>:
    String operator+(const String& s){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
        String newStr;
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff ff79 	bl	80015a8 <_ZN6StringC1Ev>
        newStr.len = len + s.len;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	441a      	add	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(newStr.str, str);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f008 faed 	bl	8009caa <strcpy>
        strcat(newStr.str, s.str);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f008 fad8 	bl	8009c8c <strcat>
        return newStr;
 80016dc:	bf00      	nop
    }
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_ZN8SERVO42C6getCRCEPhh>:
    float speedMultiplier = 0.8; // used in step3d
    

    

    static uint8_t getCRC(uint8_t instruction[], uint8_t len){
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	429a      	cmp	r2, r3
 8001700:	da0b      	bge.n	800171a <_ZN8SERVO42C6getCRCEPhh+0x34>
            result+=instruction[i];
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29a      	uxth	r2, r3
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	4413      	add	r3, r2
 8001710:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3301      	adds	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	e7ef      	b.n	80016fa <_ZN8SERVO42C6getCRCEPhh+0x14>
        }
        return result & 0xFF;
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	b2db      	uxtb	r3, r3
    }
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <_ZN8SERVO42C8getRPMofEh>:
        }
        return data;
    }
    
    
    float getRPMof(uint8_t speed){
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
        float divisionCoefficient = ABS(stepAngle-1.8)>0.01?400:200;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fee1 	bl	8000500 <__aeabi_f2d>
 800173e:	a32e      	add	r3, pc, #184	; (adr r3, 80017f8 <_ZN8SERVO42C8getRPMofEh+0xd0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fd7c 	bl	8000240 <__aeabi_dsub>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	f7ff f9ba 	bl	8000ad0 <__aeabi_dcmpgt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <_ZN8SERVO42C8getRPMofEh+0x58>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feca 	bl	8000500 <__aeabi_f2d>
 800176c:	a322      	add	r3, pc, #136	; (adr r3, 80017f8 <_ZN8SERVO42C8getRPMofEh+0xd0>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe fd65 	bl	8000240 <__aeabi_dsub>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	e00e      	b.n	800179e <_ZN8SERVO42C8getRPMofEh+0x76>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe febb 	bl	8000500 <__aeabi_f2d>
 800178a:	a31b      	add	r3, pc, #108	; (adr r3, 80017f8 <_ZN8SERVO42C8getRPMofEh+0xd0>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fd56 	bl	8000240 <__aeabi_dsub>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4614      	mov	r4, r2
 800179a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800179e:	a318      	add	r3, pc, #96	; (adr r3, 8001800 <_ZN8SERVO42C8getRPMofEh+0xd8>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7ff f992 	bl	8000ad0 <__aeabi_dcmpgt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZN8SERVO42C8getRPMofEh+0x8e>
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <_ZN8SERVO42C8getRPMofEh+0xe0>)
 80017b4:	e000      	b.n	80017b8 <_ZN8SERVO42C8getRPMofEh+0x90>
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_ZN8SERVO42C8getRPMofEh+0xe4>)
 80017b8:	60fb      	str	r3, [r7, #12]
        return (speed * 30000)/(stepDivision * divisionCoefficient);
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fa8f 	bl	8000ce8 <__aeabi_i2f>
 80017ca:	4604      	mov	r4, r0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7fdb      	ldrb	r3, [r3, #31]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fa89 	bl	8000ce8 <__aeabi_i2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fad8 	bl	8000d90 <__aeabi_fmul>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff fb87 	bl	8000ef8 <__aeabi_fdiv>
 80017ea:	4603      	mov	r3, r0
    }
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bdb0      	pop	{r4, r5, r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	cccccccd 	.word	0xcccccccd
 80017fc:	3ffccccc 	.word	0x3ffccccc
 8001800:	47ae147b 	.word	0x47ae147b
 8001804:	3f847ae1 	.word	0x3f847ae1
 8001808:	43c80000 	.word	0x43c80000
 800180c:	43480000 	.word	0x43480000

08001810 <_ZN8SERVO42C18getSpeedParamOfRPMEf>:
    float getSpeedParamOfRPM(float rpm){
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
        float divisionCoefficient = ABS(stepAngle-1.8)>0.01?400:200;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe6e 	bl	8000500 <__aeabi_f2d>
 8001824:	a32c      	add	r3, pc, #176	; (adr r3, 80018d8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xc8>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe fd09 	bl	8000240 <__aeabi_dsub>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	f7ff f947 	bl	8000ad0 <__aeabi_dcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x56>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe57 	bl	8000500 <__aeabi_f2d>
 8001852:	a321      	add	r3, pc, #132	; (adr r3, 80018d8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xc8>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fcf2 	bl	8000240 <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	e00e      	b.n	8001884 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x74>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe48 	bl	8000500 <__aeabi_f2d>
 8001870:	a319      	add	r3, pc, #100	; (adr r3, 80018d8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xc8>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fce3 	bl	8000240 <__aeabi_dsub>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4614      	mov	r4, r2
 8001880:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001884:	a316      	add	r3, pc, #88	; (adr r3, 80018e0 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xd0>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	4620      	mov	r0, r4
 800188c:	4629      	mov	r1, r5
 800188e:	f7ff f91f 	bl	8000ad0 <__aeabi_dcmpgt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x8c>
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xd8>)
 800189a:	e000      	b.n	800189e <_ZN8SERVO42C18getSpeedParamOfRPMEf+0x8e>
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xdc>)
 800189e:	60fb      	str	r3, [r7, #12]
        return rpm * stepDivision * divisionCoefficient / 30000;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7fdb      	ldrb	r3, [r3, #31]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa1f 	bl	8000ce8 <__aeabi_i2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa6e 	bl	8000d90 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	68f9      	ldr	r1, [r7, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa69 	bl	8000d90 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	490b      	ldr	r1, [pc, #44]	; (80018f0 <_ZN8SERVO42C18getSpeedParamOfRPMEf+0xe0>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb18 	bl	8000ef8 <__aeabi_fdiv>
 80018c8:	4603      	mov	r3, r0
    }
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	3ffccccc 	.word	0x3ffccccc
 80018e0:	47ae147b 	.word	0x47ae147b
 80018e4:	3f847ae1 	.word	0x3f847ae1
 80018e8:	43c80000 	.word	0x43c80000
 80018ec:	43480000 	.word	0x43480000
 80018f0:	46ea6000 	.word	0x46ea6000

080018f4 <_ZN8SERVO42C16getLinearSpeedOfEh>:
    
    float getLinearSpeedOf(uint8_t speed){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
        return getRPMof(speed) * mmPerLap / 60; // mm/s
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff0f 	bl	8001728 <_ZN8SERVO42C8getRPMofEh>
 800190a:	4602      	mov	r2, r0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f7ff fa3c 	bl	8000d90 <__aeabi_fmul>
 8001918:	4603      	mov	r3, r0
 800191a:	4904      	ldr	r1, [pc, #16]	; (800192c <_ZN8SERVO42C16getLinearSpeedOfEh+0x38>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff faeb 	bl	8000ef8 <__aeabi_fdiv>
 8001922:	4603      	mov	r3, r0
    }
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	42700000 	.word	0x42700000

08001930 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>:

    uint8_t getSpeedParamOfLinearSpeed(float linearSpeed){
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
        float rpm = linearSpeed * 60 / mmPerLap;
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf+0x44>)
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f7ff fa27 	bl	8000d90 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f7ff fad3 	bl	8000ef8 <__aeabi_fdiv>
 8001952:	4603      	mov	r3, r0
 8001954:	60fb      	str	r3, [r7, #12]
        return getSpeedParamOfRPM(rpm);
 8001956:	68f9      	ldr	r1, [r7, #12]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff59 	bl	8001810 <_ZN8SERVO42C18getSpeedParamOfRPMEf>
 800195e:	4603      	mov	r3, r0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fbdb 	bl	800111c <__aeabi_f2uiz>
 8001966:	4603      	mov	r3, r0
 8001968:	b2db      	uxtb	r3, r3
    }
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	42700000 	.word	0x42700000

08001978 <_ZN8SERVO42C13getDistanceOfEm>:
    
    float getDistanceOf(uint32_t stepCount){
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
        return stepCount/(float)stepDivision * stepAngle/360 * mmPerLap;
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f7ff f9ac 	bl	8000ce0 <__aeabi_ui2f>
 8001988:	4604      	mov	r4, r0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7fdb      	ldrb	r3, [r3, #31]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a6 	bl	8000ce0 <__aeabi_ui2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff faad 	bl	8000ef8 <__aeabi_fdiv>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f7ff f9f1 	bl	8000d90 <__aeabi_fmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4908      	ldr	r1, [pc, #32]	; (80019d4 <_ZN8SERVO42C13getDistanceOfEm+0x5c>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff faa0 	bl	8000ef8 <__aeabi_fdiv>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4610      	mov	r0, r2
 80019c4:	f7ff f9e4 	bl	8000d90 <__aeabi_fmul>
 80019c8:	4603      	mov	r3, r0
    }
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	43b40000 	.word	0x43b40000

080019d8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>:

    uint32_t getStepCountFromTargetPosition(float targetPosition, uint8_t& direction){
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
        float currentPosition = getPosition();
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f88f 	bl	8001b08 <_ZN8SERVO42C11getPositionEv>
 80019ea:	61f8      	str	r0, [r7, #28]
        float error = targetPosition - currentPosition;
 80019ec:	69f9      	ldr	r1, [r7, #28]
 80019ee:	68b8      	ldr	r0, [r7, #8]
 80019f0:	f7ff f8c4 	bl	8000b7c <__aeabi_fsub>
 80019f4:	4603      	mov	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]
        direction = error>0?1:0;
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	69b8      	ldr	r0, [r7, #24]
 80019fe:	f7ff fb83 	bl	8001108 <__aeabi_fcmpgt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x34>
 8001a08:	2201      	movs	r2, #1
 8001a0a:	e000      	b.n	8001a0e <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x36>
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	701a      	strb	r2, [r3, #0]
        error = error>0?error:-error;
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	69b8      	ldr	r0, [r7, #24]
 8001a18:	f7ff fb76 	bl	8001108 <__aeabi_fcmpgt>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x4e>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	e002      	b.n	8001a2c <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0x54>
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a2c:	61bb      	str	r3, [r7, #24]
        uint32_t stepCount = error/(mmPerLap) * (360/stepAngle)*stepDivision;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	69b8      	ldr	r0, [r7, #24]
 8001a36:	f7ff fa5f 	bl	8000ef8 <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4619      	mov	r1, r3
 8001a44:	480f      	ldr	r0, [pc, #60]	; (8001a84 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh+0xac>)
 8001a46:	f7ff fa57 	bl	8000ef8 <__aeabi_fdiv>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff f99e 	bl	8000d90 <__aeabi_fmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461c      	mov	r4, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	7fdb      	ldrb	r3, [r3, #31]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f943 	bl	8000ce8 <__aeabi_i2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4619      	mov	r1, r3
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff f992 	bl	8000d90 <__aeabi_fmul>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fb54 	bl	800111c <__aeabi_f2uiz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]
        return stepCount;
 8001a78:	697b      	ldr	r3, [r7, #20]
    }
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd90      	pop	{r4, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	43b40000 	.word	0x43b40000

08001a88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>:

    
public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART) : address(address), pUART(pUART){}
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	460b      	mov	r3, r1
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	72fb      	strb	r3, [r7, #11]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	7afa      	ldrb	r2, [r7, #11]
 8001aa0:	711a      	strb	r2, [r3, #4]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	80da      	strh	r2, [r3, #6]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	811a      	strh	r2, [r3, #8]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	829a      	strh	r2, [r3, #20]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	771a      	strb	r2, [r3, #28]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	775a      	strb	r2, [r3, #29]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2232      	movs	r2, #50	; 0x32
 8001ad8:	779a      	strb	r2, [r3, #30]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2220      	movs	r2, #32
 8001ade:	77da      	strb	r2, [r3, #31]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef+0x78>)
 8001ae4:	621a      	str	r2, [r3, #32]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef+0x7c>)
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	3fe66666 	.word	0x3fe66666
 8001b04:	3f4ccccd 	.word	0x3f4ccccd

08001b08 <_ZN8SERVO42C11getPositionEv>:
        zeroEncoderCarry = encoderCarry;
        enableAbsolutePosControl = true;
    }

    // position : distance from zero position
    float getPosition(){ // to test
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
        // if (enableAbsolutePosControl){
        float position = 0;
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
        position = ((encoder - zeroEncoder)/(float)0xFFFF+ (encoderCarry - zeroEncoderCarry))*mmPerLap;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	88db      	ldrh	r3, [r3, #6]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	891b      	ldrh	r3, [r3, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f8e0 	bl	8000ce8 <__aeabi_i2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4911      	ldr	r1, [pc, #68]	; (8001b70 <_ZN8SERVO42C11getPositionEv+0x68>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f9e3 	bl	8000ef8 <__aeabi_fdiv>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461c      	mov	r4, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f8d1 	bl	8000ce8 <__aeabi_i2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff f818 	bl	8000b80 <__addsf3>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f7ff f918 	bl	8000d90 <__aeabi_fmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]
        // }
        // return -1;
    }
 8001b64:	bf00      	nop
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	477fff00 	.word	0x477fff00

08001b74 <_ZN8SERVO42C4stepEhhm>:
    }

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step(uint8_t direction, uint8_t speed, uint32_t stepCount){
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b0cd      	sub	sp, #308	; 0x134
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8001b7e:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8001b82:	6020      	str	r0, [r4, #0]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001b8c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b96:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ba2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8001ba6:	460a      	mov	r2, r1
 8001ba8:	701a      	strb	r2, [r3, #0]
        uint8_t instruction[8] = {};
 8001baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
        instruction[0] = address;
 8001bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bbe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	791a      	ldrb	r2, [r3, #4]
 8001bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bce:	701a      	strb	r2, [r3, #0]
        instruction[1] = 0xfd;
 8001bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bd4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bd8:	22fd      	movs	r2, #253	; 0xfd
 8001bda:	705a      	strb	r2, [r3, #1]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 8001bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001be0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	01db      	lsls	r3, r3, #7
 8001be8:	b25a      	sxtb	r2, r3
 8001bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bee:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8001bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c0a:	709a      	strb	r2, [r3, #2]
        for (int i=0; i<4; i++){
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	dc20      	bgt.n	8001c5c <_ZN8SERVO42C4stepEhhm+0xe8>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 8001c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	401a      	ands	r2, r3
 8001c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	40da      	lsrs	r2, r3
 8001c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c40:	f1c3 0306 	rsb	r3, r3, #6
 8001c44:	b2d1      	uxtb	r1, r2
 8001c46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001c4a:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001c4e:	54d1      	strb	r1, [r2, r3]
        for (int i=0; i<4; i++){
 8001c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c54:	3301      	adds	r3, #1
 8001c56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c5a:	e7da      	b.n	8001c12 <_ZN8SERVO42C4stepEhhm+0x9e>
        }
        instruction[7] = getCRC(instruction, 8);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2108      	movs	r1, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fd3f 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c74:	71da      	strb	r2, [r3, #7]
        debugLog(String(instruction, 8)+" c:"+String(stepCount));
 8001c76:	f107 0114 	add.w	r1, r7, #20
 8001c7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c7e:	2208      	movs	r2, #8
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fcc5 	bl	8001610 <_ZN6StringC1EPhi>
 8001c86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c8a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <_ZN8SERVO42C4stepEhhm+0x17c>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fce3 	bl	800165c <_ZN6StringplEPKc>
 8001c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c9e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f7ff fca3 	bl	80015f0 <_ZN6StringC1Em>
 8001caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cb2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001cb6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fcf2 	bl	80016a4 <_ZN6StringplERKS_>
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	2112      	movs	r1, #18
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fb12 	bl	80062f0 <_Z8debugLogRK6Stringt>
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 8001ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	f107 0114 	add.w	r1, r7, #20
 8001cdc:	2364      	movs	r3, #100	; 0x64
 8001cde:	2208      	movs	r2, #8
 8001ce0:	f007 f960 	bl	8008fa4 <HAL_UART_Transmit>
    }
 8001ce4:	bf00      	nop
 8001ce6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	0800a5b0 	.word	0x0800a5b0

08001cf4 <_Z6step3dmhmhmh>:

SERVO42C xServo(0xe0, &huart2);
SERVO42C yServo(0xe1, &huart2);
SERVO42C zServo(0xe2, &huart2);

void step3d(uint32_t xStepCount, uint8_t xDir, uint32_t yStepCount, uint8_t yDir, uint32_t zStepCount, uint8_t zDir){
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b08f      	sub	sp, #60	; 0x3c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	460b      	mov	r3, r1
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	4613      	mov	r3, r2
 8001d06:	72bb      	strb	r3, [r7, #10]
    uint32_t maxStepCount = MAX(MAX(xStepCount, yStepCount), zStepCount);
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d901      	bls.n	8001d14 <_Z6step3dmhmhmh+0x20>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	e000      	b.n	8001d16 <_Z6step3dmhmhmh+0x22>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d907      	bls.n	8001d2c <_Z6step3dmhmhmh+0x38>
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d901      	bls.n	8001d28 <_Z6step3dmhmhmh+0x34>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	e002      	b.n	8001d2e <_Z6step3dmhmhmh+0x3a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	e000      	b.n	8001d2e <_Z6step3dmhmhmh+0x3a>
 8001d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    SERVO42C* pMaxServo;
    if (maxStepCount == xStepCount){
 8001d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d102      	bne.n	8001d3e <_Z6step3dmhmhmh+0x4a>
        pMaxServo = &xServo;
 8001d38:	4b40      	ldr	r3, [pc, #256]	; (8001e3c <_Z6step3dmhmhmh+0x148>)
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3c:	e008      	b.n	8001d50 <_Z6step3dmhmhmh+0x5c>
    }else if (maxStepCount == yStepCount){
 8001d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d102      	bne.n	8001d4c <_Z6step3dmhmhmh+0x58>
        pMaxServo = &yServo;
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <_Z6step3dmhmhmh+0x14c>)
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	e001      	b.n	8001d50 <_Z6step3dmhmhmh+0x5c>
    }else{
        pMaxServo = &zServo;
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <_Z6step3dmhmhmh+0x150>)
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    SERVO42C& maxServo = *pMaxServo;
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c

    float maxTimeConsumed = maxServo.getDistanceOf(maxStepCount) / maxServo.getLinearSpeedOf(maxServo.stepSpeed);
 8001d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d58:	f7ff fe0e 	bl	8001978 <_ZN8SERVO42C13getDistanceOfEm>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	7f9b      	ldrb	r3, [r3, #30]
 8001d62:	4619      	mov	r1, r3
 8001d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d66:	f7ff fdc5 	bl	80018f4 <_ZN8SERVO42C16getLinearSpeedOfEh>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff f8c2 	bl	8000ef8 <__aeabi_fdiv>
 8001d74:	4603      	mov	r3, r0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    float linearSpeedX = xServo.getDistanceOf(xStepCount) / maxTimeConsumed;
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	4830      	ldr	r0, [pc, #192]	; (8001e3c <_Z6step3dmhmhmh+0x148>)
 8001d7c:	f7ff fdfc 	bl	8001978 <_ZN8SERVO42C13getDistanceOfEm>
 8001d80:	4603      	mov	r3, r0
 8001d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f8b7 	bl	8000ef8 <__aeabi_fdiv>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
    float linearSpeedY = yServo.getDistanceOf(yStepCount) / maxTimeConsumed;
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	482b      	ldr	r0, [pc, #172]	; (8001e40 <_Z6step3dmhmhmh+0x14c>)
 8001d92:	f7ff fdf1 	bl	8001978 <_ZN8SERVO42C13getDistanceOfEm>
 8001d96:	4603      	mov	r3, r0
 8001d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f8ac 	bl	8000ef8 <__aeabi_fdiv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	623b      	str	r3, [r7, #32]
    float linearSpeedZ = zServo.getDistanceOf(zStepCount) / maxTimeConsumed;
 8001da4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001da6:	4827      	ldr	r0, [pc, #156]	; (8001e44 <_Z6step3dmhmhmh+0x150>)
 8001da8:	f7ff fde6 	bl	8001978 <_ZN8SERVO42C13getDistanceOfEm>
 8001dac:	4603      	mov	r3, r0
 8001dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f8a1 	bl	8000ef8 <__aeabi_fdiv>
 8001db6:	4603      	mov	r3, r0
 8001db8:	61fb      	str	r3, [r7, #28]

    float speedParamX = xServo.getSpeedParamOfLinearSpeed(linearSpeedX);
 8001dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbc:	481f      	ldr	r0, [pc, #124]	; (8001e3c <_Z6step3dmhmhmh+0x148>)
 8001dbe:	f7ff fdb7 	bl	8001930 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff8b 	bl	8000ce0 <__aeabi_ui2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	61bb      	str	r3, [r7, #24]
    float speedParamY = yServo.getSpeedParamOfLinearSpeed(linearSpeedY);
 8001dce:	6a39      	ldr	r1, [r7, #32]
 8001dd0:	481b      	ldr	r0, [pc, #108]	; (8001e40 <_Z6step3dmhmhmh+0x14c>)
 8001dd2:	f7ff fdad 	bl	8001930 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ff81 	bl	8000ce0 <__aeabi_ui2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	617b      	str	r3, [r7, #20]
    float speedParamZ = zServo.getSpeedParamOfLinearSpeed(linearSpeedZ);
 8001de2:	69f9      	ldr	r1, [r7, #28]
 8001de4:	4817      	ldr	r0, [pc, #92]	; (8001e44 <_Z6step3dmhmhmh+0x150>)
 8001de6:	f7ff fda3 	bl	8001930 <_ZN8SERVO42C26getSpeedParamOfLinearSpeedEf>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ff77 	bl	8000ce0 <__aeabi_ui2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	613b      	str	r3, [r7, #16]

    xServo.step(xDir, speedParamX, xStepCount);
 8001df6:	69b8      	ldr	r0, [r7, #24]
 8001df8:	f7ff f990 	bl	800111c <__aeabi_f2uiz>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	7af9      	ldrb	r1, [r7, #11]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <_Z6step3dmhmhmh+0x148>)
 8001e06:	f7ff feb5 	bl	8001b74 <_ZN8SERVO42C4stepEhhm>
    yServo.step(yDir, speedParamY, yStepCount);
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff f986 	bl	800111c <__aeabi_f2uiz>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	7ab9      	ldrb	r1, [r7, #10]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <_Z6step3dmhmhmh+0x14c>)
 8001e1a:	f7ff feab 	bl	8001b74 <_ZN8SERVO42C4stepEhhm>
    zServo.step(zDir, speedParamZ, zStepCount);
 8001e1e:	6938      	ldr	r0, [r7, #16]
 8001e20:	f7ff f97c 	bl	800111c <__aeabi_f2uiz>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8001e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <_Z6step3dmhmhmh+0x150>)
 8001e30:	f7ff fea0 	bl	8001b74 <_ZN8SERVO42C4stepEhhm>
}
 8001e34:	bf00      	nop
 8001e36:	373c      	adds	r7, #60	; 0x3c
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	20000148 	.word	0x20000148
 8001e40:	20000174 	.word	0x20000174
 8001e44:	200001a0 	.word	0x200001a0

08001e48 <_Z13setPosition3dfff>:

void setPosition3d(float x, float y, float z){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
    uint8_t xDir = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	74fb      	strb	r3, [r7, #19]
    uint32_t xStepCount =  xServo.getStepCountFromTargetPosition(x, xDir);
 8001e58:	f107 0313 	add.w	r3, r7, #19
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68f9      	ldr	r1, [r7, #12]
 8001e60:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <_Z13setPosition3dfff+0x68>)
 8001e62:	f7ff fdb9 	bl	80019d8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>
 8001e66:	61f8      	str	r0, [r7, #28]
    uint8_t yDir = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	74bb      	strb	r3, [r7, #18]
    uint32_t yStepCount =  yServo.getStepCountFromTargetPosition(y, yDir);
 8001e6c:	f107 0312 	add.w	r3, r7, #18
 8001e70:	461a      	mov	r2, r3
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <_Z13setPosition3dfff+0x6c>)
 8001e76:	f7ff fdaf 	bl	80019d8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>
 8001e7a:	61b8      	str	r0, [r7, #24]
    uint8_t zDir = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	747b      	strb	r3, [r7, #17]
    uint32_t zStepCount =  zServo.getStepCountFromTargetPosition(z, zDir);
 8001e80:	f107 0311 	add.w	r3, r7, #17
 8001e84:	461a      	mov	r2, r3
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <_Z13setPosition3dfff+0x70>)
 8001e8a:	f7ff fda5 	bl	80019d8 <_ZN8SERVO42C30getStepCountFromTargetPositionEfRh>
 8001e8e:	6178      	str	r0, [r7, #20]
    step3d(xStepCount, xDir, yStepCount, yDir, zStepCount, zDir);
 8001e90:	7cf9      	ldrb	r1, [r7, #19]
 8001e92:	7cba      	ldrb	r2, [r7, #18]
 8001e94:	7c7b      	ldrb	r3, [r7, #17]
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	69f8      	ldr	r0, [r7, #28]
 8001ea2:	f7ff ff27 	bl	8001cf4 <_Z6step3dmhmhmh>
    // todo, block thread until done
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000148 	.word	0x20000148
 8001eb4:	20000174 	.word	0x20000174
 8001eb8:	200001a0 	.word	0x200001a0

08001ebc <_Z41__static_initialization_and_destruction_0ii>:
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d113      	bne.n	8001ef4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d10e      	bne.n	8001ef4 <_Z41__static_initialization_and_destruction_0ii+0x38>
SERVO42C xServo(0xe0, &huart2);
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ed8:	21e0      	movs	r1, #224	; 0xe0
 8001eda:	4809      	ldr	r0, [pc, #36]	; (8001f00 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001edc:	f7ff fdd4 	bl	8001a88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>
SERVO42C yServo(0xe1, &huart2);
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ee2:	21e1      	movs	r1, #225	; 0xe1
 8001ee4:	4807      	ldr	r0, [pc, #28]	; (8001f04 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001ee6:	f7ff fdcf 	bl	8001a88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>
SERVO42C zServo(0xe2, &huart2);
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001eec:	21e2      	movs	r1, #226	; 0xe2
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001ef0:	f7ff fdca 	bl	8001a88 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000974 	.word	0x20000974
 8001f00:	20000148 	.word	0x20000148
 8001f04:	20000174 	.word	0x20000174
 8001f08:	200001a0 	.word	0x200001a0

08001f0c <_GLOBAL__sub_I_xServo>:
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7ff ffd1 	bl	8001ebc <_Z41__static_initialization_and_destruction_0ii>
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f2e:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <MX_ADC1_Init+0x78>)
 8001f30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f46:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f5a:	f004 fceb 	bl	8006934 <HAL_ADC_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f64:	f001 feda 	bl	8003d1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f68:	230c      	movs	r3, #12
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001f70:	2305      	movs	r3, #5
 8001f72:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_ADC1_Init+0x74>)
 8001f7a:	f004 fdc5 	bl	8006b08 <HAL_ADC_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001f84:	f001 feca 	bl	8003d1c <Error_Handler>
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200001cc 	.word	0x200001cc
 8001f94:	40012400 	.word	0x40012400

08001f98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_ADC_MspInit+0x6c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d121      	bne.n	8001ffc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_ADC_MspInit+0x70>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_ADC_MspInit+0x70>)
 8001fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_ADC_MspInit+0x70>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_ADC_MspInit+0x70>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_ADC_MspInit+0x70>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_ADC_MspInit+0x70>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fec:	2303      	movs	r3, #3
 8001fee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <HAL_ADC_MspInit+0x74>)
 8001ff8:	f005 f8ca 	bl	8007190 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40012400 	.word	0x40012400
 8002008:	40021000 	.word	0x40021000
 800200c:	40011000 	.word	0x40011000

08002010 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <DEBUG_USART_Config+0x4c>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <DEBUG_USART_Config+0x50>)
 8002018:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <DEBUG_USART_Config+0x4c>)
 800201c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002020:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <DEBUG_USART_Config+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <DEBUG_USART_Config+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <DEBUG_USART_Config+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <DEBUG_USART_Config+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <DEBUG_USART_Config+0x4c>)
 800203c:	220c      	movs	r2, #12
 800203e:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <DEBUG_USART_Config+0x4c>)
 8002042:	f006 ff62 	bl	8008f0a <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <DEBUG_USART_Config+0x4c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <DEBUG_USART_Config+0x4c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	60da      	str	r2, [r3, #12]
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200001fc 	.word	0x200001fc
 8002060:	40013800 	.word	0x40013800

08002064 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <MX_FSMC_Init+0xbc>)
 800207e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002082:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <MX_FSMC_Init+0xbc>)
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <MX_FSMC_Init+0xc0>)
 8002088:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <MX_FSMC_Init+0xbc>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <MX_FSMC_Init+0xbc>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <MX_FSMC_Init+0xbc>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_FSMC_Init+0xbc>)
 800209e:	2210      	movs	r2, #16
 80020a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80020da:	230f      	movs	r3, #15
 80020dc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80020de:	230f      	movs	r3, #15
 80020e0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80020e2:	23ff      	movs	r3, #255	; 0xff
 80020e4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80020e6:	230f      	movs	r3, #15
 80020e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80020ea:	2310      	movs	r3, #16
 80020ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80020ee:	2311      	movs	r3, #17
 80020f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4808      	ldr	r0, [pc, #32]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020fe:	f005 ff07 	bl	8007f10 <HAL_SRAM_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002108:	f001 fe08 	bl	8003d1c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_FSMC_Init+0xc4>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a05      	ldr	r2, [pc, #20]	; (8002128 <MX_FSMC_Init+0xc4>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002116:	61d3      	str	r3, [r2, #28]

}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000027c 	.word	0x2000027c
 8002124:	a0000104 	.word	0xa0000104
 8002128:	40010000 	.word	0x40010000

0800212c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_FSMC_MspInit+0x78>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d129      	bne.n	800219c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_FSMC_MspInit+0x78>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_FSMC_MspInit+0x7c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <HAL_FSMC_MspInit+0x7c>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6153      	str	r3, [r2, #20]
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_FSMC_MspInit+0x7c>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002166:	f64f 7380 	movw	r3, #65408	; 0xff80
 800216a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4619      	mov	r1, r3
 800217a:	480c      	ldr	r0, [pc, #48]	; (80021ac <HAL_FSMC_MspInit+0x80>)
 800217c:	f005 f808 	bl	8007190 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002180:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002184:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	4619      	mov	r1, r3
 8002194:	4806      	ldr	r0, [pc, #24]	; (80021b0 <HAL_FSMC_MspInit+0x84>)
 8002196:	f004 fffb 	bl	8007190 <HAL_GPIO_Init>
 800219a:	e000      	b.n	800219e <HAL_FSMC_MspInit+0x72>
    return;
 800219c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200002c0 	.word	0x200002c0
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40011800 	.word	0x40011800
 80021b0:	40011400 	.word	0x40011400

080021b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80021bc:	f7ff ffb6 	bl	800212c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 0318 	add.w	r3, r7, #24
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <MX_GPIO_Init+0x1d4>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a6e      	ldr	r2, [pc, #440]	; (800239c <MX_GPIO_Init+0x1d4>)
 80021e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b6c      	ldr	r3, [pc, #432]	; (800239c <MX_GPIO_Init+0x1d4>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f4:	4b69      	ldr	r3, [pc, #420]	; (800239c <MX_GPIO_Init+0x1d4>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a68      	ldr	r2, [pc, #416]	; (800239c <MX_GPIO_Init+0x1d4>)
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b66      	ldr	r3, [pc, #408]	; (800239c <MX_GPIO_Init+0x1d4>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	4b63      	ldr	r3, [pc, #396]	; (800239c <MX_GPIO_Init+0x1d4>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a62      	ldr	r2, [pc, #392]	; (800239c <MX_GPIO_Init+0x1d4>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b60      	ldr	r3, [pc, #384]	; (800239c <MX_GPIO_Init+0x1d4>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b5d      	ldr	r3, [pc, #372]	; (800239c <MX_GPIO_Init+0x1d4>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a5c      	ldr	r2, [pc, #368]	; (800239c <MX_GPIO_Init+0x1d4>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b5a      	ldr	r3, [pc, #360]	; (800239c <MX_GPIO_Init+0x1d4>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800223c:	4b57      	ldr	r3, [pc, #348]	; (800239c <MX_GPIO_Init+0x1d4>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a56      	ldr	r2, [pc, #344]	; (800239c <MX_GPIO_Init+0x1d4>)
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b54      	ldr	r3, [pc, #336]	; (800239c <MX_GPIO_Init+0x1d4>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002254:	2200      	movs	r2, #0
 8002256:	2107      	movs	r1, #7
 8002258:	4851      	ldr	r0, [pc, #324]	; (80023a0 <MX_GPIO_Init+0x1d8>)
 800225a:	f005 f948 	bl	80074ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	2140      	movs	r1, #64	; 0x40
 8002262:	484f      	ldr	r0, [pc, #316]	; (80023a0 <MX_GPIO_Init+0x1d8>)
 8002264:	f005 f943 	bl	80074ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002268:	2201      	movs	r2, #1
 800226a:	2123      	movs	r1, #35	; 0x23
 800226c:	484d      	ldr	r0, [pc, #308]	; (80023a4 <MX_GPIO_Init+0x1dc>)
 800226e:	f005 f93e 	bl	80074ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002278:	484b      	ldr	r0, [pc, #300]	; (80023a8 <MX_GPIO_Init+0x1e0>)
 800227a:	f005 f938 	bl	80074ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002284:	4847      	ldr	r0, [pc, #284]	; (80023a4 <MX_GPIO_Init+0x1dc>)
 8002286:	f005 f932 	bl	80074ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800228a:	2347      	movs	r3, #71	; 0x47
 800228c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	4619      	mov	r1, r3
 80022a0:	483f      	ldr	r0, [pc, #252]	; (80023a0 <MX_GPIO_Init+0x1d8>)
 80022a2:	f004 ff75 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022a6:	2308      	movs	r3, #8
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4619      	mov	r1, r3
 80022b8:	4839      	ldr	r0, [pc, #228]	; (80023a0 <MX_GPIO_Init+0x1d8>)
 80022ba:	f004 ff69 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022be:	2310      	movs	r3, #16
 80022c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022c2:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <MX_GPIO_Init+0x1e4>)
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ca:	f107 0318 	add.w	r3, r7, #24
 80022ce:	4619      	mov	r1, r3
 80022d0:	4833      	ldr	r0, [pc, #204]	; (80023a0 <MX_GPIO_Init+0x1d8>)
 80022d2:	f004 ff5d 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 80022d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <MX_GPIO_Init+0x1e8>)
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0318 	add.w	r3, r7, #24
 80022e8:	4619      	mov	r1, r3
 80022ea:	4832      	ldr	r0, [pc, #200]	; (80023b4 <MX_GPIO_Init+0x1ec>)
 80022ec:	f004 ff50 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f4:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <MX_GPIO_Init+0x1e8>)
 80022f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0318 	add.w	r3, r7, #24
 8002300:	4619      	mov	r1, r3
 8002302:	482d      	ldr	r0, [pc, #180]	; (80023b8 <MX_GPIO_Init+0x1f0>)
 8002304:	f004 ff44 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8002308:	f240 1323 	movw	r3, #291	; 0x123
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	4619      	mov	r1, r3
 8002320:	4820      	ldr	r0, [pc, #128]	; (80023a4 <MX_GPIO_Init+0x1dc>)
 8002322:	f004 ff35 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002326:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800232a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002338:	f107 0318 	add.w	r3, r7, #24
 800233c:	4619      	mov	r1, r3
 800233e:	481a      	ldr	r0, [pc, #104]	; (80023a8 <MX_GPIO_Init+0x1e0>)
 8002340:	f004 ff26 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2302      	movs	r3, #2
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	4619      	mov	r1, r3
 800235c:	4811      	ldr	r0, [pc, #68]	; (80023a4 <MX_GPIO_Init+0x1dc>)
 800235e:	f004 ff17 	bl	8007190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	2006      	movs	r0, #6
 8002368:	f004 fdd3 	bl	8006f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800236c:	2006      	movs	r0, #6
 800236e:	f004 fdec 	bl	8006f4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	200a      	movs	r0, #10
 8002378:	f004 fdcb 	bl	8006f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800237c:	200a      	movs	r0, #10
 800237e:	f004 fde4 	bl	8006f4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	2028      	movs	r0, #40	; 0x28
 8002388:	f004 fdc3 	bl	8006f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800238c:	2028      	movs	r0, #40	; 0x28
 800238e:	f004 fddc 	bl	8006f4a <HAL_NVIC_EnableIRQ>

}
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40011800 	.word	0x40011800
 80023a4:	40010c00 	.word	0x40010c00
 80023a8:	40011400 	.word	0x40011400
 80023ac:	10210000 	.word	0x10210000
 80023b0:	10110000 	.word	0x10110000
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40010800 	.word	0x40010800

080023bc <_ZN6StringC1Et>:
    String(uint16_t n): String((int)n){}
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff f8f9 	bl	80015c4 <_ZN6StringC1Ei>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZN8SERVO42C11receiveUARTEh>:
    uint8_t* receiveUART(uint8_t len){
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
        HAL_UART_Receive(pUART, data, len+1, 50);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	2332      	movs	r3, #50	; 0x32
 80023f6:	4927      	ldr	r1, [pc, #156]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 80023f8:	f006 fe6d 	bl	80090d6 <HAL_UART_Receive>
        uint8_t offset = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
        if (data[0] == address){
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d102      	bne.n	8002412 <_ZN8SERVO42C11receiveUARTEh+0x36>
            offset = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e00a      	b.n	8002428 <_ZN8SERVO42C11receiveUARTEh+0x4c>
        }else if (data[1] == address){
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8002414:	785a      	ldrb	r2, [r3, #1]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	791b      	ldrb	r3, [r3, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d102      	bne.n	8002424 <_ZN8SERVO42C11receiveUARTEh+0x48>
            offset = 1;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e001      	b.n	8002428 <_ZN8SERVO42C11receiveUARTEh+0x4c>
            return nullptr;
 8002424:	2300      	movs	r3, #0
 8002426:	e030      	b.n	800248a <_ZN8SERVO42C11receiveUARTEh+0xae>
        if (data[len-1+offset] == getCRC(data+offset, len-1)){
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	4413      	add	r3, r2
 8002430:	4a18      	ldr	r2, [pc, #96]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8002432:	5cd4      	ldrb	r4, [r2, r3]
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	4a17      	ldr	r2, [pc, #92]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8002438:	441a      	add	r2, r3
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	3b01      	subs	r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7ff f94f 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 8002448:	4603      	mov	r3, r0
 800244a:	429c      	cmp	r4, r3
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d017      	beq.n	8002488 <_ZN8SERVO42C11receiveUARTEh+0xac>
            if (offset == 1){
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d112      	bne.n	8002484 <_ZN8SERVO42C11receiveUARTEh+0xa8>
                for (int i=0; i<len; i++){
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	429a      	cmp	r2, r3
 8002468:	da0c      	bge.n	8002484 <_ZN8SERVO42C11receiveUARTEh+0xa8>
                    data[i] = data[i+1];
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8002470:	5cd1      	ldrb	r1, [r2, r3]
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4413      	add	r3, r2
 8002478:	460a      	mov	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
                for (int i=0; i<len; i++){
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3301      	adds	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	e7ee      	b.n	8002462 <_ZN8SERVO42C11receiveUARTEh+0x86>
            return data;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <_ZN8SERVO42C11receiveUARTEh+0xb8>)
 8002486:	e000      	b.n	800248a <_ZN8SERVO42C11receiveUARTEh+0xae>
            return nullptr;
 8002488:	2300      	movs	r3, #0
    }
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}
 8002492:	bf00      	nop
 8002494:	200002c4 	.word	0x200002c4

08002498 <_ZN8SERVO42C11receiveUARTEht>:
    uint8_t* receiveUART(uint8_t len, uint16_t maxRetry){
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
 80024a4:	4613      	mov	r3, r2
 80024a6:	803b      	strh	r3, [r7, #0]
        uint8_t* data = nullptr;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
        while (data==nullptr){
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <_ZN8SERVO42C11receiveUARTEht+0x36>
            data = receiveUART(len);
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff90 	bl	80023dc <_ZN8SERVO42C11receiveUARTEh>
 80024bc:	60f8      	str	r0, [r7, #12]
            maxRetry--;
 80024be:	883b      	ldrh	r3, [r7, #0]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	803b      	strh	r3, [r7, #0]
            if (maxRetry==0){
 80024c4:	883b      	ldrh	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d000      	beq.n	80024cc <_ZN8SERVO42C11receiveUARTEht+0x34>
        while (data==nullptr){
 80024ca:	e7ef      	b.n	80024ac <_ZN8SERVO42C11receiveUARTEht+0x14>
                break;
 80024cc:	bf00      	nop
        return data;
 80024ce:	68fb      	ldr	r3, [r7, #12]
    }
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_ZN8SERVO42C21alignAbsolutePositionEi>:
    void alignAbsolutePosition(int direction = 0){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0fc      	sub	sp, #496	; 0x1f0
 80024dc:	af00      	add	r7, sp, #0
 80024de:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80024e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024e6:	6018      	str	r0, [r3, #0]
 80024e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80024ec:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80024f0:	6019      	str	r1, [r3, #0]
        setMaxTorque(750);
 80024f2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80024f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024fa:	f240 21ee 	movw	r1, #750	; 0x2ee
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f000 f94d 	bl	800279e <_ZN8SERVO42C12setMaxTorqueEt>
        HAL_Delay(500);
 8002504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002508:	f004 f9f0 	bl	80068ec <HAL_Delay>
        spin(direction, 100);
 800250c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002510:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b2d9      	uxtb	r1, r3
 8002518:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800251c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002520:	2264      	movs	r2, #100	; 0x64
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f000 f8ec 	bl	8002700 <_ZN8SERVO42C4spinEhh>
        uint16_t lastEncoder = 65535;
 8002528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252c:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
        printToLCD("Stage 1",0);
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	4966      	ldr	r1, [pc, #408]	; (80026d0 <_ZN8SERVO42C21alignAbsolutePositionEi+0x1f8>)
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe ff94 	bl	8001464 <_ZN6StringC1EPKc>
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f003 feac 	bl	80062a0 <_Z10printToLCDRK6Stringt>
            bool received = receiveEncoder();
 8002548:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800254c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002550:	2103      	movs	r1, #3
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f000 f94c 	bl	80027f0 <_ZN8SERVO42C14receiveEncoderEi>
 8002558:	4603      	mov	r3, r0
 800255a:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
            int16_t absDifference = encoder - lastEncoder;
 800255e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002562:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	88da      	ldrh	r2, [r3, #6]
 800256a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29b      	uxth	r3, r3
 8002572:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
            absDifference = absDifference>0?absDifference:-absDifference;
 8002576:	f9b7 31ea 	ldrsh.w	r3, [r7, #490]	; 0x1ea
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfb8      	it	lt
 800257e:	425b      	neglt	r3, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
            printToLCD("Last: "+String(lastEncoder)+", Now: "+String(encoder),1);
 8002586:	f8b7 21ee 	ldrh.w	r2, [r7, #494]	; 0x1ee
 800258a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff13 	bl	80023bc <_ZN6StringC1Et>
 8002596:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800259a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800259e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80025a2:	494c      	ldr	r1, [pc, #304]	; (80026d4 <_ZN8SERVO42C21alignAbsolutePositionEi+0x1fc>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fe57 	bl	8006258 <_ZplPKcRK6String>
 80025aa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80025ae:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80025b2:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80025b6:	4a48      	ldr	r2, [pc, #288]	; (80026d8 <_ZN8SERVO42C21alignAbsolutePositionEi+0x200>)
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f84f 	bl	800165c <_ZN6StringplEPKc>
 80025be:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80025c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	88da      	ldrh	r2, [r3, #6]
 80025ca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fef3 	bl	80023bc <_ZN6StringC1Et>
 80025d6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80025da:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80025de:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80025e2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f85c 	bl	80016a4 <_ZN6StringplERKS_>
 80025ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fe54 	bl	80062a0 <_Z10printToLCDRK6Stringt>
            if (received && absDifference<100){
 80025f8:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <_ZN8SERVO42C21alignAbsolutePositionEi+0x130>
 8002600:	f9b7 31ea 	ldrsh.w	r3, [r7, #490]	; 0x1ea
 8002604:	2b63      	cmp	r3, #99	; 0x63
 8002606:	dd0c      	ble.n	8002622 <_ZN8SERVO42C21alignAbsolutePositionEi+0x14a>
            lastEncoder = encoder;
 8002608:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800260c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	88db      	ldrh	r3, [r3, #6]
 8002614:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
            HAL_Delay(300);
 8002618:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800261c:	f004 f966 	bl	80068ec <HAL_Delay>
        }
 8002620:	e792      	b.n	8002548 <_ZN8SERVO42C21alignAbsolutePositionEi+0x70>
                break;
 8002622:	bf00      	nop
        printToLCD("Stage 2",0);
 8002624:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8002628:	492c      	ldr	r1, [pc, #176]	; (80026dc <_ZN8SERVO42C21alignAbsolutePositionEi+0x204>)
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe ff1a 	bl	8001464 <_ZN6StringC1EPKc>
 8002630:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fe32 	bl	80062a0 <_Z10printToLCDRK6Stringt>
        setMaxTorque(1199);
 800263c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002640:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002644:	f240 41af 	movw	r1, #1199	; 0x4af
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	f000 f8a8 	bl	800279e <_ZN8SERVO42C12setMaxTorqueEt>
        HAL_Delay(200);
 800264e:	20c8      	movs	r0, #200	; 0xc8
 8002650:	f004 f94c 	bl	80068ec <HAL_Delay>
        step(!direction, 3, 1000);
 8002654:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002658:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800266e:	f5a3 70f6 	sub.w	r0, r3, #492	; 0x1ec
 8002672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002676:	2203      	movs	r2, #3
 8002678:	6800      	ldr	r0, [r0, #0]
 800267a:	f7ff fa7b 	bl	8001b74 <_ZN8SERVO42C4stepEhhm>
        HAL_Delay(500);
 800267e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002682:	f004 f933 	bl	80068ec <HAL_Delay>
        zeroEncoder = encoder;
 8002686:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800268a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	88da      	ldrh	r2, [r3, #6]
 8002692:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002696:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	811a      	strh	r2, [r3, #8]
        zeroEncoderCarry = encoderCarry;
 800269e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80026a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80026ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	611a      	str	r2, [r3, #16]
        enableAbsolutePosControl = true;
 80026b6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80026ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	775a      	strb	r2, [r3, #29]
    }
 80026c4:	bf00      	nop
 80026c6:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	0800a5c0 	.word	0x0800a5c0
 80026d4:	0800a5c8 	.word	0x0800a5c8
 80026d8:	0800a5d0 	.word	0x0800a5d0
 80026dc:	0800a5d8 	.word	0x0800a5d8

080026e0 <_ZN8SERVO42C13stepClockwiseEm>:
        debugLog("step started",19);
        data = receiveUART(3);
        debugLog("step finished",19);
    }

    void stepClockwise(uint32_t stepCount){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
        step(0, stepSpeed, stepCount);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7f9a      	ldrb	r2, [r3, #30]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2100      	movs	r1, #0
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fa3e 	bl	8001b74 <_ZN8SERVO42C4stepEhhm>
    }
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_ZN8SERVO42C4spinEhh>:
    }

    

    // speed: 0~0x7f i.e. 0~127
    void spin(uint8_t direction, uint8_t speed){
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
 800270c:	4613      	mov	r3, r2
 800270e:	70bb      	strb	r3, [r7, #2]
        uint8_t instruction[4] = {};
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
        instruction[0] = address;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	791b      	ldrb	r3, [r3, #4]
 8002718:	733b      	strb	r3, [r7, #12]
        instruction[1] = 0xf6;
 800271a:	23f6      	movs	r3, #246	; 0xf6
 800271c:	737b      	strb	r3, [r7, #13]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	01db      	lsls	r3, r3, #7
 8002722:	b25a      	sxtb	r2, r3
 8002724:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272c:	b25b      	sxtb	r3, r3
 800272e:	4313      	orrs	r3, r2
 8002730:	b25b      	sxtb	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	73bb      	strb	r3, [r7, #14]
        instruction[3] = getCRC(instruction, 3);
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	2103      	movs	r1, #3
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe ffd2 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 8002742:	4603      	mov	r3, r0
 8002744:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(pUART, instruction, 4, 100);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	f107 010c 	add.w	r1, r7, #12
 800274e:	2364      	movs	r3, #100	; 0x64
 8002750:	2204      	movs	r2, #4
 8002752:	f006 fc27 	bl	8008fa4 <HAL_UART_Transmit>
    }
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_ZN8SERVO42C13spinClockwiseEh>:
    void spinClockwise(uint8_t speed){
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
        spin(0, speed);
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	461a      	mov	r2, r3
 800276e:	2100      	movs	r1, #0
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ffc5 	bl	8002700 <_ZN8SERVO42C4spinEhh>
    }
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZN8SERVO42C20spinCounterClockwiseEh>:
    void spinCounterClockwise(uint8_t speed){
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	70fb      	strb	r3, [r7, #3]
        spin(1, speed);
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	461a      	mov	r2, r3
 800278e:	2101      	movs	r1, #1
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffb5 	bl	8002700 <_ZN8SERVO42C4spinEhh>
    }
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_ZN8SERVO42C12setMaxTorqueEt>:
        instruction[2] = getCRC(instruction, 2);
        HAL_UART_Transmit(pUART, instruction, 3, 50);
    }

    // torque: 0~0x4B0, i.e. 0~1200
    void setMaxTorque(uint16_t torque){
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
        uint8_t instruction[5] = {};
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	2300      	movs	r3, #0
 80027b0:	733b      	strb	r3, [r7, #12]
        instruction[0] = address;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	791b      	ldrb	r3, [r3, #4]
 80027b6:	723b      	strb	r3, [r7, #8]
        instruction[1] = 0xa5;
 80027b8:	23a5      	movs	r3, #165	; 0xa5
 80027ba:	727b      	strb	r3, [r7, #9]
        instruction[2] = (torque<<8);
 80027bc:	2300      	movs	r3, #0
 80027be:	72bb      	strb	r3, [r7, #10]
        instruction[3] = torque&0xFF;
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	72fb      	strb	r3, [r7, #11]
        instruction[4] = getCRC(instruction, 4);
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	2104      	movs	r1, #4
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe ff8a 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 80027d2:	4603      	mov	r3, r0
 80027d4:	733b      	strb	r3, [r7, #12]
        HAL_UART_Transmit(pUART, instruction, 5, 100);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f107 0108 	add.w	r1, r7, #8
 80027de:	2364      	movs	r3, #100	; 0x64
 80027e0:	2205      	movs	r2, #5
 80027e2:	f006 fbdf 	bl	8008fa4 <HAL_UART_Transmit>
    }
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <_ZN8SERVO42C14receiveEncoderEi>:
    

    bool receiveEncoder(int retryCount = 3){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
        // send instruction to request encoder
        uint8_t instruction[3] = {};
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <_ZN8SERVO42C14receiveEncoderEi+0xb4>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	723b      	strb	r3, [r7, #8]
 8002800:	f107 0309 	add.w	r3, r7, #9
 8002804:	2200      	movs	r2, #0
 8002806:	801a      	strh	r2, [r3, #0]
        instruction[0] = address;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	723b      	strb	r3, [r7, #8]
        instruction[1] = 0x30;
 800280e:	2330      	movs	r3, #48	; 0x30
 8002810:	727b      	strb	r3, [r7, #9]
        instruction[2] = getCRC(instruction, 2);
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe ff64 	bl	80016e6 <_ZN8SERVO42C6getCRCEPhh>
 800281e:	4603      	mov	r3, r0
 8002820:	72bb      	strb	r3, [r7, #10]
        while (retryCount>0){
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dd38      	ble.n	800289a <_ZN8SERVO42C14receiveEncoderEi+0xaa>
            HAL_UART_Transmit(pUART, instruction, 3, 50);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	f107 0108 	add.w	r1, r7, #8
 8002830:	2332      	movs	r3, #50	; 0x32
 8002832:	2203      	movs	r2, #3
 8002834:	f006 fbb6 	bl	8008fa4 <HAL_UART_Transmit>
            uint8_t* data = receiveUART(8, 3);
 8002838:	2203      	movs	r2, #3
 800283a:	2108      	movs	r1, #8
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fe2b 	bl	8002498 <_ZN8SERVO42C11receiveUARTEht>
 8002842:	60f8      	str	r0, [r7, #12]
            if (data!=nullptr){
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d023      	beq.n	8002892 <_ZN8SERVO42C14receiveEncoderEi+0xa2>
                encoder = data[5]<<8 | data[6];
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3305      	adds	r3, #5
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b21a      	sxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3306      	adds	r3, #6
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b21b      	sxth	r3, r3
 800285c:	4313      	orrs	r3, r2
 800285e:	b21b      	sxth	r3, r3
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	80da      	strh	r2, [r3, #6]
                encoderCarry = data[1]<<24 | data[2]<<16 | data[3]<<8 | data[4];
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3301      	adds	r3, #1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	061a      	lsls	r2, r3, #24
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3302      	adds	r3, #2
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3303      	adds	r3, #3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4313      	orrs	r3, r2
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	3204      	adds	r2, #4
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	60da      	str	r2, [r3, #12]
                return true;
 800288e:	2301      	movs	r3, #1
 8002890:	e004      	b.n	800289c <_ZN8SERVO42C14receiveEncoderEi+0xac>
            }
            retryCount--;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	3b01      	subs	r3, #1
 8002896:	603b      	str	r3, [r7, #0]
        while (retryCount>0){
 8002898:	e7c3      	b.n	8002822 <_ZN8SERVO42C14receiveEncoderEi+0x32>
        }
        return false;
 800289a:	2300      	movs	r3, #0
    }
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	0800a5e4 	.word	0x0800a5e4

080028a8 <_ZN9UIElementC1Etttt>:

    uint16_t x, y;
    uint16_t width, height;

protected:
    UIElement(uint16_t x, uint16_t y, uint16_t width, uint16_t height)
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
    {
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <_ZN9UIElementC1Etttt+0x5c>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]
        this->x = x;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	897a      	ldrh	r2, [r7, #10]
 80028cc:	809a      	strh	r2, [r3, #4]
        this->y = y;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	893a      	ldrh	r2, [r7, #8]
 80028d2:	80da      	strh	r2, [r3, #6]
        this->width = width;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	811a      	strh	r2, [r3, #8]
        this->height = height;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8b3a      	ldrh	r2, [r7, #24]
 80028de:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <_ZN9UIElementC1Etttt+0x60>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	b2d1      	uxtb	r1, r2
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <_ZN9UIElementC1Etttt+0x60>)
 80028ea:	7011      	strb	r1, [r2, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	4a07      	ldr	r2, [pc, #28]	; (800290c <_ZN9UIElementC1Etttt+0x64>)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	0800a6a4 	.word	0x0800a6a4
 8002908:	20000144 	.word	0x20000144
 800290c:	200000c4 	.word	0x200000c4

08002910 <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y)
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	803b      	strh	r3, [r7, #0]
    {
        return x >= this->x && x <= this->x + width && y >= this->y && y <= this->y + height;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	889b      	ldrh	r3, [r3, #4]
 8002924:	887a      	ldrh	r2, [r7, #2]
 8002926:	429a      	cmp	r2, r3
 8002928:	d318      	bcc.n	800295c <_ZN9UIElement10checkTouchEtt+0x4c>
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	4619      	mov	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	891b      	ldrh	r3, [r3, #8]
 8002936:	440b      	add	r3, r1
 8002938:	429a      	cmp	r2, r3
 800293a:	dc0f      	bgt.n	800295c <_ZN9UIElement10checkTouchEtt+0x4c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	88db      	ldrh	r3, [r3, #6]
 8002940:	883a      	ldrh	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d30a      	bcc.n	800295c <_ZN9UIElement10checkTouchEtt+0x4c>
 8002946:	883a      	ldrh	r2, [r7, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	88db      	ldrh	r3, [r3, #6]
 800294c:	4619      	mov	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	895b      	ldrh	r3, [r3, #10]
 8002952:	440b      	add	r3, r1
 8002954:	429a      	cmp	r2, r3
 8002956:	dc01      	bgt.n	800295c <_ZN9UIElement10checkTouchEtt+0x4c>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <_ZN9UIElement10checkTouchEtt+0x4e>
 800295c:	2300      	movs	r3, #0
    }
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <_ZN6ButtonC1EttPctttt>:
    bool isPressed = false;
    void (*onPressed)() = nullptr;
    void (*whilePressing)() = nullptr;
    void (*onReleased)() = nullptr;

    Button(uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b087      	sub	sp, #28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	4613      	mov	r3, r2
 8002978:	813b      	strh	r3, [r7, #8]
        : UIElement(x, y, width, height)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	8c3c      	ldrh	r4, [r7, #32]
 800297e:	893a      	ldrh	r2, [r7, #8]
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4623      	mov	r3, r4
 8002988:	f7ff ff8e 	bl	80028a8 <_ZN9UIElementC1Etttt>
 800298c:	4a13      	ldr	r2, [pc, #76]	; (80029dc <_ZN6ButtonC1EttPctttt+0x74>)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	819a      	strh	r2, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
    {
        this->initialColor = color;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029b6:	81da      	strh	r2, [r3, #14]
        this->color = color;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029bc:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80029c2:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3314      	adds	r3, #20
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f007 f96d 	bl	8009caa <strcpy>
    }
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	bf00      	nop
 80029dc:	0800a694 	.word	0x0800a694

080029e0 <_ZN6Button6renderEv>:
    void setOnReleased(void (*onReleased)())
    {
        this->onReleased = onReleased;
    }

    void render() override
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8898      	ldrh	r0, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	88d9      	ldrh	r1, [r3, #6]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	891a      	ldrh	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	895b      	ldrh	r3, [r3, #10]
 80029f8:	f000 ff36 	bl	8003868 <LCD_OpenWindow>
        LCD_FillColor(width * height, color);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	891b      	ldrh	r3, [r3, #8]
 8002a00:	461a      	mov	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	895b      	ldrh	r3, [r3, #10]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8a1b      	ldrh	r3, [r3, #16]
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 ff81 	bl	800391a <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x + width / 3, y + height / 3, text, color, textColor);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	889a      	ldrh	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	891b      	ldrh	r3, [r3, #8]
 8002a20:	4910      	ldr	r1, [pc, #64]	; (8002a64 <_ZN6Button6renderEv+0x84>)
 8002a22:	fba1 1303 	umull	r1, r3, r1, r3
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b298      	uxth	r0, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	88da      	ldrh	r2, [r3, #6]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	895b      	ldrh	r3, [r3, #10]
 8002a36:	490b      	ldr	r1, [pc, #44]	; (8002a64 <_ZN6Button6renderEv+0x84>)
 8002a38:	fba1 1303 	umull	r1, r3, r1, r3
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	b299      	uxth	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 0214 	add.w	r2, r3, #20
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8a1c      	ldrh	r4, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8a5b      	ldrh	r3, [r3, #18]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4623      	mov	r3, r4
 8002a56:	f001 f887 	bl	8003b68 <LCD_DrawString_Color>
    }
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	aaaaaaab 	.word	0xaaaaaaab

08002a68 <_ZN6Button6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	883a      	ldrh	r2, [r7, #0]
 8002a7c:	8879      	ldrh	r1, [r7, #2]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff46 	bl	8002910 <_ZN9UIElement10checkTouchEtt>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00f      	beq.n	8002aaa <_ZN6Button6updateEtt+0x42>
        {
            color = YELLOW;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a90:	821a      	strh	r2, [r3, #16]
            // if (!isPressed)
            //{ // only trigger once
            isPressed = true;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (whilePressing)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <_ZN6Button6updateEtt+0x52>
                whilePressing();
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	4798      	blx	r3
 8002aa8:	e007      	b.n	8002aba <_ZN6Button6updateEtt+0x52>
            //}
        }
        else
        {
            color = initialColor;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	89da      	ldrh	r2, [r3, #14]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	899a      	ldrh	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8a1b      	ldrh	r3, [r3, #16]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d023      	beq.n	8002b0e <_ZN6Button6updateEtt+0xa6>
        {
            if (isPressed && onPressed){
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <_ZN6Button6updateEtt+0x76>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <_ZN6Button6updateEtt+0x76>
                onPressed();
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	4798      	blx	r3
            }
            if (!isPressed && onReleased)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <_ZN6Button6updateEtt+0x94>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <_ZN6Button6updateEtt+0x94>
                onReleased();
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4798      	blx	r3
            render();
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
            last_color = color;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8a1a      	ldrh	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	819a      	strh	r2, [r3, #12]
        }
    }
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <_ZN6SliderC1Etttttt>:

    uint16_t draggerX;
    uint16_t draggerY;

public:
    Slider(
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	817b      	strh	r3, [r7, #10]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	813b      	strh	r3, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
        uint16_t x,
        uint16_t y,
        uint16_t maxValue = 0,
        uint16_t width = 10,
        uint16_t height = 130,
        uint16_t barColor = CYAN) : UIElement(x, y, width, height)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	8c3c      	ldrh	r4, [r7, #32]
 8002b36:	893a      	ldrh	r2, [r7, #8]
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4623      	mov	r3, r4
 8002b40:	f7ff feb2 	bl	80028a8 <_ZN9UIElementC1Etttt>
 8002b44:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <_ZN6SliderC1Etttttt+0x74>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2214      	movs	r2, #20
 8002b4e:	82da      	strh	r2, [r3, #22]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	761a      	strb	r2, [r3, #24]
    {
        this->maxValue = maxValue;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	829a      	strh	r2, [r3, #20]
        this->barColor = barColor;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b60:	819a      	strh	r2, [r3, #12]
        draggerX = x + width / 2;
 8002b62:	8c3b      	ldrh	r3, [r7, #32]
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	835a      	strh	r2, [r3, #26]
        draggerY = y + height / 2;
 8002b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	839a      	strh	r2, [r3, #28]
    }
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	0800a684 	.word	0x0800a684

08002b90 <_ZN6Slider6renderEv>:

    void render() override
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    {
        // render bar
        LCD_OpenWindow(x, y, width, height);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8898      	ldrh	r0, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	88d9      	ldrh	r1, [r3, #6]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	891a      	ldrh	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	895b      	ldrh	r3, [r3, #10]
 8002ba8:	f000 fe5e 	bl	8003868 <LCD_OpenWindow>
        LCD_FillColor(width * height, barColor);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	891b      	ldrh	r3, [r3, #8]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	895b      	ldrh	r3, [r3, #10]
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	899b      	ldrh	r3, [r3, #12]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f000 fea9 	bl	800391a <LCD_FillColor>

        // render dragger
        LCD_OpenWindow(x, draggerY, width, draggerRadius);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8898      	ldrh	r0, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8b99      	ldrh	r1, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	891a      	ldrh	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8adb      	ldrh	r3, [r3, #22]
 8002bd8:	f000 fe46 	bl	8003868 <LCD_OpenWindow>
        LCD_FillColor(width * draggerRadius, RED);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	891b      	ldrh	r3, [r3, #8]
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8adb      	ldrh	r3, [r3, #22]
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fe93 	bl	800391a <LCD_FillColor>
    }
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_ZN6Slider5wrapYEt>:

    uint16_t wrapY(u_int16_t y)
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
    {
        if (y > 500 || y==0)
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c0e:	d802      	bhi.n	8002c16 <_ZN6Slider5wrapYEt+0x1a>
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <_ZN6Slider5wrapYEt+0x20>
            return draggerY; // y=2048 if not touched
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8b9b      	ldrh	r3, [r3, #28]
 8002c1a:	e01f      	b.n	8002c5c <_ZN6Slider5wrapYEt+0x60>
        if (y < this->y)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	88db      	ldrh	r3, [r3, #6]
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d202      	bcs.n	8002c2c <_ZN6Slider5wrapYEt+0x30>
            return this->y;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	88db      	ldrh	r3, [r3, #6]
 8002c2a:	e017      	b.n	8002c5c <_ZN6Slider5wrapYEt+0x60>
        if (y > this->y + height - draggerRadius)
 8002c2c:	887a      	ldrh	r2, [r7, #2]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	88db      	ldrh	r3, [r3, #6]
 8002c32:	4619      	mov	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	895b      	ldrh	r3, [r3, #10]
 8002c38:	440b      	add	r3, r1
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	8ac9      	ldrh	r1, [r1, #22]
 8002c3e:	1a5b      	subs	r3, r3, r1
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dd0a      	ble.n	8002c5a <_ZN6Slider5wrapYEt+0x5e>
            return this->y + height - draggerRadius;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	88da      	ldrh	r2, [r3, #6]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	895b      	ldrh	r3, [r3, #10]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8adb      	ldrh	r3, [r3, #22]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	e000      	b.n	8002c5c <_ZN6Slider5wrapYEt+0x60>
        return y;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
    }
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <_ZN6Slider6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	803b      	strh	r3, [r7, #0]
    {
        bool isDraggerTouched;
        if (isDragging)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7e1b      	ldrb	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d04a      	beq.n	8002d14 <_ZN6Slider6updateEtt+0xae>
        {
            draggerY = wrapY(y);
 8002c7e:	883b      	ldrh	r3, [r7, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffba 	bl	8002bfc <_ZN6Slider5wrapYEt>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	839a      	strh	r2, [r3, #28]
            render();
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
            isDraggerTouched = x >= draggerX - 6 * draggerRadius && x <= draggerX + 6 * draggerRadius && y >= draggerY - 6*draggerRadius && y <= draggerY + 6*draggerRadius;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8b5b      	ldrh	r3, [r3, #26]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8adb      	ldrh	r3, [r3, #22]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	460b      	mov	r3, r1
 8002caa:	0089      	lsls	r1, r1, #2
 8002cac:	1a5b      	subs	r3, r3, r1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4403      	add	r3, r0
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	db2b      	blt.n	8002d0e <_ZN6Slider6updateEtt+0xa8>
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8b5b      	ldrh	r3, [r3, #26]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8adb      	ldrh	r3, [r3, #22]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	440b      	add	r3, r1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4403      	add	r3, r0
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dc1d      	bgt.n	8002d0e <_ZN6Slider6updateEtt+0xa8>
 8002cd2:	883a      	ldrh	r2, [r7, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8b9b      	ldrh	r3, [r3, #28]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8adb      	ldrh	r3, [r3, #22]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	0089      	lsls	r1, r1, #2
 8002ce4:	1a5b      	subs	r3, r3, r1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4403      	add	r3, r0
 8002cea:	429a      	cmp	r2, r3
 8002cec:	db0f      	blt.n	8002d0e <_ZN6Slider6updateEtt+0xa8>
 8002cee:	883a      	ldrh	r2, [r7, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8b9b      	ldrh	r3, [r3, #28]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8adb      	ldrh	r3, [r3, #22]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	440b      	add	r3, r1
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4403      	add	r3, r0
 8002d06:	429a      	cmp	r2, r3
 8002d08:	dc01      	bgt.n	8002d0e <_ZN6Slider6updateEtt+0xa8>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <_ZN6Slider6updateEtt+0xaa>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e027      	b.n	8002d64 <_ZN6Slider6updateEtt+0xfe>
        }
        else
        {
            isDraggerTouched = x >= draggerX - draggerRadius && x <= draggerX + draggerRadius && y >= draggerY - draggerRadius && y <= draggerY + draggerRadius;
 8002d14:	887a      	ldrh	r2, [r7, #2]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8b5b      	ldrh	r3, [r3, #26]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8adb      	ldrh	r3, [r3, #22]
 8002d20:	1acb      	subs	r3, r1, r3
 8002d22:	429a      	cmp	r2, r3
 8002d24:	db1c      	blt.n	8002d60 <_ZN6Slider6updateEtt+0xfa>
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8b5b      	ldrh	r3, [r3, #26]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8adb      	ldrh	r3, [r3, #22]
 8002d32:	440b      	add	r3, r1
 8002d34:	429a      	cmp	r2, r3
 8002d36:	dc13      	bgt.n	8002d60 <_ZN6Slider6updateEtt+0xfa>
 8002d38:	883a      	ldrh	r2, [r7, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8b9b      	ldrh	r3, [r3, #28]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8adb      	ldrh	r3, [r3, #22]
 8002d44:	1acb      	subs	r3, r1, r3
 8002d46:	429a      	cmp	r2, r3
 8002d48:	db0a      	blt.n	8002d60 <_ZN6Slider6updateEtt+0xfa>
 8002d4a:	883a      	ldrh	r2, [r7, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8b9b      	ldrh	r3, [r3, #28]
 8002d50:	4619      	mov	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8adb      	ldrh	r3, [r3, #22]
 8002d56:	440b      	add	r3, r1
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dc01      	bgt.n	8002d60 <_ZN6Slider6updateEtt+0xfa>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <_ZN6Slider6updateEtt+0xfc>
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
        }
        isDragging = isDraggerTouched;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	761a      	strb	r2, [r3, #24]
        value = (draggerY - this->y) * maxValue / height;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8b9b      	ldrh	r3, [r3, #28]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	88db      	ldrh	r3, [r3, #6]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	8a92      	ldrh	r2, [r2, #20]
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	8952      	ldrh	r2, [r2, #10]
 8002d82:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd ffae 	bl	8000ce8 <__aeabi_i2f>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	611a      	str	r2, [r3, #16]
    }
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <_ZN8TouchPadC1EttPFvPS_iiEttt>:
    uint16_t dotY;
    uint16_t lastDotX = 0;
    uint16_t lastDotY = 0;
    void (*onPressed)(TouchPad *, int, int) = nullptr;

    TouchPad(uint16_t x, uint16_t y, void (*onPressed)(TouchPad *, int, int) = nullptr, uint16_t width = 150, uint16_t height = 150, uint16_t color = CYAN)
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	817b      	strh	r3, [r7, #10]
 8002daa:	4613      	mov	r3, r2
 8002dac:	813b      	strh	r3, [r7, #8]
        : UIElement(x, y, width, height)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	8c3c      	ldrh	r4, [r7, #32]
 8002db2:	893a      	ldrh	r2, [r7, #8]
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	4623      	mov	r3, r4
 8002dbc:	f7ff fd74 	bl	80028a8 <_ZN9UIElementC1Etttt>
 8002dc0:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <_ZN8TouchPadC1EttPFvPS_iiEttt+0x84>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	220a      	movs	r2, #10
 8002dca:	81da      	strh	r2, [r3, #14]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	829a      	strh	r2, [r3, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	82da      	strh	r2, [r3, #22]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
    {
        this->x = x;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	897a      	ldrh	r2, [r7, #10]
 8002de2:	809a      	strh	r2, [r3, #4]
        this->y = y;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	893a      	ldrh	r2, [r7, #8]
 8002de8:	80da      	strh	r2, [r3, #6]
        this->width = width;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8c3a      	ldrh	r2, [r7, #32]
 8002dee:	811a      	strh	r2, [r3, #8]
        this->height = height;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002df4:	815a      	strh	r2, [r3, #10]
        this->color = color;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002dfa:	819a      	strh	r2, [r3, #12]
        dotX = width / 2;
 8002dfc:	8c3b      	ldrh	r3, [r7, #32]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	821a      	strh	r2, [r3, #16]
        dotY = height / 2;
 8002e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	825a      	strh	r2, [r3, #18]
        this->onPressed = onPressed;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
    }
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}
 8002e20:	0800a674 	.word	0x0800a674

08002e24 <_ZN8TouchPad6renderEv>:

    void render() override
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    {
        // render background
        LCD_OpenWindow(x, y, width, height);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8898      	ldrh	r0, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	88d9      	ldrh	r1, [r3, #6]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	891a      	ldrh	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	895b      	ldrh	r3, [r3, #10]
 8002e3c:	f000 fd14 	bl	8003868 <LCD_OpenWindow>
        LCD_FillColor(width * height, color);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	891b      	ldrh	r3, [r3, #8]
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	895b      	ldrh	r3, [r3, #10]
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	899b      	ldrh	r3, [r3, #12]
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f000 fd5f 	bl	800391a <LCD_FillColor>

        // render dot
        renderDot();
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f82c 	bl	8002eba <_ZN8TouchPad9renderDotEv>
    }
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_ZN8TouchPad8clearDotEv>:

    void clearDot()
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
    {
        LCD_OpenWindow(x + dotX, y + dotY, dotRadius, dotRadius);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	889a      	ldrh	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8a1b      	ldrh	r3, [r3, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b298      	uxth	r0, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	88da      	ldrh	r2, [r3, #6]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8a5b      	ldrh	r3, [r3, #18]
 8002e86:	4413      	add	r3, r2
 8002e88:	b299      	uxth	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	89da      	ldrh	r2, [r3, #14]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	89db      	ldrh	r3, [r3, #14]
 8002e92:	f000 fce9 	bl	8003868 <LCD_OpenWindow>
        LCD_FillColor(dotRadius * dotRadius, color);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	89db      	ldrh	r3, [r3, #14]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	89db      	ldrh	r3, [r3, #14]
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	899b      	ldrh	r3, [r3, #12]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f000 fd34 	bl	800391a <LCD_FillColor>
    }
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_ZN8TouchPad9renderDotEv>:

    void renderDot()
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
    {
        LCD_OpenWindow(x + dotX, y + dotY, dotRadius, dotRadius);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	889a      	ldrh	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8a1b      	ldrh	r3, [r3, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	b298      	uxth	r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	88da      	ldrh	r2, [r3, #6]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8a5b      	ldrh	r3, [r3, #18]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b299      	uxth	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	89da      	ldrh	r2, [r3, #14]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	89db      	ldrh	r3, [r3, #14]
 8002ee2:	f000 fcc1 	bl	8003868 <LCD_OpenWindow>
        LCD_FillColor(dotRadius * dotRadius, RED);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	89db      	ldrh	r3, [r3, #14]
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	89db      	ldrh	r3, [r3, #14]
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fd0e 	bl	800391a <LCD_FillColor>
    }
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_ZN8TouchPad5wrapXEt>:

    uint16_t wrapX(u_int16_t x)
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	807b      	strh	r3, [r7, #2]
    {
        if (x > 500)
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f18:	d902      	bls.n	8002f20 <_ZN8TouchPad5wrapXEt+0x1a>
            return dotX; // x=2048 if not touched
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8a1b      	ldrh	r3, [r3, #16]
 8002f1e:	e01f      	b.n	8002f60 <_ZN8TouchPad5wrapXEt+0x5a>
        if (x < this->x)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	889b      	ldrh	r3, [r3, #4]
 8002f24:	887a      	ldrh	r2, [r7, #2]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d202      	bcs.n	8002f30 <_ZN8TouchPad5wrapXEt+0x2a>
            return this->x;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	889b      	ldrh	r3, [r3, #4]
 8002f2e:	e017      	b.n	8002f60 <_ZN8TouchPad5wrapXEt+0x5a>
        if (x > this->x + width - dotRadius)
 8002f30:	887a      	ldrh	r2, [r7, #2]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	889b      	ldrh	r3, [r3, #4]
 8002f36:	4619      	mov	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	891b      	ldrh	r3, [r3, #8]
 8002f3c:	440b      	add	r3, r1
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	89c9      	ldrh	r1, [r1, #14]
 8002f42:	1a5b      	subs	r3, r3, r1
 8002f44:	429a      	cmp	r2, r3
 8002f46:	dd0a      	ble.n	8002f5e <_ZN8TouchPad5wrapXEt+0x58>
            return this->x + width - dotRadius;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	889a      	ldrh	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	891b      	ldrh	r3, [r3, #8]
 8002f50:	4413      	add	r3, r2
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	89db      	ldrh	r3, [r3, #14]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	e000      	b.n	8002f60 <_ZN8TouchPad5wrapXEt+0x5a>
        return x;
 8002f5e:	887b      	ldrh	r3, [r7, #2]
    }
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <_ZN8TouchPad5wrapYEt>:

    u_int16_t wrapY(u_int16_t y)
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	807b      	strh	r3, [r7, #2]
    {
        if (y > 500)
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f7c:	d902      	bls.n	8002f84 <_ZN8TouchPad5wrapYEt+0x1a>
            return dotY; // y=2048 if not touched
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8a5b      	ldrh	r3, [r3, #18]
 8002f82:	e01f      	b.n	8002fc4 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y < this->y)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	88db      	ldrh	r3, [r3, #6]
 8002f88:	887a      	ldrh	r2, [r7, #2]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d202      	bcs.n	8002f94 <_ZN8TouchPad5wrapYEt+0x2a>
            return this->y;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	88db      	ldrh	r3, [r3, #6]
 8002f92:	e017      	b.n	8002fc4 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y > this->y + height - dotRadius)
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	88db      	ldrh	r3, [r3, #6]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	895b      	ldrh	r3, [r3, #10]
 8002fa0:	440b      	add	r3, r1
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	89c9      	ldrh	r1, [r1, #14]
 8002fa6:	1a5b      	subs	r3, r3, r1
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dd0a      	ble.n	8002fc2 <_ZN8TouchPad5wrapYEt+0x58>
            return this->y + height - dotRadius;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	88da      	ldrh	r2, [r3, #6]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	895b      	ldrh	r3, [r3, #10]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	89db      	ldrh	r3, [r3, #14]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	e000      	b.n	8002fc4 <_ZN8TouchPad5wrapYEt+0x5a>
        return y;
 8002fc2:	887b      	ldrh	r3, [r7, #2]
    }
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <_ZN8TouchPad6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	807b      	strh	r3, [r7, #2]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	803b      	strh	r3, [r7, #0]
    {
        // if the touchpad is not touched, do nothing
        if (x > 500 || y > 500)
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fe4:	d865      	bhi.n	80030b2 <_ZN8TouchPad6updateEtt+0xe4>
 8002fe6:	883b      	ldrh	r3, [r7, #0]
 8002fe8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fec:	d861      	bhi.n	80030b2 <_ZN8TouchPad6updateEtt+0xe4>
            return;
        if (x < this->x || x > this->x + width || y < this->y || y > this->y + height)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	889b      	ldrh	r3, [r3, #4]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d35e      	bcc.n	80030b6 <_ZN8TouchPad6updateEtt+0xe8>
 8002ff8:	887a      	ldrh	r2, [r7, #2]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	889b      	ldrh	r3, [r3, #4]
 8002ffe:	4619      	mov	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	891b      	ldrh	r3, [r3, #8]
 8003004:	440b      	add	r3, r1
 8003006:	429a      	cmp	r2, r3
 8003008:	dc55      	bgt.n	80030b6 <_ZN8TouchPad6updateEtt+0xe8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	88db      	ldrh	r3, [r3, #6]
 800300e:	883a      	ldrh	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d350      	bcc.n	80030b6 <_ZN8TouchPad6updateEtt+0xe8>
 8003014:	883a      	ldrh	r2, [r7, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	88db      	ldrh	r3, [r3, #6]
 800301a:	4619      	mov	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	895b      	ldrh	r3, [r3, #10]
 8003020:	440b      	add	r3, r1
 8003022:	429a      	cmp	r2, r3
 8003024:	dc47      	bgt.n	80030b6 <_ZN8TouchPad6updateEtt+0xe8>
            return;

        
        int _dotX = wrapX(x) - this->x;
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff6b 	bl	8002f06 <_ZN8TouchPad5wrapXEt>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	889b      	ldrh	r3, [r3, #4]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	60fb      	str	r3, [r7, #12]
        int _dotY = wrapY(y) - this->y;
 800303c:	883b      	ldrh	r3, [r7, #0]
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff92 	bl	8002f6a <_ZN8TouchPad5wrapYEt>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	88db      	ldrh	r3, [r3, #6]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	60bb      	str	r3, [r7, #8]
        if (lastDotX != _dotX || lastDotY != _dotY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8a9b      	ldrh	r3, [r3, #20]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4293      	cmp	r3, r2
 800305c:	d105      	bne.n	800306a <_ZN8TouchPad6updateEtt+0x9c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8adb      	ldrh	r3, [r3, #22]
 8003062:	461a      	mov	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4293      	cmp	r3, r2
 8003068:	d015      	beq.n	8003096 <_ZN8TouchPad6updateEtt+0xc8>
        {
            clearDot();
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fefd 	bl	8002e6a <_ZN8TouchPad8clearDotEv>
            dotX = _dotX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	821a      	strh	r2, [r3, #16]
            dotY = _dotY;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	825a      	strh	r2, [r3, #18]
            renderDot();
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff1a 	bl	8002eba <_ZN8TouchPad9renderDotEv>
            lastDotX = dotX;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8a1a      	ldrh	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	829a      	strh	r2, [r3, #20]
            lastDotY = dotY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8a5a      	ldrh	r2, [r3, #18]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	82da      	strh	r2, [r3, #22]
        } // render only when the coordinate changes

        // execute the function
        if (onPressed)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <_ZN8TouchPad6updateEtt+0xea>
            onPressed(this, dotX, dotY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	8a12      	ldrh	r2, [r2, #16]
 80030a6:	4611      	mov	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	8a52      	ldrh	r2, [r2, #18]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
 80030b0:	e002      	b.n	80030b8 <_ZN8TouchPad6updateEtt+0xea>
            return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <_ZN8TouchPad6updateEtt+0xea>
            return;
 80030b6:	bf00      	nop
    }
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZN8TouchPad9getXRatioEv>:

    float getXRatio()
 80030be:	b590      	push	{r4, r7, lr}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
    {
        return (float)dotX / width;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8a1b      	ldrh	r3, [r3, #16]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fe08 	bl	8000ce0 <__aeabi_ui2f>
 80030d0:	4604      	mov	r4, r0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	891b      	ldrh	r3, [r3, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fe06 	bl	8000ce8 <__aeabi_i2f>
 80030dc:	4603      	mov	r3, r0
 80030de:	4619      	mov	r1, r3
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7fd ff09 	bl	8000ef8 <__aeabi_fdiv>
 80030e6:	4603      	mov	r3, r0
    }
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}

080030f0 <_ZN8TouchPad9getYRatioEv>:

    float getYRatio()
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    {
        return (float)dotY / height;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8a5b      	ldrh	r3, [r3, #18]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fdef 	bl	8000ce0 <__aeabi_ui2f>
 8003102:	4604      	mov	r4, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	895b      	ldrh	r3, [r3, #10]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fded 	bl	8000ce8 <__aeabi_i2f>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	4620      	mov	r0, r4
 8003114:	f7fd fef0 	bl	8000ef8 <__aeabi_fdiv>
 8003118:	4603      	mov	r3, r0
    }
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
	...

08003124 <_ZZ6myfuncENKUlvE_clEv>:
}


void myfunc()
{
  CWButton.onPressed = [](){yServo.spinClockwise(50);};
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	2132      	movs	r1, #50	; 0x32
 800312e:	4803      	ldr	r0, [pc, #12]	; (800313c <_ZZ6myfuncENKUlvE_clEv+0x18>)
 8003130:	f7ff fb15 	bl	800275e <_ZN8SERVO42C13spinClockwiseEh>
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000174 	.word	0x20000174

08003140 <_ZZ6myfuncENUlvE_4_FUNEv>:
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
 8003144:	2000      	movs	r0, #0
 8003146:	f7ff ffed 	bl	8003124 <_ZZ6myfuncENKUlvE_clEv>
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZZ6myfuncENKUlvE_cvPFvvEEv>:
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	4b02      	ldr	r3, [pc, #8]	; (8003160 <_ZZ6myfuncENKUlvE_cvPFvvEEv+0x14>)
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	08003141 	.word	0x08003141

08003164 <_ZZ6myfuncENKUlvE0_clEv>:
  CWButton.onReleased = [](){yServo.spinClockwise(0);};
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	2100      	movs	r1, #0
 800316e:	4803      	ldr	r0, [pc, #12]	; (800317c <_ZZ6myfuncENKUlvE0_clEv+0x18>)
 8003170:	f7ff faf5 	bl	800275e <_ZN8SERVO42C13spinClockwiseEh>
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000174 	.word	0x20000174

08003180 <_ZZ6myfuncENUlvE0_4_FUNEv>:
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff ffed 	bl	8003164 <_ZZ6myfuncENKUlvE0_clEv>
 800318a:	bd80      	pop	{r7, pc}

0800318c <_ZZ6myfuncENKUlvE0_cvPFvvEEv>:
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	4b02      	ldr	r3, [pc, #8]	; (80031a0 <_ZZ6myfuncENKUlvE0_cvPFvvEEv+0x14>)
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	08003181 	.word	0x08003181

080031a4 <_ZZ6myfuncENKUlvE1_clEv>:
  CCWButton.onPressed = [](){yServo.spinCounterClockwise(50);};
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	2132      	movs	r1, #50	; 0x32
 80031ae:	4803      	ldr	r0, [pc, #12]	; (80031bc <_ZZ6myfuncENKUlvE1_clEv+0x18>)
 80031b0:	f7ff fae5 	bl	800277e <_ZN8SERVO42C20spinCounterClockwiseEh>
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000174 	.word	0x20000174

080031c0 <_ZZ6myfuncENUlvE1_4_FUNEv>:
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7ff ffed 	bl	80031a4 <_ZZ6myfuncENKUlvE1_clEv>
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_ZZ6myfuncENKUlvE1_cvPFvvEEv>:
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <_ZZ6myfuncENKUlvE1_cvPFvvEEv+0x14>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	080031c1 	.word	0x080031c1

080031e4 <_ZZ6myfuncENKUlvE2_clEv>:
  CCWButton.onReleased = [](){yServo.spinCounterClockwise(0);};
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4803      	ldr	r0, [pc, #12]	; (80031fc <_ZZ6myfuncENKUlvE2_clEv+0x18>)
 80031f0:	f7ff fac5 	bl	800277e <_ZN8SERVO42C20spinCounterClockwiseEh>
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000174 	.word	0x20000174

08003200 <_ZZ6myfuncENUlvE2_4_FUNEv>:
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
 8003204:	2000      	movs	r0, #0
 8003206:	f7ff ffed 	bl	80031e4 <_ZZ6myfuncENKUlvE2_clEv>
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZZ6myfuncENKUlvE2_cvPFvvEEv>:
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	4b02      	ldr	r3, [pc, #8]	; (8003220 <_ZZ6myfuncENKUlvE2_cvPFvvEEv+0x14>)
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	08003201 	.word	0x08003201

08003224 <_ZZ6myfuncENKUlvE3_clEv>:
  testButton.onPressed = [](){
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    yServo.stepClockwise(6400);
 800322c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8003230:	4803      	ldr	r0, [pc, #12]	; (8003240 <_ZZ6myfuncENKUlvE3_clEv+0x1c>)
 8003232:	f7ff fa55 	bl	80026e0 <_ZN8SERVO42C13stepClockwiseEm>
    // xServo.receiveEncoder();
    // printToLCD("x Encoder" + String(xServo.getEncoder()), 1);
  };
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000174 	.word	0x20000174

08003244 <_ZZ6myfuncENUlvE3_4_FUNEv>:
  testButton.onPressed = [](){
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  };
 8003248:	2000      	movs	r0, #0
 800324a:	f7ff ffeb 	bl	8003224 <_ZZ6myfuncENKUlvE3_clEv>
 800324e:	bd80      	pop	{r7, pc}

08003250 <_ZZ6myfuncENKUlvE3_cvPFvvEEv>:
  testButton.onPressed = [](){
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  };
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <_ZZ6myfuncENKUlvE3_cvPFvvEEv+0x14>)
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	08003245 	.word	0x08003245

08003268 <_ZZ6myfuncENKUlvE4_clEv>:
  test2Button.onPressed = [](){
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    // sprintf(str, "ErrorAngle: %.3f", xServo.getErrorAngle());
    // printToLCD(str, 2);
    // yServo.setPosition(testSlider.getValue());
    // debugLog(String(testTouchPad.getXRatio()*264),19);
    // xServo.setPosition(testTouchPad.getXRatio()*264);
    setPosition3d(testTouchPad.getXRatio()*264, testTouchPad.getYRatio()*146, 0);
 8003270:	480e      	ldr	r0, [pc, #56]	; (80032ac <_ZZ6myfuncENKUlvE4_clEv+0x44>)
 8003272:	f7ff ff24 	bl	80030be <_ZN8TouchPad9getXRatioEv>
 8003276:	4603      	mov	r3, r0
 8003278:	490d      	ldr	r1, [pc, #52]	; (80032b0 <_ZZ6myfuncENKUlvE4_clEv+0x48>)
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fd88 	bl	8000d90 <__aeabi_fmul>
 8003280:	4603      	mov	r3, r0
 8003282:	461c      	mov	r4, r3
 8003284:	4809      	ldr	r0, [pc, #36]	; (80032ac <_ZZ6myfuncENKUlvE4_clEv+0x44>)
 8003286:	f7ff ff33 	bl	80030f0 <_ZN8TouchPad9getYRatioEv>
 800328a:	4603      	mov	r3, r0
 800328c:	4909      	ldr	r1, [pc, #36]	; (80032b4 <_ZZ6myfuncENKUlvE4_clEv+0x4c>)
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fd7e 	bl	8000d90 <__aeabi_fmul>
 8003294:	4603      	mov	r3, r0
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	4619      	mov	r1, r3
 800329c:	4620      	mov	r0, r4
 800329e:	f7fe fdd3 	bl	8001e48 <_Z13setPosition3dfff>
  };
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200003f8 	.word	0x200003f8
 80032b0:	43840000 	.word	0x43840000
 80032b4:	43120000 	.word	0x43120000

080032b8 <_ZZ6myfuncENUlvE4_4_FUNEv>:
  test2Button.onPressed = [](){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  };
 80032bc:	2000      	movs	r0, #0
 80032be:	f7ff ffd3 	bl	8003268 <_ZZ6myfuncENKUlvE4_clEv>
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZZ6myfuncENKUlvE4_cvPFvvEEv>:
  test2Button.onPressed = [](){
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  };
 80032cc:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <_ZZ6myfuncENKUlvE4_cvPFvvEEv+0x14>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	080032b9 	.word	0x080032b9

080032dc <_ZZ6myfuncENKUlvE5_clEv>:
  test3Button.onPressed = [](){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b098      	sub	sp, #96	; 0x60
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    yServo.receiveEncoder();
 80032e4:	2103      	movs	r1, #3
 80032e6:	4811      	ldr	r0, [pc, #68]	; (800332c <_ZZ6myfuncENKUlvE5_clEv+0x50>)
 80032e8:	f7ff fa82 	bl	80027f0 <_ZN8SERVO42C14receiveEncoderEi>
    char str[20];
    sprintf(str, "yPos=%.2f", yServo.getPosition());
 80032ec:	480f      	ldr	r0, [pc, #60]	; (800332c <_ZZ6myfuncENKUlvE5_clEv+0x50>)
 80032ee:	f7fe fc0b 	bl	8001b08 <_ZN8SERVO42C11getPositionEv>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f903 	bl	8000500 <__aeabi_f2d>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	f107 0008 	add.w	r0, r7, #8
 8003302:	490b      	ldr	r1, [pc, #44]	; (8003330 <_ZZ6myfuncENKUlvE5_clEv+0x54>)
 8003304:	f002 f950 	bl	80055a8 <sprintf_>
    printToLCD(str, 2);
 8003308:	f107 0208 	add.w	r2, r7, #8
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe f8a6 	bl	8001464 <_ZN6StringC1EPKc>
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f002 ffbe 	bl	80062a0 <_Z10printToLCDRK6Stringt>
  };
 8003324:	bf00      	nop
 8003326:	3760      	adds	r7, #96	; 0x60
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000174 	.word	0x20000174
 8003330:	0800a5e8 	.word	0x0800a5e8

08003334 <_ZZ6myfuncENUlvE5_4_FUNEv>:
  test3Button.onPressed = [](){
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  };
 8003338:	2000      	movs	r0, #0
 800333a:	f7ff ffcf 	bl	80032dc <_ZZ6myfuncENKUlvE5_clEv>
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZZ6myfuncENKUlvE5_cvPFvvEEv>:
  test3Button.onPressed = [](){
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  };
 8003348:	4b02      	ldr	r3, [pc, #8]	; (8003354 <_ZZ6myfuncENKUlvE5_cvPFvvEEv+0x14>)
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	08003335 	.word	0x08003335

08003358 <myfunc>:
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b09a      	sub	sp, #104	; 0x68
 800335c:	af00      	add	r7, sp, #0
  CWButton.onPressed = [](){yServo.spinClockwise(50);};
 800335e:	f107 0308 	add.w	r3, r7, #8
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fef2 	bl	800314c <_ZZ6myfuncENKUlvE_cvPFvvEEv>
 8003368:	4603      	mov	r3, r0
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <myfunc+0xa4>)
 800336c:	6293      	str	r3, [r2, #40]	; 0x28
  CWButton.onReleased = [](){yServo.spinClockwise(0);};
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff0a 	bl	800318c <_ZZ6myfuncENKUlvE0_cvPFvvEEv>
 8003378:	4603      	mov	r3, r0
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <myfunc+0xa4>)
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
  CCWButton.onPressed = [](){yServo.spinCounterClockwise(50);};
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff22 	bl	80031cc <_ZZ6myfuncENKUlvE1_cvPFvvEEv>
 8003388:	4603      	mov	r3, r0
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <myfunc+0xa8>)
 800338c:	6293      	str	r3, [r2, #40]	; 0x28
  CCWButton.onReleased = [](){yServo.spinCounterClockwise(0);};
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ff3a 	bl	800320c <_ZZ6myfuncENKUlvE2_cvPFvvEEv>
 8003398:	4603      	mov	r3, r0
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <myfunc+0xa8>)
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
  };
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff54 	bl	8003250 <_ZZ6myfuncENKUlvE3_cvPFvvEEv>
 80033a8:	4603      	mov	r3, r0
  testButton.onPressed = [](){
 80033aa:	4a16      	ldr	r2, [pc, #88]	; (8003404 <myfunc+0xac>)
 80033ac:	6293      	str	r3, [r2, #40]	; 0x28
  };
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff86 	bl	80032c4 <_ZZ6myfuncENKUlvE4_cvPFvvEEv>
 80033b8:	4603      	mov	r3, r0
  test2Button.onPressed = [](){
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <myfunc+0xb0>)
 80033bc:	6293      	str	r3, [r2, #40]	; 0x28
  };
 80033be:	f107 0320 	add.w	r3, r7, #32
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ffbc 	bl	8003340 <_ZZ6myfuncENKUlvE5_cvPFvvEEv>
 80033c8:	4603      	mov	r3, r0
  test3Button.onPressed = [](){
 80033ca:	4a10      	ldr	r2, [pc, #64]	; (800340c <myfunc+0xb4>)
 80033cc:	6293      	str	r3, [r2, #40]	; 0x28

  

  strType_XPT2046_Coordinate touch;
  printToLCD("Hello World 1", 1);
 80033ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d2:	490f      	ldr	r1, [pc, #60]	; (8003410 <myfunc+0xb8>)
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe f845 	bl	8001464 <_ZN6StringC1EPKc>
 80033da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f002 ff5d 	bl	80062a0 <_Z10printToLCDRK6Stringt>
  
  // xServo.stop();

  // xServo.spinCounterClockwise(100);

  yServo.alignAbsolutePosition(0);
 80033e6:	2100      	movs	r1, #0
 80033e8:	480a      	ldr	r0, [pc, #40]	; (8003414 <myfunc+0xbc>)
 80033ea:	f7ff f875 	bl	80024d8 <_ZN8SERVO42C21alignAbsolutePositionEi>
  xServo.alignAbsolutePosition(0);
 80033ee:	2100      	movs	r1, #0
 80033f0:	4809      	ldr	r0, [pc, #36]	; (8003418 <myfunc+0xc0>)
 80033f2:	f7ff f871 	bl	80024d8 <_ZN8SERVO42C21alignAbsolutePositionEi>
    // HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
    // char str[3] = {};
    // sprintf(str, "%02X", data[0]);

    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
    UIElement::updateAllElements();
 80033f6:	f7fe f84b 	bl	8001490 <_ZN9UIElement17updateAllElementsEv>
 80033fa:	e7fc      	b.n	80033f6 <myfunc+0x9e>
 80033fc:	20000370 	.word	0x20000370
 8003400:	2000033c 	.word	0x2000033c
 8003404:	200002d4 	.word	0x200002d4
 8003408:	20000308 	.word	0x20000308
 800340c:	200003a4 	.word	0x200003a4
 8003410:	0800a5f4 	.word	0x0800a5f4
 8003414:	20000174 	.word	0x20000174
 8003418:	20000148 	.word	0x20000148

0800341c <_Z41__static_initialization_and_destruction_0ii>:
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
    // HAL_Delay(500);
  }
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af04      	add	r7, sp, #16
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d169      	bne.n	8003500 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003432:	4293      	cmp	r3, r2
 8003434:	d164      	bne.n	8003500 <_Z41__static_initialization_and_destruction_0ii+0xe4>
Button testButton(170, 50, "YStep", 40, 40);
 8003436:	2300      	movs	r3, #0
 8003438:	9303      	str	r3, [sp, #12]
 800343a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	2328      	movs	r3, #40	; 0x28
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	2328      	movs	r3, #40	; 0x28
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800344a:	2232      	movs	r2, #50	; 0x32
 800344c:	21aa      	movs	r1, #170	; 0xaa
 800344e:	482f      	ldr	r0, [pc, #188]	; (800350c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8003450:	f7ff fa8a 	bl	8002968 <_ZN6ButtonC1EttPctttt>
Button test2Button(170, 0, "SetPos", 40, 40);
 8003454:	2300      	movs	r3, #0
 8003456:	9303      	str	r3, [sp, #12]
 8003458:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800345c:	9302      	str	r3, [sp, #8]
 800345e:	2328      	movs	r3, #40	; 0x28
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	2328      	movs	r3, #40	; 0x28
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8003468:	2200      	movs	r2, #0
 800346a:	21aa      	movs	r1, #170	; 0xaa
 800346c:	4829      	ldr	r0, [pc, #164]	; (8003514 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800346e:	f7ff fa7b 	bl	8002968 <_ZN6ButtonC1EttPctttt>
Button CCWButton(30, 50, "YCCW", 40, 40);
 8003472:	2300      	movs	r3, #0
 8003474:	9303      	str	r3, [sp, #12]
 8003476:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800347a:	9302      	str	r3, [sp, #8]
 800347c:	2328      	movs	r3, #40	; 0x28
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2328      	movs	r3, #40	; 0x28
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003486:	2232      	movs	r2, #50	; 0x32
 8003488:	211e      	movs	r1, #30
 800348a:	4824      	ldr	r0, [pc, #144]	; (800351c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800348c:	f7ff fa6c 	bl	8002968 <_ZN6ButtonC1EttPctttt>
Button CWButton(100, 50, "YCW", 40, 40);
 8003490:	2300      	movs	r3, #0
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	2328      	movs	r3, #40	; 0x28
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2328      	movs	r3, #40	; 0x28
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80034a4:	2232      	movs	r2, #50	; 0x32
 80034a6:	2164      	movs	r1, #100	; 0x64
 80034a8:	481e      	ldr	r0, [pc, #120]	; (8003524 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80034aa:	f7ff fa5d 	bl	8002968 <_ZN6ButtonC1EttPctttt>
Button test3Button(120, 0, "GetPos", 40, 40);
 80034ae:	2300      	movs	r3, #0
 80034b0:	9303      	str	r3, [sp, #12]
 80034b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	2328      	movs	r3, #40	; 0x28
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2328      	movs	r3, #40	; 0x28
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	2178      	movs	r1, #120	; 0x78
 80034c6:	4819      	ldr	r0, [pc, #100]	; (800352c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80034c8:	f7ff fa4e 	bl	8002968 <_ZN6ButtonC1EttPctttt>
Slider testSlider(200, 120, 100);
 80034cc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	2382      	movs	r3, #130	; 0x82
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	230a      	movs	r3, #10
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2364      	movs	r3, #100	; 0x64
 80034dc:	2278      	movs	r2, #120	; 0x78
 80034de:	21c8      	movs	r1, #200	; 0xc8
 80034e0:	4813      	ldr	r0, [pc, #76]	; (8003530 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80034e2:	f7ff fb19 	bl	8002b18 <_ZN6SliderC1Etttttt>
TouchPad testTouchPad(0, 120);
 80034e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	2396      	movs	r3, #150	; 0x96
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	2396      	movs	r3, #150	; 0x96
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2300      	movs	r3, #0
 80034f6:	2278      	movs	r2, #120	; 0x78
 80034f8:	2100      	movs	r1, #0
 80034fa:	480e      	ldr	r0, [pc, #56]	; (8003534 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80034fc:	f7ff fc4e 	bl	8002d9c <_ZN8TouchPadC1EttPFvPS_iiEttt>
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	0800a604 	.word	0x0800a604
 800350c:	200002d4 	.word	0x200002d4
 8003510:	0800a60c 	.word	0x0800a60c
 8003514:	20000308 	.word	0x20000308
 8003518:	0800a614 	.word	0x0800a614
 800351c:	2000033c 	.word	0x2000033c
 8003520:	0800a61c 	.word	0x0800a61c
 8003524:	20000370 	.word	0x20000370
 8003528:	0800a620 	.word	0x0800a620
 800352c:	200003a4 	.word	0x200003a4
 8003530:	200003d8 	.word	0x200003d8
 8003534:	200003f8 	.word	0x200003f8

08003538 <_GLOBAL__sub_I_testButton>:
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
 800353c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003540:	2001      	movs	r0, #1
 8003542:	f7ff ff6b 	bl	800341c <_Z41__static_initialization_and_destruction_0ii>
 8003546:	bd80      	pop	{r7, pc}

08003548 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	e002      	b.n	8003558 <Delay+0x10>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3b01      	subs	r3, #1
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f9      	bne.n	8003552 <Delay+0xa>
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 800356a:	b580      	push	{r7, lr}
 800356c:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 800356e:	2001      	movs	r0, #1
 8003570:	f000 f826 	bl	80035c0 <LCD_BackLed_Control>
	LCD_Rst();
 8003574:	f000 f80c 	bl	8003590 <LCD_Rst>
	LCD_REG_Config();
 8003578:	f000 f85c 	bl	8003634 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 800357c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003580:	22f0      	movs	r2, #240	; 0xf0
 8003582:	2100      	movs	r1, #0
 8003584:	2000      	movs	r0, #0
 8003586:	f000 f9e7 	bl	8003958 <LCD_Clear>
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8003594:	2200      	movs	r2, #0
 8003596:	2102      	movs	r1, #2
 8003598:	4807      	ldr	r0, [pc, #28]	; (80035b8 <LCD_Rst+0x28>)
 800359a:	f003 ffa8 	bl	80074ee <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800359e:	4807      	ldr	r0, [pc, #28]	; (80035bc <LCD_Rst+0x2c>)
 80035a0:	f7ff ffd2 	bl	8003548 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80035a4:	2201      	movs	r2, #1
 80035a6:	2102      	movs	r1, #2
 80035a8:	4803      	ldr	r0, [pc, #12]	; (80035b8 <LCD_Rst+0x28>)
 80035aa:	f003 ffa0 	bl	80074ee <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80035ae:	4803      	ldr	r0, [pc, #12]	; (80035bc <LCD_Rst+0x2c>)
 80035b0:	f7ff ffca 	bl	8003548 <Delay>
}
 80035b4:	bf00      	nop
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40011800 	.word	0x40011800
 80035bc:	0002bffc 	.word	0x0002bffc

080035c0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d006      	beq.n	80035de <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035d6:	4807      	ldr	r0, [pc, #28]	; (80035f4 <LCD_BackLed_Control+0x34>)
 80035d8:	f003 ff89 	bl	80074ee <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80035dc:	e005      	b.n	80035ea <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80035de:	2201      	movs	r2, #1
 80035e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <LCD_BackLed_Control+0x34>)
 80035e6:	f003 ff82 	bl	80074ee <HAL_GPIO_WritePin>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40011400 	.word	0x40011400

080035f8 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8003602:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	8013      	strh	r3, [r2, #0]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800361e:	4a04      	ldr	r2, [pc, #16]	; (8003630 <LCD_Write_Data+0x1c>)
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	8013      	strh	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	60020000 	.word	0x60020000

08003634 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8003638:	20cf      	movs	r0, #207	; 0xcf
 800363a:	f7ff ffdd 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800363e:	2000      	movs	r0, #0
 8003640:	f7ff ffe8 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8003644:	2081      	movs	r0, #129	; 0x81
 8003646:	f7ff ffe5 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800364a:	2030      	movs	r0, #48	; 0x30
 800364c:	f7ff ffe2 	bl	8003614 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8003650:	20ed      	movs	r0, #237	; 0xed
 8003652:	f7ff ffd1 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8003656:	2064      	movs	r0, #100	; 0x64
 8003658:	f7ff ffdc 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800365c:	2003      	movs	r0, #3
 800365e:	f7ff ffd9 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8003662:	2012      	movs	r0, #18
 8003664:	f7ff ffd6 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8003668:	2081      	movs	r0, #129	; 0x81
 800366a:	f7ff ffd3 	bl	8003614 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800366e:	20e8      	movs	r0, #232	; 0xe8
 8003670:	f7ff ffc2 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8003674:	2085      	movs	r0, #133	; 0x85
 8003676:	f7ff ffcd 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800367a:	2010      	movs	r0, #16
 800367c:	f7ff ffca 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8003680:	2078      	movs	r0, #120	; 0x78
 8003682:	f7ff ffc7 	bl	8003614 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8003686:	20cb      	movs	r0, #203	; 0xcb
 8003688:	f7ff ffb6 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 800368c:	2039      	movs	r0, #57	; 0x39
 800368e:	f7ff ffc1 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8003692:	202c      	movs	r0, #44	; 0x2c
 8003694:	f7ff ffbe 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003698:	2000      	movs	r0, #0
 800369a:	f7ff ffbb 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800369e:	2034      	movs	r0, #52	; 0x34
 80036a0:	f7ff ffb8 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80036a4:	2002      	movs	r0, #2
 80036a6:	f7ff ffb5 	bl	8003614 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80036aa:	20f7      	movs	r0, #247	; 0xf7
 80036ac:	f7ff ffa4 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80036b0:	2020      	movs	r0, #32
 80036b2:	f7ff ffaf 	bl	8003614 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80036b6:	20ea      	movs	r0, #234	; 0xea
 80036b8:	f7ff ff9e 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80036bc:	2000      	movs	r0, #0
 80036be:	f7ff ffa9 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7ff ffa6 	bl	8003614 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80036c8:	20b1      	movs	r0, #177	; 0xb1
 80036ca:	f7ff ff95 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7ff ffa0 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80036d4:	201b      	movs	r0, #27
 80036d6:	f7ff ff9d 	bl	8003614 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80036da:	20b6      	movs	r0, #182	; 0xb6
 80036dc:	f7ff ff8c 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80036e0:	200a      	movs	r0, #10
 80036e2:	f7ff ff97 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80036e6:	20a2      	movs	r0, #162	; 0xa2
 80036e8:	f7ff ff94 	bl	8003614 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80036ec:	20c0      	movs	r0, #192	; 0xc0
 80036ee:	f7ff ff83 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80036f2:	2035      	movs	r0, #53	; 0x35
 80036f4:	f7ff ff8e 	bl	8003614 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80036f8:	20c1      	movs	r0, #193	; 0xc1
 80036fa:	f7ff ff7d 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80036fe:	2011      	movs	r0, #17
 8003700:	f7ff ff88 	bl	8003614 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8003704:	20c5      	movs	r0, #197	; 0xc5
 8003706:	f7ff ff77 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800370a:	2045      	movs	r0, #69	; 0x45
 800370c:	f7ff ff82 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8003710:	2045      	movs	r0, #69	; 0x45
 8003712:	f7ff ff7f 	bl	8003614 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8003716:	20c7      	movs	r0, #199	; 0xc7
 8003718:	f7ff ff6e 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800371c:	20a2      	movs	r0, #162	; 0xa2
 800371e:	f7ff ff79 	bl	8003614 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8003722:	20f2      	movs	r0, #242	; 0xf2
 8003724:	f7ff ff68 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003728:	2000      	movs	r0, #0
 800372a:	f7ff ff73 	bl	8003614 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800372e:	2026      	movs	r0, #38	; 0x26
 8003730:	f7ff ff62 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8003734:	2001      	movs	r0, #1
 8003736:	f7ff ff6d 	bl	8003614 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800373a:	20e0      	movs	r0, #224	; 0xe0
 800373c:	f7ff ff5c 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8003740:	200f      	movs	r0, #15
 8003742:	f7ff ff67 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8003746:	2026      	movs	r0, #38	; 0x26
 8003748:	f7ff ff64 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 800374c:	2024      	movs	r0, #36	; 0x24
 800374e:	f7ff ff61 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8003752:	200b      	movs	r0, #11
 8003754:	f7ff ff5e 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8003758:	200e      	movs	r0, #14
 800375a:	f7ff ff5b 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800375e:	2009      	movs	r0, #9
 8003760:	f7ff ff58 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8003764:	2054      	movs	r0, #84	; 0x54
 8003766:	f7ff ff55 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800376a:	20a8      	movs	r0, #168	; 0xa8
 800376c:	f7ff ff52 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8003770:	2046      	movs	r0, #70	; 0x46
 8003772:	f7ff ff4f 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8003776:	200c      	movs	r0, #12
 8003778:	f7ff ff4c 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 800377c:	2017      	movs	r0, #23
 800377e:	f7ff ff49 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8003782:	2009      	movs	r0, #9
 8003784:	f7ff ff46 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8003788:	200f      	movs	r0, #15
 800378a:	f7ff ff43 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800378e:	2007      	movs	r0, #7
 8003790:	f7ff ff40 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003794:	2000      	movs	r0, #0
 8003796:	f7ff ff3d 	bl	8003614 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800379a:	20e1      	movs	r0, #225	; 0xe1
 800379c:	f7ff ff2c 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7ff ff37 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80037a6:	2019      	movs	r0, #25
 80037a8:	f7ff ff34 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80037ac:	201b      	movs	r0, #27
 80037ae:	f7ff ff31 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80037b2:	2004      	movs	r0, #4
 80037b4:	f7ff ff2e 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80037b8:	2010      	movs	r0, #16
 80037ba:	f7ff ff2b 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80037be:	2007      	movs	r0, #7
 80037c0:	f7ff ff28 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80037c4:	202a      	movs	r0, #42	; 0x2a
 80037c6:	f7ff ff25 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80037ca:	2047      	movs	r0, #71	; 0x47
 80037cc:	f7ff ff22 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80037d0:	2039      	movs	r0, #57	; 0x39
 80037d2:	f7ff ff1f 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80037d6:	2003      	movs	r0, #3
 80037d8:	f7ff ff1c 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80037dc:	2006      	movs	r0, #6
 80037de:	f7ff ff19 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80037e2:	2006      	movs	r0, #6
 80037e4:	f7ff ff16 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80037e8:	2030      	movs	r0, #48	; 0x30
 80037ea:	f7ff ff13 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80037ee:	2038      	movs	r0, #56	; 0x38
 80037f0:	f7ff ff10 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80037f4:	200f      	movs	r0, #15
 80037f6:	f7ff ff0d 	bl	8003614 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80037fa:	2036      	movs	r0, #54	; 0x36
 80037fc:	f7ff fefc 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8003800:	20c8      	movs	r0, #200	; 0xc8
 8003802:	f7ff ff07 	bl	8003614 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8003806:	202a      	movs	r0, #42	; 0x2a
 8003808:	f7ff fef6 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800380c:	2000      	movs	r0, #0
 800380e:	f7ff ff01 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003812:	2000      	movs	r0, #0
 8003814:	f7ff fefe 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003818:	2000      	movs	r0, #0
 800381a:	f7ff fefb 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800381e:	20ef      	movs	r0, #239	; 0xef
 8003820:	f7ff fef8 	bl	8003614 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8003824:	202b      	movs	r0, #43	; 0x2b
 8003826:	f7ff fee7 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800382a:	2000      	movs	r0, #0
 800382c:	f7ff fef2 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003830:	2000      	movs	r0, #0
 8003832:	f7ff feef 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8003836:	2001      	movs	r0, #1
 8003838:	f7ff feec 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800383c:	203f      	movs	r0, #63	; 0x3f
 800383e:	f7ff fee9 	bl	8003614 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8003842:	203a      	movs	r0, #58	; 0x3a
 8003844:	f7ff fed8 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8003848:	2055      	movs	r0, #85	; 0x55
 800384a:	f7ff fee3 	bl	8003614 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800384e:	2011      	movs	r0, #17
 8003850:	f7ff fed2 	bl	80035f8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8003854:	4803      	ldr	r0, [pc, #12]	; (8003864 <LCD_REG_Config+0x230>)
 8003856:	f7ff fe77 	bl	8003548 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800385a:	2029      	movs	r0, #41	; 0x29
 800385c:	f7ff fecc 	bl	80035f8 <LCD_Write_Cmd>
	
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0002bffc 	.word	0x0002bffc

08003868 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4623      	mov	r3, r4
 8003878:	80fb      	strh	r3, [r7, #6]
 800387a:	4603      	mov	r3, r0
 800387c:	80bb      	strh	r3, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	807b      	strh	r3, [r7, #2]
 8003882:	4613      	mov	r3, r2
 8003884:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8003886:	202a      	movs	r0, #42	; 0x2a
 8003888:	f7ff feb6 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b29b      	uxth	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff febe 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	b29b      	uxth	r3, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff feb8 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	4413      	add	r3, r2
 80038aa:	3b01      	subs	r3, #1
 80038ac:	121b      	asrs	r3, r3, #8
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff feaf 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	4413      	add	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fea4 	bl	8003614 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80038cc:	202b      	movs	r0, #43	; 0x2b
 80038ce:	f7ff fe93 	bl	80035f8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80038d2:	88bb      	ldrh	r3, [r7, #4]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fe9b 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80038de:	88bb      	ldrh	r3, [r7, #4]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fe95 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80038ea:	88ba      	ldrh	r2, [r7, #4]
 80038ec:	883b      	ldrh	r3, [r7, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	3b01      	subs	r3, #1
 80038f2:	121b      	asrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fe8c 	bl	8003614 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80038fc:	88ba      	ldrh	r2, [r7, #4]
 80038fe:	883b      	ldrh	r3, [r7, #0]
 8003900:	4413      	add	r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29b      	uxth	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fe81 	bl	8003614 <LCD_Write_Data>
	
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}

0800391a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800392a:	202c      	movs	r0, #44	; 0x2c
 800392c:	f7ff fe64 	bl	80035f8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e006      	b.n	8003944 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fe6b 	bl	8003614 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d3f4      	bcc.n	8003936 <LCD_FillColor+0x1c>
		
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	461a      	mov	r2, r3
 8003966:	4623      	mov	r3, r4
 8003968:	80fb      	strh	r3, [r7, #6]
 800396a:	4603      	mov	r3, r0
 800396c:	80bb      	strh	r3, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
 8003972:	4613      	mov	r3, r2
 8003974:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <LCD_Clear+0x58>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <LCD_Clear+0x2a>
 800397e:	2300      	movs	r3, #0
 8003980:	e001      	b.n	8003986 <LCD_Clear+0x2e>
 8003982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003986:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8003988:	883b      	ldrh	r3, [r7, #0]
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	88b9      	ldrh	r1, [r7, #4]
 800398e:	88f8      	ldrh	r0, [r7, #6]
 8003990:	f7ff ff6a 	bl	8003868 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	883a      	ldrh	r2, [r7, #0]
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	461a      	mov	r2, r3
 800399e:	89fb      	ldrh	r3, [r7, #14]
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7ff ffb9 	bl	800391a <LCD_FillColor>
	
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	20000414 	.word	0x20000414

080039b4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	80fb      	strh	r3, [r7, #6]
 80039be:	460b      	mov	r3, r1
 80039c0:	80bb      	strh	r3, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <LCD_DrawChar+0xb0>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <LCD_DrawChar+0x20>
 80039ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039d2:	e000      	b.n	80039d6 <LCD_DrawChar+0x22>
 80039d4:	2300      	movs	r3, #0
 80039d6:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80039d8:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <LCD_DrawChar+0xb0>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <LCD_DrawChar+0x30>
 80039e0:	2300      	movs	r3, #0
 80039e2:	e001      	b.n	80039e8 <LCD_DrawChar+0x34>
 80039e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039e8:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	3b20      	subs	r3, #32
 80039ee:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80039f0:	88b9      	ldrh	r1, [r7, #4]
 80039f2:	88f8      	ldrh	r0, [r7, #6]
 80039f4:	2310      	movs	r3, #16
 80039f6:	2208      	movs	r2, #8
 80039f8:	f7ff ff36 	bl	8003868 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80039fc:	202c      	movs	r0, #44	; 0x2c
 80039fe:	f7ff fdfb 	bl	80035f8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003a02:	2300      	movs	r3, #0
 8003a04:	75bb      	strb	r3, [r7, #22]
 8003a06:	e024      	b.n	8003a52 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	7dbb      	ldrb	r3, [r7, #22]
 8003a0c:	4916      	ldr	r1, [pc, #88]	; (8003a68 <LCD_DrawChar+0xb4>)
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	440a      	add	r2, r1
 8003a12:	4413      	add	r3, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003a18:	2300      	movs	r3, #0
 8003a1a:	757b      	strb	r3, [r7, #21]
 8003a1c:	e013      	b.n	8003a46 <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 8003a28:	8a7b      	ldrh	r3, [r7, #18]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fdf2 	bl	8003614 <LCD_Write_Data>
 8003a30:	e003      	b.n	8003a3a <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8003a32:	8a3b      	ldrh	r3, [r7, #16]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fded 	bl	8003614 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003a40:	7d7b      	ldrb	r3, [r7, #21]
 8003a42:	3301      	adds	r3, #1
 8003a44:	757b      	strb	r3, [r7, #21]
 8003a46:	7d7b      	ldrb	r3, [r7, #21]
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d9e8      	bls.n	8003a1e <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003a4c:	7dbb      	ldrb	r3, [r7, #22]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	75bb      	strb	r3, [r7, #22]
 8003a52:	7dbb      	ldrb	r3, [r7, #22]
 8003a54:	2b0f      	cmp	r3, #15
 8003a56:	d9d7      	bls.n	8003a08 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000414 	.word	0x20000414
 8003a68:	0800a6ac 	.word	0x0800a6ac

08003a6c <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	603a      	str	r2, [r7, #0]
 8003a76:	80fb      	strh	r3, [r7, #6]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8003a7c:	e01c      	b.n	8003ab8 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	2be8      	cmp	r3, #232	; 0xe8
 8003a82:	d904      	bls.n	8003a8e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003a84:	2300      	movs	r3, #0
 8003a86:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8003a88:	88bb      	ldrh	r3, [r7, #4]
 8003a8a:	3310      	adds	r3, #16
 8003a8c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8003a8e:	88bb      	ldrh	r3, [r7, #4]
 8003a90:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003a94:	d903      	bls.n	8003a9e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003a96:	2300      	movs	r3, #0
 8003a98:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	88b9      	ldrh	r1, [r7, #4]
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff84 	bl	80039b4 <LCD_DrawChar>
		
		pStr ++;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1de      	bne.n	8003a7e <LCD_DrawString+0x12>
		
	}
	
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4623      	mov	r3, r4
 8003adc:	80fb      	strh	r3, [r7, #6]
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80bb      	strh	r3, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	70fb      	strb	r3, [r7, #3]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	3b20      	subs	r3, #32
 8003aee:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8003af0:	88b9      	ldrh	r1, [r7, #4]
 8003af2:	88f8      	ldrh	r0, [r7, #6]
 8003af4:	2310      	movs	r3, #16
 8003af6:	2208      	movs	r2, #8
 8003af8:	f7ff feb6 	bl	8003868 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8003afc:	202c      	movs	r0, #44	; 0x2c
 8003afe:	f7ff fd7b 	bl	80035f8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003b02:	2300      	movs	r3, #0
 8003b04:	73bb      	strb	r3, [r7, #14]
 8003b06:	e024      	b.n	8003b52 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8003b08:	7b3a      	ldrb	r2, [r7, #12]
 8003b0a:	7bbb      	ldrb	r3, [r7, #14]
 8003b0c:	4915      	ldr	r1, [pc, #84]	; (8003b64 <LCD_DrawChar_Color+0x98>)
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	440a      	add	r2, r1
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003b18:	2300      	movs	r3, #0
 8003b1a:	737b      	strb	r3, [r7, #13]
 8003b1c:	e013      	b.n	8003b46 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8003b28:	8c3b      	ldrh	r3, [r7, #32]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fd72 	bl	8003614 <LCD_Write_Data>
 8003b30:	e003      	b.n	8003b3a <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fd6d 	bl	8003614 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003b40:	7b7b      	ldrb	r3, [r7, #13]
 8003b42:	3301      	adds	r3, #1
 8003b44:	737b      	strb	r3, [r7, #13]
 8003b46:	7b7b      	ldrb	r3, [r7, #13]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d9e8      	bls.n	8003b1e <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003b4c:	7bbb      	ldrb	r3, [r7, #14]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	73bb      	strb	r3, [r7, #14]
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	d9d7      	bls.n	8003b08 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd90      	pop	{r4, r7, pc}
 8003b62:	bf00      	nop
 8003b64:	0800a6ac 	.word	0x0800a6ac

08003b68 <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60ba      	str	r2, [r7, #8]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	81fb      	strh	r3, [r7, #14]
 8003b76:	460b      	mov	r3, r1
 8003b78:	81bb      	strh	r3, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8003b7e:	e01f      	b.n	8003bc0 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	2be8      	cmp	r3, #232	; 0xe8
 8003b84:	d904      	bls.n	8003b90 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003b86:	2300      	movs	r3, #0
 8003b88:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8003b8a:	89bb      	ldrh	r3, [r7, #12]
 8003b8c:	3310      	adds	r3, #16
 8003b8e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8003b90:	89bb      	ldrh	r3, [r7, #12]
 8003b92:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003b96:	d903      	bls.n	8003ba0 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	88fc      	ldrh	r4, [r7, #6]
 8003ba6:	89b9      	ldrh	r1, [r7, #12]
 8003ba8:	89f8      	ldrh	r0, [r7, #14]
 8003baa:	8c3b      	ldrh	r3, [r7, #32]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4623      	mov	r3, r4
 8003bb0:	f7ff ff8c 	bl	8003acc <LCD_DrawChar_Color>
		
		pStr ++;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1db      	bne.n	8003b80 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd90      	pop	{r4, r7, pc}
	...

08003bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bd8:	f002 fe26 	bl	8006828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bdc:	f000 f83c 	bl	8003c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003be0:	f7fe faf2 	bl	80021c8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003be4:	f7fe fa3e 	bl	8002064 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003be8:	f002 f9d4 	bl	8005f94 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003bec:	f001 ffbe 	bl	8005b6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003bf0:	f002 f830 	bl	8005c54 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003bf4:	f002 f87c 	bl	8005cf0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8003bf8:	f001 ff12 	bl	8005a20 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003bfc:	f7fe f98e 	bl	8001f1c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8003c00:	f002 fa1c 	bl	800603c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8003c04:	f002 f9f0 	bl	8005fe8 <MX_USART2_UART_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c0e:	480e      	ldr	r0, [pc, #56]	; (8003c48 <main+0x74>)
 8003c10:	f003 fc6d 	bl	80074ee <HAL_GPIO_WritePin>
	LCD_INIT();
 8003c14:	f7ff fca9 	bl	800356a <LCD_INIT>
	
	
	DEBUG_USART_Config();
 8003c18:	f7fe f9fa 	bl	8002010 <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8003c1c:	f002 f986 	bl	8005f2c <TIMER_INIT>
	timer_min(1);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f002 f995 	bl	8005f50 <timer_min>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003c26:	2108      	movs	r1, #8
 8003c28:	4808      	ldr	r0, [pc, #32]	; (8003c4c <main+0x78>)
 8003c2a:	f004 fa9d 	bl	8008168 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <main+0x78>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3334      	adds	r3, #52	; 0x34
 8003c34:	3308      	adds	r3, #8
 8003c36:	220a      	movs	r2, #10
 8003c38:	601a      	str	r2, [r3, #0]
  myfunc();
 8003c3a:	f7ff fb8d 	bl	8003358 <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8003c3e:	4904      	ldr	r1, [pc, #16]	; (8003c50 <main+0x7c>)
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <main+0x80>)
 8003c42:	f002 fd43 	bl	80066cc <XPT2046_Get_TouchedPoint>
 8003c46:	e7fa      	b.n	8003c3e <main+0x6a>
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	20000870 	.word	0x20000870
 8003c50:	20000008 	.word	0x20000008
 8003c54:	20000418 	.word	0x20000418

08003c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b096      	sub	sp, #88	; 0x58
 8003c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c62:	2228      	movs	r2, #40	; 0x28
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f005 ffa4 	bl	8009bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c6c:	f107 031c 	add.w	r3, r7, #28
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c7c:	1d3b      	adds	r3, r7, #4
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003c8c:	2305      	movs	r3, #5
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c96:	2300      	movs	r3, #0
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003caa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003cac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003cb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fc54 	bl	8007564 <HAL_RCC_OscConfig>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003cc2:	f000 f82b 	bl	8003d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc6:	230f      	movs	r3, #15
 8003cc8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003cdc:	f107 031c 	add.w	r3, r7, #28
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f003 fea2 	bl	8007a2c <HAL_RCC_ClockConfig>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003cee:	f000 f815 	bl	8003d1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d00:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f004 f84d 	bl	8007da4 <HAL_RCCEx_PeriphCLKConfig>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003d10:	f000 f804 	bl	8003d1c <Error_Handler>
  }
}
 8003d14:	bf00      	nop
 8003d16:	3758      	adds	r7, #88	; 0x58
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d204      	bcs.n	8003d4a <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	701a      	strb	r2, [r3, #0]
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4603      	mov	r3, r0
 8003d62:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e002      	b.n	8003d84 <_strnlen_s+0x16>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3301      	adds	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <_strnlen_s+0x28>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	603a      	str	r2, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f3      	bne.n	8003d7e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	1ad3      	subs	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b2f      	cmp	r3, #47	; 0x2f
 8003db4:	d904      	bls.n	8003dc0 <_is_digit+0x1a>
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	2b39      	cmp	r3, #57	; 0x39
 8003dba:	d801      	bhi.n	8003dc0 <_is_digit+0x1a>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <_is_digit+0x1c>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003dde:	e00e      	b.n	8003dfe <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	4403      	add	r3, r0
 8003dfa:	3b30      	subs	r3, #48	; 0x30
 8003dfc:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ffce 	bl	8003da6 <_is_digit>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e7      	bne.n	8003de0 <_atoi+0xe>
  }
  return i;
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003e1a:	b590      	push	{r4, r7, lr}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d125      	bne.n	8003e82 <_out_rev+0x68>
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d120      	bne.n	8003e82 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e00a      	b.n	8003e5c <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	1c53      	adds	r3, r2, #1
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	68fc      	ldr	r4, [r7, #12]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	2020      	movs	r0, #32
 8003e54:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d3f0      	bcc.n	8003e46 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003e64:	e00d      	b.n	8003e82 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	4413      	add	r3, r2
 8003e72:	7818      	ldrb	r0, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	1c53      	adds	r3, r2, #1
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	68fc      	ldr	r4, [r7, #12]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	47a0      	blx	r4
  while (len) {
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ee      	bne.n	8003e66 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003e92:	e007      	b.n	8003ea4 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	1c53      	adds	r3, r2, #1
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	68fc      	ldr	r4, [r7, #12]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	2020      	movs	r0, #32
 8003ea2:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d8f1      	bhi.n	8003e94 <_out_rev+0x7a>
    }
  }

  return idx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd90      	pop	{r4, r7, pc}

08003eba <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b088      	sub	sp, #32
 8003ebe:	af04      	add	r7, sp, #16
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d136      	bne.n	8003f40 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d018      	beq.n	8003f0a <_ntoa_format+0x50>
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d013      	beq.n	8003f0a <_ntoa_format+0x50>
 8003ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <_ntoa_format+0x3a>
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <_ntoa_format+0x50>
      width--;
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003efa:	e006      	b.n	8003f0a <_ntoa_format+0x50>
      buf[len++] = '0';
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	61fa      	str	r2, [r7, #28]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4413      	add	r3, r2
 8003f06:	2230      	movs	r2, #48	; 0x30
 8003f08:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20a      	bcs.n	8003f28 <_ntoa_format+0x6e>
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b1f      	cmp	r3, #31
 8003f16:	d9f1      	bls.n	8003efc <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f18:	e006      	b.n	8003f28 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	61fa      	str	r2, [r7, #28]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	2230      	movs	r2, #48	; 0x30
 8003f26:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <_ntoa_format+0x86>
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d202      	bcs.n	8003f40 <_ntoa_format+0x86>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b1f      	cmp	r3, #31
 8003f3e:	d9ec      	bls.n	8003f1a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d058      	beq.n	8003ffc <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <_ntoa_format+0xc8>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d013      	beq.n	8003f82 <_ntoa_format+0xc8>
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d003      	beq.n	8003f6a <_ntoa_format+0xb0>
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10b      	bne.n	8003f82 <_ntoa_format+0xc8>
      len--;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <_ntoa_format+0xc8>
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d102      	bne.n	8003f82 <_ntoa_format+0xc8>
        len--;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d10f      	bne.n	8003fa8 <_ntoa_format+0xee>
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <_ntoa_format+0xee>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b1f      	cmp	r3, #31
 8003f96:	d807      	bhi.n	8003fa8 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	61fa      	str	r2, [r7, #28]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	2278      	movs	r2, #120	; 0x78
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e01f      	b.n	8003fe8 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d10f      	bne.n	8003fce <_ntoa_format+0x114>
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <_ntoa_format+0x114>
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b1f      	cmp	r3, #31
 8003fbc:	d807      	bhi.n	8003fce <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	61fa      	str	r2, [r7, #28]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	2258      	movs	r2, #88	; 0x58
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	e00c      	b.n	8003fe8 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d109      	bne.n	8003fe8 <_ntoa_format+0x12e>
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b1f      	cmp	r3, #31
 8003fd8:	d806      	bhi.n	8003fe8 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	61fa      	str	r2, [r7, #28]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	2262      	movs	r2, #98	; 0x62
 8003fe6:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2b1f      	cmp	r3, #31
 8003fec:	d806      	bhi.n	8003ffc <_ntoa_format+0x142>
      buf[len++] = '0';
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	61fa      	str	r2, [r7, #28]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	2230      	movs	r2, #48	; 0x30
 8003ffa:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b1f      	cmp	r3, #31
 8004000:	d824      	bhi.n	800404c <_ntoa_format+0x192>
    if (negative) {
 8004002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <_ntoa_format+0x160>
      buf[len++] = '-';
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	61fa      	str	r2, [r7, #28]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4413      	add	r3, r2
 8004014:	222d      	movs	r2, #45	; 0x2d
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e018      	b.n	800404c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	61fa      	str	r2, [r7, #28]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4413      	add	r3, r2
 800402e:	222b      	movs	r2, #43	; 0x2b
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e00b      	b.n	800404c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <_ntoa_format+0x192>
      buf[len++] = ' ';
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	61fa      	str	r2, [r7, #28]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	2220      	movs	r2, #32
 800404a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	9303      	str	r3, [sp, #12]
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fed9 	bl	8003e1a <_out_rev>
 8004068:	4603      	mov	r3, r0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b096      	sub	sp, #88	; 0x58
 8004076:	af08      	add	r7, sp, #32
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800408a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408c:	f023 0310 	bic.w	r3, r3, #16
 8004090:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <_ntoa_long+0x30>
 800409c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d032      	beq.n	8004108 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80040a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80040ac:	fb01 f202 	mul.w	r2, r1, r2
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80040b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	d804      	bhi.n	80040c8 <_ntoa_long+0x56>
 80040be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040c2:	3330      	adds	r3, #48	; 0x30
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	e00d      	b.n	80040e4 <_ntoa_long+0x72>
 80040c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <_ntoa_long+0x64>
 80040d2:	2241      	movs	r2, #65	; 0x41
 80040d4:	e000      	b.n	80040d8 <_ntoa_long+0x66>
 80040d6:	2261      	movs	r2, #97	; 0x61
 80040d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040dc:	4413      	add	r3, r2
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	3b0a      	subs	r3, #10
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	1c59      	adds	r1, r3, #1
 80040e8:	6379      	str	r1, [r7, #52]	; 0x34
 80040ea:	3338      	adds	r3, #56	; 0x38
 80040ec:	443b      	add	r3, r7
 80040ee:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80040f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80040fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <_ntoa_long+0x96>
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	2b1f      	cmp	r3, #31
 8004106:	d9cc      	bls.n	80040a2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410a:	9306      	str	r3, [sp, #24]
 800410c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410e:	9305      	str	r3, [sp, #20]
 8004110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004112:	9304      	str	r3, [sp, #16]
 8004114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004116:	9303      	str	r3, [sp, #12]
 8004118:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800411c:	9302      	str	r3, [sp, #8]
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	f107 0310 	add.w	r3, r7, #16
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff fec3 	bl	8003eba <_ntoa_format>
 8004134:	4603      	mov	r3, r0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3738      	adds	r7, #56	; 0x38
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b096      	sub	sp, #88	; 0x58
 8004142:	af08      	add	r7, sp, #32
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004150:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004154:	4313      	orrs	r3, r2
 8004156:	d103      	bne.n	8004160 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <_ntoa_long_long+0x34>
 800416a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800416e:	4313      	orrs	r3, r2
 8004170:	d037      	beq.n	80041e2 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8004172:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004176:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800417a:	f7fc ffef 	bl	800115c <__aeabi_uldivmod>
 800417e:	4613      	mov	r3, r2
 8004180:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004184:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004188:	2b09      	cmp	r3, #9
 800418a:	d804      	bhi.n	8004196 <_ntoa_long_long+0x58>
 800418c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004190:	3330      	adds	r3, #48	; 0x30
 8004192:	b2da      	uxtb	r2, r3
 8004194:	e00d      	b.n	80041b2 <_ntoa_long_long+0x74>
 8004196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <_ntoa_long_long+0x66>
 80041a0:	2241      	movs	r2, #65	; 0x41
 80041a2:	e000      	b.n	80041a6 <_ntoa_long_long+0x68>
 80041a4:	2261      	movs	r2, #97	; 0x61
 80041a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041aa:	4413      	add	r3, r2
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	3b0a      	subs	r3, #10
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b4:	1c59      	adds	r1, r3, #1
 80041b6:	6379      	str	r1, [r7, #52]	; 0x34
 80041b8:	3338      	adds	r3, #56	; 0x38
 80041ba:	443b      	add	r3, r7
 80041bc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80041c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80041c8:	f7fc ffc8 	bl	800115c <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80041d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041d8:	4313      	orrs	r3, r2
 80041da:	d002      	beq.n	80041e2 <_ntoa_long_long+0xa4>
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	2b1f      	cmp	r3, #31
 80041e0:	d9c7      	bls.n	8004172 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80041e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041e6:	9206      	str	r2, [sp, #24]
 80041e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ea:	9205      	str	r2, [sp, #20]
 80041ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ee:	9204      	str	r2, [sp, #16]
 80041f0:	9303      	str	r3, [sp, #12]
 80041f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80041f6:	9302      	str	r3, [sp, #8]
 80041f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	f107 0310 	add.w	r3, r7, #16
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff fe56 	bl	8003eba <_ntoa_format>
 800420e:	4603      	mov	r3, r0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3738      	adds	r7, #56	; 0x38
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b09d      	sub	sp, #116	; 0x74
 800421c:	af06      	add	r7, sp, #24
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004236:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800423a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800423e:	f7fc fc1f 	bl	8000a80 <__aeabi_dcmpeq>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800424a:	9303      	str	r3, [sp, #12]
 800424c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424e:	9302      	str	r3, [sp, #8]
 8004250:	2303      	movs	r3, #3
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	4b82      	ldr	r3, [pc, #520]	; (8004460 <_ftoa+0x248>)
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fddb 	bl	8003e1a <_out_rev>
 8004264:	4603      	mov	r3, r0
 8004266:	e224      	b.n	80046b2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8004268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800426c:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004270:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004274:	f7fc fc0e 	bl	8000a94 <__aeabi_dcmplt>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00f      	beq.n	800429e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800427e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004280:	9303      	str	r3, [sp, #12]
 8004282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004284:	9302      	str	r3, [sp, #8]
 8004286:	2304      	movs	r3, #4
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	4b76      	ldr	r3, [pc, #472]	; (8004464 <_ftoa+0x24c>)
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff fdc0 	bl	8003e1a <_out_rev>
 800429a:	4603      	mov	r3, r0
 800429c:	e209      	b.n	80046b2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800429e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a2:	4b71      	ldr	r3, [pc, #452]	; (8004468 <_ftoa+0x250>)
 80042a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042a8:	f7fc fc12 	bl	8000ad0 <__aeabi_dcmpgt>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01d      	beq.n	80042ee <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80042b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <_ftoa+0xa8>
 80042bc:	4b6b      	ldr	r3, [pc, #428]	; (800446c <_ftoa+0x254>)
 80042be:	e000      	b.n	80042c2 <_ftoa+0xaa>
 80042c0:	4b6b      	ldr	r3, [pc, #428]	; (8004470 <_ftoa+0x258>)
 80042c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042c4:	f002 0204 	and.w	r2, r2, #4
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	d001      	beq.n	80042d0 <_ftoa+0xb8>
 80042cc:	2204      	movs	r2, #4
 80042ce:	e000      	b.n	80042d2 <_ftoa+0xba>
 80042d0:	2203      	movs	r2, #3
 80042d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80042d4:	9103      	str	r1, [sp, #12]
 80042d6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80042d8:	9102      	str	r1, [sp, #8]
 80042da:	9201      	str	r2, [sp, #4]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fd98 	bl	8003e1a <_out_rev>
 80042ea:	4603      	mov	r3, r0
 80042ec:	e1e1      	b.n	80046b2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80042ee:	a358      	add	r3, pc, #352	; (adr r3, 8004450 <_ftoa+0x238>)
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042f8:	f7fc fbea 	bl	8000ad0 <__aeabi_dcmpgt>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <_ftoa+0xfe>
 8004302:	a355      	add	r3, pc, #340	; (adr r3, 8004458 <_ftoa+0x240>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800430c:	f7fc fbc2 	bl	8000a94 <__aeabi_dcmplt>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d011      	beq.n	800433a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004318:	9304      	str	r3, [sp, #16]
 800431a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431c:	9303      	str	r3, [sp, #12]
 800431e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004320:	9302      	str	r3, [sp, #8]
 8004322:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004326:	e9cd 2300 	strd	r2, r3, [sp]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f9c9 	bl	80046c8 <_etoa>
 8004336:	4603      	mov	r3, r0
 8004338:	e1bb      	b.n	80046b2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800434c:	f7fc fba2 	bl	8000a94 <__aeabi_dcmplt>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00e      	beq.n	8004374 <_ftoa+0x15c>
    negative = true;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 800435c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004360:	f04f 0000 	mov.w	r0, #0
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	f7fb ff6a 	bl	8000240 <__aeabi_dsub>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10d      	bne.n	800439a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800437e:	2306      	movs	r3, #6
 8004380:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004382:	e00a      	b.n	800439a <_ftoa+0x182>
    buf[len++] = '0';
 8004384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	657a      	str	r2, [r7, #84]	; 0x54
 800438a:	3358      	adds	r3, #88	; 0x58
 800438c:	443b      	add	r3, r7
 800438e:	2230      	movs	r2, #48	; 0x30
 8004390:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8004394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004396:	3b01      	subs	r3, #1
 8004398:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800439a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439c:	2b1f      	cmp	r3, #31
 800439e:	d802      	bhi.n	80043a6 <_ftoa+0x18e>
 80043a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	d8ee      	bhi.n	8004384 <_ftoa+0x16c>
  }

  int whole = (int)value;
 80043a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043aa:	f7fc fb9b 	bl	8000ae4 <__aeabi_d2iz>
 80043ae:	4603      	mov	r3, r0
 80043b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 80043b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80043b4:	f7fc f892 	bl	80004dc <__aeabi_i2d>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043c0:	f7fb ff3e 	bl	8000240 <__aeabi_dsub>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	4a29      	ldr	r2, [pc, #164]	; (8004474 <_ftoa+0x25c>)
 80043ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f7fc f8ea 	bl	80005b0 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 80043e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80043e8:	f7fc fba4 	bl	8000b34 <__aeabi_d2uiz>
 80043ec:	4603      	mov	r3, r0
 80043ee:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80043f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043f2:	f7fc f863 	bl	80004bc <__aeabi_ui2d>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80043fe:	f7fb ff1f 	bl	8000240 <__aeabi_dsub>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <_ftoa+0x260>)
 8004410:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004414:	f7fc fb5c 	bl	8000ad0 <__aeabi_dcmpgt>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02e      	beq.n	800447c <_ftoa+0x264>
    ++frac;
 800441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004420:	3301      	adds	r3, #1
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004424:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004426:	f7fc f849 	bl	80004bc <__aeabi_ui2d>
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <_ftoa+0x25c>)
 800442c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fc fb41 	bl	8000abc <__aeabi_dcmpge>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d032      	beq.n	80044a6 <_ftoa+0x28e>
      frac = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8004444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004446:	3301      	adds	r3, #1
 8004448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800444a:	e02c      	b.n	80044a6 <_ftoa+0x28e>
 800444c:	f3af 8000 	nop.w
 8004450:	00000000 	.word	0x00000000
 8004454:	41cdcd65 	.word	0x41cdcd65
 8004458:	00000000 	.word	0x00000000
 800445c:	c1cdcd65 	.word	0xc1cdcd65
 8004460:	0800a628 	.word	0x0800a628
 8004464:	0800a62c 	.word	0x0800a62c
 8004468:	7fefffff 	.word	0x7fefffff
 800446c:	0800a634 	.word	0x0800a634
 8004470:	0800a63c 	.word	0x0800a63c
 8004474:	0800aca0 	.word	0x0800aca0
 8004478:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	4b8e      	ldr	r3, [pc, #568]	; (80046bc <_ftoa+0x4a4>)
 8004482:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004486:	f7fc fb05 	bl	8000a94 <__aeabi_dcmplt>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <_ftoa+0x288>
 8004496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80044a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a2:	3301      	adds	r3, #1
 80044a4:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 80044a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d133      	bne.n	8004514 <_ftoa+0x2fc>
    diff = value - (double)whole;
 80044ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80044ae:	f7fc f815 	bl	80004dc <__aeabi_i2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ba:	f7fb fec1 	bl	8000240 <__aeabi_dsub>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80044c6:	2301      	movs	r3, #1
 80044c8:	461c      	mov	r4, r3
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	4b7b      	ldr	r3, [pc, #492]	; (80046bc <_ftoa+0x4a4>)
 80044d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80044d4:	f7fc fade 	bl	8000a94 <__aeabi_dcmplt>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <_ftoa+0x2ca>
 80044de:	2300      	movs	r3, #0
 80044e0:	461c      	mov	r4, r3
 80044e2:	b2e3      	uxtb	r3, r4
 80044e4:	f083 0301 	eor.w	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <_ftoa+0x2ea>
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	4b72      	ldr	r3, [pc, #456]	; (80046bc <_ftoa+0x4a4>)
 80044f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80044f8:	f7fc faea 	bl	8000ad0 <__aeabi_dcmpgt>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04c      	beq.n	800459c <_ftoa+0x384>
 8004502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d069      	beq.n	80045e0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800450c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450e:	3301      	adds	r3, #1
 8004510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004512:	e065      	b.n	80045e0 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 8004514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004516:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004518:	e01f      	b.n	800455a <_ftoa+0x342>
      --count;
 800451a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451c:	3b01      	subs	r3, #1
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8004520:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004522:	4b67      	ldr	r3, [pc, #412]	; (80046c0 <_ftoa+0x4a8>)
 8004524:	fba3 2301 	umull	r2, r3, r3, r1
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	1aca      	subs	r2, r1, r3
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	6579      	str	r1, [r7, #84]	; 0x54
 800453c:	3230      	adds	r2, #48	; 0x30
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	3358      	adds	r3, #88	; 0x58
 8004542:	443b      	add	r3, r7
 8004544:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800454a:	4a5d      	ldr	r2, [pc, #372]	; (80046c0 <_ftoa+0x4a8>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	08db      	lsrs	r3, r3, #3
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
 8004554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455c:	2b1f      	cmp	r3, #31
 800455e:	d9dc      	bls.n	800451a <_ftoa+0x302>
 8004560:	e009      	b.n	8004576 <_ftoa+0x35e>
        break;
 8004562:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004564:	e007      	b.n	8004576 <_ftoa+0x35e>
      buf[len++] = '0';
 8004566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	657a      	str	r2, [r7, #84]	; 0x54
 800456c:	3358      	adds	r3, #88	; 0x58
 800456e:	443b      	add	r3, r7
 8004570:	2230      	movs	r2, #48	; 0x30
 8004572:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004578:	2b1f      	cmp	r3, #31
 800457a:	d804      	bhi.n	8004586 <_ftoa+0x36e>
 800457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457e:	1e5a      	subs	r2, r3, #1
 8004580:	647a      	str	r2, [r7, #68]	; 0x44
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ef      	bne.n	8004566 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004588:	2b1f      	cmp	r3, #31
 800458a:	d829      	bhi.n	80045e0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800458c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	657a      	str	r2, [r7, #84]	; 0x54
 8004592:	3358      	adds	r3, #88	; 0x58
 8004594:	443b      	add	r3, r7
 8004596:	222e      	movs	r2, #46	; 0x2e
 8004598:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800459c:	e020      	b.n	80045e0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800459e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a0:	4b48      	ldr	r3, [pc, #288]	; (80046c4 <_ftoa+0x4ac>)
 80045a2:	fb83 1302 	smull	r1, r3, r3, r2
 80045a6:	1099      	asrs	r1, r3, #2
 80045a8:	17d3      	asrs	r3, r2, #31
 80045aa:	1ac9      	subs	r1, r1, r3
 80045ac:	460b      	mov	r3, r1
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	1ad1      	subs	r1, r2, r3
 80045b6:	b2ca      	uxtb	r2, r1
 80045b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	6579      	str	r1, [r7, #84]	; 0x54
 80045be:	3230      	adds	r2, #48	; 0x30
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	3358      	adds	r3, #88	; 0x58
 80045c4:	443b      	add	r3, r7
 80045c6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	4a3d      	ldr	r2, [pc, #244]	; (80046c4 <_ftoa+0x4ac>)
 80045ce:	fb82 1203 	smull	r1, r2, r2, r3
 80045d2:	1092      	asrs	r2, r2, #2
 80045d4:	17db      	asrs	r3, r3, #31
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80045e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e2:	2b1f      	cmp	r3, #31
 80045e4:	d9db      	bls.n	800459e <_ftoa+0x386>
 80045e6:	e000      	b.n	80045ea <_ftoa+0x3d2>
      break;
 80045e8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80045ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d123      	bne.n	800463c <_ftoa+0x424>
 80045f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01e      	beq.n	800463c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80045fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004600:	2b00      	cmp	r3, #0
 8004602:	d014      	beq.n	800462e <_ftoa+0x416>
 8004604:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <_ftoa+0x3fe>
 800460c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <_ftoa+0x416>
      width--;
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	3b01      	subs	r3, #1
 800461a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800461c:	e007      	b.n	800462e <_ftoa+0x416>
      buf[len++] = '0';
 800461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	657a      	str	r2, [r7, #84]	; 0x54
 8004624:	3358      	adds	r3, #88	; 0x58
 8004626:	443b      	add	r3, r7
 8004628:	2230      	movs	r2, #48	; 0x30
 800462a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800462e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004632:	429a      	cmp	r2, r3
 8004634:	d202      	bcs.n	800463c <_ftoa+0x424>
 8004636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004638:	2b1f      	cmp	r3, #31
 800463a:	d9f0      	bls.n	800461e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800463c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800463e:	2b1f      	cmp	r3, #31
 8004640:	d827      	bhi.n	8004692 <_ftoa+0x47a>
    if (negative) {
 8004642:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <_ftoa+0x444>
      buf[len++] = '-';
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	657a      	str	r2, [r7, #84]	; 0x54
 8004650:	3358      	adds	r3, #88	; 0x58
 8004652:	443b      	add	r3, r7
 8004654:	222d      	movs	r2, #45	; 0x2d
 8004656:	f803 2c48 	strb.w	r2, [r3, #-72]
 800465a:	e01a      	b.n	8004692 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800465c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	657a      	str	r2, [r7, #84]	; 0x54
 800466c:	3358      	adds	r3, #88	; 0x58
 800466e:	443b      	add	r3, r7
 8004670:	222b      	movs	r2, #43	; 0x2b
 8004672:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004676:	e00c      	b.n	8004692 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8004678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <_ftoa+0x47a>
      buf[len++] = ' ';
 8004682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	657a      	str	r2, [r7, #84]	; 0x54
 8004688:	3358      	adds	r3, #88	; 0x58
 800468a:	443b      	add	r3, r7
 800468c:	2220      	movs	r2, #32
 800468e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004694:	9303      	str	r3, [sp, #12]
 8004696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004698:	9302      	str	r3, [sp, #8]
 800469a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	f107 0310 	add.w	r3, r7, #16
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff fbb5 	bl	8003e1a <_out_rev>
 80046b0:	4603      	mov	r3, r0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	375c      	adds	r7, #92	; 0x5c
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}
 80046ba:	bf00      	nop
 80046bc:	3fe00000 	.word	0x3fe00000
 80046c0:	cccccccd 	.word	0xcccccccd
 80046c4:	66666667 	.word	0x66666667

080046c8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	b09d      	sub	sp, #116	; 0x74
 80046ce:	af06      	add	r7, sp, #24
 80046d0:	61f8      	str	r0, [r7, #28]
 80046d2:	61b9      	str	r1, [r7, #24]
 80046d4:	617a      	str	r2, [r7, #20]
 80046d6:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80046d8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80046dc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046e0:	f7fc f9ce 	bl	8000a80 <__aeabi_dcmpeq>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d014      	beq.n	8004714 <_etoa+0x4c>
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ee:	4bc4      	ldr	r3, [pc, #784]	; (8004a00 <_etoa+0x338>)
 80046f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046f4:	f7fc f9ec 	bl	8000ad0 <__aeabi_dcmpgt>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <_etoa+0x4c>
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004702:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800470a:	f7fc f9c3 	bl	8000a94 <__aeabi_dcmplt>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d014      	beq.n	800473e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004718:	9304      	str	r3, [sp, #16]
 800471a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471e:	9303      	str	r3, [sp, #12]
 8004720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004724:	9302      	str	r3, [sp, #8]
 8004726:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800472a:	e9cd 2300 	strd	r2, r3, [sp]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	69b9      	ldr	r1, [r7, #24]
 8004734:	69f8      	ldr	r0, [r7, #28]
 8004736:	f7ff fd6f 	bl	8004218 <_ftoa>
 800473a:	4603      	mov	r3, r0
 800473c:	e247      	b.n	8004bce <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 800473e:	2301      	movs	r3, #1
 8004740:	461e      	mov	r6, r3
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800474e:	f7fc f9a1 	bl	8000a94 <__aeabi_dcmplt>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <_etoa+0x94>
 8004758:	2300      	movs	r3, #0
 800475a:	461e      	mov	r6, r3
 800475c:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8004760:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <_etoa+0xb8>
    value = -value;
 8004768:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004772:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800478c:	2306      	movs	r3, #6
 800478e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004792:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004796:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800479a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	0d0a      	lsrs	r2, r1, #20
 80047a8:	2300      	movs	r3, #0
 80047aa:	4613      	mov	r3, r2
 80047ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80047b4:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80047b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ba:	4690      	mov	r8, r2
 80047bc:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80047c0:	4644      	mov	r4, r8
 80047c2:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80047c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80047ca:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80047ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047d0:	f7fb fe84 	bl	80004dc <__aeabi_i2d>
 80047d4:	a37e      	add	r3, pc, #504	; (adr r3, 80049d0 <_etoa+0x308>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f7fb fee9 	bl	80005b0 <__aeabi_dmul>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	a37c      	add	r3, pc, #496	; (adr r3, 80049d8 <_etoa+0x310>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f7fb fd2a 	bl	8000244 <__adddf3>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
 80047f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	4b80      	ldr	r3, [pc, #512]	; (8004a04 <_etoa+0x33c>)
 8004802:	f7fb fd1d 	bl	8000240 <__aeabi_dsub>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	a374      	add	r3, pc, #464	; (adr r3, 80049e0 <_etoa+0x318>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb fecc 	bl	80005b0 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fd10 	bl	8000244 <__adddf3>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	f7fc f95a 	bl	8000ae4 <__aeabi_d2iz>
 8004830:	4603      	mov	r3, r0
 8004832:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004834:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004836:	f7fb fe51 	bl	80004dc <__aeabi_i2d>
 800483a:	a36b      	add	r3, pc, #428	; (adr r3, 80049e8 <_etoa+0x320>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fb feb6 	bl	80005b0 <__aeabi_dmul>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <_etoa+0x340>)
 8004852:	f7fb fcf7 	bl	8000244 <__adddf3>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	f7fc f941 	bl	8000ae4 <__aeabi_d2iz>
 8004862:	4603      	mov	r3, r0
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8004866:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004868:	f7fb fe38 	bl	80004dc <__aeabi_i2d>
 800486c:	a360      	add	r3, pc, #384	; (adr r3, 80049f0 <_etoa+0x328>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fe9d 	bl	80005b0 <__aeabi_dmul>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4614      	mov	r4, r2
 800487c:	461d      	mov	r5, r3
 800487e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004880:	f7fb fe2c 	bl	80004dc <__aeabi_i2d>
 8004884:	a35c      	add	r3, pc, #368	; (adr r3, 80049f8 <_etoa+0x330>)
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	f7fb fe91 	bl	80005b0 <__aeabi_dmul>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fb fcd3 	bl	8000240 <__aeabi_dsub>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80048a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048aa:	f7fb fe81 	bl	80005b0 <__aeabi_dmul>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80048b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80048bc:	17da      	asrs	r2, r3, #31
 80048be:	469a      	mov	sl, r3
 80048c0:	4693      	mov	fp, r2
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80048ce:	2200      	movs	r2, #0
 80048d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80048d4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80048d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	f7fb fcb0 	bl	8000244 <__adddf3>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4690      	mov	r8, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048f0:	f04f 0000 	mov.w	r0, #0
 80048f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80048f8:	f7fb fca2 	bl	8000240 <__aeabi_dsub>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4692      	mov	sl, r2
 8004902:	469b      	mov	fp, r3
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <_etoa+0x344>)
 800490a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800490e:	f7fb ff79 	bl	8000804 <__aeabi_ddiv>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	4b3c      	ldr	r3, [pc, #240]	; (8004a10 <_etoa+0x348>)
 8004920:	f7fb fc90 	bl	8000244 <__adddf3>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800492c:	f7fb ff6a 	bl	8000804 <__aeabi_ddiv>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <_etoa+0x34c>)
 800493e:	f7fb fc81 	bl	8000244 <__adddf3>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800494a:	f7fb ff5b 	bl	8000804 <__aeabi_ddiv>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4650      	mov	r0, sl
 8004954:	4659      	mov	r1, fp
 8004956:	f7fb fc75 	bl	8000244 <__adddf3>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	f7fb ff4f 	bl	8000804 <__aeabi_ddiv>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <_etoa+0x350>)
 8004974:	f7fb fc66 	bl	8000244 <__adddf3>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4620      	mov	r0, r4
 800497e:	4629      	mov	r1, r5
 8004980:	f7fb fe16 	bl	80005b0 <__aeabi_dmul>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800498c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004990:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004994:	f7fc f87e 	bl	8000a94 <__aeabi_dcmplt>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <_etoa+0x2f2>
    expval--;
 800499e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a0:	3b01      	subs	r3, #1
 80049a2:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80049a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <_etoa+0x348>)
 80049ae:	f7fb ff29 	bl	8000804 <__aeabi_ddiv>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80049ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049bc:	2b63      	cmp	r3, #99	; 0x63
 80049be:	dc2d      	bgt.n	8004a1c <_etoa+0x354>
 80049c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80049c6:	db29      	blt.n	8004a1c <_etoa+0x354>
 80049c8:	2304      	movs	r3, #4
 80049ca:	e028      	b.n	8004a1e <_etoa+0x356>
 80049cc:	f3af 8000 	nop.w
 80049d0:	509f79fb 	.word	0x509f79fb
 80049d4:	3fd34413 	.word	0x3fd34413
 80049d8:	8b60c8b3 	.word	0x8b60c8b3
 80049dc:	3fc68a28 	.word	0x3fc68a28
 80049e0:	636f4361 	.word	0x636f4361
 80049e4:	3fd287a7 	.word	0x3fd287a7
 80049e8:	0979a371 	.word	0x0979a371
 80049ec:	400a934f 	.word	0x400a934f
 80049f0:	bbb55516 	.word	0xbbb55516
 80049f4:	40026bb1 	.word	0x40026bb1
 80049f8:	fefa39ef 	.word	0xfefa39ef
 80049fc:	3fe62e42 	.word	0x3fe62e42
 8004a00:	7fefffff 	.word	0x7fefffff
 8004a04:	3ff80000 	.word	0x3ff80000
 8004a08:	3fe00000 	.word	0x3fe00000
 8004a0c:	402c0000 	.word	0x402c0000
 8004a10:	40240000 	.word	0x40240000
 8004a14:	40180000 	.word	0x40180000
 8004a18:	3ff00000 	.word	0x3ff00000
 8004a1c:	2305      	movs	r3, #5
 8004a1e:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03d      	beq.n	8004aa8 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004a2c:	a36a      	add	r3, pc, #424	; (adr r3, 8004bd8 <_etoa+0x510>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a36:	f7fc f841 	bl	8000abc <__aeabi_dcmpge>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d024      	beq.n	8004a8a <_etoa+0x3c2>
 8004a40:	a367      	add	r3, pc, #412	; (adr r3, 8004be0 <_etoa+0x518>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a4a:	f7fc f823 	bl	8000a94 <__aeabi_dcmplt>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01a      	beq.n	8004a8a <_etoa+0x3c2>
      if ((int)prec > expval) {
 8004a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	da07      	bge.n	8004a6e <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8004a5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a6c:	e002      	b.n	8004a74 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	657b      	str	r3, [r7, #84]	; 0x54
 8004a88:	e00e      	b.n	8004aa8 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <_etoa+0x3e0>
 8004a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <_etoa+0x3e0>
        --prec;
 8004a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8004aae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d904      	bls.n	8004ac2 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	e001      	b.n	8004ac6 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <_etoa+0x414>
 8004ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8004adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <_etoa+0x42e>
    value /= conv.F;
 8004ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aea:	f7fb fe8b 	bl	8000804 <__aeabi_ddiv>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004afa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <_etoa+0x44c>
 8004b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e003      	b.n	8004b1c <_etoa+0x454>
 8004b14:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004b18:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b24:	9304      	str	r3, [sp, #16]
 8004b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b28:	9303      	str	r3, [sp, #12]
 8004b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b34:	e9cd 3400 	strd	r3, r4, [sp]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69f8      	ldr	r0, [r7, #28]
 8004b40:	f7ff fb6a 	bl	8004218 <_ftoa>
 8004b44:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d03f      	beq.n	8004bcc <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004b4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <_etoa+0x494>
 8004b58:	2045      	movs	r0, #69	; 0x45
 8004b5a:	e000      	b.n	8004b5e <_etoa+0x496>
 8004b5c:	2065      	movs	r0, #101	; 0x65
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	1c53      	adds	r3, r2, #1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	69fc      	ldr	r4, [r7, #28]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	69b9      	ldr	r1, [r7, #24]
 8004b6a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bfb8      	it	lt
 8004b72:	425b      	neglt	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b78:	0fdb      	lsrs	r3, r3, #31
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	2105      	movs	r1, #5
 8004b82:	9105      	str	r1, [sp, #20]
 8004b84:	9204      	str	r2, [sp, #16]
 8004b86:	2200      	movs	r2, #0
 8004b88:	9203      	str	r2, [sp, #12]
 8004b8a:	220a      	movs	r2, #10
 8004b8c:	9202      	str	r2, [sp, #8]
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	9000      	str	r0, [sp, #0]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	69b9      	ldr	r1, [r7, #24]
 8004b98:	69f8      	ldr	r0, [r7, #28]
 8004b9a:	f7ff fa6a 	bl	8004072 <_ntoa_long>
 8004b9e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00f      	beq.n	8004bcc <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004bac:	e007      	b.n	8004bbe <_etoa+0x4f6>
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	1c53      	adds	r3, r2, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	69fc      	ldr	r4, [r7, #28]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	2020      	movs	r0, #32
 8004bbc:	47a0      	blx	r4
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d8f0      	bhi.n	8004bae <_etoa+0x4e6>
    }
  }
  return idx;
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	375c      	adds	r7, #92	; 0x5c
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd8:	eb1c432d 	.word	0xeb1c432d
 8004bdc:	3f1a36e2 	.word	0x3f1a36e2
 8004be0:	00000000 	.word	0x00000000
 8004be4:	412e8480 	.word	0x412e8480

08004be8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	b0a3      	sub	sp, #140	; 0x8c
 8004bee:	af0a      	add	r7, sp, #40	; 0x28
 8004bf0:	6178      	str	r0, [r7, #20]
 8004bf2:	6139      	str	r1, [r7, #16]
 8004bf4:	60fa      	str	r2, [r7, #12]
 8004bf6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 84ba 	bne.w	8005578 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8004c04:	4ba3      	ldr	r3, [pc, #652]	; (8004e94 <_vsnprintf+0x2ac>)
 8004c06:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004c08:	f000 bcb6 	b.w	8005578 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b25      	cmp	r3, #37	; 0x25
 8004c12:	d00d      	beq.n	8004c30 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	7818      	ldrb	r0, [r3, #0]
 8004c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c1a:	1c53      	adds	r3, r2, #1
 8004c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c1e:	697c      	ldr	r4, [r7, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6939      	ldr	r1, [r7, #16]
 8004c24:	47a0      	blx	r4
      format++;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60bb      	str	r3, [r7, #8]
      continue;
 8004c2c:	f000 bca4 	b.w	8005578 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	3b20      	subs	r3, #32
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d857      	bhi.n	8004cf4 <_vsnprintf+0x10c>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <_vsnprintf+0x64>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004ccd 	.word	0x08004ccd
 8004c50:	08004cf5 	.word	0x08004cf5
 8004c54:	08004cf5 	.word	0x08004cf5
 8004c58:	08004ce1 	.word	0x08004ce1
 8004c5c:	08004cf5 	.word	0x08004cf5
 8004c60:	08004cf5 	.word	0x08004cf5
 8004c64:	08004cf5 	.word	0x08004cf5
 8004c68:	08004cf5 	.word	0x08004cf5
 8004c6c:	08004cf5 	.word	0x08004cf5
 8004c70:	08004cf5 	.word	0x08004cf5
 8004c74:	08004cf5 	.word	0x08004cf5
 8004c78:	08004cb9 	.word	0x08004cb9
 8004c7c:	08004cf5 	.word	0x08004cf5
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cf5 	.word	0x08004cf5
 8004c88:	08004cf5 	.word	0x08004cf5
 8004c8c:	08004c91 	.word	0x08004c91
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ca2:	e02a      	b.n	8004cfa <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8004cb6:	e020      	b.n	8004cfa <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cba:	f043 0304 	orr.w	r3, r3, #4
 8004cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8004cca:	e016      	b.n	8004cfa <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cce:	f043 0308 	orr.w	r3, r3, #8
 8004cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	2301      	movs	r3, #1
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8004cde:	e00c      	b.n	8004cfa <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce2:	f043 0310 	orr.w	r3, r3, #16
 8004ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	2301      	movs	r3, #1
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf2:	e002      	b.n	8004cfa <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf8:	bf00      	nop
      }
    } while (n);
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d19c      	bne.n	8004c3a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff f84c 	bl	8003da6 <_is_digit>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff f85a 	bl	8003dd2 <_atoi>
 8004d1e:	65b8      	str	r0, [r7, #88]	; 0x58
 8004d20:	e01a      	b.n	8004d58 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b2a      	cmp	r3, #42	; 0x2a
 8004d28:	d116      	bne.n	8004d58 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d2e:	1d1a      	adds	r2, r3, #4
 8004d30:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da07      	bge.n	8004d4e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	425b      	negs	r3, r3
 8004d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d4c:	e001      	b.n	8004d52 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b2e      	cmp	r3, #46	; 0x2e
 8004d62:	d127      	bne.n	8004db4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8004d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f815 	bl	8003da6 <_is_digit>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8004d82:	f107 0308 	add.w	r3, r7, #8
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff f823 	bl	8003dd2 <_atoi>
 8004d8c:	6578      	str	r0, [r7, #84]	; 0x54
 8004d8e:	e011      	b.n	8004db4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b2a      	cmp	r3, #42	; 0x2a
 8004d96:	d10d      	bne.n	8004db4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004dac:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3301      	adds	r3, #1
 8004db2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	3b68      	subs	r3, #104	; 0x68
 8004dba:	2b12      	cmp	r3, #18
 8004dbc:	d866      	bhi.n	8004e8c <_vsnprintf+0x2a4>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <_vsnprintf+0x1dc>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004e37 	.word	0x08004e37
 8004dc8:	08004e8d 	.word	0x08004e8d
 8004dcc:	08004e6d 	.word	0x08004e6d
 8004dd0:	08004e8d 	.word	0x08004e8d
 8004dd4:	08004e11 	.word	0x08004e11
 8004dd8:	08004e8d 	.word	0x08004e8d
 8004ddc:	08004e8d 	.word	0x08004e8d
 8004de0:	08004e8d 	.word	0x08004e8d
 8004de4:	08004e8d 	.word	0x08004e8d
 8004de8:	08004e8d 	.word	0x08004e8d
 8004dec:	08004e8d 	.word	0x08004e8d
 8004df0:	08004e8d 	.word	0x08004e8d
 8004df4:	08004e5d 	.word	0x08004e5d
 8004df8:	08004e8d 	.word	0x08004e8d
 8004dfc:	08004e8d 	.word	0x08004e8d
 8004e00:	08004e8d 	.word	0x08004e8d
 8004e04:	08004e8d 	.word	0x08004e8d
 8004e08:	08004e8d 	.word	0x08004e8d
 8004e0c:	08004e7d 	.word	0x08004e7d
      case 'l' :
        flags |= FLAGS_LONG;
 8004e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e16:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b6c      	cmp	r3, #108	; 0x6c
 8004e24:	d134      	bne.n	8004e90 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004e34:	e02c      	b.n	8004e90 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	3301      	adds	r3, #1
 8004e42:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b68      	cmp	r3, #104	; 0x68
 8004e4a:	d125      	bne.n	8004e98 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e52:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004e5a:	e01d      	b.n	8004e98 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60bb      	str	r3, [r7, #8]
        break;
 8004e6a:	e016      	b.n	8004e9a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e72:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60bb      	str	r3, [r7, #8]
        break;
 8004e7a:	e00e      	b.n	8004e9a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3301      	adds	r3, #1
 8004e88:	60bb      	str	r3, [r7, #8]
        break;
 8004e8a:	e006      	b.n	8004e9a <_vsnprintf+0x2b2>
      default :
        break;
 8004e8c:	bf00      	nop
 8004e8e:	e004      	b.n	8004e9a <_vsnprintf+0x2b2>
        break;
 8004e90:	bf00      	nop
 8004e92:	e002      	b.n	8004e9a <_vsnprintf+0x2b2>
 8004e94:	08003d55 	.word	0x08003d55
        break;
 8004e98:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3b25      	subs	r3, #37	; 0x25
 8004ea0:	2b53      	cmp	r3, #83	; 0x53
 8004ea2:	f200 835c 	bhi.w	800555e <_vsnprintf+0x976>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <_vsnprintf+0x2c4>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08005547 	.word	0x08005547
 8004eb0:	0800555f 	.word	0x0800555f
 8004eb4:	0800555f 	.word	0x0800555f
 8004eb8:	0800555f 	.word	0x0800555f
 8004ebc:	0800555f 	.word	0x0800555f
 8004ec0:	0800555f 	.word	0x0800555f
 8004ec4:	0800555f 	.word	0x0800555f
 8004ec8:	0800555f 	.word	0x0800555f
 8004ecc:	0800555f 	.word	0x0800555f
 8004ed0:	0800555f 	.word	0x0800555f
 8004ed4:	0800555f 	.word	0x0800555f
 8004ed8:	0800555f 	.word	0x0800555f
 8004edc:	0800555f 	.word	0x0800555f
 8004ee0:	0800555f 	.word	0x0800555f
 8004ee4:	0800555f 	.word	0x0800555f
 8004ee8:	0800555f 	.word	0x0800555f
 8004eec:	0800555f 	.word	0x0800555f
 8004ef0:	0800555f 	.word	0x0800555f
 8004ef4:	0800555f 	.word	0x0800555f
 8004ef8:	0800555f 	.word	0x0800555f
 8004efc:	0800555f 	.word	0x0800555f
 8004f00:	0800555f 	.word	0x0800555f
 8004f04:	0800555f 	.word	0x0800555f
 8004f08:	0800555f 	.word	0x0800555f
 8004f0c:	0800555f 	.word	0x0800555f
 8004f10:	0800555f 	.word	0x0800555f
 8004f14:	0800555f 	.word	0x0800555f
 8004f18:	0800555f 	.word	0x0800555f
 8004f1c:	0800555f 	.word	0x0800555f
 8004f20:	0800555f 	.word	0x0800555f
 8004f24:	0800555f 	.word	0x0800555f
 8004f28:	0800555f 	.word	0x0800555f
 8004f2c:	080052ff 	.word	0x080052ff
 8004f30:	080052b3 	.word	0x080052b3
 8004f34:	080052ff 	.word	0x080052ff
 8004f38:	0800555f 	.word	0x0800555f
 8004f3c:	0800555f 	.word	0x0800555f
 8004f40:	0800555f 	.word	0x0800555f
 8004f44:	0800555f 	.word	0x0800555f
 8004f48:	0800555f 	.word	0x0800555f
 8004f4c:	0800555f 	.word	0x0800555f
 8004f50:	0800555f 	.word	0x0800555f
 8004f54:	0800555f 	.word	0x0800555f
 8004f58:	0800555f 	.word	0x0800555f
 8004f5c:	0800555f 	.word	0x0800555f
 8004f60:	0800555f 	.word	0x0800555f
 8004f64:	0800555f 	.word	0x0800555f
 8004f68:	0800555f 	.word	0x0800555f
 8004f6c:	0800555f 	.word	0x0800555f
 8004f70:	0800555f 	.word	0x0800555f
 8004f74:	0800555f 	.word	0x0800555f
 8004f78:	08004ffd 	.word	0x08004ffd
 8004f7c:	0800555f 	.word	0x0800555f
 8004f80:	0800555f 	.word	0x0800555f
 8004f84:	0800555f 	.word	0x0800555f
 8004f88:	0800555f 	.word	0x0800555f
 8004f8c:	0800555f 	.word	0x0800555f
 8004f90:	0800555f 	.word	0x0800555f
 8004f94:	0800555f 	.word	0x0800555f
 8004f98:	0800555f 	.word	0x0800555f
 8004f9c:	0800555f 	.word	0x0800555f
 8004fa0:	08004ffd 	.word	0x08004ffd
 8004fa4:	0800536b 	.word	0x0800536b
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	080052ff 	.word	0x080052ff
 8004fb0:	080052b3 	.word	0x080052b3
 8004fb4:	080052ff 	.word	0x080052ff
 8004fb8:	0800555f 	.word	0x0800555f
 8004fbc:	08004ffd 	.word	0x08004ffd
 8004fc0:	0800555f 	.word	0x0800555f
 8004fc4:	0800555f 	.word	0x0800555f
 8004fc8:	0800555f 	.word	0x0800555f
 8004fcc:	0800555f 	.word	0x0800555f
 8004fd0:	0800555f 	.word	0x0800555f
 8004fd4:	08004ffd 	.word	0x08004ffd
 8004fd8:	080054ab 	.word	0x080054ab
 8004fdc:	0800555f 	.word	0x0800555f
 8004fe0:	0800555f 	.word	0x0800555f
 8004fe4:	080053e3 	.word	0x080053e3
 8004fe8:	0800555f 	.word	0x0800555f
 8004fec:	08004ffd 	.word	0x08004ffd
 8004ff0:	0800555f 	.word	0x0800555f
 8004ff4:	0800555f 	.word	0x0800555f
 8004ff8:	08004ffd 	.word	0x08004ffd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b78      	cmp	r3, #120	; 0x78
 8005002:	d003      	beq.n	800500c <_vsnprintf+0x424>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b58      	cmp	r3, #88	; 0x58
 800500a:	d102      	bne.n	8005012 <_vsnprintf+0x42a>
          base = 16U;
 800500c:	2310      	movs	r3, #16
 800500e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005010:	e013      	b.n	800503a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b6f      	cmp	r3, #111	; 0x6f
 8005018:	d102      	bne.n	8005020 <_vsnprintf+0x438>
          base =  8U;
 800501a:	2308      	movs	r3, #8
 800501c:	64bb      	str	r3, [r7, #72]	; 0x48
 800501e:	e00c      	b.n	800503a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b62      	cmp	r3, #98	; 0x62
 8005026:	d102      	bne.n	800502e <_vsnprintf+0x446>
          base =  2U;
 8005028:	2302      	movs	r3, #2
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	e005      	b.n	800503a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800502e:	230a      	movs	r3, #10
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005034:	f023 0310 	bic.w	r3, r3, #16
 8005038:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b58      	cmp	r3, #88	; 0x58
 8005040:	d103      	bne.n	800504a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8005042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005044:	f043 0320 	orr.w	r3, r3, #32
 8005048:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b69      	cmp	r3, #105	; 0x69
 8005050:	d007      	beq.n	8005062 <_vsnprintf+0x47a>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d003      	beq.n	8005062 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800505a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505c:	f023 030c 	bic.w	r3, r3, #12
 8005060:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800506c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b69      	cmp	r3, #105	; 0x69
 800507a:	d004      	beq.n	8005086 <_vsnprintf+0x49e>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b64      	cmp	r3, #100	; 0x64
 8005082:	f040 8098 	bne.w	80051b6 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	2b00      	cmp	r3, #0
 800508e:	d031      	beq.n	80050f4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005094:	3307      	adds	r3, #7
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	f103 0208 	add.w	r2, r3, #8
 800509e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80050aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	da06      	bge.n	80050c0 <_vsnprintf+0x4d8>
 80050b2:	2100      	movs	r1, #0
 80050b4:	f1d2 0800 	rsbs	r8, r2, #0
 80050b8:	eb61 0903 	sbc.w	r9, r1, r3
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	0fc9      	lsrs	r1, r1, #31
 80050c4:	b2c9      	uxtb	r1, r1
 80050c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80050c8:	2400      	movs	r4, #0
 80050ca:	4682      	mov	sl, r0
 80050cc:	46a3      	mov	fp, r4
 80050ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80050d0:	9008      	str	r0, [sp, #32]
 80050d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80050d4:	9007      	str	r0, [sp, #28]
 80050d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80050d8:	9006      	str	r0, [sp, #24]
 80050da:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80050de:	9102      	str	r1, [sp, #8]
 80050e0:	e9cd 2300 	strd	r2, r3, [sp]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff f827 	bl	800413e <_ntoa_long_long>
 80050f0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80050f2:	e0da      	b.n	80052aa <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80050f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d020      	beq.n	8005140 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80050fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	bfb8      	it	lt
 8005112:	425b      	neglt	r3, r3
 8005114:	4619      	mov	r1, r3
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	0fdb      	lsrs	r3, r3, #31
 800511a:	b2db      	uxtb	r3, r3
 800511c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800511e:	9205      	str	r2, [sp, #20]
 8005120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005122:	9204      	str	r2, [sp, #16]
 8005124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005126:	9203      	str	r2, [sp, #12]
 8005128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512a:	9202      	str	r2, [sp, #8]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	9100      	str	r1, [sp, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005134:	6939      	ldr	r1, [r7, #16]
 8005136:	6978      	ldr	r0, [r7, #20]
 8005138:	f7fe ff9b 	bl	8004072 <_ntoa_long>
 800513c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800513e:	e0b4      	b.n	80052aa <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <_vsnprintf+0x572>
 800514a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800514e:	1d1a      	adds	r2, r3, #4
 8005150:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	e012      	b.n	8005180 <_vsnprintf+0x598>
 800515a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <_vsnprintf+0x58c>
 8005164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005168:	1d1a      	adds	r2, r3, #4
 800516a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	b21b      	sxth	r3, r3
 8005172:	e005      	b.n	8005180 <_vsnprintf+0x598>
 8005174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	bfb8      	it	lt
 8005188:	425b      	neglt	r3, r3
 800518a:	4619      	mov	r1, r3
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	0fdb      	lsrs	r3, r3, #31
 8005190:	b2db      	uxtb	r3, r3
 8005192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005194:	9205      	str	r2, [sp, #20]
 8005196:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005198:	9204      	str	r2, [sp, #16]
 800519a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800519c:	9203      	str	r2, [sp, #12]
 800519e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a0:	9202      	str	r2, [sp, #8]
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	9100      	str	r1, [sp, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051aa:	6939      	ldr	r1, [r7, #16]
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f7fe ff60 	bl	8004072 <_ntoa_long>
 80051b2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80051b4:	e079      	b.n	80052aa <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80051b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d022      	beq.n	8005206 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80051c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051c4:	3307      	adds	r3, #7
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	f103 0208 	add.w	r2, r3, #8
 80051ce:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051d8:	2000      	movs	r0, #0
 80051da:	460d      	mov	r5, r1
 80051dc:	4606      	mov	r6, r0
 80051de:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80051e0:	9108      	str	r1, [sp, #32]
 80051e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051e4:	9107      	str	r1, [sp, #28]
 80051e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051e8:	9106      	str	r1, [sp, #24]
 80051ea:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80051ee:	2100      	movs	r1, #0
 80051f0:	9102      	str	r1, [sp, #8]
 80051f2:	e9cd 2300 	strd	r2, r3, [sp]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051fa:	6939      	ldr	r1, [r7, #16]
 80051fc:	6978      	ldr	r0, [r7, #20]
 80051fe:	f7fe ff9e 	bl	800413e <_ntoa_long_long>
 8005202:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005204:	e051      	b.n	80052aa <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d018      	beq.n	8005242 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800521e:	9205      	str	r2, [sp, #20]
 8005220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005222:	9204      	str	r2, [sp, #16]
 8005224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800522a:	9202      	str	r2, [sp, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	9201      	str	r2, [sp, #4]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005236:	6939      	ldr	r1, [r7, #16]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7fe ff1a 	bl	8004072 <_ntoa_long>
 800523e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005240:	e033      	b.n	80052aa <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <_vsnprintf+0x674>
 800524c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e012      	b.n	8005282 <_vsnprintf+0x69a>
 800525c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <_vsnprintf+0x68e>
 8005266:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	e005      	b.n	8005282 <_vsnprintf+0x69a>
 8005276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005286:	9305      	str	r3, [sp, #20]
 8005288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528e:	9303      	str	r3, [sp, #12]
 8005290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005292:	9302      	str	r3, [sp, #8]
 8005294:	2300      	movs	r3, #0
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a0:	6939      	ldr	r1, [r7, #16]
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f7fe fee5 	bl	8004072 <_ntoa_long>
 80052a8:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60bb      	str	r3, [r7, #8]
        break;
 80052b0:	e162      	b.n	8005578 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b46      	cmp	r3, #70	; 0x46
 80052b8:	d103      	bne.n	80052c2 <_vsnprintf+0x6da>
 80052ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052bc:	f043 0320 	orr.w	r3, r3, #32
 80052c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80052c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052c6:	3307      	adds	r3, #7
 80052c8:	f023 0307 	bic.w	r3, r3, #7
 80052cc:	f103 0208 	add.w	r2, r3, #8
 80052d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052da:	9104      	str	r1, [sp, #16]
 80052dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052de:	9103      	str	r1, [sp, #12]
 80052e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052e2:	9102      	str	r1, [sp, #8]
 80052e4:	e9cd 2300 	strd	r2, r3, [sp]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ec:	6939      	ldr	r1, [r7, #16]
 80052ee:	6978      	ldr	r0, [r7, #20]
 80052f0:	f7fe ff92 	bl	8004218 <_ftoa>
 80052f4:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	3301      	adds	r3, #1
 80052fa:	60bb      	str	r3, [r7, #8]
        break;
 80052fc:	e13c      	b.n	8005578 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b67      	cmp	r3, #103	; 0x67
 8005304:	d003      	beq.n	800530e <_vsnprintf+0x726>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b47      	cmp	r3, #71	; 0x47
 800530c:	d103      	bne.n	8005316 <_vsnprintf+0x72e>
 800530e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005314:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b45      	cmp	r3, #69	; 0x45
 800531c:	d003      	beq.n	8005326 <_vsnprintf+0x73e>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b47      	cmp	r3, #71	; 0x47
 8005324:	d103      	bne.n	800532e <_vsnprintf+0x746>
 8005326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005328:	f043 0320 	orr.w	r3, r3, #32
 800532c:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800532e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005332:	3307      	adds	r3, #7
 8005334:	f023 0307 	bic.w	r3, r3, #7
 8005338:	f103 0208 	add.w	r2, r3, #8
 800533c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005346:	9104      	str	r1, [sp, #16]
 8005348:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800534a:	9103      	str	r1, [sp, #12]
 800534c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800534e:	9102      	str	r1, [sp, #8]
 8005350:	e9cd 2300 	strd	r2, r3, [sp]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005358:	6939      	ldr	r1, [r7, #16]
 800535a:	6978      	ldr	r0, [r7, #20]
 800535c:	f7ff f9b4 	bl	80046c8 <_etoa>
 8005360:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3301      	adds	r3, #1
 8005366:	60bb      	str	r3, [r7, #8]
        break;
 8005368:	e106      	b.n	8005578 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800536a:	2301      	movs	r3, #1
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800536e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10e      	bne.n	8005396 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8005378:	e007      	b.n	800538a <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800537a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800537c:	1c53      	adds	r3, r2, #1
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005380:	697c      	ldr	r4, [r7, #20]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6939      	ldr	r1, [r7, #16]
 8005386:	2020      	movs	r0, #32
 8005388:	47a0      	blx	r4
          while (l++ < width) {
 800538a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	647a      	str	r2, [r7, #68]	; 0x44
 8005390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005392:	429a      	cmp	r2, r3
 8005394:	d8f1      	bhi.n	800537a <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	b2d8      	uxtb	r0, r3
 80053a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a6:	1c53      	adds	r3, r2, #1
 80053a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053aa:	697c      	ldr	r4, [r7, #20]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6939      	ldr	r1, [r7, #16]
 80053b0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80053b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <_vsnprintf+0x7f2>
          while (l++ < width) {
 80053bc:	e007      	b.n	80053ce <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 80053be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c0:	1c53      	adds	r3, r2, #1
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c4:	697c      	ldr	r4, [r7, #20]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6939      	ldr	r1, [r7, #16]
 80053ca:	2020      	movs	r0, #32
 80053cc:	47a0      	blx	r4
          while (l++ < width) {
 80053ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	647a      	str	r2, [r7, #68]	; 0x44
 80053d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d8f1      	bhi.n	80053be <_vsnprintf+0x7d6>
          }
        }
        format++;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3301      	adds	r3, #1
 80053de:	60bb      	str	r3, [r7, #8]
        break;
 80053e0:	e0ca      	b.n	8005578 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80053e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80053f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <_vsnprintf+0x812>
 80053f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f8:	e001      	b.n	80053fe <_vsnprintf+0x816>
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053fe:	4619      	mov	r1, r3
 8005400:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005402:	f7fe fcb4 	bl	8003d6e <_strnlen_s>
 8005406:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800540a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 8005412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005416:	4293      	cmp	r3, r2
 8005418:	bf28      	it	cs
 800541a:	4613      	movcs	r3, r2
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800541e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d11a      	bne.n	800545e <_vsnprintf+0x876>
          while (l++ < width) {
 8005428:	e007      	b.n	800543a <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 800542a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800542c:	1c53      	adds	r3, r2, #1
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	697c      	ldr	r4, [r7, #20]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6939      	ldr	r1, [r7, #16]
 8005436:	2020      	movs	r0, #32
 8005438:	47a0      	blx	r4
          while (l++ < width) {
 800543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005442:	429a      	cmp	r2, r3
 8005444:	d8f1      	bhi.n	800542a <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005446:	e00a      	b.n	800545e <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8005448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	643a      	str	r2, [r7, #64]	; 0x40
 800544e:	7818      	ldrb	r0, [r3, #0]
 8005450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005452:	1c53      	adds	r3, r2, #1
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005456:	697c      	ldr	r4, [r7, #20]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6939      	ldr	r1, [r7, #16]
 800545c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800545e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <_vsnprintf+0x892>
 8005466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0eb      	beq.n	8005448 <_vsnprintf+0x860>
 8005470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005472:	1e5a      	subs	r2, r3, #1
 8005474:	657a      	str	r2, [r7, #84]	; 0x54
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e6      	bne.n	8005448 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800547a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00e      	beq.n	80054a2 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8005484:	e007      	b.n	8005496 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8005486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005488:	1c53      	adds	r3, r2, #1
 800548a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548c:	697c      	ldr	r4, [r7, #20]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6939      	ldr	r1, [r7, #16]
 8005492:	2020      	movs	r0, #32
 8005494:	47a0      	blx	r4
          while (l++ < width) {
 8005496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800549c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800549e:	429a      	cmp	r2, r3
 80054a0:	d8f1      	bhi.n	8005486 <_vsnprintf+0x89e>
          }
        }
        format++;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60bb      	str	r3, [r7, #8]
        break;
 80054a8:	e066      	b.n	8005578 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80054aa:	2308      	movs	r3, #8
 80054ac:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80054ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80054b4:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80054bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d023      	beq.n	800550c <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80054c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	2300      	movs	r3, #0
 80054d4:	603a      	str	r2, [r7, #0]
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054da:	9308      	str	r3, [sp, #32]
 80054dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054de:	9307      	str	r3, [sp, #28]
 80054e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e2:	9306      	str	r3, [sp, #24]
 80054e4:	f04f 0210 	mov.w	r2, #16
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9302      	str	r3, [sp, #8]
 80054f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80054f8:	e9cd 3400 	strd	r3, r4, [sp]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005500:	6939      	ldr	r1, [r7, #16]
 8005502:	6978      	ldr	r0, [r7, #20]
 8005504:	f7fe fe1b 	bl	800413e <_ntoa_long_long>
 8005508:	64f8      	str	r0, [r7, #76]	; 0x4c
 800550a:	e018      	b.n	800553e <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800550c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005520:	9304      	str	r3, [sp, #16]
 8005522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005524:	9303      	str	r3, [sp, #12]
 8005526:	2310      	movs	r3, #16
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	2300      	movs	r3, #0
 800552c:	9301      	str	r3, [sp, #4]
 800552e:	9200      	str	r2, [sp, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005534:	6939      	ldr	r1, [r7, #16]
 8005536:	6978      	ldr	r0, [r7, #20]
 8005538:	f7fe fd9b 	bl	8004072 <_ntoa_long>
 800553c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	3301      	adds	r3, #1
 8005542:	60bb      	str	r3, [r7, #8]
        break;
 8005544:	e018      	b.n	8005578 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005548:	1c53      	adds	r3, r2, #1
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554c:	697c      	ldr	r4, [r7, #20]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6939      	ldr	r1, [r7, #16]
 8005552:	2025      	movs	r0, #37	; 0x25
 8005554:	47a0      	blx	r4
        format++;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	3301      	adds	r3, #1
 800555a:	60bb      	str	r3, [r7, #8]
        break;
 800555c:	e00c      	b.n	8005578 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	7818      	ldrb	r0, [r3, #0]
 8005562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005564:	1c53      	adds	r3, r2, #1
 8005566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005568:	697c      	ldr	r4, [r7, #20]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6939      	ldr	r1, [r7, #16]
 800556e:	47a0      	blx	r4
        format++;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	3301      	adds	r3, #1
 8005574:	60bb      	str	r3, [r7, #8]
        break;
 8005576:	bf00      	nop
  while (*format)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f47f ab45 	bne.w	8004c0c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <_vsnprintf+0x9a8>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	e000      	b.n	8005592 <_vsnprintf+0x9aa>
 8005590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005592:	697c      	ldr	r4, [r7, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6939      	ldr	r1, [r7, #16]
 8005598:	2000      	movs	r0, #0
 800559a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800559c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3764      	adds	r7, #100	; 0x64
 80055a2:	46bd      	mov	sp, r7
 80055a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055a8 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80055a8:	b40e      	push	{r1, r2, r3}
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af02      	add	r7, sp, #8
 80055b0:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80055b2:	f107 0320 	add.w	r3, r7, #32
 80055b6:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4805      	ldr	r0, [pc, #20]	; (80055dc <sprintf_+0x34>)
 80055c6:	f7ff fb0f 	bl	8004be8 <_vsnprintf>
 80055ca:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80055cc:	68fb      	ldr	r3, [r7, #12]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d8:	b003      	add	sp, #12
 80055da:	4770      	bx	lr
 80055dc:	08003d29 	.word	0x08003d29

080055e0 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	6039      	str	r1, [r7, #0]
 80055ea:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80055f2:	3301      	adds	r3, #1
 80055f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f8:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	429a      	cmp	r2, r3
 8005604:	d009      	beq.n	800561a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	79f9      	ldrb	r1, [r7, #7]
 8005610:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr

08005624 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d017      	beq.n	8005676 <Uart_isr+0x52>
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d012      	beq.n	8005676 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <Uart_isr+0xbc>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ffba 	bl	80055e0 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 800566c:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <Uart_isr+0xc0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	605a      	str	r2, [r3, #4]
        return;
 8005674:	e031      	b.n	80056da <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02c      	beq.n	80056da <Uart_isr+0xb6>
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b00      	cmp	r3, #0
 8005688:	d027      	beq.n	80056da <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <Uart_isr+0xc4>)
 800568c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <Uart_isr+0xc4>)
 8005692:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005696:	429a      	cmp	r2, r3
 8005698:	d108      	bne.n	80056ac <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80056aa:	e015      	b.n	80056d8 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <Uart_isr+0xc4>)
 80056ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056b2:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <Uart_isr+0xc4>)
 80056b4:	5cd3      	ldrb	r3, [r2, r3]
 80056b6:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <Uart_isr+0xc4>)
 80056ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056be:	3301      	adds	r3, #1
 80056c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c4:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <Uart_isr+0xc4>)
 80056c6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	7bba      	ldrb	r2, [r7, #14]
 80056d6:	605a      	str	r2, [r3, #4]
    	return;
 80056d8:	bf00      	nop
    }
}
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000828 	.word	0x20000828
 80056e4:	200001fc 	.word	0x200001fc
 80056e8:	20000420 	.word	0x20000420

080056ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <HAL_MspInit+0x5c>)
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_MspInit+0x5c>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6193      	str	r3, [r2, #24]
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <HAL_MspInit+0x5c>)
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800570a:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <HAL_MspInit+0x5c>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <HAL_MspInit+0x5c>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	61d3      	str	r3, [r2, #28]
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <HAL_MspInit+0x5c>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_MspInit+0x60>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	4a04      	ldr	r2, [pc, #16]	; (800574c <HAL_MspInit+0x60>)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr
 8005748:	40021000 	.word	0x40021000
 800574c:	40010000 	.word	0x40010000

08005750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005760:	e7fe      	b.n	8005760 <HardFault_Handler+0x4>

08005762 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005766:	e7fe      	b.n	8005766 <MemManage_Handler+0x4>

08005768 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800576c:	e7fe      	b.n	800576c <BusFault_Handler+0x4>

0800576e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005772:	e7fe      	b.n	8005772 <UsageFault_Handler+0x4>

08005774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <SysTick_Handler+0x20>)
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <SysTick_Handler+0x18>
 80057a4:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <SysTick_Handler+0x20>)
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	4b02      	ldr	r3, [pc, #8]	; (80057b8 <SysTick_Handler+0x20>)
 80057ae:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057b0:	f001 f880 	bl	80068b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057b4:	bf00      	nop
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	2000041c 	.word	0x2000041c

080057bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80057c0:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <EXTI0_IRQHandler+0x28>)
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <EXTI0_IRQHandler+0x28>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 80057d2:	2001      	movs	r0, #1
 80057d4:	f001 febc 	bl	8007550 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80057d8:	2001      	movs	r0, #1
 80057da:	f001 fea1 	bl	8007520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40010400 	.word	0x40010400

080057e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <EXTI4_IRQHandler+0x2c>)
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <EXTI4_IRQHandler+0x30>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <EXTI4_IRQHandler+0x2c>)
 8005800:	2210      	movs	r2, #16
 8005802:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8005804:	2010      	movs	r0, #16
 8005806:	f001 fea3 	bl	8007550 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800580a:	2010      	movs	r0, #16
 800580c:	f001 fe88 	bl	8007520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40010400 	.word	0x40010400
 8005818:	200009f4 	.word	0x200009f4

0800581c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 8005820:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <TIM3_IRQHandler+0x3c>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	3b01      	subs	r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <TIM3_IRQHandler+0x3c>)
 800582a:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 800582c:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <TIM3_IRQHandler+0x3c>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10c      	bne.n	800584e <TIM3_IRQHandler+0x32>
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <TIM3_IRQHandler+0x40>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d108      	bne.n	800584e <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 800583c:	4808      	ldr	r0, [pc, #32]	; (8005860 <TIM3_IRQHandler+0x44>)
 800583e:	f002 fbf0 	bl	8008022 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8005842:	4807      	ldr	r0, [pc, #28]	; (8005860 <TIM3_IRQHandler+0x44>)
 8005844:	f002 fc31 	bl	80080aa <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <TIM3_IRQHandler+0x40>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800584e:	4804      	ldr	r0, [pc, #16]	; (8005860 <TIM3_IRQHandler+0x44>)
 8005850:	f002 fcbe 	bl	80081d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005854:	bf00      	nop
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000930 	.word	0x20000930
 800585c:	20000931 	.word	0x20000931
 8005860:	200008b0 	.word	0x200008b0

08005864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 800586a:	2301      	movs	r3, #1
 800586c:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <USART1_IRQHandler+0x38>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b20      	cmp	r3, #32
 800587a:	d107      	bne.n	800588c <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 800587c:	4b07      	ldr	r3, [pc, #28]	; (800589c <USART1_IRQHandler+0x38>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <USART1_IRQHandler+0x3c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	79fa      	ldrb	r2, [r7, #7]
 800588a:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800588c:	4805      	ldr	r0, [pc, #20]	; (80058a4 <USART1_IRQHandler+0x40>)
 800588e:	f003 fcc9 	bl	8009224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200001fc 	.word	0x200001fc
 80058a0:	2000023c 	.word	0x2000023c
 80058a4:	20000934 	.word	0x20000934

080058a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 80058ac:	4802      	ldr	r0, [pc, #8]	; (80058b8 <USART3_IRQHandler+0x10>)
 80058ae:	f7ff feb9 	bl	8005624 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	200009b4 	.word	0x200009b4

080058bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <EXTI15_10_IRQHandler+0x2c>)
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <EXTI15_10_IRQHandler+0x20>
	{
		// extern void debug_alarm_set();
		// debug_alarm_set();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <EXTI15_10_IRQHandler+0x2c>)
 80058ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058d2:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 80058d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80058d8:	f001 fe3a 	bl	8007550 <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80058dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80058e0:	f001 fe1e 	bl	8007520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80058e4:	bf00      	nop
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40010400 	.word	0x40010400

080058ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <TIM5_IRQHandler+0x14>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80058f6:	4803      	ldr	r0, [pc, #12]	; (8005904 <TIM5_IRQHandler+0x18>)
 80058f8:	f002 fc6a 	bl	80081d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80058fc:	bf00      	nop
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000000 	.word	0x20000000
 8005904:	200008f0 	.word	0x200008f0

08005908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
	return 1;
 800590c:	2301      	movs	r3, #1
}
 800590e:	4618      	mov	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <_kill>:

int _kill(int pid, int sig)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005920:	f004 f91e 	bl	8009b60 <__errno>
 8005924:	4603      	mov	r3, r0
 8005926:	2216      	movs	r2, #22
 8005928:	601a      	str	r2, [r3, #0]
	return -1;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <_exit>:

void _exit (int status)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800593e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ffe7 	bl	8005916 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005948:	e7fe      	b.n	8005948 <_exit+0x12>
	...

0800594c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005954:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <_sbrk+0x5c>)
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <_sbrk+0x60>)
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <_sbrk+0x64>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005968:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <_sbrk+0x64>)
 800596a:	4a12      	ldr	r2, [pc, #72]	; (80059b4 <_sbrk+0x68>)
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800596e:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <_sbrk+0x64>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d207      	bcs.n	800598c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800597c:	f004 f8f0 	bl	8009b60 <__errno>
 8005980:	4603      	mov	r3, r0
 8005982:	220c      	movs	r2, #12
 8005984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800598a:	e009      	b.n	80059a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800598c:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <_sbrk+0x64>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005992:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <_sbrk+0x64>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	4a05      	ldr	r2, [pc, #20]	; (80059b0 <_sbrk+0x64>)
 800599c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20010000 	.word	0x20010000
 80059ac:	00000400 	.word	0x00000400
 80059b0:	2000082c 	.word	0x2000082c
 80059b4:	20000a10 	.word	0x20000a10

080059b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80059bc:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <SystemInit+0x5c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a14      	ldr	r2, [pc, #80]	; (8005a14 <SystemInit+0x5c>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80059c8:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <SystemInit+0x5c>)
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4911      	ldr	r1, [pc, #68]	; (8005a14 <SystemInit+0x5c>)
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <SystemInit+0x60>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80059d4:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <SystemInit+0x5c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a0e      	ldr	r2, [pc, #56]	; (8005a14 <SystemInit+0x5c>)
 80059da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80059de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <SystemInit+0x5c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <SystemInit+0x5c>)
 80059ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80059f0:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <SystemInit+0x5c>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <SystemInit+0x5c>)
 80059f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80059fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <SystemInit+0x5c>)
 80059fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005a02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <SystemInit+0x64>)
 8005a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr
 8005a14:	40021000 	.word	0x40021000
 8005a18:	f8ff0000 	.word	0xf8ff0000
 8005a1c:	e000ed00 	.word	0xe000ed00

08005a20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b094      	sub	sp, #80	; 0x50
 8005a24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	609a      	str	r2, [r3, #8]
 8005a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a3e:	f107 031c 	add.w	r3, r7, #28
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	615a      	str	r2, [r3, #20]
 8005a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a52:	463b      	mov	r3, r7
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	611a      	str	r2, [r3, #16]
 8005a60:	615a      	str	r2, [r3, #20]
 8005a62:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8005a64:	4b3f      	ldr	r3, [pc, #252]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a66:	4a40      	ldr	r2, [pc, #256]	; (8005b68 <MX_TIM1_Init+0x148>)
 8005a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8005a6a:	4b3e      	ldr	r3, [pc, #248]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a6c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a72:	4b3c      	ldr	r3, [pc, #240]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8005a78:	4b3a      	ldr	r3, [pc, #232]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a7a:	f240 4265 	movw	r2, #1125	; 0x465
 8005a7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a80:	4b38      	ldr	r3, [pc, #224]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a86:	4b37      	ldr	r3, [pc, #220]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a8c:	4b35      	ldr	r3, [pc, #212]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005a92:	4834      	ldr	r0, [pc, #208]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005a94:	f002 fa80 	bl	8007f98 <HAL_TIM_Base_Init>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8005a9e:	f7fe f93d 	bl	8003d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005aac:	4619      	mov	r1, r3
 8005aae:	482d      	ldr	r0, [pc, #180]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005ab0:	f002 fd5c 	bl	800856c <HAL_TIM_ConfigClockSource>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8005aba:	f7fe f92f 	bl	8003d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005abe:	4829      	ldr	r0, [pc, #164]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005ac0:	f002 fb1d 	bl	80080fe <HAL_TIM_PWM_Init>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8005aca:	f7fe f927 	bl	8003d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ada:	4619      	mov	r1, r3
 8005adc:	4821      	ldr	r0, [pc, #132]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005ade:	f003 f9be 	bl	8008e5e <HAL_TIMEx_MasterConfigSynchronization>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8005ae8:	f7fe f918 	bl	8003d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005aec:	2360      	movs	r3, #96	; 0x60
 8005aee:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 8005af0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005af4:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b02:	2300      	movs	r3, #0
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b06:	2300      	movs	r3, #0
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b0a:	f107 031c 	add.w	r3, r7, #28
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4619      	mov	r1, r3
 8005b12:	4814      	ldr	r0, [pc, #80]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005b14:	f002 fc64 	bl	80083e0 <HAL_TIM_PWM_ConfigChannel>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8005b1e:	f7fe f8fd 	bl	8003d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b40:	463b      	mov	r3, r7
 8005b42:	4619      	mov	r1, r3
 8005b44:	4807      	ldr	r0, [pc, #28]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005b46:	f003 f932 	bl	8008dae <HAL_TIMEx_ConfigBreakDeadTime>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8005b50:	f7fe f8e4 	bl	8003d1c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005b54:	4803      	ldr	r0, [pc, #12]	; (8005b64 <MX_TIM1_Init+0x144>)
 8005b56:	f000 f981 	bl	8005e5c <HAL_TIM_MspPostInit>

}
 8005b5a:	bf00      	nop
 8005b5c:	3750      	adds	r7, #80	; 0x50
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000830 	.word	0x20000830
 8005b68:	40012c00 	.word	0x40012c00

08005b6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	; 0x38
 8005b70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
 8005b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b80:	f107 0320 	add.w	r3, r7, #32
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	609a      	str	r2, [r3, #8]
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	611a      	str	r2, [r3, #16]
 8005b98:	615a      	str	r2, [r3, #20]
 8005b9a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005b9c:	4b2c      	ldr	r3, [pc, #176]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8005ba4:	4b2a      	ldr	r3, [pc, #168]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005ba6:	2247      	movs	r2, #71	; 0x47
 8005ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005baa:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005bb2:	2264      	movs	r2, #100	; 0x64
 8005bb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bb6:	4b26      	ldr	r3, [pc, #152]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bbc:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005bbe:	2280      	movs	r2, #128	; 0x80
 8005bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005bc2:	4823      	ldr	r0, [pc, #140]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005bc4:	f002 f9e8 	bl	8007f98 <HAL_TIM_Base_Init>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8005bce:	f7fe f8a5 	bl	8003d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bdc:	4619      	mov	r1, r3
 8005bde:	481c      	ldr	r0, [pc, #112]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005be0:	f002 fcc4 	bl	800856c <HAL_TIM_ConfigClockSource>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8005bea:	f7fe f897 	bl	8003d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005bee:	4818      	ldr	r0, [pc, #96]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005bf0:	f002 fa85 	bl	80080fe <HAL_TIM_PWM_Init>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8005bfa:	f7fe f88f 	bl	8003d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c06:	f107 0320 	add.w	r3, r7, #32
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4810      	ldr	r0, [pc, #64]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005c0e:	f003 f926 	bl	8008e5e <HAL_TIMEx_MasterConfigSynchronization>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8005c18:	f7fe f880 	bl	8003d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c1c:	2360      	movs	r3, #96	; 0x60
 8005c1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8005c20:	2332      	movs	r3, #50	; 0x32
 8005c22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c2c:	1d3b      	adds	r3, r7, #4
 8005c2e:	2208      	movs	r2, #8
 8005c30:	4619      	mov	r1, r3
 8005c32:	4807      	ldr	r0, [pc, #28]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005c34:	f002 fbd4 	bl	80083e0 <HAL_TIM_PWM_ConfigChannel>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8005c3e:	f7fe f86d 	bl	8003d1c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005c42:	4803      	ldr	r0, [pc, #12]	; (8005c50 <MX_TIM2_Init+0xe4>)
 8005c44:	f000 f90a 	bl	8005e5c <HAL_TIM_MspPostInit>

}
 8005c48:	bf00      	nop
 8005c4a:	3738      	adds	r7, #56	; 0x38
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20000870 	.word	0x20000870

08005c54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c5a:	f107 0308 	add.w	r3, r7, #8
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c68:	463b      	mov	r3, r7
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8005c70:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005c72:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <MX_TIM3_Init+0x98>)
 8005c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8005c76:	4b1c      	ldr	r3, [pc, #112]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005c78:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005c7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8005c84:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005c86:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8005c8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c8c:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005c94:	2280      	movs	r2, #128	; 0x80
 8005c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c98:	4813      	ldr	r0, [pc, #76]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005c9a:	f002 f97d 	bl	8007f98 <HAL_TIM_Base_Init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005ca4:	f7fe f83a 	bl	8003d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005cb6:	f002 fc59 	bl	800856c <HAL_TIM_ConfigClockSource>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005cc0:	f7fe f82c 	bl	8003d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ccc:	463b      	mov	r3, r7
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <MX_TIM3_Init+0x94>)
 8005cd2:	f003 f8c4 	bl	8008e5e <HAL_TIMEx_MasterConfigSynchronization>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005cdc:	f7fe f81e 	bl	8003d1c <Error_Handler>
  }

}
 8005ce0:	bf00      	nop
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	200008b0 	.word	0x200008b0
 8005cec:	40000400 	.word	0x40000400

08005cf0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	605a      	str	r2, [r3, #4]
 8005d00:	609a      	str	r2, [r3, #8]
 8005d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d04:	463b      	mov	r3, r7
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8005d0c:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d0e:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <MX_TIM5_Init+0x98>)
 8005d10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8005d12:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d14:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005d18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8005d20:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d22:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8005d26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d28:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005d34:	4813      	ldr	r0, [pc, #76]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d36:	f002 f92f 	bl	8007f98 <HAL_TIM_Base_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005d40:	f7fd ffec 	bl	8003d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	4619      	mov	r1, r3
 8005d50:	480c      	ldr	r0, [pc, #48]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d52:	f002 fc0b 	bl	800856c <HAL_TIM_ConfigClockSource>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005d5c:	f7fd ffde 	bl	8003d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d60:	2300      	movs	r3, #0
 8005d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005d68:	463b      	mov	r3, r7
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4805      	ldr	r0, [pc, #20]	; (8005d84 <MX_TIM5_Init+0x94>)
 8005d6e:	f003 f876 	bl	8008e5e <HAL_TIMEx_MasterConfigSynchronization>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005d78:	f7fd ffd0 	bl	8003d1c <Error_Handler>
  }

}
 8005d7c:	bf00      	nop
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	200008f0 	.word	0x200008f0
 8005d88:	40000c00 	.word	0x40000c00

08005d8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2c      	ldr	r2, [pc, #176]	; (8005e4c <HAL_TIM_Base_MspInit+0xc0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10c      	bne.n	8005db8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d9e:	4b2c      	ldr	r3, [pc, #176]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4a2b      	ldr	r2, [pc, #172]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005da8:	6193      	str	r3, [r2, #24]
 8005daa:	4b29      	ldr	r3, [pc, #164]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005db6:	e044      	b.n	8005e42 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc0:	d10c      	bne.n	8005ddc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005dc2:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4a22      	ldr	r2, [pc, #136]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	61d3      	str	r3, [r2, #28]
 8005dce:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	693b      	ldr	r3, [r7, #16]
}
 8005dda:	e032      	b.n	8005e42 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_TIM_Base_MspInit+0xc8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d114      	bne.n	8005e10 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005dec:	f043 0302 	orr.w	r3, r3, #2
 8005df0:	61d3      	str	r3, [r2, #28]
 8005df2:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2100      	movs	r1, #0
 8005e02:	201d      	movs	r0, #29
 8005e04:	f001 f885 	bl	8006f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005e08:	201d      	movs	r0, #29
 8005e0a:	f001 f89e 	bl	8006f4a <HAL_NVIC_EnableIRQ>
}
 8005e0e:	e018      	b.n	8005e42 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <HAL_TIM_Base_MspInit+0xcc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d113      	bne.n	8005e42 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005e20:	f043 0308 	orr.w	r3, r3, #8
 8005e24:	61d3      	str	r3, [r2, #28]
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <HAL_TIM_Base_MspInit+0xc4>)
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	2032      	movs	r0, #50	; 0x32
 8005e38:	f001 f86b 	bl	8006f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005e3c:	2032      	movs	r0, #50	; 0x32
 8005e3e:	f001 f884 	bl	8006f4a <HAL_NVIC_EnableIRQ>
}
 8005e42:	bf00      	nop
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40012c00 	.word	0x40012c00
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000c00 	.word	0x40000c00

08005e5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e64:	f107 0314 	add.w	r3, r7, #20
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a28      	ldr	r2, [pc, #160]	; (8005f18 <HAL_TIM_MspPostInit+0xbc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d119      	bne.n	8005eb0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e7c:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <HAL_TIM_MspPostInit+0xc0>)
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <HAL_TIM_MspPostInit+0xc0>)
 8005e82:	f043 0304 	orr.w	r3, r3, #4
 8005e86:	6193      	str	r3, [r2, #24]
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <HAL_TIM_MspPostInit+0xc0>)
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea2:	f107 0314 	add.w	r3, r7, #20
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	481d      	ldr	r0, [pc, #116]	; (8005f20 <HAL_TIM_MspPostInit+0xc4>)
 8005eaa:	f001 f971 	bl	8007190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005eae:	e02f      	b.n	8005f10 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM2)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d12a      	bne.n	8005f10 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <HAL_TIM_MspPostInit+0xc0>)
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <HAL_TIM_MspPostInit+0xc0>)
 8005ec0:	f043 0308 	orr.w	r3, r3, #8
 8005ec4:	6193      	str	r3, [r2, #24]
 8005ec6:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <HAL_TIM_MspPostInit+0xc0>)
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005edc:	2302      	movs	r3, #2
 8005ede:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ee0:	f107 0314 	add.w	r3, r7, #20
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	480f      	ldr	r0, [pc, #60]	; (8005f24 <HAL_TIM_MspPostInit+0xc8>)
 8005ee8:	f001 f952 	bl	8007190 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8005eec:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <HAL_TIM_MspPostInit+0xcc>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0a:	4a07      	ldr	r2, [pc, #28]	; (8005f28 <HAL_TIM_MspPostInit+0xcc>)
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	6053      	str	r3, [r2, #4]
}
 8005f10:	bf00      	nop
 8005f12:	3728      	adds	r7, #40	; 0x28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40010800 	.word	0x40010800
 8005f24:	40010c00 	.word	0x40010c00
 8005f28:	40010000 	.word	0x40010000

08005f2c <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <TIMER_INIT+0x20>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0201 	mvn.w	r2, #1
 8005f38:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8005f3a:	4804      	ldr	r0, [pc, #16]	; (8005f4c <TIMER_INIT+0x20>)
 8005f3c:	f002 f857 	bl	8007fee <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8005f40:	4802      	ldr	r0, [pc, #8]	; (8005f4c <TIMER_INIT+0x20>)
 8005f42:	f002 f898 	bl	8008076 <HAL_TIM_Base_Start_IT>
}
 8005f46:	bf00      	nop
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200008f0 	.word	0x200008f0

08005f50 <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <timer_min+0x38>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f06f 0201 	mvn.w	r2, #1
 8005f62:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <timer_min+0x3c>)
 8005f6c:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8005f6e:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <timer_min+0x40>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8005f74:	4804      	ldr	r0, [pc, #16]	; (8005f88 <timer_min+0x38>)
 8005f76:	f002 f83a 	bl	8007fee <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8005f7a:	4803      	ldr	r0, [pc, #12]	; (8005f88 <timer_min+0x38>)
 8005f7c:	f002 f87b 	bl	8008076 <HAL_TIM_Base_Start_IT>
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	200008b0 	.word	0x200008b0
 8005f8c:	20000930 	.word	0x20000930
 8005f90:	20000931 	.word	0x20000931

08005f94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <MX_USART1_UART_Init+0x50>)
 8005f9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fba:	220c      	movs	r2, #12
 8005fbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005fca:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <MX_USART1_UART_Init+0x4c>)
 8005fcc:	f002 ff9d 	bl	8008f0a <HAL_UART_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005fd6:	f7fd fea1 	bl	8003d1c <Error_Handler>
  }

}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000934 	.word	0x20000934
 8005fe4:	40013800 	.word	0x40013800

08005fe8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005fec:	4b11      	ldr	r3, [pc, #68]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 8005fee:	4a12      	ldr	r2, [pc, #72]	; (8006038 <MX_USART2_UART_Init+0x50>)
 8005ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 8005ff4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8005ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 8006002:	2200      	movs	r2, #0
 8006004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 8006008:	2200      	movs	r2, #0
 800600a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 800600e:	220c      	movs	r2, #12
 8006010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 8006014:	2200      	movs	r2, #0
 8006016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 800601a:	2200      	movs	r2, #0
 800601c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800601e:	4805      	ldr	r0, [pc, #20]	; (8006034 <MX_USART2_UART_Init+0x4c>)
 8006020:	f002 ff73 	bl	8008f0a <HAL_UART_Init>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800602a:	f7fd fe77 	bl	8003d1c <Error_Handler>
  }

}
 800602e:	bf00      	nop
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000974 	.word	0x20000974
 8006038:	40004400 	.word	0x40004400

0800603c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 8006042:	4a12      	ldr	r2, [pc, #72]	; (800608c <MX_USART3_UART_Init+0x50>)
 8006044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006046:	4b10      	ldr	r3, [pc, #64]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 8006048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800604c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 8006050:	2200      	movs	r2, #0
 8006052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 8006056:	2200      	movs	r2, #0
 8006058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 8006062:	220c      	movs	r2, #12
 8006064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006066:	4b08      	ldr	r3, [pc, #32]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 8006068:	2200      	movs	r2, #0
 800606a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 800606e:	2200      	movs	r2, #0
 8006070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006072:	4805      	ldr	r0, [pc, #20]	; (8006088 <MX_USART3_UART_Init+0x4c>)
 8006074:	f002 ff49 	bl	8008f0a <HAL_UART_Init>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800607e:	f7fd fe4d 	bl	8003d1c <Error_Handler>
  }

}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200009b4 	.word	0x200009b4
 800608c:	40004800 	.word	0x40004800

08006090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08e      	sub	sp, #56	; 0x38
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	609a      	str	r2, [r3, #8]
 80060a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a64      	ldr	r2, [pc, #400]	; (800623c <HAL_UART_MspInit+0x1ac>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d13a      	bne.n	8006126 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060b0:	4b63      	ldr	r3, [pc, #396]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	4a62      	ldr	r2, [pc, #392]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80060b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ba:	6193      	str	r3, [r2, #24]
 80060bc:	4b60      	ldr	r3, [pc, #384]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c8:	4b5d      	ldr	r3, [pc, #372]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4a5c      	ldr	r2, [pc, #368]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	6193      	str	r3, [r2, #24]
 80060d4:	4b5a      	ldr	r3, [pc, #360]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e6:	2302      	movs	r3, #2
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060ea:	2303      	movs	r3, #3
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060f2:	4619      	mov	r1, r3
 80060f4:	4853      	ldr	r0, [pc, #332]	; (8006244 <HAL_UART_MspInit+0x1b4>)
 80060f6:	f001 f84b 	bl	8007190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80060fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006100:	2300      	movs	r3, #0
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006104:	2300      	movs	r3, #0
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610c:	4619      	mov	r1, r3
 800610e:	484d      	ldr	r0, [pc, #308]	; (8006244 <HAL_UART_MspInit+0x1b4>)
 8006110:	f001 f83e 	bl	8007190 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006114:	2200      	movs	r2, #0
 8006116:	2100      	movs	r1, #0
 8006118:	2025      	movs	r0, #37	; 0x25
 800611a:	f000 fefa 	bl	8006f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800611e:	2025      	movs	r0, #37	; 0x25
 8006120:	f000 ff13 	bl	8006f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006124:	e086      	b.n	8006234 <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART2)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a47      	ldr	r2, [pc, #284]	; (8006248 <HAL_UART_MspInit+0x1b8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d130      	bne.n	8006192 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006130:	4b43      	ldr	r3, [pc, #268]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	4a42      	ldr	r2, [pc, #264]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 8006136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800613a:	61d3      	str	r3, [r2, #28]
 800613c:	4b40      	ldr	r3, [pc, #256]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006148:	4b3d      	ldr	r3, [pc, #244]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	4a3c      	ldr	r2, [pc, #240]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	6193      	str	r3, [r2, #24]
 8006154:	4b3a      	ldr	r3, [pc, #232]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006160:	2304      	movs	r3, #4
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006164:	2302      	movs	r3, #2
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006168:	2303      	movs	r3, #3
 800616a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800616c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006170:	4619      	mov	r1, r3
 8006172:	4834      	ldr	r0, [pc, #208]	; (8006244 <HAL_UART_MspInit+0x1b4>)
 8006174:	f001 f80c 	bl	8007190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006178:	2308      	movs	r3, #8
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800617c:	2300      	movs	r3, #0
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006180:	2300      	movs	r3, #0
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006188:	4619      	mov	r1, r3
 800618a:	482e      	ldr	r0, [pc, #184]	; (8006244 <HAL_UART_MspInit+0x1b4>)
 800618c:	f001 f800 	bl	8007190 <HAL_GPIO_Init>
}
 8006190:	e050      	b.n	8006234 <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART3)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2d      	ldr	r2, [pc, #180]	; (800624c <HAL_UART_MspInit+0x1bc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d14b      	bne.n	8006234 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800619c:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	4a27      	ldr	r2, [pc, #156]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80061a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a6:	61d3      	str	r3, [r2, #28]
 80061a8:	4b25      	ldr	r3, [pc, #148]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061b4:	4b22      	ldr	r3, [pc, #136]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4a21      	ldr	r2, [pc, #132]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80061ba:	f043 0310 	orr.w	r3, r3, #16
 80061be:	6193      	str	r3, [r2, #24]
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_UART_MspInit+0x1b0>)
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80061cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d2:	2302      	movs	r3, #2
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061d6:	2303      	movs	r3, #3
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061de:	4619      	mov	r1, r3
 80061e0:	481b      	ldr	r0, [pc, #108]	; (8006250 <HAL_UART_MspInit+0x1c0>)
 80061e2:	f000 ffd5 	bl	8007190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80061e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061ec:	2300      	movs	r3, #0
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061f8:	4619      	mov	r1, r3
 80061fa:	4815      	ldr	r0, [pc, #84]	; (8006250 <HAL_UART_MspInit+0x1c0>)
 80061fc:	f000 ffc8 	bl	8007190 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8006200:	4b14      	ldr	r3, [pc, #80]	; (8006254 <HAL_UART_MspInit+0x1c4>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	f043 0310 	orr.w	r3, r3, #16
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
 800621e:	4a0d      	ldr	r2, [pc, #52]	; (8006254 <HAL_UART_MspInit+0x1c4>)
 8006220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006222:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	2100      	movs	r1, #0
 8006228:	2027      	movs	r0, #39	; 0x27
 800622a:	f000 fe72 	bl	8006f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800622e:	2027      	movs	r0, #39	; 0x27
 8006230:	f000 fe8b 	bl	8006f4a <HAL_NVIC_EnableIRQ>
}
 8006234:	bf00      	nop
 8006236:	3738      	adds	r7, #56	; 0x38
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40013800 	.word	0x40013800
 8006240:	40021000 	.word	0x40021000
 8006244:	40010800 	.word	0x40010800
 8006248:	40004400 	.word	0x40004400
 800624c:	40004800 	.word	0x40004800
 8006250:	40011000 	.word	0x40011000
 8006254:	40010000 	.word	0x40010000

08006258 <_ZplPKcRK6String>:
#include "utils.hpp"
extern "C"{
#include "lcdtp.h"
}
String operator+(const char* s, const String& str){
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
    String newStr;
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7fb f99f 	bl	80015a8 <_ZN6StringC1Ev>
    newStr.len = strlen(s) + str.len;
 800626a:	68b8      	ldr	r0, [r7, #8]
 800626c:	f7f9 ffdc 	bl	8000228 <strlen>
 8006270:	4602      	mov	r2, r0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	4413      	add	r3, r2
 8006278:	461a      	mov	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	641a      	str	r2, [r3, #64]	; 0x40
    strcpy(newStr.str, s);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	4618      	mov	r0, r3
 8006284:	f003 fd11 	bl	8009caa <strcpy>
    strcat(newStr.str, str.str);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f003 fcfc 	bl	8009c8c <strcat>
    return newStr;
 8006294:	bf00      	nop
};
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <_Z10printToLCDRK6Stringt>:
void printToLCD(const String& string, uint16_t row){
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	807b      	strh	r3, [r7, #2]
  char str[20];
  sprintf(str, "                   ");
 80062ac:	f107 030c 	add.w	r3, r7, #12
 80062b0:	490e      	ldr	r1, [pc, #56]	; (80062ec <_Z10printToLCDRK6Stringt+0x4c>)
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff f978 	bl	80055a8 <sprintf_>
  LCD_DrawString(0, row*15, str);
 80062b8:	887b      	ldrh	r3, [r7, #2]
 80062ba:	461a      	mov	r2, r3
 80062bc:	0112      	lsls	r2, r2, #4
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f107 020c 	add.w	r2, r7, #12
 80062c6:	4619      	mov	r1, r3
 80062c8:	2000      	movs	r0, #0
 80062ca:	f7fd fbcf 	bl	8003a6c <LCD_DrawString>
  LCD_DrawString(0, row*15, string.str);
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	461a      	mov	r2, r3
 80062d2:	0112      	lsls	r2, r2, #4
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4619      	mov	r1, r3
 80062dc:	2000      	movs	r0, #0
 80062de:	f7fd fbc5 	bl	8003a6c <LCD_DrawString>
}
 80062e2:	bf00      	nop
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	0800a640 	.word	0x0800a640

080062f0 <_Z8debugLogRK6Stringt>:
        sprintf(str, "%02X", arr[i]);
        LCD_DrawString(i*15, row*15, str);
    }
}

void debugLog(const String& string, uint16_t row){
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
    printToLCD(string, row);
 80062fc:	887b      	ldrh	r3, [r7, #2]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ffcd 	bl	80062a0 <_Z10printToLCDRK6Stringt>
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e00a      	b.n	8006332 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 800631c:	230c      	movs	r3, #12
 800631e:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8006320:	bf00      	nop
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	72fa      	strb	r2, [r7, #11]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1fa      	bne.n	8006322 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	429a      	cmp	r2, r3
 8006338:	d3f0      	bcc.n	800631c <XPT2046_DelayUS+0xe>
			;

	}

}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
	...

08006348 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8006352:	2200      	movs	r2, #0
 8006354:	2104      	movs	r1, #4
 8006356:	481d      	ldr	r0, [pc, #116]	; (80063cc <XPT2046_WriteCMD+0x84>)
 8006358:	f001 f8c9 	bl	80074ee <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 800635c:	2200      	movs	r2, #0
 800635e:	2101      	movs	r1, #1
 8006360:	481a      	ldr	r0, [pc, #104]	; (80063cc <XPT2046_WriteCMD+0x84>)
 8006362:	f001 f8c4 	bl	80074ee <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
 800636a:	e027      	b.n	80063bc <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800636c:	79fa      	ldrb	r2, [r7, #7]
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	f1c3 0307 	rsb	r3, r3, #7
 8006374:	fa42 f303 	asr.w	r3, r2, r3
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <XPT2046_WriteCMD+0x44>
 8006380:	2201      	movs	r2, #1
 8006382:	2104      	movs	r1, #4
 8006384:	4811      	ldr	r0, [pc, #68]	; (80063cc <XPT2046_WriteCMD+0x84>)
 8006386:	f001 f8b2 	bl	80074ee <HAL_GPIO_WritePin>
 800638a:	e004      	b.n	8006396 <XPT2046_WriteCMD+0x4e>
 800638c:	2200      	movs	r2, #0
 800638e:	2104      	movs	r1, #4
 8006390:	480e      	ldr	r0, [pc, #56]	; (80063cc <XPT2046_WriteCMD+0x84>)
 8006392:	f001 f8ac 	bl	80074ee <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8006396:	2005      	movs	r0, #5
 8006398:	f7ff ffb9 	bl	800630e <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 800639c:	2201      	movs	r2, #1
 800639e:	2101      	movs	r1, #1
 80063a0:	480a      	ldr	r0, [pc, #40]	; (80063cc <XPT2046_WriteCMD+0x84>)
 80063a2:	f001 f8a4 	bl	80074ee <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80063a6:	2005      	movs	r0, #5
 80063a8:	f7ff ffb1 	bl	800630e <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80063ac:	2200      	movs	r2, #0
 80063ae:	2101      	movs	r1, #1
 80063b0:	4806      	ldr	r0, [pc, #24]	; (80063cc <XPT2046_WriteCMD+0x84>)
 80063b2:	f001 f89c 	bl	80074ee <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	3301      	adds	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b07      	cmp	r3, #7
 80063c0:	d9d4      	bls.n	800636c <XPT2046_WriteCMD+0x24>
	}

}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40011800 	.word	0x40011800

080063d0 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 80063d6:	2300      	movs	r3, #0
 80063d8:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 80063da:	2200      	movs	r2, #0
 80063dc:	2104      	movs	r1, #4
 80063de:	4819      	ldr	r0, [pc, #100]	; (8006444 <XPT2046_ReadCMD+0x74>)
 80063e0:	f001 f885 	bl	80074ee <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80063e4:	2201      	movs	r2, #1
 80063e6:	2101      	movs	r1, #1
 80063e8:	4816      	ldr	r0, [pc, #88]	; (8006444 <XPT2046_ReadCMD+0x74>)
 80063ea:	f001 f880 	bl	80074ee <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 80063ee:	2300      	movs	r3, #0
 80063f0:	71fb      	strb	r3, [r7, #7]
 80063f2:	e01e      	b.n	8006432 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 80063f4:	2200      	movs	r2, #0
 80063f6:	2101      	movs	r1, #1
 80063f8:	4812      	ldr	r0, [pc, #72]	; (8006444 <XPT2046_ReadCMD+0x74>)
 80063fa:	f001 f878 	bl	80074ee <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 80063fe:	2108      	movs	r1, #8
 8006400:	4810      	ldr	r0, [pc, #64]	; (8006444 <XPT2046_ReadCMD+0x74>)
 8006402:	f001 f85d 	bl	80074c0 <HAL_GPIO_ReadPin>
 8006406:	4603      	mov	r3, r0
 8006408:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 800640a:	887a      	ldrh	r2, [r7, #2]
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	f1c3 030b 	rsb	r3, r3, #11
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	b21a      	sxth	r2, r3
 8006418:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800641c:	4313      	orrs	r3, r2
 800641e:	b21b      	sxth	r3, r3
 8006420:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8006422:	2201      	movs	r2, #1
 8006424:	2101      	movs	r1, #1
 8006426:	4807      	ldr	r0, [pc, #28]	; (8006444 <XPT2046_ReadCMD+0x74>)
 8006428:	f001 f861 	bl	80074ee <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	3301      	adds	r3, #1
 8006430:	71fb      	strb	r3, [r7, #7]
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	2b0b      	cmp	r3, #11
 8006436:	d9dd      	bls.n	80063f4 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8006438:	88bb      	ldrh	r3, [r7, #4]

}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40011800 	.word	0x40011800

08006448 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff ff77 	bl	8006348 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 800645a:	f7ff ffb9 	bl	80063d0 <XPT2046_ReadCMD>
 800645e:	4603      	mov	r3, r0

}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 8006472:	2090      	movs	r0, #144	; 0x90
 8006474:	f7ff ffe8 	bl	8006448 <XPT2046_ReadAdc>
 8006478:	4603      	mov	r3, r0
 800647a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 800647c:	2001      	movs	r0, #1
 800647e:	f7ff ff46 	bl	800630e <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 8006482:	20d0      	movs	r0, #208	; 0xd0
 8006484:	f7ff ffe0 	bl	8006448 <XPT2046_ReadAdc>
 8006488:	4603      	mov	r3, r0
 800648a:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	89fa      	ldrh	r2, [r7, #14]
 8006490:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	89ba      	ldrh	r2, [r7, #12]
 8006496:	801a      	strh	r2, [r3, #0]

}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b092      	sub	sp, #72	; 0x48
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 80064ae:	f107 0308 	add.w	r3, r7, #8
 80064b2:	2228      	movs	r2, #40	; 0x28
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f003 fb7c 	bl	8009bb4 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 80064bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80064c0:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff ffce 	bl	8006468 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 80064cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064d0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	3348      	adds	r3, #72	; 0x48
 80064d8:	443b      	add	r3, r7
 80064da:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 80064de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064e2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80064e6:	330a      	adds	r3, #10
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	3348      	adds	r3, #72	; 0x48
 80064ec:	443b      	add	r3, r7
 80064ee:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 80064f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064f6:	3301      	adds	r3, #1
 80064f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 80064fc:	2110      	movs	r1, #16
 80064fe:	4871      	ldr	r0, [pc, #452]	; (80066c4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006500:	f000 ffde 	bl	80074c0 <HAL_GPIO_ReadPin>
 8006504:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <XPT2046_ReadAdc_Smooth_XY+0x72>
 800650a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800650e:	2b09      	cmp	r3, #9
 8006510:	d9d4      	bls.n	80064bc <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8006512:	2110      	movs	r1, #16
 8006514:	486b      	ldr	r0, [pc, #428]	; (80066c4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006516:	f000 ffd3 	bl	80074c0 <HAL_GPIO_ReadPin>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8006520:	4b69      	ldr	r3, [pc, #420]	; (80066c8 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8006526:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800652a:	2b0a      	cmp	r3, #10
 800652c:	f040 80c4 	bne.w	80066b8 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8006530:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006534:	643b      	str	r3, [r7, #64]	; 0x40
 8006536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006538:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 800653a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800653e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800654a:	e02b      	b.n	80065a4 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 800654c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	3348      	adds	r3, #72	; 0x48
 8006554:	443b      	add	r3, r7
 8006556:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800655a:	461a      	mov	r2, r3
 800655c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655e:	4293      	cmp	r3, r2
 8006560:	dd08      	ble.n	8006574 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8006562:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	3348      	adds	r3, #72	; 0x48
 800656a:	443b      	add	r3, r7
 800656c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006570:	643b      	str	r3, [r7, #64]	; 0x40
 8006572:	e012      	b.n	800659a <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8006574:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	3348      	adds	r3, #72	; 0x48
 800657c:	443b      	add	r3, r7
 800657e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006582:	461a      	mov	r2, r3
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	4293      	cmp	r3, r2
 8006588:	da07      	bge.n	800659a <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 800658a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	3348      	adds	r3, #72	; 0x48
 8006592:	443b      	add	r3, r7
 8006594:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 800659a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800659e:	3301      	adds	r3, #1
 80065a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80065a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065a8:	2b09      	cmp	r3, #9
 80065aa:	d9cf      	bls.n	800654c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80065b2:	e02f      	b.n	8006614 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 80065b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065b8:	330a      	adds	r3, #10
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	3348      	adds	r3, #72	; 0x48
 80065be:	443b      	add	r3, r7
 80065c0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065c4:	461a      	mov	r2, r3
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	4293      	cmp	r3, r2
 80065ca:	dd09      	ble.n	80065e0 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 80065cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065d0:	330a      	adds	r3, #10
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	3348      	adds	r3, #72	; 0x48
 80065d6:	443b      	add	r3, r7
 80065d8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80065de:	e014      	b.n	800660a <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 80065e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065e4:	330a      	adds	r3, #10
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	3348      	adds	r3, #72	; 0x48
 80065ea:	443b      	add	r3, r7
 80065ec:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	4293      	cmp	r3, r2
 80065f6:	da08      	bge.n	800660a <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 80065f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065fc:	330a      	adds	r3, #10
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	3348      	adds	r3, #72	; 0x48
 8006602:	443b      	add	r3, r7
 8006604:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 800660a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800660e:	3301      	adds	r3, #1
 8006610:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006614:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006618:	2b09      	cmp	r3, #9
 800661a:	d9cb      	bls.n	80065b4 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 800661c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006620:	461a      	mov	r2, r3
 8006622:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006626:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8006628:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006632:	4413      	add	r3, r2
 8006634:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006638:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 800663a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800663e:	4413      	add	r3, r2
 8006640:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006644:	4413      	add	r3, r2
 8006646:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800664a:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 800664c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006650:	4413      	add	r3, r2
 8006652:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006656:	441a      	add	r2, r3
 8006658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	1ad3      	subs	r3, r2, r3
				>> 3;
 8006660:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8006668:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800666c:	461a      	mov	r2, r3
 800666e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006672:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8006674:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006678:	4413      	add	r3, r2
 800667a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800667e:	4413      	add	r3, r2
 8006680:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006684:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8006686:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800668a:	4413      	add	r3, r2
 800668c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8006690:	4413      	add	r3, r2
 8006692:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006696:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8006698:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800669c:	4413      	add	r3, r2
 800669e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80066a2:	441a      	add	r2, r3
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	1ad3      	subs	r3, r2, r3
				>> 3;
 80066ac:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	805a      	strh	r2, [r3, #2]

		return 1;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 80066b8:	2300      	movs	r3, #0

}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3748      	adds	r7, #72	; 0x48
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40011800 	.word	0x40011800
 80066c8:	200009f4 	.word	0x200009f4

080066cc <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 80066cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 80066d8:	2301      	movs	r3, #1
 80066da:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80066dc:	f107 0308 	add.w	r3, r7, #8
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fedd 	bl	80064a0 <XPT2046_ReadAdc_Smooth_XY>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d06e      	beq.n	80067ca <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80066f2:	893b      	ldrh	r3, [r7, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7f9 fef1 	bl	80004dc <__aeabi_i2d>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4620      	mov	r0, r4
 8006700:	4629      	mov	r1, r5
 8006702:	f7f9 ff55 	bl	80005b0 <__aeabi_dmul>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4690      	mov	r8, r2
 800670c:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006714:	897b      	ldrh	r3, [r7, #10]
 8006716:	4618      	mov	r0, r3
 8006718:	f7f9 fee0 	bl	80004dc <__aeabi_i2d>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4620      	mov	r0, r4
 8006722:	4629      	mov	r1, r5
 8006724:	f7f9 ff44 	bl	80005b0 <__aeabi_dmul>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7f9 fd88 	bl	8000244 <__adddf3>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4610      	mov	r0, r2
 800673a:	4619      	mov	r1, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006742:	f7f9 fd7f 	bl	8000244 <__adddf3>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	f7fa f9f1 	bl	8000b34 <__aeabi_d2uiz>
 8006752:	4603      	mov	r3, r0
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006760:	893b      	ldrh	r3, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f7f9 feba 	bl	80004dc <__aeabi_i2d>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4620      	mov	r0, r4
 800676e:	4629      	mov	r1, r5
 8006770:	f7f9 ff1e 	bl	80005b0 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4690      	mov	r8, r2
 800677a:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006782:	897b      	ldrh	r3, [r7, #10]
 8006784:	4618      	mov	r0, r3
 8006786:	f7f9 fea9 	bl	80004dc <__aeabi_i2d>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7f9 ff0d 	bl	80005b0 <__aeabi_dmul>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	f7f9 fd51 	bl	8000244 <__adddf3>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80067b0:	f7f9 fd48 	bl	8000244 <__adddf3>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	f7fa f9ba 	bl	8000b34 <__aeabi_d2uiz>
 80067c0:	4603      	mov	r3, r0
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	805a      	strh	r2, [r3, #2]
 80067c8:	e001      	b.n	80067ce <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]

}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080067dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80067dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80067de:	e003      	b.n	80067e8 <LoopCopyDataInit>

080067e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80067e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80067e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80067e6:	3104      	adds	r1, #4

080067e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80067e8:	480a      	ldr	r0, [pc, #40]	; (8006814 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80067ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80067ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80067f0:	d3f6      	bcc.n	80067e0 <CopyDataInit>
  ldr r2, =_sbss
 80067f2:	4a0a      	ldr	r2, [pc, #40]	; (800681c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80067f4:	e002      	b.n	80067fc <LoopFillZerobss>

080067f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80067f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80067f8:	f842 3b04 	str.w	r3, [r2], #4

080067fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80067fc:	4b08      	ldr	r3, [pc, #32]	; (8006820 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80067fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006800:	d3f9      	bcc.n	80067f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006802:	f7ff f8d9 	bl	80059b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006806:	f003 f9b1 	bl	8009b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800680a:	f7fd f9e3 	bl	8003bd4 <main>
  bx lr
 800680e:	4770      	bx	lr
  ldr r3, =_sidata
 8006810:	0800ad54 	.word	0x0800ad54
  ldr r0, =_sdata
 8006814:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006818:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 800681c:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8006820:	20000a0c 	.word	0x20000a0c

08006824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006824:	e7fe      	b.n	8006824 <ADC1_2_IRQHandler>
	...

08006828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800682c:	4b08      	ldr	r3, [pc, #32]	; (8006850 <HAL_Init+0x28>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a07      	ldr	r2, [pc, #28]	; (8006850 <HAL_Init+0x28>)
 8006832:	f043 0310 	orr.w	r3, r3, #16
 8006836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006838:	2003      	movs	r0, #3
 800683a:	f000 fb5f 	bl	8006efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800683e:	2000      	movs	r0, #0
 8006840:	f000 f808 	bl	8006854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006844:	f7fe ff52 	bl	80056ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40022000 	.word	0x40022000

08006854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800685c:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <HAL_InitTick+0x54>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_InitTick+0x58>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	4619      	mov	r1, r3
 8006866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800686a:	fbb3 f3f1 	udiv	r3, r3, r1
 800686e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fb77 	bl	8006f66 <HAL_SYSTICK_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e00e      	b.n	80068a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b0f      	cmp	r3, #15
 8006886:	d80a      	bhi.n	800689e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006888:	2200      	movs	r2, #0
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006890:	f000 fb3f 	bl	8006f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006894:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <HAL_InitTick+0x5c>)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000004 	.word	0x20000004
 80068ac:	2000003c 	.word	0x2000003c
 80068b0:	20000038 	.word	0x20000038

080068b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068b8:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <HAL_IncTick+0x1c>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <HAL_IncTick+0x20>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4413      	add	r3, r2
 80068c4:	4a03      	ldr	r2, [pc, #12]	; (80068d4 <HAL_IncTick+0x20>)
 80068c6:	6013      	str	r3, [r2, #0]
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr
 80068d0:	2000003c 	.word	0x2000003c
 80068d4:	200009f8 	.word	0x200009f8

080068d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return uwTick;
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <HAL_GetTick+0x10>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr
 80068e8:	200009f8 	.word	0x200009f8

080068ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068f4:	f7ff fff0 	bl	80068d8 <HAL_GetTick>
 80068f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006904:	d005      	beq.n	8006912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006906:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <HAL_Delay+0x44>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006912:	bf00      	nop
 8006914:	f7ff ffe0 	bl	80068d8 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	429a      	cmp	r2, r3
 8006922:	d8f7      	bhi.n	8006914 <HAL_Delay+0x28>
  {
  }
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	2000003c 	.word	0x2000003c

08006934 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0ce      	b.n	8006af4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb fb10 	bl	8001f98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f9bd 	bl	8006cf8 <ADC_ConversionStop_Disable>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 80a9 	bne.w	8006ae2 <HAL_ADC_Init+0x1ae>
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f040 80a5 	bne.w	8006ae2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80069a0:	f023 0302 	bic.w	r3, r3, #2
 80069a4:	f043 0202 	orr.w	r2, r3, #2
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4951      	ldr	r1, [pc, #324]	; (8006afc <HAL_ADC_Init+0x1c8>)
 80069b6:	428b      	cmp	r3, r1
 80069b8:	d10a      	bne.n	80069d0 <HAL_ADC_Init+0x9c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069c2:	d002      	beq.n	80069ca <HAL_ADC_Init+0x96>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	e004      	b.n	80069d4 <HAL_ADC_Init+0xa0>
 80069ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069ce:	e001      	b.n	80069d4 <HAL_ADC_Init+0xa0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80069d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80069dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ec:	d003      	beq.n	80069f6 <HAL_ADC_Init+0xc2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d102      	bne.n	80069fc <HAL_ADC_Init+0xc8>
 80069f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069fa:	e000      	b.n	80069fe <HAL_ADC_Init+0xca>
 80069fc:	2300      	movs	r3, #0
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d119      	bne.n	8006a40 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	035a      	lsls	r2, r3, #13
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	e00b      	b.n	8006a40 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <HAL_ADC_Init+0x1cc>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a70:	d003      	beq.n	8006a7a <HAL_ADC_Init+0x146>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d104      	bne.n	8006a84 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	051b      	lsls	r3, r3, #20
 8006a82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <HAL_ADC_Init+0x1d0>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006abe:	e018      	b.n	8006af2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	f023 0312 	bic.w	r3, r3, #18
 8006ac8:	f043 0210 	orr.w	r2, r3, #16
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f043 0201 	orr.w	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006ae0:	e007      	b.n	8006af2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	f043 0210 	orr.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40013c00 	.word	0x40013c00
 8006b00:	ffe1f7fd 	.word	0xffe1f7fd
 8006b04:	ff1f0efe 	.word	0xff1f0efe

08006b08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_ADC_ConfigChannel+0x20>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e0dc      	b.n	8006ce2 <HAL_ADC_ConfigChannel+0x1da>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b06      	cmp	r3, #6
 8006b36:	d81c      	bhi.n	8006b72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	3b05      	subs	r3, #5
 8006b4a:	221f      	movs	r2, #31
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	4019      	ands	r1, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	3b05      	subs	r3, #5
 8006b64:	fa00 f203 	lsl.w	r2, r0, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	635a      	str	r2, [r3, #52]	; 0x34
 8006b70:	e03c      	b.n	8006bec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b0c      	cmp	r3, #12
 8006b78:	d81c      	bhi.n	8006bb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	3b23      	subs	r3, #35	; 0x23
 8006b8c:	221f      	movs	r2, #31
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43db      	mvns	r3, r3
 8006b94:	4019      	ands	r1, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3b23      	subs	r3, #35	; 0x23
 8006ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8006bb2:	e01b      	b.n	8006bec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3b41      	subs	r3, #65	; 0x41
 8006bc6:	221f      	movs	r2, #31
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	4019      	ands	r1, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	6818      	ldr	r0, [r3, #0]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	3b41      	subs	r3, #65	; 0x41
 8006be0:	fa00 f203 	lsl.w	r2, r0, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b09      	cmp	r3, #9
 8006bf2:	d91c      	bls.n	8006c2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68d9      	ldr	r1, [r3, #12]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	4413      	add	r3, r2
 8006c04:	3b1e      	subs	r3, #30
 8006c06:	2207      	movs	r2, #7
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	4019      	ands	r1, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6898      	ldr	r0, [r3, #8]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3b1e      	subs	r3, #30
 8006c20:	fa00 f203 	lsl.w	r2, r0, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	e019      	b.n	8006c62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6919      	ldr	r1, [r3, #16]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2207      	movs	r2, #7
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	43db      	mvns	r3, r3
 8006c46:	4019      	ands	r1, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6898      	ldr	r0, [r3, #8]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4613      	mov	r3, r2
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	4413      	add	r3, r2
 8006c56:	fa00 f203 	lsl.w	r2, r0, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d003      	beq.n	8006c72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006c6e:	2b11      	cmp	r3, #17
 8006c70:	d132      	bne.n	8006cd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <HAL_ADC_ConfigChannel+0x1e4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d125      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d126      	bne.n	8006cd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c98:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d11a      	bne.n	8006cd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_ADC_ConfigChannel+0x1e8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a13      	ldr	r2, [pc, #76]	; (8006cf4 <HAL_ADC_ConfigChannel+0x1ec>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	0c9a      	lsrs	r2, r3, #18
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006cb8:	e002      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f9      	bne.n	8006cba <HAL_ADC_ConfigChannel+0x1b2>
 8006cc6:	e007      	b.n	8006cd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f043 0220 	orr.w	r2, r3, #32
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr
 8006cec:	40012400 	.word	0x40012400
 8006cf0:	20000004 	.word	0x20000004
 8006cf4:	431bde83 	.word	0x431bde83

08006cf8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d127      	bne.n	8006d62 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d22:	f7ff fdd9 	bl	80068d8 <HAL_GetTick>
 8006d26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006d28:	e014      	b.n	8006d54 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d2a:	f7ff fdd5 	bl	80068d8 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d90d      	bls.n	8006d54 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	f043 0210 	orr.w	r2, r3, #16
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	f043 0201 	orr.w	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e007      	b.n	8006d64 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d0e3      	beq.n	8006d2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <NVIC_SetPriorityGrouping+0x44>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d9e:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <NVIC_SetPriorityGrouping+0x44>)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	60d3      	str	r3, [r2, #12]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000ed00 	.word	0xe000ed00

08006db4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006db8:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <NVIC_GetPriorityGrouping+0x18>)
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	0a1b      	lsrs	r3, r3, #8
 8006dbe:	f003 0307 	and.w	r3, r3, #7
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	e000ed00 	.word	0xe000ed00

08006dd0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	f003 021f 	and.w	r2, r3, #31
 8006de0:	4906      	ldr	r1, [pc, #24]	; (8006dfc <NVIC_EnableIRQ+0x2c>)
 8006de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	2001      	movs	r0, #1
 8006dea:	fa00 f202 	lsl.w	r2, r0, r2
 8006dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr
 8006dfc:	e000e100 	.word	0xe000e100

08006e00 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	da0b      	bge.n	8006e2c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	490c      	ldr	r1, [pc, #48]	; (8006e4c <NVIC_SetPriority+0x4c>)
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	3b04      	subs	r3, #4
 8006e22:	0112      	lsls	r2, r2, #4
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	440b      	add	r3, r1
 8006e28:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e2a:	e009      	b.n	8006e40 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	4907      	ldr	r1, [pc, #28]	; (8006e50 <NVIC_SetPriority+0x50>)
 8006e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e36:	0112      	lsls	r2, r2, #4
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	e000ed00 	.word	0xe000ed00
 8006e50:	e000e100 	.word	0xe000e100

08006e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	; 0x24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f1c3 0307 	rsb	r3, r3, #7
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	bf28      	it	cs
 8006e72:	2304      	movcs	r3, #4
 8006e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	2b06      	cmp	r3, #6
 8006e7c:	d902      	bls.n	8006e84 <NVIC_EncodePriority+0x30>
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3b03      	subs	r3, #3
 8006e82:	e000      	b.n	8006e86 <NVIC_EncodePriority+0x32>
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43da      	mvns	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	401a      	ands	r2, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea6:	43d9      	mvns	r1, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eac:	4313      	orrs	r3, r2
         );
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3724      	adds	r7, #36	; 0x24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr

08006eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ec8:	d301      	bcc.n	8006ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e00f      	b.n	8006eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ece:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <SysTick_Config+0x40>)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ed6:	210f      	movs	r1, #15
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006edc:	f7ff ff90 	bl	8006e00 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <SysTick_Config+0x40>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ee6:	4b04      	ldr	r3, [pc, #16]	; (8006ef8 <SysTick_Config+0x40>)
 8006ee8:	2207      	movs	r2, #7
 8006eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	e000e010 	.word	0xe000e010

08006efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ff31 	bl	8006d6c <NVIC_SetPriorityGrouping>
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	4603      	mov	r3, r0
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f24:	f7ff ff46 	bl	8006db4 <NVIC_GetPriorityGrouping>
 8006f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	6978      	ldr	r0, [r7, #20]
 8006f30:	f7ff ff90 	bl	8006e54 <NVIC_EncodePriority>
 8006f34:	4602      	mov	r2, r0
 8006f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff ff5f 	bl	8006e00 <NVIC_SetPriority>
}
 8006f42:	bf00      	nop
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	4603      	mov	r3, r0
 8006f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff ff39 	bl	8006dd0 <NVIC_EnableIRQ>
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff ffa2 	bl	8006eb8 <SysTick_Config>
 8006f74:	4603      	mov	r3, r0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d005      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2204      	movs	r2, #4
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
 8006fa0:	e0d6      	b.n	8007150 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 020e 	bic.w	r2, r2, #14
 8006fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4b64      	ldr	r3, [pc, #400]	; (800715c <HAL_DMA_Abort_IT+0x1dc>)
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d958      	bls.n	8007080 <HAL_DMA_Abort_IT+0x100>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a63      	ldr	r2, [pc, #396]	; (8007160 <HAL_DMA_Abort_IT+0x1e0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d04f      	beq.n	8007078 <HAL_DMA_Abort_IT+0xf8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a61      	ldr	r2, [pc, #388]	; (8007164 <HAL_DMA_Abort_IT+0x1e4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d048      	beq.n	8007074 <HAL_DMA_Abort_IT+0xf4>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a60      	ldr	r2, [pc, #384]	; (8007168 <HAL_DMA_Abort_IT+0x1e8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d040      	beq.n	800706e <HAL_DMA_Abort_IT+0xee>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a5e      	ldr	r2, [pc, #376]	; (800716c <HAL_DMA_Abort_IT+0x1ec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d038      	beq.n	8007068 <HAL_DMA_Abort_IT+0xe8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a5d      	ldr	r2, [pc, #372]	; (8007170 <HAL_DMA_Abort_IT+0x1f0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d030      	beq.n	8007062 <HAL_DMA_Abort_IT+0xe2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a5b      	ldr	r2, [pc, #364]	; (8007174 <HAL_DMA_Abort_IT+0x1f4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d028      	beq.n	800705c <HAL_DMA_Abort_IT+0xdc>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a53      	ldr	r2, [pc, #332]	; (800715c <HAL_DMA_Abort_IT+0x1dc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d020      	beq.n	8007056 <HAL_DMA_Abort_IT+0xd6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a57      	ldr	r2, [pc, #348]	; (8007178 <HAL_DMA_Abort_IT+0x1f8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d019      	beq.n	8007052 <HAL_DMA_Abort_IT+0xd2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a56      	ldr	r2, [pc, #344]	; (800717c <HAL_DMA_Abort_IT+0x1fc>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d012      	beq.n	800704e <HAL_DMA_Abort_IT+0xce>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a54      	ldr	r2, [pc, #336]	; (8007180 <HAL_DMA_Abort_IT+0x200>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00a      	beq.n	8007048 <HAL_DMA_Abort_IT+0xc8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a53      	ldr	r2, [pc, #332]	; (8007184 <HAL_DMA_Abort_IT+0x204>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d102      	bne.n	8007042 <HAL_DMA_Abort_IT+0xc2>
 800703c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007040:	e01b      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007046:	e018      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800704c:	e015      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 800704e:	2310      	movs	r3, #16
 8007050:	e013      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007052:	2301      	movs	r3, #1
 8007054:	e011      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800705a:	e00e      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 800705c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007060:	e00b      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007066:	e008      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800706c:	e005      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 800706e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007072:	e002      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007074:	2310      	movs	r3, #16
 8007076:	e000      	b.n	800707a <HAL_DMA_Abort_IT+0xfa>
 8007078:	2301      	movs	r3, #1
 800707a:	4a43      	ldr	r2, [pc, #268]	; (8007188 <HAL_DMA_Abort_IT+0x208>)
 800707c:	6053      	str	r3, [r2, #4]
 800707e:	e057      	b.n	8007130 <HAL_DMA_Abort_IT+0x1b0>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a36      	ldr	r2, [pc, #216]	; (8007160 <HAL_DMA_Abort_IT+0x1e0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d04f      	beq.n	800712a <HAL_DMA_Abort_IT+0x1aa>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a35      	ldr	r2, [pc, #212]	; (8007164 <HAL_DMA_Abort_IT+0x1e4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d048      	beq.n	8007126 <HAL_DMA_Abort_IT+0x1a6>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a33      	ldr	r2, [pc, #204]	; (8007168 <HAL_DMA_Abort_IT+0x1e8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d040      	beq.n	8007120 <HAL_DMA_Abort_IT+0x1a0>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a32      	ldr	r2, [pc, #200]	; (800716c <HAL_DMA_Abort_IT+0x1ec>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d038      	beq.n	800711a <HAL_DMA_Abort_IT+0x19a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a30      	ldr	r2, [pc, #192]	; (8007170 <HAL_DMA_Abort_IT+0x1f0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d030      	beq.n	8007114 <HAL_DMA_Abort_IT+0x194>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2f      	ldr	r2, [pc, #188]	; (8007174 <HAL_DMA_Abort_IT+0x1f4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d028      	beq.n	800710e <HAL_DMA_Abort_IT+0x18e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a26      	ldr	r2, [pc, #152]	; (800715c <HAL_DMA_Abort_IT+0x1dc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d020      	beq.n	8007108 <HAL_DMA_Abort_IT+0x188>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2b      	ldr	r2, [pc, #172]	; (8007178 <HAL_DMA_Abort_IT+0x1f8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d019      	beq.n	8007104 <HAL_DMA_Abort_IT+0x184>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a29      	ldr	r2, [pc, #164]	; (800717c <HAL_DMA_Abort_IT+0x1fc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d012      	beq.n	8007100 <HAL_DMA_Abort_IT+0x180>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a28      	ldr	r2, [pc, #160]	; (8007180 <HAL_DMA_Abort_IT+0x200>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00a      	beq.n	80070fa <HAL_DMA_Abort_IT+0x17a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a26      	ldr	r2, [pc, #152]	; (8007184 <HAL_DMA_Abort_IT+0x204>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d102      	bne.n	80070f4 <HAL_DMA_Abort_IT+0x174>
 80070ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070f2:	e01b      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 80070f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070f8:	e018      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 80070fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070fe:	e015      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 8007100:	2310      	movs	r3, #16
 8007102:	e013      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 8007104:	2301      	movs	r3, #1
 8007106:	e011      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 8007108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800710c:	e00e      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 800710e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007112:	e00b      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 8007114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007118:	e008      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 800711a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800711e:	e005      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 8007120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007124:	e002      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 8007126:	2310      	movs	r3, #16
 8007128:	e000      	b.n	800712c <HAL_DMA_Abort_IT+0x1ac>
 800712a:	2301      	movs	r3, #1
 800712c:	4a17      	ldr	r2, [pc, #92]	; (800718c <HAL_DMA_Abort_IT+0x20c>)
 800712e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4798      	blx	r3
    } 
  }
  return status;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40020080 	.word	0x40020080
 8007160:	40020008 	.word	0x40020008
 8007164:	4002001c 	.word	0x4002001c
 8007168:	40020030 	.word	0x40020030
 800716c:	40020044 	.word	0x40020044
 8007170:	40020058 	.word	0x40020058
 8007174:	4002006c 	.word	0x4002006c
 8007178:	40020408 	.word	0x40020408
 800717c:	4002041c 	.word	0x4002041c
 8007180:	40020430 	.word	0x40020430
 8007184:	40020444 	.word	0x40020444
 8007188:	40020400 	.word	0x40020400
 800718c:	40020000 	.word	0x40020000

08007190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007190:	b480      	push	{r7}
 8007192:	b08b      	sub	sp, #44	; 0x2c
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80071aa:	2300      	movs	r3, #0
 80071ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	e179      	b.n	80074a8 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80071b4:	2201      	movs	r2, #1
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	4013      	ands	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	f040 8168 	bne.w	80074a2 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	4a96      	ldr	r2, [pc, #600]	; (8007430 <HAL_GPIO_Init+0x2a0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d05e      	beq.n	800729a <HAL_GPIO_Init+0x10a>
 80071dc:	4a94      	ldr	r2, [pc, #592]	; (8007430 <HAL_GPIO_Init+0x2a0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d875      	bhi.n	80072ce <HAL_GPIO_Init+0x13e>
 80071e2:	4a94      	ldr	r2, [pc, #592]	; (8007434 <HAL_GPIO_Init+0x2a4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d058      	beq.n	800729a <HAL_GPIO_Init+0x10a>
 80071e8:	4a92      	ldr	r2, [pc, #584]	; (8007434 <HAL_GPIO_Init+0x2a4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d86f      	bhi.n	80072ce <HAL_GPIO_Init+0x13e>
 80071ee:	4a92      	ldr	r2, [pc, #584]	; (8007438 <HAL_GPIO_Init+0x2a8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d052      	beq.n	800729a <HAL_GPIO_Init+0x10a>
 80071f4:	4a90      	ldr	r2, [pc, #576]	; (8007438 <HAL_GPIO_Init+0x2a8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d869      	bhi.n	80072ce <HAL_GPIO_Init+0x13e>
 80071fa:	4a90      	ldr	r2, [pc, #576]	; (800743c <HAL_GPIO_Init+0x2ac>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d04c      	beq.n	800729a <HAL_GPIO_Init+0x10a>
 8007200:	4a8e      	ldr	r2, [pc, #568]	; (800743c <HAL_GPIO_Init+0x2ac>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d863      	bhi.n	80072ce <HAL_GPIO_Init+0x13e>
 8007206:	4a8e      	ldr	r2, [pc, #568]	; (8007440 <HAL_GPIO_Init+0x2b0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d046      	beq.n	800729a <HAL_GPIO_Init+0x10a>
 800720c:	4a8c      	ldr	r2, [pc, #560]	; (8007440 <HAL_GPIO_Init+0x2b0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d85d      	bhi.n	80072ce <HAL_GPIO_Init+0x13e>
 8007212:	2b12      	cmp	r3, #18
 8007214:	d82a      	bhi.n	800726c <HAL_GPIO_Init+0xdc>
 8007216:	2b12      	cmp	r3, #18
 8007218:	d859      	bhi.n	80072ce <HAL_GPIO_Init+0x13e>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <HAL_GPIO_Init+0x90>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	0800729b 	.word	0x0800729b
 8007224:	08007275 	.word	0x08007275
 8007228:	08007287 	.word	0x08007287
 800722c:	080072c9 	.word	0x080072c9
 8007230:	080072cf 	.word	0x080072cf
 8007234:	080072cf 	.word	0x080072cf
 8007238:	080072cf 	.word	0x080072cf
 800723c:	080072cf 	.word	0x080072cf
 8007240:	080072cf 	.word	0x080072cf
 8007244:	080072cf 	.word	0x080072cf
 8007248:	080072cf 	.word	0x080072cf
 800724c:	080072cf 	.word	0x080072cf
 8007250:	080072cf 	.word	0x080072cf
 8007254:	080072cf 	.word	0x080072cf
 8007258:	080072cf 	.word	0x080072cf
 800725c:	080072cf 	.word	0x080072cf
 8007260:	080072cf 	.word	0x080072cf
 8007264:	0800727d 	.word	0x0800727d
 8007268:	08007291 	.word	0x08007291
 800726c:	4a75      	ldr	r2, [pc, #468]	; (8007444 <HAL_GPIO_Init+0x2b4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007272:	e02c      	b.n	80072ce <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	623b      	str	r3, [r7, #32]
          break;
 800727a:	e029      	b.n	80072d0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	3304      	adds	r3, #4
 8007282:	623b      	str	r3, [r7, #32]
          break;
 8007284:	e024      	b.n	80072d0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	3308      	adds	r3, #8
 800728c:	623b      	str	r3, [r7, #32]
          break;
 800728e:	e01f      	b.n	80072d0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	330c      	adds	r3, #12
 8007296:	623b      	str	r3, [r7, #32]
          break;
 8007298:	e01a      	b.n	80072d0 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80072a2:	2304      	movs	r3, #4
 80072a4:	623b      	str	r3, [r7, #32]
          break;
 80072a6:	e013      	b.n	80072d0 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d105      	bne.n	80072bc <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80072b0:	2308      	movs	r3, #8
 80072b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	611a      	str	r2, [r3, #16]
          break;
 80072ba:	e009      	b.n	80072d0 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80072bc:	2308      	movs	r3, #8
 80072be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	615a      	str	r2, [r3, #20]
          break;
 80072c6:	e003      	b.n	80072d0 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80072c8:	2300      	movs	r3, #0
 80072ca:	623b      	str	r3, [r7, #32]
          break;
 80072cc:	e000      	b.n	80072d0 <HAL_GPIO_Init+0x140>
          break;
 80072ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2bff      	cmp	r3, #255	; 0xff
 80072d4:	d801      	bhi.n	80072da <HAL_GPIO_Init+0x14a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	e001      	b.n	80072de <HAL_GPIO_Init+0x14e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2bff      	cmp	r3, #255	; 0xff
 80072e4:	d802      	bhi.n	80072ec <HAL_GPIO_Init+0x15c>
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	e002      	b.n	80072f2 <HAL_GPIO_Init+0x162>
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	3b08      	subs	r3, #8
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	210f      	movs	r1, #15
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007300:	43db      	mvns	r3, r3
 8007302:	401a      	ands	r2, r3
 8007304:	6a39      	ldr	r1, [r7, #32]
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	fa01 f303 	lsl.w	r3, r1, r3
 800730c:	431a      	orrs	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 80c1 	beq.w	80074a2 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007320:	4b49      	ldr	r3, [pc, #292]	; (8007448 <HAL_GPIO_Init+0x2b8>)
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	4a48      	ldr	r2, [pc, #288]	; (8007448 <HAL_GPIO_Init+0x2b8>)
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	6193      	str	r3, [r2, #24]
 800732c:	4b46      	ldr	r3, [pc, #280]	; (8007448 <HAL_GPIO_Init+0x2b8>)
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8007338:	4a44      	ldr	r2, [pc, #272]	; (800744c <HAL_GPIO_Init+0x2bc>)
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	089b      	lsrs	r3, r3, #2
 800733e:	3302      	adds	r3, #2
 8007340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007344:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	220f      	movs	r2, #15
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4013      	ands	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a3c      	ldr	r2, [pc, #240]	; (8007450 <HAL_GPIO_Init+0x2c0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d01f      	beq.n	80073a4 <HAL_GPIO_Init+0x214>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a3b      	ldr	r2, [pc, #236]	; (8007454 <HAL_GPIO_Init+0x2c4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d019      	beq.n	80073a0 <HAL_GPIO_Init+0x210>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a3a      	ldr	r2, [pc, #232]	; (8007458 <HAL_GPIO_Init+0x2c8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d013      	beq.n	800739c <HAL_GPIO_Init+0x20c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a39      	ldr	r2, [pc, #228]	; (800745c <HAL_GPIO_Init+0x2cc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00d      	beq.n	8007398 <HAL_GPIO_Init+0x208>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a38      	ldr	r2, [pc, #224]	; (8007460 <HAL_GPIO_Init+0x2d0>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d007      	beq.n	8007394 <HAL_GPIO_Init+0x204>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a37      	ldr	r2, [pc, #220]	; (8007464 <HAL_GPIO_Init+0x2d4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d101      	bne.n	8007390 <HAL_GPIO_Init+0x200>
 800738c:	2305      	movs	r3, #5
 800738e:	e00a      	b.n	80073a6 <HAL_GPIO_Init+0x216>
 8007390:	2306      	movs	r3, #6
 8007392:	e008      	b.n	80073a6 <HAL_GPIO_Init+0x216>
 8007394:	2304      	movs	r3, #4
 8007396:	e006      	b.n	80073a6 <HAL_GPIO_Init+0x216>
 8007398:	2303      	movs	r3, #3
 800739a:	e004      	b.n	80073a6 <HAL_GPIO_Init+0x216>
 800739c:	2302      	movs	r3, #2
 800739e:	e002      	b.n	80073a6 <HAL_GPIO_Init+0x216>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <HAL_GPIO_Init+0x216>
 80073a4:	2300      	movs	r3, #0
 80073a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a8:	f002 0203 	and.w	r2, r2, #3
 80073ac:	0092      	lsls	r2, r2, #2
 80073ae:	4093      	lsls	r3, r2
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80073b6:	4925      	ldr	r1, [pc, #148]	; (800744c <HAL_GPIO_Init+0x2bc>)
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	089b      	lsrs	r3, r3, #2
 80073bc:	3302      	adds	r3, #2
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d006      	beq.n	80073de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80073d0:	4b25      	ldr	r3, [pc, #148]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4924      	ldr	r1, [pc, #144]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	4313      	orrs	r3, r2
 80073da:	600b      	str	r3, [r1, #0]
 80073dc:	e006      	b.n	80073ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80073de:	4b22      	ldr	r3, [pc, #136]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	43db      	mvns	r3, r3
 80073e6:	4920      	ldr	r1, [pc, #128]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80073f8:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	491a      	ldr	r1, [pc, #104]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	4313      	orrs	r3, r2
 8007402:	604b      	str	r3, [r1, #4]
 8007404:	e006      	b.n	8007414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007406:	4b18      	ldr	r3, [pc, #96]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	43db      	mvns	r3, r3
 800740e:	4916      	ldr	r1, [pc, #88]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 8007410:	4013      	ands	r3, r2
 8007412:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d025      	beq.n	800746c <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007420:	4b11      	ldr	r3, [pc, #68]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	4910      	ldr	r1, [pc, #64]	; (8007468 <HAL_GPIO_Init+0x2d8>)
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	4313      	orrs	r3, r2
 800742a:	608b      	str	r3, [r1, #8]
 800742c:	e025      	b.n	800747a <HAL_GPIO_Init+0x2ea>
 800742e:	bf00      	nop
 8007430:	10320000 	.word	0x10320000
 8007434:	10310000 	.word	0x10310000
 8007438:	10220000 	.word	0x10220000
 800743c:	10210000 	.word	0x10210000
 8007440:	10120000 	.word	0x10120000
 8007444:	10110000 	.word	0x10110000
 8007448:	40021000 	.word	0x40021000
 800744c:	40010000 	.word	0x40010000
 8007450:	40010800 	.word	0x40010800
 8007454:	40010c00 	.word	0x40010c00
 8007458:	40011000 	.word	0x40011000
 800745c:	40011400 	.word	0x40011400
 8007460:	40011800 	.word	0x40011800
 8007464:	40011c00 	.word	0x40011c00
 8007468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800746c:	4b13      	ldr	r3, [pc, #76]	; (80074bc <HAL_GPIO_Init+0x32c>)
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	43db      	mvns	r3, r3
 8007474:	4911      	ldr	r1, [pc, #68]	; (80074bc <HAL_GPIO_Init+0x32c>)
 8007476:	4013      	ands	r3, r2
 8007478:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d006      	beq.n	8007494 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <HAL_GPIO_Init+0x32c>)
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	490c      	ldr	r1, [pc, #48]	; (80074bc <HAL_GPIO_Init+0x32c>)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	4313      	orrs	r3, r2
 8007490:	60cb      	str	r3, [r1, #12]
 8007492:	e006      	b.n	80074a2 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <HAL_GPIO_Init+0x32c>)
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	43db      	mvns	r3, r3
 800749c:	4907      	ldr	r1, [pc, #28]	; (80074bc <HAL_GPIO_Init+0x32c>)
 800749e:	4013      	ands	r3, r2
 80074a0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	3301      	adds	r3, #1
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	f67f ae82 	bls.w	80071b4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	372c      	adds	r7, #44	; 0x2c
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr
 80074bc:	40010400 	.word	0x40010400

080074c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	887b      	ldrh	r3, [r7, #2]
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	e001      	b.n	80074e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bc80      	pop	{r7}
 80074ec:	4770      	bx	lr

080074ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	807b      	strh	r3, [r7, #2]
 80074fa:	4613      	mov	r3, r2
 80074fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074fe:	787b      	ldrb	r3, [r7, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007504:	887a      	ldrh	r2, [r7, #2]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800750a:	e003      	b.n	8007514 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800750c:	887b      	ldrh	r3, [r7, #2]
 800750e:	041a      	lsls	r2, r3, #16
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	611a      	str	r2, [r3, #16]
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr
	...

08007520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800752a:	4b08      	ldr	r3, [pc, #32]	; (800754c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d006      	beq.n	8007544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007536:	4a05      	ldr	r2, [pc, #20]	; (800754c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007538:	88fb      	ldrh	r3, [r7, #6]
 800753a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800753c:	88fb      	ldrh	r3, [r7, #6]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f806 	bl	8007550 <HAL_GPIO_EXTI_Callback>
  }
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40010400 	.word	0x40010400

08007550 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8087 	beq.w	800768c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800757e:	4b92      	ldr	r3, [pc, #584]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b04      	cmp	r3, #4
 8007588:	d00c      	beq.n	80075a4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800758a:	4b8f      	ldr	r3, [pc, #572]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f003 030c 	and.w	r3, r3, #12
 8007592:	2b08      	cmp	r3, #8
 8007594:	d112      	bne.n	80075bc <HAL_RCC_OscConfig+0x58>
 8007596:	4b8c      	ldr	r3, [pc, #560]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a2:	d10b      	bne.n	80075bc <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075a4:	4b88      	ldr	r3, [pc, #544]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d06c      	beq.n	800768a <HAL_RCC_OscConfig+0x126>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d168      	bne.n	800768a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e22d      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c4:	d106      	bne.n	80075d4 <HAL_RCC_OscConfig+0x70>
 80075c6:	4b80      	ldr	r3, [pc, #512]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a7f      	ldr	r2, [pc, #508]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e02e      	b.n	8007632 <HAL_RCC_OscConfig+0xce>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10c      	bne.n	80075f6 <HAL_RCC_OscConfig+0x92>
 80075dc:	4b7a      	ldr	r3, [pc, #488]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a79      	ldr	r2, [pc, #484]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	4b77      	ldr	r3, [pc, #476]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a76      	ldr	r2, [pc, #472]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	e01d      	b.n	8007632 <HAL_RCC_OscConfig+0xce>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075fe:	d10c      	bne.n	800761a <HAL_RCC_OscConfig+0xb6>
 8007600:	4b71      	ldr	r3, [pc, #452]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a70      	ldr	r2, [pc, #448]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	4b6e      	ldr	r3, [pc, #440]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a6d      	ldr	r2, [pc, #436]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	e00b      	b.n	8007632 <HAL_RCC_OscConfig+0xce>
 800761a:	4b6b      	ldr	r3, [pc, #428]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6a      	ldr	r2, [pc, #424]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	4b68      	ldr	r3, [pc, #416]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a67      	ldr	r2, [pc, #412]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800762c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007630:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d013      	beq.n	8007662 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763a:	f7ff f94d 	bl	80068d8 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007642:	f7ff f949 	bl	80068d8 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b64      	cmp	r3, #100	; 0x64
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e1e1      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007654:	4b5c      	ldr	r3, [pc, #368]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0f0      	beq.n	8007642 <HAL_RCC_OscConfig+0xde>
 8007660:	e014      	b.n	800768c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007662:	f7ff f939 	bl	80068d8 <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007668:	e008      	b.n	800767c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800766a:	f7ff f935 	bl	80068d8 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b64      	cmp	r3, #100	; 0x64
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e1cd      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800767c:	4b52      	ldr	r3, [pc, #328]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f0      	bne.n	800766a <HAL_RCC_OscConfig+0x106>
 8007688:	e000      	b.n	800768c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800768a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d063      	beq.n	8007760 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007698:	4b4b      	ldr	r3, [pc, #300]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f003 030c 	and.w	r3, r3, #12
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80076a4:	4b48      	ldr	r3, [pc, #288]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d11c      	bne.n	80076ea <HAL_RCC_OscConfig+0x186>
 80076b0:	4b45      	ldr	r3, [pc, #276]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d116      	bne.n	80076ea <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076bc:	4b42      	ldr	r3, [pc, #264]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <HAL_RCC_OscConfig+0x170>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d001      	beq.n	80076d4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e1a1      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d4:	4b3c      	ldr	r3, [pc, #240]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4939      	ldr	r1, [pc, #228]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076e8:	e03a      	b.n	8007760 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d020      	beq.n	8007734 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076f2:	4b36      	ldr	r3, [pc, #216]	; (80077cc <HAL_RCC_OscConfig+0x268>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f8:	f7ff f8ee 	bl	80068d8 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007700:	f7ff f8ea 	bl	80068d8 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e182      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007712:	4b2d      	ldr	r3, [pc, #180]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800771e:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4926      	ldr	r1, [pc, #152]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800772e:	4313      	orrs	r3, r2
 8007730:	600b      	str	r3, [r1, #0]
 8007732:	e015      	b.n	8007760 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007734:	4b25      	ldr	r3, [pc, #148]	; (80077cc <HAL_RCC_OscConfig+0x268>)
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800773a:	f7ff f8cd 	bl	80068d8 <HAL_GetTick>
 800773e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007742:	f7ff f8c9 	bl	80068d8 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e161      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007754:	4b1c      	ldr	r3, [pc, #112]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f0      	bne.n	8007742 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d039      	beq.n	80077e0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d019      	beq.n	80077a8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007774:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <HAL_RCC_OscConfig+0x26c>)
 8007776:	2201      	movs	r2, #1
 8007778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800777a:	f7ff f8ad 	bl	80068d8 <HAL_GetTick>
 800777e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007782:	f7ff f8a9 	bl	80068d8 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e141      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0f0      	beq.n	8007782 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80077a0:	2001      	movs	r0, #1
 80077a2:	f000 fadf 	bl	8007d64 <RCC_Delay>
 80077a6:	e01b      	b.n	80077e0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <HAL_RCC_OscConfig+0x26c>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ae:	f7ff f893 	bl	80068d8 <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b4:	e00e      	b.n	80077d4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077b6:	f7ff f88f 	bl	80068d8 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d907      	bls.n	80077d4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e127      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
 80077c8:	40021000 	.word	0x40021000
 80077cc:	42420000 	.word	0x42420000
 80077d0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077d4:	4b92      	ldr	r3, [pc, #584]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1ea      	bne.n	80077b6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 80a6 	beq.w	800793a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077f2:	4b8b      	ldr	r3, [pc, #556]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10d      	bne.n	800781a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077fe:	4b88      	ldr	r3, [pc, #544]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	4a87      	ldr	r2, [pc, #540]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007808:	61d3      	str	r3, [r2, #28]
 800780a:	4b85      	ldr	r3, [pc, #532]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800781a:	4b82      	ldr	r3, [pc, #520]	; (8007a24 <HAL_RCC_OscConfig+0x4c0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007822:	2b00      	cmp	r3, #0
 8007824:	d118      	bne.n	8007858 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007826:	4b7f      	ldr	r3, [pc, #508]	; (8007a24 <HAL_RCC_OscConfig+0x4c0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a7e      	ldr	r2, [pc, #504]	; (8007a24 <HAL_RCC_OscConfig+0x4c0>)
 800782c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007832:	f7ff f851 	bl	80068d8 <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007838:	e008      	b.n	800784c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800783a:	f7ff f84d 	bl	80068d8 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b64      	cmp	r3, #100	; 0x64
 8007846:	d901      	bls.n	800784c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e0e5      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800784c:	4b75      	ldr	r3, [pc, #468]	; (8007a24 <HAL_RCC_OscConfig+0x4c0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0f0      	beq.n	800783a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d106      	bne.n	800786e <HAL_RCC_OscConfig+0x30a>
 8007860:	4b6f      	ldr	r3, [pc, #444]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	4a6e      	ldr	r2, [pc, #440]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	6213      	str	r3, [r2, #32]
 800786c:	e02d      	b.n	80078ca <HAL_RCC_OscConfig+0x366>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10c      	bne.n	8007890 <HAL_RCC_OscConfig+0x32c>
 8007876:	4b6a      	ldr	r3, [pc, #424]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	4a69      	ldr	r2, [pc, #420]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	6213      	str	r3, [r2, #32]
 8007882:	4b67      	ldr	r3, [pc, #412]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	4a66      	ldr	r2, [pc, #408]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	6213      	str	r3, [r2, #32]
 800788e:	e01c      	b.n	80078ca <HAL_RCC_OscConfig+0x366>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b05      	cmp	r3, #5
 8007896:	d10c      	bne.n	80078b2 <HAL_RCC_OscConfig+0x34e>
 8007898:	4b61      	ldr	r3, [pc, #388]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	4a60      	ldr	r2, [pc, #384]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 800789e:	f043 0304 	orr.w	r3, r3, #4
 80078a2:	6213      	str	r3, [r2, #32]
 80078a4:	4b5e      	ldr	r3, [pc, #376]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	4a5d      	ldr	r2, [pc, #372]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	6213      	str	r3, [r2, #32]
 80078b0:	e00b      	b.n	80078ca <HAL_RCC_OscConfig+0x366>
 80078b2:	4b5b      	ldr	r3, [pc, #364]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	4a5a      	ldr	r2, [pc, #360]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80078b8:	f023 0301 	bic.w	r3, r3, #1
 80078bc:	6213      	str	r3, [r2, #32]
 80078be:	4b58      	ldr	r3, [pc, #352]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	4a57      	ldr	r2, [pc, #348]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80078c4:	f023 0304 	bic.w	r3, r3, #4
 80078c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d015      	beq.n	80078fe <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078d2:	f7ff f801 	bl	80068d8 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d8:	e00a      	b.n	80078f0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078da:	f7fe fffd 	bl	80068d8 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e093      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078f0:	4b4b      	ldr	r3, [pc, #300]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0ee      	beq.n	80078da <HAL_RCC_OscConfig+0x376>
 80078fc:	e014      	b.n	8007928 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078fe:	f7fe ffeb 	bl	80068d8 <HAL_GetTick>
 8007902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007904:	e00a      	b.n	800791c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007906:	f7fe ffe7 	bl	80068d8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	f241 3288 	movw	r2, #5000	; 0x1388
 8007914:	4293      	cmp	r3, r2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e07d      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800791c:	4b40      	ldr	r3, [pc, #256]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1ee      	bne.n	8007906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d105      	bne.n	800793a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800792e:	4b3c      	ldr	r3, [pc, #240]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	4a3b      	ldr	r2, [pc, #236]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007938:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d069      	beq.n	8007a16 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007942:	4b37      	ldr	r3, [pc, #220]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f003 030c 	and.w	r3, r3, #12
 800794a:	2b08      	cmp	r3, #8
 800794c:	d061      	beq.n	8007a12 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d146      	bne.n	80079e4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <HAL_RCC_OscConfig+0x4c4>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800795c:	f7fe ffbc 	bl	80068d8 <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007964:	f7fe ffb8 	bl	80068d8 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e050      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007976:	4b2a      	ldr	r3, [pc, #168]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f0      	bne.n	8007964 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798a:	d108      	bne.n	800799e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800798c:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	4921      	ldr	r1, [pc, #132]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 800799a:	4313      	orrs	r3, r2
 800799c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800799e:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a19      	ldr	r1, [r3, #32]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	430b      	orrs	r3, r1
 80079b0:	491b      	ldr	r1, [pc, #108]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079b6:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <HAL_RCC_OscConfig+0x4c4>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079bc:	f7fe ff8c 	bl	80068d8 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c4:	f7fe ff88 	bl	80068d8 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e020      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079d6:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f0      	beq.n	80079c4 <HAL_RCC_OscConfig+0x460>
 80079e2:	e018      	b.n	8007a16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079e4:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <HAL_RCC_OscConfig+0x4c4>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ea:	f7fe ff75 	bl	80068d8 <HAL_GetTick>
 80079ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079f0:	e008      	b.n	8007a04 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079f2:	f7fe ff71 	bl	80068d8 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e009      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <HAL_RCC_OscConfig+0x4bc>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1f0      	bne.n	80079f2 <HAL_RCC_OscConfig+0x48e>
 8007a10:	e001      	b.n	8007a16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	40021000 	.word	0x40021000
 8007a24:	40007000 	.word	0x40007000
 8007a28:	42420060 	.word	0x42420060

08007a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8007a3a:	4b7e      	ldr	r3, [pc, #504]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d910      	bls.n	8007a6a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a48:	4b7a      	ldr	r3, [pc, #488]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f023 0207 	bic.w	r2, r3, #7
 8007a50:	4978      	ldr	r1, [pc, #480]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007a58:	4b76      	ldr	r3, [pc, #472]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d001      	beq.n	8007a6a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e0e0      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d020      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a82:	4b6d      	ldr	r3, [pc, #436]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	4a6c      	ldr	r2, [pc, #432]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007a88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007a8c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a9a:	4b67      	ldr	r3, [pc, #412]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	4a66      	ldr	r2, [pc, #408]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007aa0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007aa4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aa6:	4b64      	ldr	r3, [pc, #400]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	4961      	ldr	r1, [pc, #388]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d06a      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d107      	bne.n	8007adc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007acc:	4b5a      	ldr	r3, [pc, #360]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d115      	bne.n	8007b04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e0a7      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d107      	bne.n	8007af4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae4:	4b54      	ldr	r3, [pc, #336]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d109      	bne.n	8007b04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e09b      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af4:	4b50      	ldr	r3, [pc, #320]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e093      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b04:	4b4c      	ldr	r3, [pc, #304]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f023 0203 	bic.w	r2, r3, #3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4949      	ldr	r1, [pc, #292]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b16:	f7fe fedf 	bl	80068d8 <HAL_GetTick>
 8007b1a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d112      	bne.n	8007b4a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b24:	e00a      	b.n	8007b3c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b26:	f7fe fed7 	bl	80068d8 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e077      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b3c:	4b3e      	ldr	r3, [pc, #248]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f003 030c 	and.w	r3, r3, #12
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d1ee      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xfa>
 8007b48:	e027      	b.n	8007b9a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d11d      	bne.n	8007b8e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b52:	e00a      	b.n	8007b6a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b54:	f7fe fec0 	bl	80068d8 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e060      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b6a:	4b33      	ldr	r3, [pc, #204]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f003 030c 	and.w	r3, r3, #12
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d1ee      	bne.n	8007b54 <HAL_RCC_ClockConfig+0x128>
 8007b76:	e010      	b.n	8007b9a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b78:	f7fe feae 	bl	80068d8 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e04e      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b8e:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f003 030c 	and.w	r3, r3, #12
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1ee      	bne.n	8007b78 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8007b9a:	4b26      	ldr	r3, [pc, #152]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d210      	bcs.n	8007bca <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba8:	4b22      	ldr	r3, [pc, #136]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f023 0207 	bic.w	r2, r3, #7
 8007bb0:	4920      	ldr	r1, [pc, #128]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <HAL_RCC_ClockConfig+0x208>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d001      	beq.n	8007bca <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e030      	b.n	8007c2c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d008      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	4915      	ldr	r1, [pc, #84]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bf4:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	490d      	ldr	r1, [pc, #52]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c08:	f000 f81c 	bl	8007c44 <HAL_RCC_GetSysClockFreq>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <HAL_RCC_ClockConfig+0x20c>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	091b      	lsrs	r3, r3, #4
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	4908      	ldr	r1, [pc, #32]	; (8007c3c <HAL_RCC_ClockConfig+0x210>)
 8007c1a:	5ccb      	ldrb	r3, [r1, r3]
 8007c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c20:	4a07      	ldr	r2, [pc, #28]	; (8007c40 <HAL_RCC_ClockConfig+0x214>)
 8007c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007c24:	2000      	movs	r0, #0
 8007c26:	f7fe fe15 	bl	8006854 <HAL_InitTick>
  
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40022000 	.word	0x40022000
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	0800acf0 	.word	0x0800acf0
 8007c40:	20000004 	.word	0x20000004

08007c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c44:	b490      	push	{r4, r7}
 8007c46:	b08a      	sub	sp, #40	; 0x28
 8007c48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007c4a:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <HAL_RCC_GetSysClockFreq+0xac>)
 8007c4c:	1d3c      	adds	r4, r7, #4
 8007c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007c54:	f240 2301 	movw	r3, #513	; 0x201
 8007c58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	2300      	movs	r3, #0
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007c6e:	4b21      	ldr	r3, [pc, #132]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f003 030c 	and.w	r3, r3, #12
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d002      	beq.n	8007c84 <HAL_RCC_GetSysClockFreq+0x40>
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	d003      	beq.n	8007c8a <HAL_RCC_GetSysClockFreq+0x46>
 8007c82:	e02b      	b.n	8007cdc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c84:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007c86:	623b      	str	r3, [r7, #32]
      break;
 8007c88:	e02b      	b.n	8007ce2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	0c9b      	lsrs	r3, r3, #18
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	3328      	adds	r3, #40	; 0x28
 8007c94:	443b      	add	r3, r7
 8007c96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007c9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d012      	beq.n	8007ccc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007ca6:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	0c5b      	lsrs	r3, r3, #17
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	3328      	adds	r3, #40	; 0x28
 8007cb2:	443b      	add	r3, r7
 8007cb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007cb8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	4a0e      	ldr	r2, [pc, #56]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007cbe:	fb03 f202 	mul.w	r2, r3, r2
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	e004      	b.n	8007cd6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4a0b      	ldr	r2, [pc, #44]	; (8007cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	623b      	str	r3, [r7, #32]
      break;
 8007cda:	e002      	b.n	8007ce2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007cde:	623b      	str	r3, [r7, #32]
      break;
 8007ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3728      	adds	r7, #40	; 0x28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc90      	pop	{r4, r7}
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	0800a65c 	.word	0x0800a65c
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	007a1200 	.word	0x007a1200
 8007cfc:	003d0900 	.word	0x003d0900

08007d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d04:	4b02      	ldr	r3, [pc, #8]	; (8007d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d06:	681b      	ldr	r3, [r3, #0]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr
 8007d10:	20000004 	.word	0x20000004

08007d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d18:	f7ff fff2 	bl	8007d00 <HAL_RCC_GetHCLKFreq>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	0a1b      	lsrs	r3, r3, #8
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	4903      	ldr	r1, [pc, #12]	; (8007d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d2a:	5ccb      	ldrb	r3, [r1, r3]
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8007d30:	4618      	mov	r0, r3
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40021000 	.word	0x40021000
 8007d38:	0800ad00 	.word	0x0800ad00

08007d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d40:	f7ff ffde 	bl	8007d00 <HAL_RCC_GetHCLKFreq>
 8007d44:	4602      	mov	r2, r0
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	0adb      	lsrs	r3, r3, #11
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	4903      	ldr	r1, [pc, #12]	; (8007d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d52:	5ccb      	ldrb	r3, [r1, r3]
 8007d54:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8007d58:	4618      	mov	r0, r3
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40021000 	.word	0x40021000
 8007d60:	0800ad00 	.word	0x0800ad00

08007d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <RCC_Delay+0x38>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0b      	ldr	r2, [pc, #44]	; (8007da0 <RCC_Delay+0x3c>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	0a5b      	lsrs	r3, r3, #9
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	fb02 f303 	mul.w	r3, r2, r3
 8007d7e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8007d80:	bf00      	nop
}
 8007d82:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	1e5a      	subs	r2, r3, #1
 8007d88:	60fa      	str	r2, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f8      	bne.n	8007d80 <RCC_Delay+0x1c>
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20000004 	.word	0x20000004
 8007da0:	10624dd3 	.word	0x10624dd3

08007da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d07d      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dc4:	4b4f      	ldr	r3, [pc, #316]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10d      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007dd0:	4b4c      	ldr	r3, [pc, #304]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	4a4b      	ldr	r2, [pc, #300]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dda:	61d3      	str	r3, [r2, #28]
 8007ddc:	4b49      	ldr	r3, [pc, #292]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de4:	60bb      	str	r3, [r7, #8]
 8007de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007de8:	2301      	movs	r3, #1
 8007dea:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dec:	4b46      	ldr	r3, [pc, #280]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d118      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007df8:	4b43      	ldr	r3, [pc, #268]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a42      	ldr	r2, [pc, #264]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e04:	f7fe fd68 	bl	80068d8 <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e0a:	e008      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e0c:	f7fe fd64 	bl	80068d8 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b64      	cmp	r3, #100	; 0x64
 8007e18:	d901      	bls.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e06d      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e1e:	4b3a      	ldr	r3, [pc, #232]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e2a:	4b36      	ldr	r3, [pc, #216]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e32:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d02e      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d027      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e48:	4b2e      	ldr	r3, [pc, #184]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e52:	4b2e      	ldr	r3, [pc, #184]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e58:	4b2c      	ldr	r3, [pc, #176]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007e5e:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d014      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e6e:	f7fe fd33 	bl	80068d8 <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e74:	e00a      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e76:	f7fe fd2f 	bl	80068d8 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d901      	bls.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e036      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e8c:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0ee      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007e98:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	4917      	ldr	r1, [pc, #92]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d105      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007eb0:	4b14      	ldr	r3, [pc, #80]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4a13      	ldr	r2, [pc, #76]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ec8:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	490b      	ldr	r1, [pc, #44]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ee6:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	4904      	ldr	r1, [pc, #16]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40021000 	.word	0x40021000
 8007f08:	40007000 	.word	0x40007000
 8007f0c:	42420440 	.word	0x42420440

08007f10 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e034      	b.n	8007f90 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7fa f93a 	bl	80021b4 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3308      	adds	r3, #8
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f001 fd00 	bl	8009950 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	f001 fd78 	bl	8009a50 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6858      	ldr	r0, [r3, #4]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	f001 fda3 	bl	8009ab8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	6892      	ldr	r2, [r2, #8]
 8007f7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	6892      	ldr	r2, [r2, #8]
 8007f86:	f041 0101 	orr.w	r1, r1, #1
 8007f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e01d      	b.n	8007fe6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fd fee4 	bl	8005d8c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f000 fbe0 	bl	800879c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6a1a      	ldr	r2, [r3, #32]
 8008038:	f241 1311 	movw	r3, #4369	; 0x1111
 800803c:	4013      	ands	r3, r2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10f      	bne.n	8008062 <HAL_TIM_Base_Stop+0x40>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6a1a      	ldr	r2, [r3, #32]
 8008048:	f240 4344 	movw	r3, #1092	; 0x444
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d107      	bne.n	8008062 <HAL_TIM_Base_Stop+0x40>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr

08008076 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0201 	orr.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr

080080aa <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10f      	bne.n	80080f2 <HAL_TIM_Base_Stop_IT+0x48>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	f240 4344 	movw	r3, #1092	; 0x444
 80080dc:	4013      	ands	r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d107      	bne.n	80080f2 <HAL_TIM_Base_Stop_IT+0x48>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 0201 	bic.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e01d      	b.n	800814c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d106      	bne.n	800812a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f815 	bl	8008154 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3304      	adds	r3, #4
 800813a:	4619      	mov	r1, r3
 800813c:	4610      	mov	r0, r2
 800813e:	f000 fb2d 	bl	800879c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr
	...

08008168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2201      	movs	r2, #1
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fdf5 	bl	8008d6a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a10      	ldr	r2, [pc, #64]	; (80081c8 <HAL_TIM_PWM_Start+0x60>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_TIM_PWM_Start+0x2c>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a0f      	ldr	r2, [pc, #60]	; (80081cc <HAL_TIM_PWM_Start+0x64>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d101      	bne.n	8008198 <HAL_TIM_PWM_Start+0x30>
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <HAL_TIM_PWM_Start+0x32>
 8008198:	2300      	movs	r3, #0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0201 	orr.w	r2, r2, #1
 80081bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40013400 	.word	0x40013400

080081d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d122      	bne.n	800822c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d11b      	bne.n	800822c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0202 	mvn.w	r2, #2
 80081fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 faa7 	bl	8008766 <HAL_TIM_IC_CaptureCallback>
 8008218:	e005      	b.n	8008226 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa9a 	bl	8008754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 faa9 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b04      	cmp	r3, #4
 8008238:	d122      	bne.n	8008280 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b04      	cmp	r3, #4
 8008246:	d11b      	bne.n	8008280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f06f 0204 	mvn.w	r2, #4
 8008250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2202      	movs	r2, #2
 8008256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa7d 	bl	8008766 <HAL_TIM_IC_CaptureCallback>
 800826c:	e005      	b.n	800827a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa70 	bl	8008754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fa7f 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b08      	cmp	r3, #8
 800828c:	d122      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b08      	cmp	r3, #8
 800829a:	d11b      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f06f 0208 	mvn.w	r2, #8
 80082a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2204      	movs	r2, #4
 80082aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa53 	bl	8008766 <HAL_TIM_IC_CaptureCallback>
 80082c0:	e005      	b.n	80082ce <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa46 	bl	8008754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fa55 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d122      	bne.n	8008328 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b10      	cmp	r3, #16
 80082ee:	d11b      	bne.n	8008328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0210 	mvn.w	r2, #16
 80082f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2208      	movs	r2, #8
 80082fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa29 	bl	8008766 <HAL_TIM_IC_CaptureCallback>
 8008314:	e005      	b.n	8008322 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa1c 	bl	8008754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fa2b 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	d10e      	bne.n	8008354 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b01      	cmp	r3, #1
 8008342:	d107      	bne.n	8008354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0201 	mvn.w	r2, #1
 800834c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f9f7 	bl	8008742 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835e:	2b80      	cmp	r3, #128	; 0x80
 8008360:	d10e      	bne.n	8008380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836c:	2b80      	cmp	r3, #128	; 0x80
 800836e:	d107      	bne.n	8008380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008378:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fdbc 	bl	8008ef8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838a:	2b40      	cmp	r3, #64	; 0x40
 800838c:	d10e      	bne.n	80083ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008398:	2b40      	cmp	r3, #64	; 0x40
 800839a:	d107      	bne.n	80083ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9ef 	bl	800878a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d10e      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d107      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f06f 0220 	mvn.w	r2, #32
 80083d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd87 	bl	8008ee6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e0b4      	b.n	8008564 <HAL_TIM_PWM_ConfigChannel+0x184>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b0c      	cmp	r3, #12
 800840e:	f200 809f 	bhi.w	8008550 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	0800844d 	.word	0x0800844d
 800841c:	08008551 	.word	0x08008551
 8008420:	08008551 	.word	0x08008551
 8008424:	08008551 	.word	0x08008551
 8008428:	0800848d 	.word	0x0800848d
 800842c:	08008551 	.word	0x08008551
 8008430:	08008551 	.word	0x08008551
 8008434:	08008551 	.word	0x08008551
 8008438:	080084cf 	.word	0x080084cf
 800843c:	08008551 	.word	0x08008551
 8008440:	08008551 	.word	0x08008551
 8008444:	08008551 	.word	0x08008551
 8008448:	0800850f 	.word	0x0800850f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fa20 	bl	8008898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699a      	ldr	r2, [r3, #24]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0208 	orr.w	r2, r2, #8
 8008466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0204 	bic.w	r2, r2, #4
 8008476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6999      	ldr	r1, [r3, #24]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	619a      	str	r2, [r3, #24]
    }
    break;
 800848a:	e062      	b.n	8008552 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fa76 	bl	8008984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	699a      	ldr	r2, [r3, #24]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6999      	ldr	r1, [r3, #24]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	021a      	lsls	r2, r3, #8
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	619a      	str	r2, [r3, #24]
    }
    break;
 80084cc:	e041      	b.n	8008552 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 facf 	bl	8008a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69da      	ldr	r2, [r3, #28]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f042 0208 	orr.w	r2, r2, #8
 80084e8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0204 	bic.w	r2, r2, #4
 80084f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69d9      	ldr	r1, [r3, #28]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	61da      	str	r2, [r3, #28]
    }
    break;
 800850c:	e021      	b.n	8008552 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fb29 	bl	8008b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69da      	ldr	r2, [r3, #28]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008528:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69d9      	ldr	r1, [r3, #28]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	021a      	lsls	r2, r3, #8
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	61da      	str	r2, [r3, #28]
    }
    break;
 800854e:	e000      	b.n	8008552 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8008550:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_TIM_ConfigClockSource+0x1c>
 8008584:	2302      	movs	r3, #2
 8008586:	e0d8      	b.n	800873a <HAL_TIM_ConfigClockSource+0x1ce>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c0:	d052      	beq.n	8008668 <HAL_TIM_ConfigClockSource+0xfc>
 80085c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c6:	f200 80ae 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 80085ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ce:	d027      	beq.n	8008620 <HAL_TIM_ConfigClockSource+0xb4>
 80085d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d4:	f200 80a7 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 80085d8:	2b70      	cmp	r3, #112	; 0x70
 80085da:	d02a      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0xc6>
 80085dc:	2b70      	cmp	r3, #112	; 0x70
 80085de:	f200 80a2 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 80085e2:	2b60      	cmp	r3, #96	; 0x60
 80085e4:	d063      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x142>
 80085e6:	2b60      	cmp	r3, #96	; 0x60
 80085e8:	f200 809d 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 80085ec:	2b50      	cmp	r3, #80	; 0x50
 80085ee:	d04e      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x122>
 80085f0:	2b50      	cmp	r3, #80	; 0x50
 80085f2:	f200 8098 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 80085f6:	2b40      	cmp	r3, #64	; 0x40
 80085f8:	d069      	beq.n	80086ce <HAL_TIM_ConfigClockSource+0x162>
 80085fa:	2b40      	cmp	r3, #64	; 0x40
 80085fc:	f200 8093 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 8008600:	2b30      	cmp	r3, #48	; 0x30
 8008602:	f000 8089 	beq.w	8008718 <HAL_TIM_ConfigClockSource+0x1ac>
 8008606:	2b30      	cmp	r3, #48	; 0x30
 8008608:	f200 808d 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 800860c:	2b20      	cmp	r3, #32
 800860e:	d07c      	beq.n	800870a <HAL_TIM_ConfigClockSource+0x19e>
 8008610:	2b20      	cmp	r3, #32
 8008612:	f200 8088 	bhi.w	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d069      	beq.n	80086ee <HAL_TIM_ConfigClockSource+0x182>
 800861a:	2b10      	cmp	r3, #16
 800861c:	d06e      	beq.n	80086fc <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800861e:	e082      	b.n	8008726 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689a      	ldr	r2, [r3, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0207 	bic.w	r2, r2, #7
 800862e:	609a      	str	r2, [r3, #8]
    break;
 8008630:	e07a      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	6899      	ldr	r1, [r3, #8]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f000 fb71 	bl	8008d28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008654:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800865c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	609a      	str	r2, [r3, #8]
    break;
 8008666:	e05f      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	6899      	ldr	r1, [r3, #8]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f000 fb56 	bl	8008d28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800868a:	609a      	str	r2, [r3, #8]
    break;
 800868c:	e04c      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6859      	ldr	r1, [r3, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	461a      	mov	r2, r3
 800869c:	f000 fac0 	bl	8008c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2150      	movs	r1, #80	; 0x50
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fb1f 	bl	8008cea <TIM_ITRx_SetConfig>
    break;
 80086ac:	e03c      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6859      	ldr	r1, [r3, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f000 fae2 	bl	8008c84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2160      	movs	r1, #96	; 0x60
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fb0f 	bl	8008cea <TIM_ITRx_SetConfig>
    break;
 80086cc:	e02c      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	6859      	ldr	r1, [r3, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	461a      	mov	r2, r3
 80086dc:	f000 faa0 	bl	8008c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2140      	movs	r1, #64	; 0x40
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 faff 	bl	8008cea <TIM_ITRx_SetConfig>
    break;
 80086ec:	e01c      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2100      	movs	r1, #0
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 faf8 	bl	8008cea <TIM_ITRx_SetConfig>
    break;
 80086fa:	e015      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2110      	movs	r1, #16
 8008702:	4618      	mov	r0, r3
 8008704:	f000 faf1 	bl	8008cea <TIM_ITRx_SetConfig>
    break;
 8008708:	e00e      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2120      	movs	r1, #32
 8008710:	4618      	mov	r0, r3
 8008712:	f000 faea 	bl	8008cea <TIM_ITRx_SetConfig>
    break;
 8008716:	e007      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2130      	movs	r1, #48	; 0x30
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fae3 	bl	8008cea <TIM_ITRx_SetConfig>
    break;
 8008724:	e000      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8008726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr

08008754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	bc80      	pop	{r7}
 8008788:	4770      	bx	lr

0800878a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a34      	ldr	r2, [pc, #208]	; (8008884 <TIM_Base_SetConfig+0xe8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d013      	beq.n	80087e0 <TIM_Base_SetConfig+0x44>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a33      	ldr	r2, [pc, #204]	; (8008888 <TIM_Base_SetConfig+0xec>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00f      	beq.n	80087e0 <TIM_Base_SetConfig+0x44>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c6:	d00b      	beq.n	80087e0 <TIM_Base_SetConfig+0x44>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a30      	ldr	r2, [pc, #192]	; (800888c <TIM_Base_SetConfig+0xf0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d007      	beq.n	80087e0 <TIM_Base_SetConfig+0x44>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a2f      	ldr	r2, [pc, #188]	; (8008890 <TIM_Base_SetConfig+0xf4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d003      	beq.n	80087e0 <TIM_Base_SetConfig+0x44>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a2e      	ldr	r2, [pc, #184]	; (8008894 <TIM_Base_SetConfig+0xf8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d108      	bne.n	80087f2 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a23      	ldr	r2, [pc, #140]	; (8008884 <TIM_Base_SetConfig+0xe8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <TIM_Base_SetConfig+0x86>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a22      	ldr	r2, [pc, #136]	; (8008888 <TIM_Base_SetConfig+0xec>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_Base_SetConfig+0x86>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008808:	d00b      	beq.n	8008822 <TIM_Base_SetConfig+0x86>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1f      	ldr	r2, [pc, #124]	; (800888c <TIM_Base_SetConfig+0xf0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_Base_SetConfig+0x86>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <TIM_Base_SetConfig+0xf4>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_Base_SetConfig+0x86>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <TIM_Base_SetConfig+0xf8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d108      	bne.n	8008834 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800883a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <TIM_Base_SetConfig+0xe8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <TIM_Base_SetConfig+0xd0>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a08      	ldr	r2, [pc, #32]	; (8008888 <TIM_Base_SetConfig+0xec>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d103      	bne.n	8008874 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	615a      	str	r2, [r3, #20]
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr
 8008884:	40012c00 	.word	0x40012c00
 8008888:	40013400 	.word	0x40013400
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00

08008898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	f023 0201 	bic.w	r2, r3, #1
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f023 0302 	bic.w	r3, r3, #2
 80088ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a20      	ldr	r2, [pc, #128]	; (800897c <TIM_OC1_SetConfig+0xe4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_OC1_SetConfig+0x70>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <TIM_OC1_SetConfig+0xe8>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d10c      	bne.n	8008922 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f023 0308 	bic.w	r3, r3, #8
 800890e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f023 0304 	bic.w	r3, r3, #4
 8008920:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a15      	ldr	r2, [pc, #84]	; (800897c <TIM_OC1_SetConfig+0xe4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_OC1_SetConfig+0x9a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a14      	ldr	r2, [pc, #80]	; (8008980 <TIM_OC1_SetConfig+0xe8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d111      	bne.n	8008956 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	621a      	str	r2, [r3, #32]
}
 8008970:	bf00      	nop
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40012c00 	.word	0x40012c00
 8008980:	40013400 	.word	0x40013400

08008984 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f023 0210 	bic.w	r2, r3, #16
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f023 0320 	bic.w	r3, r3, #32
 80089da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a21      	ldr	r2, [pc, #132]	; (8008a70 <TIM_OC2_SetConfig+0xec>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_OC2_SetConfig+0x74>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <TIM_OC2_SetConfig+0xf0>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d10d      	bne.n	8008a14 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a12:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a16      	ldr	r2, [pc, #88]	; (8008a70 <TIM_OC2_SetConfig+0xec>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_OC2_SetConfig+0xa0>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a15      	ldr	r2, [pc, #84]	; (8008a74 <TIM_OC2_SetConfig+0xf0>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d113      	bne.n	8008a4c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr
 8008a70:	40012c00 	.word	0x40012c00
 8008a74:	40013400 	.word	0x40013400

08008a78 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a21      	ldr	r2, [pc, #132]	; (8008b64 <TIM_OC3_SetConfig+0xec>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_OC3_SetConfig+0x72>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a20      	ldr	r2, [pc, #128]	; (8008b68 <TIM_OC3_SetConfig+0xf0>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d10d      	bne.n	8008b06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b04:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a16      	ldr	r2, [pc, #88]	; (8008b64 <TIM_OC3_SetConfig+0xec>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d003      	beq.n	8008b16 <TIM_OC3_SetConfig+0x9e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a15      	ldr	r2, [pc, #84]	; (8008b68 <TIM_OC3_SetConfig+0xf0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d113      	bne.n	8008b3e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	621a      	str	r2, [r3, #32]
}
 8008b58:	bf00      	nop
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40012c00 	.word	0x40012c00
 8008b68:	40013400 	.word	0x40013400

08008b6c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bae:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	021b      	lsls	r3, r3, #8
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bc2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	031b      	lsls	r3, r3, #12
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a11      	ldr	r2, [pc, #68]	; (8008c18 <TIM_OC4_SetConfig+0xac>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_OC4_SetConfig+0x74>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a10      	ldr	r2, [pc, #64]	; (8008c1c <TIM_OC4_SetConfig+0xb0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d109      	bne.n	8008bf4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	019b      	lsls	r3, r3, #6
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr
 8008c18:	40012c00 	.word	0x40012c00
 8008c1c:	40013400 	.word	0x40013400

08008c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f023 0201 	bic.w	r2, r3, #1
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f023 030a 	bic.w	r3, r3, #10
 8008c64:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	f023 0210 	bic.w	r2, r3, #16
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	031b      	lsls	r3, r3, #12
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	621a      	str	r2, [r3, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bc80      	pop	{r7}
 8008ce8:	4770      	bx	lr

08008cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008d08:	887b      	ldrh	r3, [r7, #2]
 8008d0a:	f043 0307 	orr.w	r3, r3, #7
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	609a      	str	r2, [r3, #8]
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bc80      	pop	{r7}
 8008d26:	4770      	bx	lr

08008d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	021a      	lsls	r2, r3, #8
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	609a      	str	r2, [r3, #8]
}
 8008d60:	bf00      	nop
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr

08008d6a <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b087      	sub	sp, #28
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a1a      	ldr	r2, [r3, #32]
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	401a      	ands	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6a1a      	ldr	r2, [r3, #32]
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	621a      	str	r2, [r3, #32]
}
 8008da4:	bf00      	nop
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bc80      	pop	{r7}
 8008dac:	4770      	bx	lr

08008dae <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e044      	b.n	8008e54 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr

08008e5e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e032      	b.n	8008edc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2202      	movs	r2, #2
 8008e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e94:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6859      	ldr	r1, [r3, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008eb6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6899      	ldr	r1, [r3, #8]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8008eee:	bf00      	nop
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bc80      	pop	{r7}
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr

08008f0a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e03f      	b.n	8008f9c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7fd f8ad 	bl	8006090 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2224      	movs	r2, #36	; 0x24
 8008f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f4c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fbe6 	bl	8009720 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	695a      	ldr	r2, [r3, #20]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f72:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f82:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	f040 8083 	bne.w	80090cc <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <HAL_UART_Transmit+0x2e>
 8008fcc:	88fb      	ldrh	r3, [r7, #6]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e07b      	b.n	80090ce <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d101      	bne.n	8008fe4 <HAL_UART_Transmit+0x40>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	e074      	b.n	80090ce <HAL_UART_Transmit+0x12a>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2221      	movs	r2, #33	; 0x21
 8008ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008ffa:	f7fd fc6d 	bl	80068d8 <HAL_GetTick>
 8008ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	88fa      	ldrh	r2, [r7, #6]
 800900a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800900c:	e042      	b.n	8009094 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009024:	d122      	bne.n	800906c <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2200      	movs	r2, #0
 800902e:	2180      	movs	r1, #128	; 0x80
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fa0c 	bl	800944e <UART_WaitOnFlagUntilTimeout>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e046      	b.n	80090ce <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009052:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	3302      	adds	r3, #2
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	e017      	b.n	8009094 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	3301      	adds	r3, #1
 8009068:	60bb      	str	r3, [r7, #8]
 800906a:	e013      	b.n	8009094 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2200      	movs	r2, #0
 8009074:	2180      	movs	r1, #128	; 0x80
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f9e9 	bl	800944e <UART_WaitOnFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e023      	b.n	80090ce <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	60ba      	str	r2, [r7, #8]
 800908c:	781a      	ldrb	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1b7      	bne.n	800900e <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2200      	movs	r2, #0
 80090a6:	2140      	movs	r1, #64	; 0x40
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f9d0 	bl	800944e <UART_WaitOnFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e00a      	b.n	80090ce <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e000      	b.n	80090ce <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
  }
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b088      	sub	sp, #32
 80090da:	af02      	add	r7, sp, #8
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	603b      	str	r3, [r7, #0]
 80090e2:	4613      	mov	r3, r2
 80090e4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	f040 8090 	bne.w	8009218 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <HAL_UART_Receive+0x2e>
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e088      	b.n	800921a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800910e:	2b01      	cmp	r3, #1
 8009110:	d101      	bne.n	8009116 <HAL_UART_Receive+0x40>
 8009112:	2302      	movs	r3, #2
 8009114:	e081      	b.n	800921a <HAL_UART_Receive+0x144>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2222      	movs	r2, #34	; 0x22
 8009128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800912c:	f7fd fbd4 	bl	80068d8 <HAL_GetTick>
 8009130:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	88fa      	ldrh	r2, [r7, #6]
 800913c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800913e:	e05c      	b.n	80091fa <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009156:	d12b      	bne.n	80091b0 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2200      	movs	r2, #0
 8009160:	2120      	movs	r1, #32
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 f973 	bl	800944e <UART_WaitOnFlagUntilTimeout>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e053      	b.n	800921a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10c      	bne.n	8009198 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	b29b      	uxth	r3, r3
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	b29a      	uxth	r2, r3
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3302      	adds	r3, #2
 8009194:	60bb      	str	r3, [r7, #8]
 8009196:	e030      	b.n	80091fa <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	e024      	b.n	80091fa <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2200      	movs	r2, #0
 80091b8:	2120      	movs	r1, #32
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f947 	bl	800944e <UART_WaitOnFlagUntilTimeout>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e027      	b.n	800921a <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d108      	bne.n	80091e4 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6859      	ldr	r1, [r3, #4]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	60ba      	str	r2, [r7, #8]
 80091de:	b2ca      	uxtb	r2, r1
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e00a      	b.n	80091fa <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	1c59      	adds	r1, r3, #1
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d19d      	bne.n	8009140 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	e000      	b.n	800921a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009218:	2302      	movs	r3, #2
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10d      	bne.n	8009276 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <HAL_UART_IRQHandler+0x52>
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f9d5 	bl	800961e <UART_Receive_IT>
      return;
 8009274:	e0cb      	b.n	800940e <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80ab 	beq.w	80093d4 <HAL_UART_IRQHandler+0x1b0>
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d105      	bne.n	8009294 <HAL_UART_IRQHandler+0x70>
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80a0 	beq.w	80093d4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <HAL_UART_IRQHandler+0x90>
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ac:	f043 0201 	orr.w	r2, r3, #1
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	f003 0304 	and.w	r3, r3, #4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <HAL_UART_IRQHandler+0xb0>
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	f043 0202 	orr.w	r2, r3, #2
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <HAL_UART_IRQHandler+0xd0>
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ec:	f043 0204 	orr.w	r2, r3, #4
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f003 0308 	and.w	r3, r3, #8
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <HAL_UART_IRQHandler+0xf0>
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930c:	f043 0208 	orr.w	r2, r3, #8
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009318:	2b00      	cmp	r3, #0
 800931a:	d077      	beq.n	800940c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d007      	beq.n	8009336 <HAL_UART_IRQHandler+0x112>
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f974 	bl	800961e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009340:	2b00      	cmp	r3, #0
 8009342:	bf14      	ite	ne
 8009344:	2301      	movne	r3, #1
 8009346:	2300      	moveq	r3, #0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <HAL_UART_IRQHandler+0x13a>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d031      	beq.n	80093c2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f8bf 	bl	80094e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d023      	beq.n	80093ba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695a      	ldr	r2, [r3, #20]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009380:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009386:	2b00      	cmp	r3, #0
 8009388:	d013      	beq.n	80093b2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	4a21      	ldr	r2, [pc, #132]	; (8009414 <HAL_UART_IRQHandler+0x1f0>)
 8009390:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009396:	4618      	mov	r0, r3
 8009398:	f7fd fdf2 	bl	8006f80 <HAL_DMA_Abort_IT>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d016      	beq.n	80093d0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b0:	e00e      	b.n	80093d0 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f842 	bl	800943c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b8:	e00a      	b.n	80093d0 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f83e 	bl	800943c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c0:	e006      	b.n	80093d0 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f83a 	bl	800943c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80093ce:	e01d      	b.n	800940c <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d0:	bf00      	nop
    return;
 80093d2:	e01b      	b.n	800940c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d008      	beq.n	80093f0 <HAL_UART_IRQHandler+0x1cc>
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8ab 	bl	8009544 <UART_Transmit_IT>
    return;
 80093ee:	e00e      	b.n	800940e <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <HAL_UART_IRQHandler+0x1ea>
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f8f2 	bl	80095ee <UART_EndTransmit_IT>
    return;
 800940a:	e000      	b.n	800940e <HAL_UART_IRQHandler+0x1ea>
    return;
 800940c:	bf00      	nop
  }
}
 800940e:	3720      	adds	r7, #32
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	0800951d 	.word	0x0800951d

08009418 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr

0800942a <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	bc80      	pop	{r7}
 800943a:	4770      	bx	lr

0800943c <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr

0800944e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	4613      	mov	r3, r2
 800945c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800945e:	e02c      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009466:	d028      	beq.n	80094ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d007      	beq.n	800947e <UART_WaitOnFlagUntilTimeout+0x30>
 800946e:	f7fd fa33 	bl	80068d8 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	429a      	cmp	r2, r3
 800947c:	d21d      	bcs.n	80094ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800948c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	695a      	ldr	r2, [r3, #20]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0201 	bic.w	r2, r2, #1
 800949c:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e00f      	b.n	80094da <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	4013      	ands	r3, r2
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	bf0c      	ite	eq
 80094ca:	2301      	moveq	r3, #1
 80094cc:	2300      	movne	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d0c3      	beq.n	8009460 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695a      	ldr	r2, [r3, #20]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	bc80      	pop	{r7}
 800951a:	4770      	bx	lr

0800951c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff ff80 	bl	800943c <HAL_UART_ErrorCallback>
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b21      	cmp	r3, #33	; 0x21
 8009556:	d144      	bne.n	80095e2 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009560:	d11a      	bne.n	8009598 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009576:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d105      	bne.n	800958c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	1c9a      	adds	r2, r3, #2
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	621a      	str	r2, [r3, #32]
 800958a:	e00e      	b.n	80095aa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	621a      	str	r2, [r3, #32]
 8009596:	e008      	b.n	80095aa <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a1b      	ldr	r3, [r3, #32]
 800959c:	1c59      	adds	r1, r3, #1
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6211      	str	r1, [r2, #32]
 80095a2:	781a      	ldrb	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	4619      	mov	r1, r3
 80095b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10f      	bne.n	80095de <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68da      	ldr	r2, [r3, #12]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	e000      	b.n	80095e4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80095e2:	2302      	movs	r3, #2
  }
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr

080095ee <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009604:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff ff02 	bl	8009418 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b22      	cmp	r3, #34	; 0x22
 8009630:	d171      	bne.n	8009716 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963a:	d123      	bne.n	8009684 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10e      	bne.n	8009668 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	b29b      	uxth	r3, r3
 8009652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	1c9a      	adds	r2, r3, #2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	629a      	str	r2, [r3, #40]	; 0x28
 8009666:	e029      	b.n	80096bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	b29b      	uxth	r3, r3
 8009670:	b2db      	uxtb	r3, r3
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	629a      	str	r2, [r3, #40]	; 0x28
 8009682:	e01b      	b.n	80096bc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6858      	ldr	r0, [r3, #4]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009696:	1c59      	adds	r1, r3, #1
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6291      	str	r1, [r2, #40]	; 0x28
 800969c:	b2c2      	uxtb	r2, r0
 800969e:	701a      	strb	r2, [r3, #0]
 80096a0:	e00c      	b.n	80096bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	1c58      	adds	r0, r3, #1
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	6288      	str	r0, [r1, #40]	; 0x28
 80096b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4619      	mov	r1, r3
 80096ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d120      	bne.n	8009712 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0220 	bic.w	r2, r2, #32
 80096de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096ee:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	695a      	ldr	r2, [r3, #20]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2220      	movs	r2, #32
 8009704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fe8e 	bl	800942a <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	e002      	b.n	8009718 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	e000      	b.n	8009718 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009716:	2302      	movs	r3, #2
  }
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009720:	b5b0      	push	{r4, r5, r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	431a      	orrs	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	4313      	orrs	r3, r2
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009762:	f023 030c 	bic.w	r3, r3, #12
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	430b      	orrs	r3, r1
 800976e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	699a      	ldr	r2, [r3, #24]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a6f      	ldr	r2, [pc, #444]	; (8009948 <UART_SetConfig+0x228>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d16b      	bne.n	8009868 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009790:	f7fe fad4 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 8009794:	4602      	mov	r2, r0
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	009a      	lsls	r2, r3, #2
 800979e:	441a      	add	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097aa:	4a68      	ldr	r2, [pc, #416]	; (800994c <UART_SetConfig+0x22c>)
 80097ac:	fba2 2303 	umull	r2, r3, r2, r3
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	011c      	lsls	r4, r3, #4
 80097b4:	f7fe fac2 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 80097b8:	4602      	mov	r2, r0
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009a      	lsls	r2, r3, #2
 80097c2:	441a      	add	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80097ce:	f7fe fab5 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 80097d2:	4602      	mov	r2, r0
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	009a      	lsls	r2, r3, #2
 80097dc:	441a      	add	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e8:	4a58      	ldr	r2, [pc, #352]	; (800994c <UART_SetConfig+0x22c>)
 80097ea:	fba2 2303 	umull	r2, r3, r2, r3
 80097ee:	095b      	lsrs	r3, r3, #5
 80097f0:	2264      	movs	r2, #100	; 0x64
 80097f2:	fb02 f303 	mul.w	r3, r2, r3
 80097f6:	1aeb      	subs	r3, r5, r3
 80097f8:	011b      	lsls	r3, r3, #4
 80097fa:	3332      	adds	r3, #50	; 0x32
 80097fc:	4a53      	ldr	r2, [pc, #332]	; (800994c <UART_SetConfig+0x22c>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	095b      	lsrs	r3, r3, #5
 8009804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009808:	441c      	add	r4, r3
 800980a:	f7fe fa97 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 800980e:	4602      	mov	r2, r0
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009a      	lsls	r2, r3, #2
 8009818:	441a      	add	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	fbb2 f5f3 	udiv	r5, r2, r3
 8009824:	f7fe fa8a 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 8009828:	4602      	mov	r2, r0
 800982a:	4613      	mov	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	009a      	lsls	r2, r3, #2
 8009832:	441a      	add	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	fbb2 f3f3 	udiv	r3, r2, r3
 800983e:	4a43      	ldr	r2, [pc, #268]	; (800994c <UART_SetConfig+0x22c>)
 8009840:	fba2 2303 	umull	r2, r3, r2, r3
 8009844:	095b      	lsrs	r3, r3, #5
 8009846:	2264      	movs	r2, #100	; 0x64
 8009848:	fb02 f303 	mul.w	r3, r2, r3
 800984c:	1aeb      	subs	r3, r5, r3
 800984e:	011b      	lsls	r3, r3, #4
 8009850:	3332      	adds	r3, #50	; 0x32
 8009852:	4a3e      	ldr	r2, [pc, #248]	; (800994c <UART_SetConfig+0x22c>)
 8009854:	fba2 2303 	umull	r2, r3, r2, r3
 8009858:	095b      	lsrs	r3, r3, #5
 800985a:	f003 020f 	and.w	r2, r3, #15
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4422      	add	r2, r4
 8009864:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009866:	e06a      	b.n	800993e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009868:	f7fe fa54 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 800986c:	4602      	mov	r2, r0
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009a      	lsls	r2, r3, #2
 8009876:	441a      	add	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009882:	4a32      	ldr	r2, [pc, #200]	; (800994c <UART_SetConfig+0x22c>)
 8009884:	fba2 2303 	umull	r2, r3, r2, r3
 8009888:	095b      	lsrs	r3, r3, #5
 800988a:	011c      	lsls	r4, r3, #4
 800988c:	f7fe fa42 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 8009890:	4602      	mov	r2, r0
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009a      	lsls	r2, r3, #2
 800989a:	441a      	add	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80098a6:	f7fe fa35 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 80098aa:	4602      	mov	r2, r0
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009a      	lsls	r2, r3, #2
 80098b4:	441a      	add	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c0:	4a22      	ldr	r2, [pc, #136]	; (800994c <UART_SetConfig+0x22c>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	2264      	movs	r2, #100	; 0x64
 80098ca:	fb02 f303 	mul.w	r3, r2, r3
 80098ce:	1aeb      	subs	r3, r5, r3
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	3332      	adds	r3, #50	; 0x32
 80098d4:	4a1d      	ldr	r2, [pc, #116]	; (800994c <UART_SetConfig+0x22c>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098e0:	441c      	add	r4, r3
 80098e2:	f7fe fa17 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 80098e6:	4602      	mov	r2, r0
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009a      	lsls	r2, r3, #2
 80098f0:	441a      	add	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80098fc:	f7fe fa0a 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 8009900:	4602      	mov	r2, r0
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009a      	lsls	r2, r3, #2
 800990a:	441a      	add	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	fbb2 f3f3 	udiv	r3, r2, r3
 8009916:	4a0d      	ldr	r2, [pc, #52]	; (800994c <UART_SetConfig+0x22c>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	095b      	lsrs	r3, r3, #5
 800991e:	2264      	movs	r2, #100	; 0x64
 8009920:	fb02 f303 	mul.w	r3, r2, r3
 8009924:	1aeb      	subs	r3, r5, r3
 8009926:	011b      	lsls	r3, r3, #4
 8009928:	3332      	adds	r3, #50	; 0x32
 800992a:	4a08      	ldr	r2, [pc, #32]	; (800994c <UART_SetConfig+0x22c>)
 800992c:	fba2 2303 	umull	r2, r3, r2, r3
 8009930:	095b      	lsrs	r3, r3, #5
 8009932:	f003 020f 	and.w	r2, r3, #15
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4422      	add	r2, r4
 800993c:	609a      	str	r2, [r3, #8]
}
 800993e:	bf00      	nop
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bdb0      	pop	{r4, r5, r7, pc}
 8009946:	bf00      	nop
 8009948:	40013800 	.word	0x40013800
 800994c:	51eb851f 	.word	0x51eb851f

08009950 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	6812      	ldr	r2, [r2, #0]
 8009968:	f023 0101 	bic.w	r1, r3, #1
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	2b08      	cmp	r3, #8
 8009978:	d132      	bne.n	80099e0 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009984:	4b31      	ldr	r3, [pc, #196]	; (8009a4c <FSMC_NORSRAM_Init+0xfc>)
 8009986:	4013      	ands	r3, r2
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	6851      	ldr	r1, [r2, #4]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	6892      	ldr	r2, [r2, #8]
 8009990:	4311      	orrs	r1, r2
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	68d2      	ldr	r2, [r2, #12]
 8009996:	4311      	orrs	r1, r2
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	6912      	ldr	r2, [r2, #16]
 800999c:	4311      	orrs	r1, r2
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	6952      	ldr	r2, [r2, #20]
 80099a2:	4311      	orrs	r1, r2
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	6992      	ldr	r2, [r2, #24]
 80099a8:	4311      	orrs	r1, r2
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	69d2      	ldr	r2, [r2, #28]
 80099ae:	4311      	orrs	r1, r2
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	6a12      	ldr	r2, [r2, #32]
 80099b4:	4311      	orrs	r1, r2
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099ba:	4311      	orrs	r1, r2
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80099c0:	4311      	orrs	r1, r2
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099c6:	4311      	orrs	r1, r2
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80099cc:	430a      	orrs	r2, r1
 80099ce:	4313      	orrs	r3, r2
 80099d0:	683a      	ldr	r2, [r7, #0]
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80099de:	e02f      	b.n	8009a40 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80099ea:	4b18      	ldr	r3, [pc, #96]	; (8009a4c <FSMC_NORSRAM_Init+0xfc>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	6851      	ldr	r1, [r2, #4]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	6892      	ldr	r2, [r2, #8]
 80099f6:	4311      	orrs	r1, r2
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	68d2      	ldr	r2, [r2, #12]
 80099fc:	4311      	orrs	r1, r2
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	6912      	ldr	r2, [r2, #16]
 8009a02:	4311      	orrs	r1, r2
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	6952      	ldr	r2, [r2, #20]
 8009a08:	4311      	orrs	r1, r2
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	6992      	ldr	r2, [r2, #24]
 8009a0e:	4311      	orrs	r1, r2
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	69d2      	ldr	r2, [r2, #28]
 8009a14:	4311      	orrs	r1, r2
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	6a12      	ldr	r2, [r2, #32]
 8009a1a:	4311      	orrs	r1, r2
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a20:	4311      	orrs	r1, r2
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009a26:	4311      	orrs	r1, r2
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a2c:	4311      	orrs	r1, r2
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a32:	4311      	orrs	r1, r2
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	6812      	ldr	r2, [r2, #0]
 8009a38:	4319      	orrs	r1, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bc80      	pop	{r7}
 8009a4a:	4770      	bx	lr
 8009a4c:	fff70081 	.word	0xfff70081

08009a50 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a66:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	431a      	orrs	r2, r3
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	021b      	lsls	r3, r3, #8
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	041b      	lsls	r3, r3, #16
 8009a84:	431a      	orrs	r2, r3
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	051b      	lsls	r3, r3, #20
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	695b      	ldr	r3, [r3, #20]
 8009a94:	3b02      	subs	r3, #2
 8009a96:	061b      	lsls	r3, r3, #24
 8009a98:	431a      	orrs	r2, r3
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	4319      	orrs	r1, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009acc:	d11d      	bne.n	8009b0a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ad6:	4b13      	ldr	r3, [pc, #76]	; (8009b24 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	6811      	ldr	r1, [r2, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	6852      	ldr	r2, [r2, #4]
 8009ae2:	0112      	lsls	r2, r2, #4
 8009ae4:	4311      	orrs	r1, r2
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	6892      	ldr	r2, [r2, #8]
 8009aea:	0212      	lsls	r2, r2, #8
 8009aec:	4311      	orrs	r1, r2
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	6992      	ldr	r2, [r2, #24]
 8009af2:	4311      	orrs	r1, r2
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	68d2      	ldr	r2, [r2, #12]
 8009af8:	0412      	lsls	r2, r2, #16
 8009afa:	430a      	orrs	r2, r1
 8009afc:	ea43 0102 	orr.w	r1, r3, r2
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009b08:	e005      	b.n	8009b16 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bc80      	pop	{r7}
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	cff00000 	.word	0xcff00000

08009b28 <__cxa_pure_virtual>:
 8009b28:	b508      	push	{r3, lr}
 8009b2a:	f000 f80d 	bl	8009b48 <_ZSt9terminatev>

08009b2e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009b2e:	b508      	push	{r3, lr}
 8009b30:	4780      	blx	r0
 8009b32:	f000 f80e 	bl	8009b52 <abort>
	...

08009b38 <_ZSt13get_terminatev>:
 8009b38:	4b02      	ldr	r3, [pc, #8]	; (8009b44 <_ZSt13get_terminatev+0xc>)
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	f3bf 8f5b 	dmb	ish
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	20000040 	.word	0x20000040

08009b48 <_ZSt9terminatev>:
 8009b48:	b508      	push	{r3, lr}
 8009b4a:	f7ff fff5 	bl	8009b38 <_ZSt13get_terminatev>
 8009b4e:	f7ff ffee 	bl	8009b2e <_ZN10__cxxabiv111__terminateEPFvvE>

08009b52 <abort>:
 8009b52:	2006      	movs	r0, #6
 8009b54:	b508      	push	{r3, lr}
 8009b56:	f000 f85d 	bl	8009c14 <raise>
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	f7fb feeb 	bl	8005936 <_exit>

08009b60 <__errno>:
 8009b60:	4b01      	ldr	r3, [pc, #4]	; (8009b68 <__errno+0x8>)
 8009b62:	6818      	ldr	r0, [r3, #0]
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	20000044 	.word	0x20000044

08009b6c <__libc_init_array>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	2600      	movs	r6, #0
 8009b70:	4d0c      	ldr	r5, [pc, #48]	; (8009ba4 <__libc_init_array+0x38>)
 8009b72:	4c0d      	ldr	r4, [pc, #52]	; (8009ba8 <__libc_init_array+0x3c>)
 8009b74:	1b64      	subs	r4, r4, r5
 8009b76:	10a4      	asrs	r4, r4, #2
 8009b78:	42a6      	cmp	r6, r4
 8009b7a:	d109      	bne.n	8009b90 <__libc_init_array+0x24>
 8009b7c:	f000 fcf8 	bl	800a570 <_init>
 8009b80:	2600      	movs	r6, #0
 8009b82:	4d0a      	ldr	r5, [pc, #40]	; (8009bac <__libc_init_array+0x40>)
 8009b84:	4c0a      	ldr	r4, [pc, #40]	; (8009bb0 <__libc_init_array+0x44>)
 8009b86:	1b64      	subs	r4, r4, r5
 8009b88:	10a4      	asrs	r4, r4, #2
 8009b8a:	42a6      	cmp	r6, r4
 8009b8c:	d105      	bne.n	8009b9a <__libc_init_array+0x2e>
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}
 8009b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b94:	4798      	blx	r3
 8009b96:	3601      	adds	r6, #1
 8009b98:	e7ee      	b.n	8009b78 <__libc_init_array+0xc>
 8009b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9e:	4798      	blx	r3
 8009ba0:	3601      	adds	r6, #1
 8009ba2:	e7f2      	b.n	8009b8a <__libc_init_array+0x1e>
 8009ba4:	0800ad44 	.word	0x0800ad44
 8009ba8:	0800ad44 	.word	0x0800ad44
 8009bac:	0800ad44 	.word	0x0800ad44
 8009bb0:	0800ad50 	.word	0x0800ad50

08009bb4 <memset>:
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	4402      	add	r2, r0
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d100      	bne.n	8009bbe <memset+0xa>
 8009bbc:	4770      	bx	lr
 8009bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc2:	e7f9      	b.n	8009bb8 <memset+0x4>

08009bc4 <_raise_r>:
 8009bc4:	291f      	cmp	r1, #31
 8009bc6:	b538      	push	{r3, r4, r5, lr}
 8009bc8:	4604      	mov	r4, r0
 8009bca:	460d      	mov	r5, r1
 8009bcc:	d904      	bls.n	8009bd8 <_raise_r+0x14>
 8009bce:	2316      	movs	r3, #22
 8009bd0:	6003      	str	r3, [r0, #0]
 8009bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bda:	b112      	cbz	r2, 8009be2 <_raise_r+0x1e>
 8009bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009be0:	b94b      	cbnz	r3, 8009bf6 <_raise_r+0x32>
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 f830 	bl	8009c48 <_getpid_r>
 8009be8:	462a      	mov	r2, r5
 8009bea:	4601      	mov	r1, r0
 8009bec:	4620      	mov	r0, r4
 8009bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf2:	f000 b817 	b.w	8009c24 <_kill_r>
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d00a      	beq.n	8009c10 <_raise_r+0x4c>
 8009bfa:	1c59      	adds	r1, r3, #1
 8009bfc:	d103      	bne.n	8009c06 <_raise_r+0x42>
 8009bfe:	2316      	movs	r3, #22
 8009c00:	6003      	str	r3, [r0, #0]
 8009c02:	2001      	movs	r0, #1
 8009c04:	e7e7      	b.n	8009bd6 <_raise_r+0x12>
 8009c06:	2400      	movs	r4, #0
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c0e:	4798      	blx	r3
 8009c10:	2000      	movs	r0, #0
 8009c12:	e7e0      	b.n	8009bd6 <_raise_r+0x12>

08009c14 <raise>:
 8009c14:	4b02      	ldr	r3, [pc, #8]	; (8009c20 <raise+0xc>)
 8009c16:	4601      	mov	r1, r0
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	f7ff bfd3 	b.w	8009bc4 <_raise_r>
 8009c1e:	bf00      	nop
 8009c20:	20000044 	.word	0x20000044

08009c24 <_kill_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	2300      	movs	r3, #0
 8009c28:	4d06      	ldr	r5, [pc, #24]	; (8009c44 <_kill_r+0x20>)
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	4611      	mov	r1, r2
 8009c30:	602b      	str	r3, [r5, #0]
 8009c32:	f7fb fe70 	bl	8005916 <_kill>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d102      	bne.n	8009c40 <_kill_r+0x1c>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	b103      	cbz	r3, 8009c40 <_kill_r+0x1c>
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	bd38      	pop	{r3, r4, r5, pc}
 8009c42:	bf00      	nop
 8009c44:	20000a04 	.word	0x20000a04

08009c48 <_getpid_r>:
 8009c48:	f7fb be5e 	b.w	8005908 <_getpid>

08009c4c <siprintf>:
 8009c4c:	b40e      	push	{r1, r2, r3}
 8009c4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c52:	b500      	push	{lr}
 8009c54:	b09c      	sub	sp, #112	; 0x70
 8009c56:	ab1d      	add	r3, sp, #116	; 0x74
 8009c58:	9002      	str	r0, [sp, #8]
 8009c5a:	9006      	str	r0, [sp, #24]
 8009c5c:	9107      	str	r1, [sp, #28]
 8009c5e:	9104      	str	r1, [sp, #16]
 8009c60:	4808      	ldr	r0, [pc, #32]	; (8009c84 <siprintf+0x38>)
 8009c62:	4909      	ldr	r1, [pc, #36]	; (8009c88 <siprintf+0x3c>)
 8009c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c68:	9105      	str	r1, [sp, #20]
 8009c6a:	6800      	ldr	r0, [r0, #0]
 8009c6c:	a902      	add	r1, sp, #8
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	f000 f914 	bl	8009e9c <_svfiprintf_r>
 8009c74:	2200      	movs	r2, #0
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	b01c      	add	sp, #112	; 0x70
 8009c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c80:	b003      	add	sp, #12
 8009c82:	4770      	bx	lr
 8009c84:	20000044 	.word	0x20000044
 8009c88:	ffff0208 	.word	0xffff0208

08009c8c <strcat>:
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	b510      	push	{r4, lr}
 8009c90:	7814      	ldrb	r4, [r2, #0]
 8009c92:	4613      	mov	r3, r2
 8009c94:	3201      	adds	r2, #1
 8009c96:	2c00      	cmp	r4, #0
 8009c98:	d1fa      	bne.n	8009c90 <strcat+0x4>
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ca0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ca4:	2a00      	cmp	r2, #0
 8009ca6:	d1f9      	bne.n	8009c9c <strcat+0x10>
 8009ca8:	bd10      	pop	{r4, pc}

08009caa <strcpy>:
 8009caa:	4603      	mov	r3, r0
 8009cac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cb0:	f803 2b01 	strb.w	r2, [r3], #1
 8009cb4:	2a00      	cmp	r2, #0
 8009cb6:	d1f9      	bne.n	8009cac <strcpy+0x2>
 8009cb8:	4770      	bx	lr
	...

08009cbc <sbrk_aligned>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4e0e      	ldr	r6, [pc, #56]	; (8009cf8 <sbrk_aligned+0x3c>)
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	6831      	ldr	r1, [r6, #0]
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	b911      	cbnz	r1, 8009cce <sbrk_aligned+0x12>
 8009cc8:	f000 fb7e 	bl	800a3c8 <_sbrk_r>
 8009ccc:	6030      	str	r0, [r6, #0]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 fb79 	bl	800a3c8 <_sbrk_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d00a      	beq.n	8009cf0 <sbrk_aligned+0x34>
 8009cda:	1cc4      	adds	r4, r0, #3
 8009cdc:	f024 0403 	bic.w	r4, r4, #3
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d007      	beq.n	8009cf4 <sbrk_aligned+0x38>
 8009ce4:	1a21      	subs	r1, r4, r0
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 fb6e 	bl	800a3c8 <_sbrk_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	d101      	bne.n	8009cf4 <sbrk_aligned+0x38>
 8009cf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	20000a00 	.word	0x20000a00

08009cfc <_malloc_r>:
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	1ccd      	adds	r5, r1, #3
 8009d02:	f025 0503 	bic.w	r5, r5, #3
 8009d06:	3508      	adds	r5, #8
 8009d08:	2d0c      	cmp	r5, #12
 8009d0a:	bf38      	it	cc
 8009d0c:	250c      	movcc	r5, #12
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	4607      	mov	r7, r0
 8009d12:	db01      	blt.n	8009d18 <_malloc_r+0x1c>
 8009d14:	42a9      	cmp	r1, r5
 8009d16:	d905      	bls.n	8009d24 <_malloc_r+0x28>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	603b      	str	r3, [r7, #0]
 8009d1e:	4630      	mov	r0, r6
 8009d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d24:	4e2e      	ldr	r6, [pc, #184]	; (8009de0 <_malloc_r+0xe4>)
 8009d26:	f000 fb95 	bl	800a454 <__malloc_lock>
 8009d2a:	6833      	ldr	r3, [r6, #0]
 8009d2c:	461c      	mov	r4, r3
 8009d2e:	bb34      	cbnz	r4, 8009d7e <_malloc_r+0x82>
 8009d30:	4629      	mov	r1, r5
 8009d32:	4638      	mov	r0, r7
 8009d34:	f7ff ffc2 	bl	8009cbc <sbrk_aligned>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	d14d      	bne.n	8009dda <_malloc_r+0xde>
 8009d3e:	6834      	ldr	r4, [r6, #0]
 8009d40:	4626      	mov	r6, r4
 8009d42:	2e00      	cmp	r6, #0
 8009d44:	d140      	bne.n	8009dc8 <_malloc_r+0xcc>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	eb04 0803 	add.w	r8, r4, r3
 8009d50:	f000 fb3a 	bl	800a3c8 <_sbrk_r>
 8009d54:	4580      	cmp	r8, r0
 8009d56:	d13a      	bne.n	8009dce <_malloc_r+0xd2>
 8009d58:	6821      	ldr	r1, [r4, #0]
 8009d5a:	3503      	adds	r5, #3
 8009d5c:	1a6d      	subs	r5, r5, r1
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7ff ffa5 	bl	8009cbc <sbrk_aligned>
 8009d72:	3001      	adds	r0, #1
 8009d74:	d02b      	beq.n	8009dce <_malloc_r+0xd2>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	442b      	add	r3, r5
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	e00e      	b.n	8009d9c <_malloc_r+0xa0>
 8009d7e:	6822      	ldr	r2, [r4, #0]
 8009d80:	1b52      	subs	r2, r2, r5
 8009d82:	d41e      	bmi.n	8009dc2 <_malloc_r+0xc6>
 8009d84:	2a0b      	cmp	r2, #11
 8009d86:	d916      	bls.n	8009db6 <_malloc_r+0xba>
 8009d88:	1961      	adds	r1, r4, r5
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	6025      	str	r5, [r4, #0]
 8009d8e:	bf18      	it	ne
 8009d90:	6059      	strne	r1, [r3, #4]
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	bf08      	it	eq
 8009d96:	6031      	streq	r1, [r6, #0]
 8009d98:	5162      	str	r2, [r4, r5]
 8009d9a:	604b      	str	r3, [r1, #4]
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f104 060b 	add.w	r6, r4, #11
 8009da2:	f000 fb5d 	bl	800a460 <__malloc_unlock>
 8009da6:	f026 0607 	bic.w	r6, r6, #7
 8009daa:	1d23      	adds	r3, r4, #4
 8009dac:	1af2      	subs	r2, r6, r3
 8009dae:	d0b6      	beq.n	8009d1e <_malloc_r+0x22>
 8009db0:	1b9b      	subs	r3, r3, r6
 8009db2:	50a3      	str	r3, [r4, r2]
 8009db4:	e7b3      	b.n	8009d1e <_malloc_r+0x22>
 8009db6:	6862      	ldr	r2, [r4, #4]
 8009db8:	42a3      	cmp	r3, r4
 8009dba:	bf0c      	ite	eq
 8009dbc:	6032      	streq	r2, [r6, #0]
 8009dbe:	605a      	strne	r2, [r3, #4]
 8009dc0:	e7ec      	b.n	8009d9c <_malloc_r+0xa0>
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	6864      	ldr	r4, [r4, #4]
 8009dc6:	e7b2      	b.n	8009d2e <_malloc_r+0x32>
 8009dc8:	4634      	mov	r4, r6
 8009dca:	6876      	ldr	r6, [r6, #4]
 8009dcc:	e7b9      	b.n	8009d42 <_malloc_r+0x46>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	603b      	str	r3, [r7, #0]
 8009dd4:	f000 fb44 	bl	800a460 <__malloc_unlock>
 8009dd8:	e7a1      	b.n	8009d1e <_malloc_r+0x22>
 8009dda:	6025      	str	r5, [r4, #0]
 8009ddc:	e7de      	b.n	8009d9c <_malloc_r+0xa0>
 8009dde:	bf00      	nop
 8009de0:	200009fc 	.word	0x200009fc

08009de4 <__ssputs_r>:
 8009de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de8:	688e      	ldr	r6, [r1, #8]
 8009dea:	4682      	mov	sl, r0
 8009dec:	429e      	cmp	r6, r3
 8009dee:	460c      	mov	r4, r1
 8009df0:	4690      	mov	r8, r2
 8009df2:	461f      	mov	r7, r3
 8009df4:	d838      	bhi.n	8009e68 <__ssputs_r+0x84>
 8009df6:	898a      	ldrh	r2, [r1, #12]
 8009df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009dfc:	d032      	beq.n	8009e64 <__ssputs_r+0x80>
 8009dfe:	6825      	ldr	r5, [r4, #0]
 8009e00:	6909      	ldr	r1, [r1, #16]
 8009e02:	3301      	adds	r3, #1
 8009e04:	eba5 0901 	sub.w	r9, r5, r1
 8009e08:	6965      	ldr	r5, [r4, #20]
 8009e0a:	444b      	add	r3, r9
 8009e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e14:	106d      	asrs	r5, r5, #1
 8009e16:	429d      	cmp	r5, r3
 8009e18:	bf38      	it	cc
 8009e1a:	461d      	movcc	r5, r3
 8009e1c:	0553      	lsls	r3, r2, #21
 8009e1e:	d531      	bpl.n	8009e84 <__ssputs_r+0xa0>
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7ff ff6b 	bl	8009cfc <_malloc_r>
 8009e26:	4606      	mov	r6, r0
 8009e28:	b950      	cbnz	r0, 8009e40 <__ssputs_r+0x5c>
 8009e2a:	230c      	movs	r3, #12
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e30:	f8ca 3000 	str.w	r3, [sl]
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	464a      	mov	r2, r9
 8009e42:	6921      	ldr	r1, [r4, #16]
 8009e44:	f000 fade 	bl	800a404 <memcpy>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e52:	81a3      	strh	r3, [r4, #12]
 8009e54:	6126      	str	r6, [r4, #16]
 8009e56:	444e      	add	r6, r9
 8009e58:	6026      	str	r6, [r4, #0]
 8009e5a:	463e      	mov	r6, r7
 8009e5c:	6165      	str	r5, [r4, #20]
 8009e5e:	eba5 0509 	sub.w	r5, r5, r9
 8009e62:	60a5      	str	r5, [r4, #8]
 8009e64:	42be      	cmp	r6, r7
 8009e66:	d900      	bls.n	8009e6a <__ssputs_r+0x86>
 8009e68:	463e      	mov	r6, r7
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	4641      	mov	r1, r8
 8009e6e:	6820      	ldr	r0, [r4, #0]
 8009e70:	f000 fad6 	bl	800a420 <memmove>
 8009e74:	68a3      	ldr	r3, [r4, #8]
 8009e76:	2000      	movs	r0, #0
 8009e78:	1b9b      	subs	r3, r3, r6
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	4433      	add	r3, r6
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	e7db      	b.n	8009e3c <__ssputs_r+0x58>
 8009e84:	462a      	mov	r2, r5
 8009e86:	f000 fb39 	bl	800a4fc <_realloc_r>
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d1e1      	bne.n	8009e54 <__ssputs_r+0x70>
 8009e90:	4650      	mov	r0, sl
 8009e92:	6921      	ldr	r1, [r4, #16]
 8009e94:	f000 faea 	bl	800a46c <_free_r>
 8009e98:	e7c7      	b.n	8009e2a <__ssputs_r+0x46>
	...

08009e9c <_svfiprintf_r>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	4698      	mov	r8, r3
 8009ea2:	898b      	ldrh	r3, [r1, #12]
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	061b      	lsls	r3, r3, #24
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	4614      	mov	r4, r2
 8009eac:	b09d      	sub	sp, #116	; 0x74
 8009eae:	d50e      	bpl.n	8009ece <_svfiprintf_r+0x32>
 8009eb0:	690b      	ldr	r3, [r1, #16]
 8009eb2:	b963      	cbnz	r3, 8009ece <_svfiprintf_r+0x32>
 8009eb4:	2140      	movs	r1, #64	; 0x40
 8009eb6:	f7ff ff21 	bl	8009cfc <_malloc_r>
 8009eba:	6028      	str	r0, [r5, #0]
 8009ebc:	6128      	str	r0, [r5, #16]
 8009ebe:	b920      	cbnz	r0, 8009eca <_svfiprintf_r+0x2e>
 8009ec0:	230c      	movs	r3, #12
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ec8:	e0d1      	b.n	800a06e <_svfiprintf_r+0x1d2>
 8009eca:	2340      	movs	r3, #64	; 0x40
 8009ecc:	616b      	str	r3, [r5, #20]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed2:	2320      	movs	r3, #32
 8009ed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed8:	2330      	movs	r3, #48	; 0x30
 8009eda:	f04f 0901 	mov.w	r9, #1
 8009ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ee2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a088 <_svfiprintf_r+0x1ec>
 8009ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eea:	4623      	mov	r3, r4
 8009eec:	469a      	mov	sl, r3
 8009eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef2:	b10a      	cbz	r2, 8009ef8 <_svfiprintf_r+0x5c>
 8009ef4:	2a25      	cmp	r2, #37	; 0x25
 8009ef6:	d1f9      	bne.n	8009eec <_svfiprintf_r+0x50>
 8009ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8009efc:	d00b      	beq.n	8009f16 <_svfiprintf_r+0x7a>
 8009efe:	465b      	mov	r3, fp
 8009f00:	4622      	mov	r2, r4
 8009f02:	4629      	mov	r1, r5
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7ff ff6d 	bl	8009de4 <__ssputs_r>
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f000 80aa 	beq.w	800a064 <_svfiprintf_r+0x1c8>
 8009f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f12:	445a      	add	r2, fp
 8009f14:	9209      	str	r2, [sp, #36]	; 0x24
 8009f16:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 80a2 	beq.w	800a064 <_svfiprintf_r+0x1c8>
 8009f20:	2300      	movs	r3, #0
 8009f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f2a:	f10a 0a01 	add.w	sl, sl, #1
 8009f2e:	9304      	str	r3, [sp, #16]
 8009f30:	9307      	str	r3, [sp, #28]
 8009f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f36:	931a      	str	r3, [sp, #104]	; 0x68
 8009f38:	4654      	mov	r4, sl
 8009f3a:	2205      	movs	r2, #5
 8009f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f40:	4851      	ldr	r0, [pc, #324]	; (800a088 <_svfiprintf_r+0x1ec>)
 8009f42:	f000 fa51 	bl	800a3e8 <memchr>
 8009f46:	9a04      	ldr	r2, [sp, #16]
 8009f48:	b9d8      	cbnz	r0, 8009f82 <_svfiprintf_r+0xe6>
 8009f4a:	06d0      	lsls	r0, r2, #27
 8009f4c:	bf44      	itt	mi
 8009f4e:	2320      	movmi	r3, #32
 8009f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f54:	0711      	lsls	r1, r2, #28
 8009f56:	bf44      	itt	mi
 8009f58:	232b      	movmi	r3, #43	; 0x2b
 8009f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f62:	2b2a      	cmp	r3, #42	; 0x2a
 8009f64:	d015      	beq.n	8009f92 <_svfiprintf_r+0xf6>
 8009f66:	4654      	mov	r4, sl
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f04f 0c0a 	mov.w	ip, #10
 8009f6e:	9a07      	ldr	r2, [sp, #28]
 8009f70:	4621      	mov	r1, r4
 8009f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f76:	3b30      	subs	r3, #48	; 0x30
 8009f78:	2b09      	cmp	r3, #9
 8009f7a:	d94e      	bls.n	800a01a <_svfiprintf_r+0x17e>
 8009f7c:	b1b0      	cbz	r0, 8009fac <_svfiprintf_r+0x110>
 8009f7e:	9207      	str	r2, [sp, #28]
 8009f80:	e014      	b.n	8009fac <_svfiprintf_r+0x110>
 8009f82:	eba0 0308 	sub.w	r3, r0, r8
 8009f86:	fa09 f303 	lsl.w	r3, r9, r3
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	46a2      	mov	sl, r4
 8009f8e:	9304      	str	r3, [sp, #16]
 8009f90:	e7d2      	b.n	8009f38 <_svfiprintf_r+0x9c>
 8009f92:	9b03      	ldr	r3, [sp, #12]
 8009f94:	1d19      	adds	r1, r3, #4
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	9103      	str	r1, [sp, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfbb      	ittet	lt
 8009f9e:	425b      	neglt	r3, r3
 8009fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa4:	9307      	strge	r3, [sp, #28]
 8009fa6:	9307      	strlt	r3, [sp, #28]
 8009fa8:	bfb8      	it	lt
 8009faa:	9204      	strlt	r2, [sp, #16]
 8009fac:	7823      	ldrb	r3, [r4, #0]
 8009fae:	2b2e      	cmp	r3, #46	; 0x2e
 8009fb0:	d10c      	bne.n	8009fcc <_svfiprintf_r+0x130>
 8009fb2:	7863      	ldrb	r3, [r4, #1]
 8009fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb6:	d135      	bne.n	800a024 <_svfiprintf_r+0x188>
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	3402      	adds	r4, #2
 8009fbc:	1d1a      	adds	r2, r3, #4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	9203      	str	r2, [sp, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	bfb8      	it	lt
 8009fc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fca:	9305      	str	r3, [sp, #20]
 8009fcc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a08c <_svfiprintf_r+0x1f0>
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	7821      	ldrb	r1, [r4, #0]
 8009fd6:	f000 fa07 	bl	800a3e8 <memchr>
 8009fda:	b140      	cbz	r0, 8009fee <_svfiprintf_r+0x152>
 8009fdc:	2340      	movs	r3, #64	; 0x40
 8009fde:	eba0 000a 	sub.w	r0, r0, sl
 8009fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8009fe6:	9b04      	ldr	r3, [sp, #16]
 8009fe8:	3401      	adds	r4, #1
 8009fea:	4303      	orrs	r3, r0
 8009fec:	9304      	str	r3, [sp, #16]
 8009fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff2:	2206      	movs	r2, #6
 8009ff4:	4826      	ldr	r0, [pc, #152]	; (800a090 <_svfiprintf_r+0x1f4>)
 8009ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ffa:	f000 f9f5 	bl	800a3e8 <memchr>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d038      	beq.n	800a074 <_svfiprintf_r+0x1d8>
 800a002:	4b24      	ldr	r3, [pc, #144]	; (800a094 <_svfiprintf_r+0x1f8>)
 800a004:	bb1b      	cbnz	r3, 800a04e <_svfiprintf_r+0x1b2>
 800a006:	9b03      	ldr	r3, [sp, #12]
 800a008:	3307      	adds	r3, #7
 800a00a:	f023 0307 	bic.w	r3, r3, #7
 800a00e:	3308      	adds	r3, #8
 800a010:	9303      	str	r3, [sp, #12]
 800a012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a014:	4433      	add	r3, r6
 800a016:	9309      	str	r3, [sp, #36]	; 0x24
 800a018:	e767      	b.n	8009eea <_svfiprintf_r+0x4e>
 800a01a:	460c      	mov	r4, r1
 800a01c:	2001      	movs	r0, #1
 800a01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a022:	e7a5      	b.n	8009f70 <_svfiprintf_r+0xd4>
 800a024:	2300      	movs	r3, #0
 800a026:	f04f 0c0a 	mov.w	ip, #10
 800a02a:	4619      	mov	r1, r3
 800a02c:	3401      	adds	r4, #1
 800a02e:	9305      	str	r3, [sp, #20]
 800a030:	4620      	mov	r0, r4
 800a032:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a036:	3a30      	subs	r2, #48	; 0x30
 800a038:	2a09      	cmp	r2, #9
 800a03a:	d903      	bls.n	800a044 <_svfiprintf_r+0x1a8>
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0c5      	beq.n	8009fcc <_svfiprintf_r+0x130>
 800a040:	9105      	str	r1, [sp, #20]
 800a042:	e7c3      	b.n	8009fcc <_svfiprintf_r+0x130>
 800a044:	4604      	mov	r4, r0
 800a046:	2301      	movs	r3, #1
 800a048:	fb0c 2101 	mla	r1, ip, r1, r2
 800a04c:	e7f0      	b.n	800a030 <_svfiprintf_r+0x194>
 800a04e:	ab03      	add	r3, sp, #12
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	462a      	mov	r2, r5
 800a054:	4638      	mov	r0, r7
 800a056:	4b10      	ldr	r3, [pc, #64]	; (800a098 <_svfiprintf_r+0x1fc>)
 800a058:	a904      	add	r1, sp, #16
 800a05a:	f3af 8000 	nop.w
 800a05e:	1c42      	adds	r2, r0, #1
 800a060:	4606      	mov	r6, r0
 800a062:	d1d6      	bne.n	800a012 <_svfiprintf_r+0x176>
 800a064:	89ab      	ldrh	r3, [r5, #12]
 800a066:	065b      	lsls	r3, r3, #25
 800a068:	f53f af2c 	bmi.w	8009ec4 <_svfiprintf_r+0x28>
 800a06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06e:	b01d      	add	sp, #116	; 0x74
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	ab03      	add	r3, sp, #12
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	462a      	mov	r2, r5
 800a07a:	4638      	mov	r0, r7
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <_svfiprintf_r+0x1fc>)
 800a07e:	a904      	add	r1, sp, #16
 800a080:	f000 f87c 	bl	800a17c <_printf_i>
 800a084:	e7eb      	b.n	800a05e <_svfiprintf_r+0x1c2>
 800a086:	bf00      	nop
 800a088:	0800ad08 	.word	0x0800ad08
 800a08c:	0800ad0e 	.word	0x0800ad0e
 800a090:	0800ad12 	.word	0x0800ad12
 800a094:	00000000 	.word	0x00000000
 800a098:	08009de5 	.word	0x08009de5

0800a09c <_printf_common>:
 800a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	4699      	mov	r9, r3
 800a0a4:	688a      	ldr	r2, [r1, #8]
 800a0a6:	690b      	ldr	r3, [r1, #16]
 800a0a8:	4607      	mov	r7, r0
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	bfb8      	it	lt
 800a0ae:	4613      	movlt	r3, r2
 800a0b0:	6033      	str	r3, [r6, #0]
 800a0b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0bc:	b10a      	cbz	r2, 800a0c2 <_printf_common+0x26>
 800a0be:	3301      	adds	r3, #1
 800a0c0:	6033      	str	r3, [r6, #0]
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	0699      	lsls	r1, r3, #26
 800a0c6:	bf42      	ittt	mi
 800a0c8:	6833      	ldrmi	r3, [r6, #0]
 800a0ca:	3302      	addmi	r3, #2
 800a0cc:	6033      	strmi	r3, [r6, #0]
 800a0ce:	6825      	ldr	r5, [r4, #0]
 800a0d0:	f015 0506 	ands.w	r5, r5, #6
 800a0d4:	d106      	bne.n	800a0e4 <_printf_common+0x48>
 800a0d6:	f104 0a19 	add.w	sl, r4, #25
 800a0da:	68e3      	ldr	r3, [r4, #12]
 800a0dc:	6832      	ldr	r2, [r6, #0]
 800a0de:	1a9b      	subs	r3, r3, r2
 800a0e0:	42ab      	cmp	r3, r5
 800a0e2:	dc28      	bgt.n	800a136 <_printf_common+0x9a>
 800a0e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0e8:	1e13      	subs	r3, r2, #0
 800a0ea:	6822      	ldr	r2, [r4, #0]
 800a0ec:	bf18      	it	ne
 800a0ee:	2301      	movne	r3, #1
 800a0f0:	0692      	lsls	r2, r2, #26
 800a0f2:	d42d      	bmi.n	800a150 <_printf_common+0xb4>
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0fc:	47c0      	blx	r8
 800a0fe:	3001      	adds	r0, #1
 800a100:	d020      	beq.n	800a144 <_printf_common+0xa8>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	68e5      	ldr	r5, [r4, #12]
 800a106:	f003 0306 	and.w	r3, r3, #6
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	bf18      	it	ne
 800a10e:	2500      	movne	r5, #0
 800a110:	6832      	ldr	r2, [r6, #0]
 800a112:	f04f 0600 	mov.w	r6, #0
 800a116:	68a3      	ldr	r3, [r4, #8]
 800a118:	bf08      	it	eq
 800a11a:	1aad      	subeq	r5, r5, r2
 800a11c:	6922      	ldr	r2, [r4, #16]
 800a11e:	bf08      	it	eq
 800a120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a124:	4293      	cmp	r3, r2
 800a126:	bfc4      	itt	gt
 800a128:	1a9b      	subgt	r3, r3, r2
 800a12a:	18ed      	addgt	r5, r5, r3
 800a12c:	341a      	adds	r4, #26
 800a12e:	42b5      	cmp	r5, r6
 800a130:	d11a      	bne.n	800a168 <_printf_common+0xcc>
 800a132:	2000      	movs	r0, #0
 800a134:	e008      	b.n	800a148 <_printf_common+0xac>
 800a136:	2301      	movs	r3, #1
 800a138:	4652      	mov	r2, sl
 800a13a:	4649      	mov	r1, r9
 800a13c:	4638      	mov	r0, r7
 800a13e:	47c0      	blx	r8
 800a140:	3001      	adds	r0, #1
 800a142:	d103      	bne.n	800a14c <_printf_common+0xb0>
 800a144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14c:	3501      	adds	r5, #1
 800a14e:	e7c4      	b.n	800a0da <_printf_common+0x3e>
 800a150:	2030      	movs	r0, #48	; 0x30
 800a152:	18e1      	adds	r1, r4, r3
 800a154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a15e:	4422      	add	r2, r4
 800a160:	3302      	adds	r3, #2
 800a162:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a166:	e7c5      	b.n	800a0f4 <_printf_common+0x58>
 800a168:	2301      	movs	r3, #1
 800a16a:	4622      	mov	r2, r4
 800a16c:	4649      	mov	r1, r9
 800a16e:	4638      	mov	r0, r7
 800a170:	47c0      	blx	r8
 800a172:	3001      	adds	r0, #1
 800a174:	d0e6      	beq.n	800a144 <_printf_common+0xa8>
 800a176:	3601      	adds	r6, #1
 800a178:	e7d9      	b.n	800a12e <_printf_common+0x92>
	...

0800a17c <_printf_i>:
 800a17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a180:	7e0f      	ldrb	r7, [r1, #24]
 800a182:	4691      	mov	r9, r2
 800a184:	2f78      	cmp	r7, #120	; 0x78
 800a186:	4680      	mov	r8, r0
 800a188:	460c      	mov	r4, r1
 800a18a:	469a      	mov	sl, r3
 800a18c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a18e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a192:	d807      	bhi.n	800a1a4 <_printf_i+0x28>
 800a194:	2f62      	cmp	r7, #98	; 0x62
 800a196:	d80a      	bhi.n	800a1ae <_printf_i+0x32>
 800a198:	2f00      	cmp	r7, #0
 800a19a:	f000 80d9 	beq.w	800a350 <_printf_i+0x1d4>
 800a19e:	2f58      	cmp	r7, #88	; 0x58
 800a1a0:	f000 80a4 	beq.w	800a2ec <_printf_i+0x170>
 800a1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1ac:	e03a      	b.n	800a224 <_printf_i+0xa8>
 800a1ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1b2:	2b15      	cmp	r3, #21
 800a1b4:	d8f6      	bhi.n	800a1a4 <_printf_i+0x28>
 800a1b6:	a101      	add	r1, pc, #4	; (adr r1, 800a1bc <_printf_i+0x40>)
 800a1b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1bc:	0800a215 	.word	0x0800a215
 800a1c0:	0800a229 	.word	0x0800a229
 800a1c4:	0800a1a5 	.word	0x0800a1a5
 800a1c8:	0800a1a5 	.word	0x0800a1a5
 800a1cc:	0800a1a5 	.word	0x0800a1a5
 800a1d0:	0800a1a5 	.word	0x0800a1a5
 800a1d4:	0800a229 	.word	0x0800a229
 800a1d8:	0800a1a5 	.word	0x0800a1a5
 800a1dc:	0800a1a5 	.word	0x0800a1a5
 800a1e0:	0800a1a5 	.word	0x0800a1a5
 800a1e4:	0800a1a5 	.word	0x0800a1a5
 800a1e8:	0800a337 	.word	0x0800a337
 800a1ec:	0800a259 	.word	0x0800a259
 800a1f0:	0800a319 	.word	0x0800a319
 800a1f4:	0800a1a5 	.word	0x0800a1a5
 800a1f8:	0800a1a5 	.word	0x0800a1a5
 800a1fc:	0800a359 	.word	0x0800a359
 800a200:	0800a1a5 	.word	0x0800a1a5
 800a204:	0800a259 	.word	0x0800a259
 800a208:	0800a1a5 	.word	0x0800a1a5
 800a20c:	0800a1a5 	.word	0x0800a1a5
 800a210:	0800a321 	.word	0x0800a321
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	1d1a      	adds	r2, r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	602a      	str	r2, [r5, #0]
 800a21c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a224:	2301      	movs	r3, #1
 800a226:	e0a4      	b.n	800a372 <_printf_i+0x1f6>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	6829      	ldr	r1, [r5, #0]
 800a22c:	0606      	lsls	r6, r0, #24
 800a22e:	f101 0304 	add.w	r3, r1, #4
 800a232:	d50a      	bpl.n	800a24a <_printf_i+0xce>
 800a234:	680e      	ldr	r6, [r1, #0]
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	2e00      	cmp	r6, #0
 800a23a:	da03      	bge.n	800a244 <_printf_i+0xc8>
 800a23c:	232d      	movs	r3, #45	; 0x2d
 800a23e:	4276      	negs	r6, r6
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a244:	230a      	movs	r3, #10
 800a246:	485e      	ldr	r0, [pc, #376]	; (800a3c0 <_printf_i+0x244>)
 800a248:	e019      	b.n	800a27e <_printf_i+0x102>
 800a24a:	680e      	ldr	r6, [r1, #0]
 800a24c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	bf18      	it	ne
 800a254:	b236      	sxthne	r6, r6
 800a256:	e7ef      	b.n	800a238 <_printf_i+0xbc>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	6820      	ldr	r0, [r4, #0]
 800a25c:	1d19      	adds	r1, r3, #4
 800a25e:	6029      	str	r1, [r5, #0]
 800a260:	0601      	lsls	r1, r0, #24
 800a262:	d501      	bpl.n	800a268 <_printf_i+0xec>
 800a264:	681e      	ldr	r6, [r3, #0]
 800a266:	e002      	b.n	800a26e <_printf_i+0xf2>
 800a268:	0646      	lsls	r6, r0, #25
 800a26a:	d5fb      	bpl.n	800a264 <_printf_i+0xe8>
 800a26c:	881e      	ldrh	r6, [r3, #0]
 800a26e:	2f6f      	cmp	r7, #111	; 0x6f
 800a270:	bf0c      	ite	eq
 800a272:	2308      	moveq	r3, #8
 800a274:	230a      	movne	r3, #10
 800a276:	4852      	ldr	r0, [pc, #328]	; (800a3c0 <_printf_i+0x244>)
 800a278:	2100      	movs	r1, #0
 800a27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a27e:	6865      	ldr	r5, [r4, #4]
 800a280:	2d00      	cmp	r5, #0
 800a282:	bfa8      	it	ge
 800a284:	6821      	ldrge	r1, [r4, #0]
 800a286:	60a5      	str	r5, [r4, #8]
 800a288:	bfa4      	itt	ge
 800a28a:	f021 0104 	bicge.w	r1, r1, #4
 800a28e:	6021      	strge	r1, [r4, #0]
 800a290:	b90e      	cbnz	r6, 800a296 <_printf_i+0x11a>
 800a292:	2d00      	cmp	r5, #0
 800a294:	d04d      	beq.n	800a332 <_printf_i+0x1b6>
 800a296:	4615      	mov	r5, r2
 800a298:	fbb6 f1f3 	udiv	r1, r6, r3
 800a29c:	fb03 6711 	mls	r7, r3, r1, r6
 800a2a0:	5dc7      	ldrb	r7, [r0, r7]
 800a2a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2a6:	4637      	mov	r7, r6
 800a2a8:	42bb      	cmp	r3, r7
 800a2aa:	460e      	mov	r6, r1
 800a2ac:	d9f4      	bls.n	800a298 <_printf_i+0x11c>
 800a2ae:	2b08      	cmp	r3, #8
 800a2b0:	d10b      	bne.n	800a2ca <_printf_i+0x14e>
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	07de      	lsls	r6, r3, #31
 800a2b6:	d508      	bpl.n	800a2ca <_printf_i+0x14e>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	6861      	ldr	r1, [r4, #4]
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	bfde      	ittt	le
 800a2c0:	2330      	movle	r3, #48	; 0x30
 800a2c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a2ca:	1b52      	subs	r2, r2, r5
 800a2cc:	6122      	str	r2, [r4, #16]
 800a2ce:	464b      	mov	r3, r9
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f8cd a000 	str.w	sl, [sp]
 800a2d8:	aa03      	add	r2, sp, #12
 800a2da:	f7ff fedf 	bl	800a09c <_printf_common>
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d14c      	bne.n	800a37c <_printf_i+0x200>
 800a2e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2e6:	b004      	add	sp, #16
 800a2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ec:	4834      	ldr	r0, [pc, #208]	; (800a3c0 <_printf_i+0x244>)
 800a2ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2f2:	6829      	ldr	r1, [r5, #0]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2fa:	6029      	str	r1, [r5, #0]
 800a2fc:	061d      	lsls	r5, r3, #24
 800a2fe:	d514      	bpl.n	800a32a <_printf_i+0x1ae>
 800a300:	07df      	lsls	r7, r3, #31
 800a302:	bf44      	itt	mi
 800a304:	f043 0320 	orrmi.w	r3, r3, #32
 800a308:	6023      	strmi	r3, [r4, #0]
 800a30a:	b91e      	cbnz	r6, 800a314 <_printf_i+0x198>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	f023 0320 	bic.w	r3, r3, #32
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	2310      	movs	r3, #16
 800a316:	e7af      	b.n	800a278 <_printf_i+0xfc>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	f043 0320 	orr.w	r3, r3, #32
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	2378      	movs	r3, #120	; 0x78
 800a322:	4828      	ldr	r0, [pc, #160]	; (800a3c4 <_printf_i+0x248>)
 800a324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a328:	e7e3      	b.n	800a2f2 <_printf_i+0x176>
 800a32a:	0659      	lsls	r1, r3, #25
 800a32c:	bf48      	it	mi
 800a32e:	b2b6      	uxthmi	r6, r6
 800a330:	e7e6      	b.n	800a300 <_printf_i+0x184>
 800a332:	4615      	mov	r5, r2
 800a334:	e7bb      	b.n	800a2ae <_printf_i+0x132>
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	6826      	ldr	r6, [r4, #0]
 800a33a:	1d18      	adds	r0, r3, #4
 800a33c:	6961      	ldr	r1, [r4, #20]
 800a33e:	6028      	str	r0, [r5, #0]
 800a340:	0635      	lsls	r5, r6, #24
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	d501      	bpl.n	800a34a <_printf_i+0x1ce>
 800a346:	6019      	str	r1, [r3, #0]
 800a348:	e002      	b.n	800a350 <_printf_i+0x1d4>
 800a34a:	0670      	lsls	r0, r6, #25
 800a34c:	d5fb      	bpl.n	800a346 <_printf_i+0x1ca>
 800a34e:	8019      	strh	r1, [r3, #0]
 800a350:	2300      	movs	r3, #0
 800a352:	4615      	mov	r5, r2
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	e7ba      	b.n	800a2ce <_printf_i+0x152>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	2100      	movs	r1, #0
 800a35c:	1d1a      	adds	r2, r3, #4
 800a35e:	602a      	str	r2, [r5, #0]
 800a360:	681d      	ldr	r5, [r3, #0]
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	4628      	mov	r0, r5
 800a366:	f000 f83f 	bl	800a3e8 <memchr>
 800a36a:	b108      	cbz	r0, 800a370 <_printf_i+0x1f4>
 800a36c:	1b40      	subs	r0, r0, r5
 800a36e:	6060      	str	r0, [r4, #4]
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	2300      	movs	r3, #0
 800a376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a37a:	e7a8      	b.n	800a2ce <_printf_i+0x152>
 800a37c:	462a      	mov	r2, r5
 800a37e:	4649      	mov	r1, r9
 800a380:	4640      	mov	r0, r8
 800a382:	6923      	ldr	r3, [r4, #16]
 800a384:	47d0      	blx	sl
 800a386:	3001      	adds	r0, #1
 800a388:	d0ab      	beq.n	800a2e2 <_printf_i+0x166>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	079b      	lsls	r3, r3, #30
 800a38e:	d413      	bmi.n	800a3b8 <_printf_i+0x23c>
 800a390:	68e0      	ldr	r0, [r4, #12]
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	4298      	cmp	r0, r3
 800a396:	bfb8      	it	lt
 800a398:	4618      	movlt	r0, r3
 800a39a:	e7a4      	b.n	800a2e6 <_printf_i+0x16a>
 800a39c:	2301      	movs	r3, #1
 800a39e:	4632      	mov	r2, r6
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	47d0      	blx	sl
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d09b      	beq.n	800a2e2 <_printf_i+0x166>
 800a3aa:	3501      	adds	r5, #1
 800a3ac:	68e3      	ldr	r3, [r4, #12]
 800a3ae:	9903      	ldr	r1, [sp, #12]
 800a3b0:	1a5b      	subs	r3, r3, r1
 800a3b2:	42ab      	cmp	r3, r5
 800a3b4:	dcf2      	bgt.n	800a39c <_printf_i+0x220>
 800a3b6:	e7eb      	b.n	800a390 <_printf_i+0x214>
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	f104 0619 	add.w	r6, r4, #25
 800a3be:	e7f5      	b.n	800a3ac <_printf_i+0x230>
 800a3c0:	0800ad19 	.word	0x0800ad19
 800a3c4:	0800ad2a 	.word	0x0800ad2a

0800a3c8 <_sbrk_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	4d05      	ldr	r5, [pc, #20]	; (800a3e4 <_sbrk_r+0x1c>)
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	602b      	str	r3, [r5, #0]
 800a3d4:	f7fb faba 	bl	800594c <_sbrk>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_sbrk_r+0x1a>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_sbrk_r+0x1a>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	20000a04 	.word	0x20000a04

0800a3e8 <memchr>:
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	b510      	push	{r4, lr}
 800a3ec:	b2c9      	uxtb	r1, r1
 800a3ee:	4402      	add	r2, r0
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	d101      	bne.n	800a3fa <memchr+0x12>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	e003      	b.n	800a402 <memchr+0x1a>
 800a3fa:	7804      	ldrb	r4, [r0, #0]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	428c      	cmp	r4, r1
 800a400:	d1f6      	bne.n	800a3f0 <memchr+0x8>
 800a402:	bd10      	pop	{r4, pc}

0800a404 <memcpy>:
 800a404:	440a      	add	r2, r1
 800a406:	4291      	cmp	r1, r2
 800a408:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a40c:	d100      	bne.n	800a410 <memcpy+0xc>
 800a40e:	4770      	bx	lr
 800a410:	b510      	push	{r4, lr}
 800a412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a416:	4291      	cmp	r1, r2
 800a418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a41c:	d1f9      	bne.n	800a412 <memcpy+0xe>
 800a41e:	bd10      	pop	{r4, pc}

0800a420 <memmove>:
 800a420:	4288      	cmp	r0, r1
 800a422:	b510      	push	{r4, lr}
 800a424:	eb01 0402 	add.w	r4, r1, r2
 800a428:	d902      	bls.n	800a430 <memmove+0x10>
 800a42a:	4284      	cmp	r4, r0
 800a42c:	4623      	mov	r3, r4
 800a42e:	d807      	bhi.n	800a440 <memmove+0x20>
 800a430:	1e43      	subs	r3, r0, #1
 800a432:	42a1      	cmp	r1, r4
 800a434:	d008      	beq.n	800a448 <memmove+0x28>
 800a436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a43a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a43e:	e7f8      	b.n	800a432 <memmove+0x12>
 800a440:	4601      	mov	r1, r0
 800a442:	4402      	add	r2, r0
 800a444:	428a      	cmp	r2, r1
 800a446:	d100      	bne.n	800a44a <memmove+0x2a>
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a44e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a452:	e7f7      	b.n	800a444 <memmove+0x24>

0800a454 <__malloc_lock>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__malloc_lock+0x8>)
 800a456:	f000 b880 	b.w	800a55a <__retarget_lock_acquire_recursive>
 800a45a:	bf00      	nop
 800a45c:	20000a08 	.word	0x20000a08

0800a460 <__malloc_unlock>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__malloc_unlock+0x8>)
 800a462:	f000 b87b 	b.w	800a55c <__retarget_lock_release_recursive>
 800a466:	bf00      	nop
 800a468:	20000a08 	.word	0x20000a08

0800a46c <_free_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4605      	mov	r5, r0
 800a470:	2900      	cmp	r1, #0
 800a472:	d040      	beq.n	800a4f6 <_free_r+0x8a>
 800a474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a478:	1f0c      	subs	r4, r1, #4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bfb8      	it	lt
 800a47e:	18e4      	addlt	r4, r4, r3
 800a480:	f7ff ffe8 	bl	800a454 <__malloc_lock>
 800a484:	4a1c      	ldr	r2, [pc, #112]	; (800a4f8 <_free_r+0x8c>)
 800a486:	6813      	ldr	r3, [r2, #0]
 800a488:	b933      	cbnz	r3, 800a498 <_free_r+0x2c>
 800a48a:	6063      	str	r3, [r4, #4]
 800a48c:	6014      	str	r4, [r2, #0]
 800a48e:	4628      	mov	r0, r5
 800a490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a494:	f7ff bfe4 	b.w	800a460 <__malloc_unlock>
 800a498:	42a3      	cmp	r3, r4
 800a49a:	d908      	bls.n	800a4ae <_free_r+0x42>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	1821      	adds	r1, r4, r0
 800a4a0:	428b      	cmp	r3, r1
 800a4a2:	bf01      	itttt	eq
 800a4a4:	6819      	ldreq	r1, [r3, #0]
 800a4a6:	685b      	ldreq	r3, [r3, #4]
 800a4a8:	1809      	addeq	r1, r1, r0
 800a4aa:	6021      	streq	r1, [r4, #0]
 800a4ac:	e7ed      	b.n	800a48a <_free_r+0x1e>
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	b10b      	cbz	r3, 800a4b8 <_free_r+0x4c>
 800a4b4:	42a3      	cmp	r3, r4
 800a4b6:	d9fa      	bls.n	800a4ae <_free_r+0x42>
 800a4b8:	6811      	ldr	r1, [r2, #0]
 800a4ba:	1850      	adds	r0, r2, r1
 800a4bc:	42a0      	cmp	r0, r4
 800a4be:	d10b      	bne.n	800a4d8 <_free_r+0x6c>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	4401      	add	r1, r0
 800a4c4:	1850      	adds	r0, r2, r1
 800a4c6:	4283      	cmp	r3, r0
 800a4c8:	6011      	str	r1, [r2, #0]
 800a4ca:	d1e0      	bne.n	800a48e <_free_r+0x22>
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	4401      	add	r1, r0
 800a4d2:	6011      	str	r1, [r2, #0]
 800a4d4:	6053      	str	r3, [r2, #4]
 800a4d6:	e7da      	b.n	800a48e <_free_r+0x22>
 800a4d8:	d902      	bls.n	800a4e0 <_free_r+0x74>
 800a4da:	230c      	movs	r3, #12
 800a4dc:	602b      	str	r3, [r5, #0]
 800a4de:	e7d6      	b.n	800a48e <_free_r+0x22>
 800a4e0:	6820      	ldr	r0, [r4, #0]
 800a4e2:	1821      	adds	r1, r4, r0
 800a4e4:	428b      	cmp	r3, r1
 800a4e6:	bf01      	itttt	eq
 800a4e8:	6819      	ldreq	r1, [r3, #0]
 800a4ea:	685b      	ldreq	r3, [r3, #4]
 800a4ec:	1809      	addeq	r1, r1, r0
 800a4ee:	6021      	streq	r1, [r4, #0]
 800a4f0:	6063      	str	r3, [r4, #4]
 800a4f2:	6054      	str	r4, [r2, #4]
 800a4f4:	e7cb      	b.n	800a48e <_free_r+0x22>
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	200009fc 	.word	0x200009fc

0800a4fc <_realloc_r>:
 800a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a500:	4680      	mov	r8, r0
 800a502:	4614      	mov	r4, r2
 800a504:	460e      	mov	r6, r1
 800a506:	b921      	cbnz	r1, 800a512 <_realloc_r+0x16>
 800a508:	4611      	mov	r1, r2
 800a50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	f7ff bbf5 	b.w	8009cfc <_malloc_r>
 800a512:	b92a      	cbnz	r2, 800a520 <_realloc_r+0x24>
 800a514:	f7ff ffaa 	bl	800a46c <_free_r>
 800a518:	4625      	mov	r5, r4
 800a51a:	4628      	mov	r0, r5
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	f000 f81d 	bl	800a55e <_malloc_usable_size_r>
 800a524:	4284      	cmp	r4, r0
 800a526:	4607      	mov	r7, r0
 800a528:	d802      	bhi.n	800a530 <_realloc_r+0x34>
 800a52a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a52e:	d812      	bhi.n	800a556 <_realloc_r+0x5a>
 800a530:	4621      	mov	r1, r4
 800a532:	4640      	mov	r0, r8
 800a534:	f7ff fbe2 	bl	8009cfc <_malloc_r>
 800a538:	4605      	mov	r5, r0
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d0ed      	beq.n	800a51a <_realloc_r+0x1e>
 800a53e:	42bc      	cmp	r4, r7
 800a540:	4622      	mov	r2, r4
 800a542:	4631      	mov	r1, r6
 800a544:	bf28      	it	cs
 800a546:	463a      	movcs	r2, r7
 800a548:	f7ff ff5c 	bl	800a404 <memcpy>
 800a54c:	4631      	mov	r1, r6
 800a54e:	4640      	mov	r0, r8
 800a550:	f7ff ff8c 	bl	800a46c <_free_r>
 800a554:	e7e1      	b.n	800a51a <_realloc_r+0x1e>
 800a556:	4635      	mov	r5, r6
 800a558:	e7df      	b.n	800a51a <_realloc_r+0x1e>

0800a55a <__retarget_lock_acquire_recursive>:
 800a55a:	4770      	bx	lr

0800a55c <__retarget_lock_release_recursive>:
 800a55c:	4770      	bx	lr

0800a55e <_malloc_usable_size_r>:
 800a55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a562:	1f18      	subs	r0, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfbc      	itt	lt
 800a568:	580b      	ldrlt	r3, [r1, r0]
 800a56a:	18c0      	addlt	r0, r0, r3
 800a56c:	4770      	bx	lr
	...

0800a570 <_init>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr

0800a57c <_fini>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr
