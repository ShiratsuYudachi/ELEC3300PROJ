
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  080082d0  080082d0  000182d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d8  080089d8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e0  080089e0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080089e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200000a8  08008a90  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08008a90  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146df  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ef  00000000  00000000  000347b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000389a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00039ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0cb  00000000  00000000  0003add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6be  00000000  00000000  00057e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce22  00000000  00000000  00072559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff37b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051fc  00000000  00000000  000ff3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a8 	.word	0x200000a8
 8000204:	00000000 	.word	0x00000000
 8000208:	080082b8 	.word	0x080082b8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000ac 	.word	0x200000ac
 8000224:	080082b8 	.word	0x080082b8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_uldivmod>:
 8000d80:	b953      	cbnz	r3, 8000d98 <__aeabi_uldivmod+0x18>
 8000d82:	b94a      	cbnz	r2, 8000d98 <__aeabi_uldivmod+0x18>
 8000d84:	2900      	cmp	r1, #0
 8000d86:	bf08      	it	eq
 8000d88:	2800      	cmpeq	r0, #0
 8000d8a:	bf1c      	itt	ne
 8000d8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d94:	f000 b976 	b.w	8001084 <__aeabi_idiv0>
 8000d98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da0:	f000 f806 	bl	8000db0 <__udivmoddi4>
 8000da4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dac:	b004      	add	sp, #16
 8000dae:	4770      	bx	lr

08000db0 <__udivmoddi4>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	9e08      	ldr	r6, [sp, #32]
 8000db6:	460d      	mov	r5, r1
 8000db8:	4604      	mov	r4, r0
 8000dba:	4688      	mov	r8, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d14d      	bne.n	8000e5c <__udivmoddi4+0xac>
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	4694      	mov	ip, r2
 8000dc4:	d968      	bls.n	8000e98 <__udivmoddi4+0xe8>
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	b152      	cbz	r2, 8000de2 <__udivmoddi4+0x32>
 8000dcc:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd0:	f1c2 0120 	rsb	r1, r2, #32
 8000dd4:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ddc:	ea41 0803 	orr.w	r8, r1, r3
 8000de0:	4094      	lsls	r4, r2
 8000de2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000de6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	fb01 8817 	mls	r8, r1, r7, r8
 8000df2:	fb07 f00e 	mul.w	r0, r7, lr
 8000df6:	0c23      	lsrs	r3, r4, #16
 8000df8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x66>
 8000e00:	eb1c 0303 	adds.w	r3, ip, r3
 8000e04:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000e08:	f080 811e 	bcs.w	8001048 <__udivmoddi4+0x298>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f240 811b 	bls.w	8001048 <__udivmoddi4+0x298>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4463      	add	r3, ip
 8000e16:	1a1b      	subs	r3, r3, r0
 8000e18:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e1c:	fb01 3310 	mls	r3, r1, r0, r3
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	b2a4      	uxth	r4, r4
 8000e26:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d90a      	bls.n	8000e44 <__udivmoddi4+0x94>
 8000e2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e36:	f080 8109 	bcs.w	800104c <__udivmoddi4+0x29c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f240 8106 	bls.w	800104c <__udivmoddi4+0x29c>
 8000e40:	4464      	add	r4, ip
 8000e42:	3802      	subs	r0, #2
 8000e44:	2100      	movs	r1, #0
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e4e:	b11e      	cbz	r6, 8000e58 <__udivmoddi4+0xa8>
 8000e50:	2300      	movs	r3, #0
 8000e52:	40d4      	lsrs	r4, r2
 8000e54:	e9c6 4300 	strd	r4, r3, [r6]
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0xc2>
 8000e60:	2e00      	cmp	r6, #0
 8000e62:	f000 80ee 	beq.w	8001042 <__udivmoddi4+0x292>
 8000e66:	2100      	movs	r1, #0
 8000e68:	e9c6 0500 	strd	r0, r5, [r6]
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f183 	clz	r1, r3
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x160>
 8000e7a:	42ab      	cmp	r3, r5
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0xd4>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80fc 	bhi.w	800107c <__udivmoddi4+0x2cc>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb65 0303 	sbc.w	r3, r5, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d0e2      	beq.n	8000e58 <__udivmoddi4+0xa8>
 8000e92:	e9c6 4800 	strd	r4, r8, [r6]
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000e98:	b902      	cbnz	r2, 8000e9c <__udivmoddi4+0xec>
 8000e9a:	deff      	udf	#255	; 0xff
 8000e9c:	fab2 f282 	clz	r2, r2
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	f040 8091 	bne.w	8000fc8 <__udivmoddi4+0x218>
 8000ea6:	eba1 000c 	sub.w	r0, r1, ip
 8000eaa:	2101      	movs	r1, #1
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eb8:	fb07 0013 	mls	r0, r7, r3, r0
 8000ebc:	0c25      	lsrs	r5, r4, #16
 8000ebe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ec2:	fb0e f003 	mul.w	r0, lr, r3
 8000ec6:	42a8      	cmp	r0, r5
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x12c>
 8000eca:	eb1c 0505 	adds.w	r5, ip, r5
 8000ece:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x12a>
 8000ed4:	42a8      	cmp	r0, r5
 8000ed6:	f200 80ce 	bhi.w	8001076 <__udivmoddi4+0x2c6>
 8000eda:	4643      	mov	r3, r8
 8000edc:	1a2d      	subs	r5, r5, r0
 8000ede:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ee2:	fb07 5510 	mls	r5, r7, r0, r5
 8000ee6:	fb0e fe00 	mul.w	lr, lr, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x156>
 8000ef4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000efc:	d202      	bcs.n	8000f04 <__udivmoddi4+0x154>
 8000efe:	45a6      	cmp	lr, r4
 8000f00:	f200 80b6 	bhi.w	8001070 <__udivmoddi4+0x2c0>
 8000f04:	4628      	mov	r0, r5
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f0e:	e79e      	b.n	8000e4e <__udivmoddi4+0x9e>
 8000f10:	f1c1 0720 	rsb	r7, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f1e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f26:	fbba f8f9 	udiv	r8, sl, r9
 8000f2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f32:	408d      	lsls	r5, r1
 8000f34:	fa1f fe8c 	uxth.w	lr, ip
 8000f38:	431d      	orrs	r5, r3
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fb08 f00e 	mul.w	r0, r8, lr
 8000f42:	0c2c      	lsrs	r4, r5, #16
 8000f44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f48:	42a0      	cmp	r0, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d90b      	bls.n	8000f68 <__udivmoddi4+0x1b8>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f58:	f080 8088 	bcs.w	800106c <__udivmoddi4+0x2bc>
 8000f5c:	42a0      	cmp	r0, r4
 8000f5e:	f240 8085 	bls.w	800106c <__udivmoddi4+0x2bc>
 8000f62:	f1a8 0802 	sub.w	r8, r8, #2
 8000f66:	4464      	add	r4, ip
 8000f68:	1a24      	subs	r4, r4, r0
 8000f6a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f6e:	fb09 4410 	mls	r4, r9, r0, r4
 8000f72:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f76:	b2ad      	uxth	r5, r5
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	45a6      	cmp	lr, r4
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x1e2>
 8000f80:	eb1c 0404 	adds.w	r4, ip, r4
 8000f84:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f88:	d26c      	bcs.n	8001064 <__udivmoddi4+0x2b4>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	d96a      	bls.n	8001064 <__udivmoddi4+0x2b4>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	4464      	add	r4, ip
 8000f92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f96:	fba0 9502 	umull	r9, r5, r0, r2
 8000f9a:	eba4 040e 	sub.w	r4, r4, lr
 8000f9e:	42ac      	cmp	r4, r5
 8000fa0:	46c8      	mov	r8, r9
 8000fa2:	46ae      	mov	lr, r5
 8000fa4:	d356      	bcc.n	8001054 <__udivmoddi4+0x2a4>
 8000fa6:	d053      	beq.n	8001050 <__udivmoddi4+0x2a0>
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d069      	beq.n	8001080 <__udivmoddi4+0x2d0>
 8000fac:	ebb3 0208 	subs.w	r2, r3, r8
 8000fb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000fb4:	fa22 f301 	lsr.w	r3, r2, r1
 8000fb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000fbc:	431f      	orrs	r7, r3
 8000fbe:	40cc      	lsrs	r4, r1
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000fc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fcc:	f1c2 0120 	rsb	r1, r2, #32
 8000fd0:	fa25 f301 	lsr.w	r3, r5, r1
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fdc:	4095      	lsls	r5, r2
 8000fde:	430d      	orrs	r5, r1
 8000fe0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fe4:	fb07 3311 	mls	r3, r7, r1, r3
 8000fe8:	fa1f fe8c 	uxth.w	lr, ip
 8000fec:	0c28      	lsrs	r0, r5, #16
 8000fee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ff2:	fb01 f30e 	mul.w	r3, r1, lr
 8000ff6:	4283      	cmp	r3, r0
 8000ff8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ffc:	d908      	bls.n	8001010 <__udivmoddi4+0x260>
 8000ffe:	eb1c 0000 	adds.w	r0, ip, r0
 8001002:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001006:	d22f      	bcs.n	8001068 <__udivmoddi4+0x2b8>
 8001008:	4283      	cmp	r3, r0
 800100a:	d92d      	bls.n	8001068 <__udivmoddi4+0x2b8>
 800100c:	3902      	subs	r1, #2
 800100e:	4460      	add	r0, ip
 8001010:	1ac0      	subs	r0, r0, r3
 8001012:	fbb0 f3f7 	udiv	r3, r0, r7
 8001016:	fb07 0013 	mls	r0, r7, r3, r0
 800101a:	b2ad      	uxth	r5, r5
 800101c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001020:	fb03 f00e 	mul.w	r0, r3, lr
 8001024:	42a8      	cmp	r0, r5
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x28a>
 8001028:	eb1c 0505 	adds.w	r5, ip, r5
 800102c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001030:	d216      	bcs.n	8001060 <__udivmoddi4+0x2b0>
 8001032:	42a8      	cmp	r0, r5
 8001034:	d914      	bls.n	8001060 <__udivmoddi4+0x2b0>
 8001036:	3b02      	subs	r3, #2
 8001038:	4465      	add	r5, ip
 800103a:	1a28      	subs	r0, r5, r0
 800103c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001040:	e738      	b.n	8000eb4 <__udivmoddi4+0x104>
 8001042:	4631      	mov	r1, r6
 8001044:	4630      	mov	r0, r6
 8001046:	e707      	b.n	8000e58 <__udivmoddi4+0xa8>
 8001048:	462f      	mov	r7, r5
 800104a:	e6e4      	b.n	8000e16 <__udivmoddi4+0x66>
 800104c:	4618      	mov	r0, r3
 800104e:	e6f9      	b.n	8000e44 <__udivmoddi4+0x94>
 8001050:	454b      	cmp	r3, r9
 8001052:	d2a9      	bcs.n	8000fa8 <__udivmoddi4+0x1f8>
 8001054:	ebb9 0802 	subs.w	r8, r9, r2
 8001058:	eb65 0e0c 	sbc.w	lr, r5, ip
 800105c:	3801      	subs	r0, #1
 800105e:	e7a3      	b.n	8000fa8 <__udivmoddi4+0x1f8>
 8001060:	4643      	mov	r3, r8
 8001062:	e7ea      	b.n	800103a <__udivmoddi4+0x28a>
 8001064:	4628      	mov	r0, r5
 8001066:	e794      	b.n	8000f92 <__udivmoddi4+0x1e2>
 8001068:	4641      	mov	r1, r8
 800106a:	e7d1      	b.n	8001010 <__udivmoddi4+0x260>
 800106c:	46d0      	mov	r8, sl
 800106e:	e77b      	b.n	8000f68 <__udivmoddi4+0x1b8>
 8001070:	4464      	add	r4, ip
 8001072:	3802      	subs	r0, #2
 8001074:	e747      	b.n	8000f06 <__udivmoddi4+0x156>
 8001076:	3b02      	subs	r3, #2
 8001078:	4465      	add	r5, ip
 800107a:	e72f      	b.n	8000edc <__udivmoddi4+0x12c>
 800107c:	4608      	mov	r0, r1
 800107e:	e706      	b.n	8000e8e <__udivmoddi4+0xde>
 8001080:	4631      	mov	r1, r6
 8001082:	e6e9      	b.n	8000e58 <__udivmoddi4+0xa8>

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_ZN9UIElement17updateAllElementsEv>:
#include "EasyUI.hpp"
#define SHOW_LOCATION 1
UIElement* UIElement::allElements[MAX_UI_ELEMENTS] = {};
uint8_t UIElement::elementNum = 0;

void UIElement::updateAllElements(){
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
    static bool firstCall = false;
    if (!firstCall){
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <_ZN9UIElement17updateAllElementsEv+0xb8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d01a      	beq.n	80010d2 <_ZN9UIElement17updateAllElementsEv+0x4a>
        for (int i=0; i<elementNum; i++){
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <_ZN9UIElement17updateAllElementsEv+0xbc>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4293      	cmp	r3, r2
 80010aa:	da0f      	bge.n	80010cc <_ZN9UIElement17updateAllElementsEv+0x44>
            allElements[i]->render();
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <_ZN9UIElement17updateAllElementsEv+0xc0>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b4:	4924      	ldr	r1, [pc, #144]	; (8001148 <_ZN9UIElement17updateAllElementsEv+0xc0>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4610      	mov	r0, r2
 80010c2:	4798      	blx	r3
        for (int i=0; i<elementNum; i++){
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3301      	adds	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e7e9      	b.n	80010a0 <_ZN9UIElement17updateAllElementsEv+0x18>
        }
        firstCall = true;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <_ZN9UIElement17updateAllElementsEv+0xb8>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
    }
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	491d      	ldr	r1, [pc, #116]	; (800114c <_ZN9UIElement17updateAllElementsEv+0xc4>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 ff45 	bl	8004f68 <XPT2046_Get_TouchedPoint>
    #if SHOW_LOCATION
    char str[20];
    LCD_DrawString(0, 0, "                     ");
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <_ZN9UIElement17updateAllElementsEv+0xc8>)
 80010e0:	2100      	movs	r1, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	f001 fa1c 	bl	8002520 <LCD_DrawString>
    sprintf(str, "x=%d, y=%d", touch.x, touch.y);
 80010e8:	8abb      	ldrh	r3, [r7, #20]
 80010ea:	461a      	mov	r2, r3
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	4638      	mov	r0, r7
 80010f0:	4918      	ldr	r1, [pc, #96]	; (8001154 <_ZN9UIElement17updateAllElementsEv+0xcc>)
 80010f2:	f002 ffa9 	bl	8004048 <sprintf_>
    LCD_DrawString(0, 0, str);
 80010f6:	463b      	mov	r3, r7
 80010f8:	461a      	mov	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f001 fa0f 	bl	8002520 <LCD_DrawString>
    #endif
    for (int i=0; i<elementNum; i++){
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <_ZN9UIElement17updateAllElementsEv+0xbc>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	4293      	cmp	r3, r2
 8001110:	da11      	bge.n	8001136 <_ZN9UIElement17updateAllElementsEv+0xae>
        allElements[i]->update(touch.x, touch.y);
 8001112:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <_ZN9UIElement17updateAllElementsEv+0xc0>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <_ZN9UIElement17updateAllElementsEv+0xc0>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3304      	adds	r3, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	8ab9      	ldrh	r1, [r7, #20]
 800112a:	8afa      	ldrh	r2, [r7, #22]
 800112c:	4798      	blx	r3
    for (int i=0; i<elementNum; i++){
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	3301      	adds	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	e7e7      	b.n	8001106 <_ZN9UIElement17updateAllElementsEv+0x7e>
    }
    // Update all UI elements
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000145 	.word	0x20000145
 8001144:	20000144 	.word	0x20000144
 8001148:	200000c4 	.word	0x200000c4
 800114c:	20000008 	.word	0x20000008
 8001150:	080082d0 	.word	0x080082d0
 8001154:	080082e8 	.word	0x080082e8

08001158 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_ADC1_Init+0x74>)
 800116a:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <MX_ADC1_Init+0x78>)
 800116c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_ADC1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_ADC1_Init+0x74>)
 8001176:	2201      	movs	r2, #1
 8001178:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_ADC1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_ADC1_Init+0x74>)
 8001182:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001186:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_ADC1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_ADC1_Init+0x74>)
 8001190:	2201      	movs	r2, #1
 8001192:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_ADC1_Init+0x74>)
 8001196:	f003 fff7 	bl	8005188 <HAL_ADC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f001 fb0a 	bl	80027b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011a4:	230c      	movs	r3, #12
 80011a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80011ac:	2305      	movs	r3, #5
 80011ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_ADC1_Init+0x74>)
 80011b6:	f004 f8d1 	bl	800535c <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011c0:	f001 fafa 	bl	80027b8 <Error_Handler>
  }

}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000148 	.word	0x20000148
 80011d0:	40012400 	.word	0x40012400

080011d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_ADC_MspInit+0x6c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d121      	bne.n	8001238 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_ADC_MspInit+0x70>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_ADC_MspInit+0x70>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_ADC_MspInit+0x70>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_ADC_MspInit+0x70>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_ADC_MspInit+0x70>)
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_ADC_MspInit+0x70>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001224:	2304      	movs	r3, #4
 8001226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_ADC_MspInit+0x74>)
 8001234:	f004 fbd6 	bl	80059e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40012400 	.word	0x40012400
 8001244:	40021000 	.word	0x40021000
 8001248:	40011000 	.word	0x40011000

0800124c <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <DEBUG_USART_Config+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <DEBUG_USART_Config+0x50>)
 8001254:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <DEBUG_USART_Config+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <DEBUG_USART_Config+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <DEBUG_USART_Config+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <DEBUG_USART_Config+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <DEBUG_USART_Config+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <DEBUG_USART_Config+0x4c>)
 8001278:	220c      	movs	r2, #12
 800127a:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <DEBUG_USART_Config+0x4c>)
 800127e:	f006 fa18 	bl	80076b2 <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <DEBUG_USART_Config+0x4c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <DEBUG_USART_Config+0x4c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	60da      	str	r2, [r3, #12]
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000178 	.word	0x20000178
 800129c:	40013800 	.word	0x40013800

080012a0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_FSMC_Init+0xbc>)
 80012ba:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012be:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_FSMC_Init+0xbc>)
 80012c2:	4a27      	ldr	r2, [pc, #156]	; (8001360 <MX_FSMC_Init+0xc0>)
 80012c4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <MX_FSMC_Init+0xbc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <MX_FSMC_Init+0xbc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_FSMC_Init+0xbc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_FSMC_Init+0xbc>)
 80012da:	2210      	movs	r2, #16
 80012dc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_FSMC_Init+0xbc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_FSMC_Init+0xbc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_FSMC_Init+0xbc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_FSMC_Init+0xbc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_FSMC_Init+0xbc>)
 80012f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_FSMC_Init+0xbc>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_FSMC_Init+0xbc>)
 8001306:	2200      	movs	r2, #0
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_FSMC_Init+0xbc>)
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_FSMC_Init+0xbc>)
 8001312:	2200      	movs	r2, #0
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001316:	230f      	movs	r3, #15
 8001318:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800131a:	230f      	movs	r3, #15
 800131c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001322:	230f      	movs	r3, #15
 8001324:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800132a:	2311      	movs	r3, #17
 800132c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <MX_FSMC_Init+0xbc>)
 800133a:	f005 fa13 	bl	8006764 <HAL_SRAM_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001344:	f001 fa38 	bl	80027b8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_FSMC_Init+0xc4>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <MX_FSMC_Init+0xc4>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	61d3      	str	r3, [r2, #28]

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200001f8 	.word	0x200001f8
 8001360:	a0000104 	.word	0xa0000104
 8001364:	40010000 	.word	0x40010000

08001368 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_FSMC_MspInit+0x78>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d129      	bne.n	80013d8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_FSMC_MspInit+0x78>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_FSMC_MspInit+0x7c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_FSMC_MspInit+0x7c>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6153      	str	r3, [r2, #20]
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_FSMC_MspInit+0x7c>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013a2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013a6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <HAL_FSMC_MspInit+0x80>)
 80013b8:	f004 fb14 	bl	80059e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013bc:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80013c0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <HAL_FSMC_MspInit+0x84>)
 80013d2:	f004 fb07 	bl	80059e4 <HAL_GPIO_Init>
 80013d6:	e000      	b.n	80013da <HAL_FSMC_MspInit+0x72>
    return;
 80013d8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000023c 	.word	0x2000023c
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40011800 	.word	0x40011800
 80013ec:	40011400 	.word	0x40011400

080013f0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013f8:	f7ff ffb6 	bl	8001368 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001418:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800141e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a62      	ldr	r2, [pc, #392]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a5c      	ldr	r2, [pc, #368]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a56      	ldr	r2, [pc, #344]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <MX_GPIO_Init+0x1d4>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2107      	movs	r1, #7
 8001494:	4851      	ldr	r0, [pc, #324]	; (80015dc <MX_GPIO_Init+0x1d8>)
 8001496:	f004 fc54 	bl	8005d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	484f      	ldr	r0, [pc, #316]	; (80015dc <MX_GPIO_Init+0x1d8>)
 80014a0:	f004 fc4f 	bl	8005d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2123      	movs	r1, #35	; 0x23
 80014a8:	484d      	ldr	r0, [pc, #308]	; (80015e0 <MX_GPIO_Init+0x1dc>)
 80014aa:	f004 fc4a 	bl	8005d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80014b4:	484b      	ldr	r0, [pc, #300]	; (80015e4 <MX_GPIO_Init+0x1e0>)
 80014b6:	f004 fc44 	bl	8005d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80014c0:	4847      	ldr	r0, [pc, #284]	; (80015e0 <MX_GPIO_Init+0x1dc>)
 80014c2:	f004 fc3e 	bl	8005d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 80014c6:	2347      	movs	r3, #71	; 0x47
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	4619      	mov	r1, r3
 80014dc:	483f      	ldr	r0, [pc, #252]	; (80015dc <MX_GPIO_Init+0x1d8>)
 80014de:	f004 fa81 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014e2:	2308      	movs	r3, #8
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	4619      	mov	r1, r3
 80014f4:	4839      	ldr	r0, [pc, #228]	; (80015dc <MX_GPIO_Init+0x1d8>)
 80014f6:	f004 fa75 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014fa:	2310      	movs	r3, #16
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <MX_GPIO_Init+0x1e4>)
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001502:	2301      	movs	r3, #1
 8001504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	4619      	mov	r1, r3
 800150c:	4833      	ldr	r0, [pc, #204]	; (80015dc <MX_GPIO_Init+0x1d8>)
 800150e:	f004 fa69 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 8001512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <MX_GPIO_Init+0x1e8>)
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	4619      	mov	r1, r3
 8001526:	4832      	ldr	r0, [pc, #200]	; (80015f0 <MX_GPIO_Init+0x1ec>)
 8001528:	f004 fa5c 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <MX_GPIO_Init+0x1e8>)
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	482d      	ldr	r0, [pc, #180]	; (80015f4 <MX_GPIO_Init+0x1f0>)
 8001540:	f004 fa50 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8001544:	f240 1323 	movw	r3, #291	; 0x123
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	4619      	mov	r1, r3
 800155c:	4820      	ldr	r0, [pc, #128]	; (80015e0 <MX_GPIO_Init+0x1dc>)
 800155e:	f004 fa41 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001562:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	4619      	mov	r1, r3
 800157a:	481a      	ldr	r0, [pc, #104]	; (80015e4 <MX_GPIO_Init+0x1e0>)
 800157c:	f004 fa32 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2302      	movs	r3, #2
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	4619      	mov	r1, r3
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <MX_GPIO_Init+0x1dc>)
 800159a:	f004 fa23 	bl	80059e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2006      	movs	r0, #6
 80015a4:	f004 f8df 	bl	8005766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015a8:	2006      	movs	r0, #6
 80015aa:	f004 f8f8 	bl	800579e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	200a      	movs	r0, #10
 80015b4:	f004 f8d7 	bl	8005766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015b8:	200a      	movs	r0, #10
 80015ba:	f004 f8f0 	bl	800579e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f004 f8cf 	bl	8005766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c8:	2028      	movs	r0, #40	; 0x28
 80015ca:	f004 f8e8 	bl	800579e <HAL_NVIC_EnableIRQ>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40011800 	.word	0x40011800
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	40011400 	.word	0x40011400
 80015e8:	10210000 	.word	0x10210000
 80015ec:	10110000 	.word	0x10110000
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40010800 	.word	0x40010800

080015f8 <_ZN8SERVO42C6getCHKEPhh>:
    uint32_t encoderCarry = 0;
    
    uint8_t stepSpeed = 3;
    

    static uint8_t getCHK(uint8_t instruction[], uint8_t len){
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	429a      	cmp	r2, r3
 8001612:	da0b      	bge.n	800162c <_ZN8SERVO42C6getCHKEPhh+0x34>
            result+=instruction[i];
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	4413      	add	r3, r2
 8001622:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	3301      	adds	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	e7ef      	b.n	800160c <_ZN8SERVO42C6getCHKEPhh+0x14>
        }
        return result & 0xFF;
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	b2db      	uxtb	r3, r3
    }
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>:

public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART) : address(address), pUART(pUART){}
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	460b      	mov	r3, r1
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	72fb      	strb	r3, [r7, #11]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	7afa      	ldrb	r2, [r7, #11]
 8001652:	711a      	strb	r2, [r3, #4]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	80da      	strh	r2, [r3, #6]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2203      	movs	r2, #3
 8001664:	731a      	strb	r2, [r3, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <_ZN8SERVO42C4stepEhhm>:

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step(uint8_t direction, uint8_t speed, uint32_t stepCount){
 8001672:	b580      	push	{r7, lr}
 8001674:	b088      	sub	sp, #32
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	72fb      	strb	r3, [r7, #11]
 8001680:	4613      	mov	r3, r2
 8001682:	72bb      	strb	r3, [r7, #10]
        uint8_t instruction[8] = {};
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
        instruction[0] = address;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	791b      	ldrb	r3, [r3, #4]
 8001690:	753b      	strb	r3, [r7, #20]
        instruction[1] = 0xfd;
 8001692:	23fd      	movs	r3, #253	; 0xfd
 8001694:	757b      	strb	r3, [r7, #21]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	01db      	lsls	r3, r3, #7
 800169a:	b25a      	sxtb	r2, r3
 800169c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80016a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	75bb      	strb	r3, [r7, #22]
        for (int i=0; i<4; i++){
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	dc16      	bgt.n	80016e6 <_ZN8SERVO42C4stepEhhm+0x74>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	401a      	ands	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	40da      	lsrs	r2, r3
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f1c3 0306 	rsb	r3, r3, #6
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	3320      	adds	r3, #32
 80016d8:	443b      	add	r3, r7
 80016da:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i=0; i<4; i++){
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	e7e5      	b.n	80016b2 <_ZN8SERVO42C4stepEhhm+0x40>
        }
        instruction[7] = getCHK(instruction, 8);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2108      	movs	r1, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff83 	bl	80015f8 <_ZN8SERVO42C6getCHKEPhh>
 80016f2:	4603      	mov	r3, r0
 80016f4:	76fb      	strb	r3, [r7, #27]
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	f107 0114 	add.w	r1, r7, #20
 80016fe:	2364      	movs	r3, #100	; 0x64
 8001700:	2208      	movs	r2, #8
 8001702:	f006 f823 	bl	800774c <HAL_UART_Transmit>
    }
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_ZN8SERVO42C13stepClockwiseEh>:
    void stepClockwise(uint8_t stepCount){
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	70fb      	strb	r3, [r7, #3]
        step(0, stepSpeed, stepCount);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7b1a      	ldrb	r2, [r3, #12]
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2100      	movs	r1, #0
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa5 	bl	8001672 <_ZN8SERVO42C4stepEhhm>
    }
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZN8SERVO42C20stepCounterClockwiseEh>:
    void stepCounterClockwise(uint8_t stepCount){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
        step(1, stepSpeed, stepCount);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7b1a      	ldrb	r2, [r3, #12]
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2101      	movs	r1, #1
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff94 	bl	8001672 <_ZN8SERVO42C4stepEhhm>
    }
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <_ZN9UIElementC1Etttt>:
    static void updateAllElements();

    uint16_t x, y;
    uint16_t width, height;
protected:
    UIElement(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	817b      	strh	r3, [r7, #10]
 8001766:	460b      	mov	r3, r1
 8001768:	813b      	strh	r3, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <_ZN9UIElementC1Etttt+0x5c>)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	601a      	str	r2, [r3, #0]
        this->x = x;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	897a      	ldrh	r2, [r7, #10]
 8001778:	809a      	strh	r2, [r3, #4]
        this->y = y;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	893a      	ldrh	r2, [r7, #8]
 800177e:	80da      	strh	r2, [r3, #6]
        this->width = width;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	88fa      	ldrh	r2, [r7, #6]
 8001784:	811a      	strh	r2, [r3, #8]
        this->height = height;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8b3a      	ldrh	r2, [r7, #24]
 800178a:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <_ZN9UIElementC1Etttt+0x60>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	b2d1      	uxtb	r1, r2
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <_ZN9UIElementC1Etttt+0x60>)
 8001796:	7011      	strb	r1, [r2, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <_ZN9UIElementC1Etttt+0x64>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	08008374 	.word	0x08008374
 80017b4:	20000144 	.word	0x20000144
 80017b8:	200000c4 	.word	0x200000c4

080017bc <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	803b      	strh	r3, [r7, #0]
        return x>=this->x && x<=this->x+width && y>=this->y && y<=this->y+height;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	889b      	ldrh	r3, [r3, #4]
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d318      	bcc.n	8001808 <_ZN9UIElement10checkTouchEtt+0x4c>
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	4619      	mov	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	891b      	ldrh	r3, [r3, #8]
 80017e2:	440b      	add	r3, r1
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dc0f      	bgt.n	8001808 <_ZN9UIElement10checkTouchEtt+0x4c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	88db      	ldrh	r3, [r3, #6]
 80017ec:	883a      	ldrh	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d30a      	bcc.n	8001808 <_ZN9UIElement10checkTouchEtt+0x4c>
 80017f2:	883a      	ldrh	r2, [r7, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	88db      	ldrh	r3, [r3, #6]
 80017f8:	4619      	mov	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	895b      	ldrh	r3, [r3, #10]
 80017fe:	440b      	add	r3, r1
 8001800:	429a      	cmp	r2, r3
 8001802:	dc01      	bgt.n	8001808 <_ZN9UIElement10checkTouchEtt+0x4c>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <_ZN9UIElement10checkTouchEtt+0x4e>
 8001808:	2300      	movs	r3, #0
    }
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <_ZN6ButtonC1EttPcPFvPS_iiEtttt>:
    char text[TEXT_CHAR_NUM];
public:
    bool isPressed = false;
    void (*onPressed)(Button* self, int x, int y);

    Button(uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], void (*onPressed)(Button*, int ,int) = nullptr, uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af02      	add	r7, sp, #8
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	817b      	strh	r3, [r7, #10]
 8001822:	4613      	mov	r3, r2
 8001824:	813b      	strh	r3, [r7, #8]
    : UIElement(x, y, width, height)
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 800182a:	893a      	ldrh	r2, [r7, #8]
 800182c:	8979      	ldrh	r1, [r7, #10]
 800182e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4623      	mov	r3, r4
 8001834:	f7ff ff8e 	bl	8001754 <_ZN9UIElementC1Etttt>
 8001838:	4a10      	ldr	r2, [pc, #64]	; (800187c <_ZN6ButtonC1EttPcPFvPS_iiEtttt+0x68>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	819a      	strh	r2, [r3, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    {
        this->initialColor = color;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001850:	81da      	strh	r2, [r3, #14]
        this->color = color;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001856:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800185c:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3314      	adds	r3, #20
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f006 fd1f 	bl	80082a8 <strcpy>
        this->onPressed = onPressed;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}
 800187a:	bf00      	nop
 800187c:	08008364 	.word	0x08008364

08001880 <_ZN6Button6renderEv>:

    void render() override
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b085      	sub	sp, #20
 8001884:	af02      	add	r7, sp, #8
 8001886:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	8898      	ldrh	r0, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	88d9      	ldrh	r1, [r3, #6]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	891a      	ldrh	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	895b      	ldrh	r3, [r3, #10]
 8001898:	f000 fd40 	bl	800231c <LCD_OpenWindow>
        LCD_FillColor(width*height, color);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	891b      	ldrh	r3, [r3, #8]
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	895b      	ldrh	r3, [r3, #10]
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8a1b      	ldrh	r3, [r3, #16]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f000 fd8b 	bl	80023ce <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x+width/3, y+height/3, text, color, textColor);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	889a      	ldrh	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	891b      	ldrh	r3, [r3, #8]
 80018c0:	4910      	ldr	r1, [pc, #64]	; (8001904 <_ZN6Button6renderEv+0x84>)
 80018c2:	fba1 1303 	umull	r1, r3, r1, r3
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b298      	uxth	r0, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	88da      	ldrh	r2, [r3, #6]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	895b      	ldrh	r3, [r3, #10]
 80018d6:	490b      	ldr	r1, [pc, #44]	; (8001904 <_ZN6Button6renderEv+0x84>)
 80018d8:	fba1 1303 	umull	r1, r3, r1, r3
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b299      	uxth	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f103 0214 	add.w	r2, r3, #20
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	8a1c      	ldrh	r4, [r3, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8a5b      	ldrh	r3, [r3, #18]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4623      	mov	r3, r4
 80018f6:	f000 fe91 	bl	800261c <LCD_DrawString_Color>
    }
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	aaaaaaab 	.word	0xaaaaaaab

08001908 <_ZN6Button6updateEtt>:

    
    void update(u_int16_t x, u_int16_t y) override
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y)){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	883a      	ldrh	r2, [r7, #0]
 800191c:	8879      	ldrh	r1, [r7, #2]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff4c 	bl	80017bc <_ZN9UIElement10checkTouchEtt>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01a      	beq.n	8001960 <_ZN6Button6updateEtt+0x58>
            color = YELLOW;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001930:	821a      	strh	r2, [r3, #16]
            if (!isPressed){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <_ZN6Button6updateEtt+0x68>
                isPressed = true;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                if (onPressed) onPressed(this,x,y);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00e      	beq.n	8001970 <_ZN6Button6updateEtt+0x68>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	8879      	ldrh	r1, [r7, #2]
 8001958:	883a      	ldrh	r2, [r7, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
 800195e:	e007      	b.n	8001970 <_ZN6Button6updateEtt+0x68>
            }
        }
        else{
            color = initialColor;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	89da      	ldrh	r2, [r3, #14]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	899a      	ldrh	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	8a1b      	ldrh	r3, [r3, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d008      	beq.n	800198e <_ZN6Button6updateEtt+0x86>
            render();
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
            last_color = color;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	8a1a      	ldrh	r2, [r3, #16]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	819a      	strh	r2, [r3, #12]
        }
    }
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <_ZN6SliderC1Etttttt>:
    uint16_t draggerX;
    uint16_t draggerY;

public:

    Slider(
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b087      	sub	sp, #28
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	817b      	strh	r3, [r7, #10]
 80019aa:	460b      	mov	r3, r1
 80019ac:	813b      	strh	r3, [r7, #8]
 80019ae:	4613      	mov	r3, r2
 80019b0:	80fb      	strh	r3, [r7, #6]
        uint16_t y,
        uint16_t maxValue = 0,
        uint16_t width = 10,
        uint16_t height = 130,
        uint16_t barColor = CYAN
    ): UIElement(x, y, width, height)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	8c3c      	ldrh	r4, [r7, #32]
 80019b6:	893a      	ldrh	r2, [r7, #8]
 80019b8:	8979      	ldrh	r1, [r7, #10]
 80019ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4623      	mov	r3, r4
 80019c0:	f7ff fec8 	bl	8001754 <_ZN9UIElementC1Etttt>
 80019c4:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <_ZN6SliderC1Etttttt+0x74>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2214      	movs	r2, #20
 80019ce:	82da      	strh	r2, [r3, #22]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	761a      	strb	r2, [r3, #24]
    {
        this->maxValue = maxValue;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	829a      	strh	r2, [r3, #20]
        this->barColor = barColor;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019e0:	819a      	strh	r2, [r3, #12]
        draggerX = x + width/2;
 80019e2:	8c3b      	ldrh	r3, [r7, #32]
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	897b      	ldrh	r3, [r7, #10]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	835a      	strh	r2, [r3, #26]
        draggerY = y + height/2;
 80019f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	893b      	ldrh	r3, [r7, #8]
 80019fa:	4413      	add	r3, r2
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	839a      	strh	r2, [r3, #28]

    }
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	08008354 	.word	0x08008354

08001a10 <_ZN6Slider6renderEv>:
    

    void render() override
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    {
        // render bar
        LCD_OpenWindow(x, y, width, height);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	8898      	ldrh	r0, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	88d9      	ldrh	r1, [r3, #6]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	891a      	ldrh	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	895b      	ldrh	r3, [r3, #10]
 8001a28:	f000 fc78 	bl	800231c <LCD_OpenWindow>
        LCD_FillColor(width*height, barColor);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	891b      	ldrh	r3, [r3, #8]
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	895b      	ldrh	r3, [r3, #10]
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	899b      	ldrh	r3, [r3, #12]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 fcc3 	bl	80023ce <LCD_FillColor>

        // render dragger
        LCD_OpenWindow(x,draggerY,width,draggerRadius);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8898      	ldrh	r0, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	8b99      	ldrh	r1, [r3, #28]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	891a      	ldrh	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	8adb      	ldrh	r3, [r3, #22]
 8001a58:	f000 fc60 	bl	800231c <LCD_OpenWindow>
        LCD_FillColor(width*draggerRadius, RED);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	891b      	ldrh	r3, [r3, #8]
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	8adb      	ldrh	r3, [r3, #22]
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fcad 	bl	80023ce <LCD_FillColor>
    }
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN6Slider5wrapYEt>:

    uint16_t wrapY(u_int16_t y){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
        if (y>500) return draggerY; // y=2048 if not touched
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a8e:	d902      	bls.n	8001a96 <_ZN6Slider5wrapYEt+0x1a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	8b9b      	ldrh	r3, [r3, #28]
 8001a94:	e01f      	b.n	8001ad6 <_ZN6Slider5wrapYEt+0x5a>
        if (y < this->y) return this->y;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	88db      	ldrh	r3, [r3, #6]
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d202      	bcs.n	8001aa6 <_ZN6Slider5wrapYEt+0x2a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	88db      	ldrh	r3, [r3, #6]
 8001aa4:	e017      	b.n	8001ad6 <_ZN6Slider5wrapYEt+0x5a>
        if (y > this->y+height-draggerRadius) return this->y+height-draggerRadius;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	88db      	ldrh	r3, [r3, #6]
 8001aac:	4619      	mov	r1, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	895b      	ldrh	r3, [r3, #10]
 8001ab2:	440b      	add	r3, r1
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	8ac9      	ldrh	r1, [r1, #22]
 8001ab8:	1a5b      	subs	r3, r3, r1
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dd0a      	ble.n	8001ad4 <_ZN6Slider5wrapYEt+0x58>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	88da      	ldrh	r2, [r3, #6]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	895b      	ldrh	r3, [r3, #10]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	8adb      	ldrh	r3, [r3, #22]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	e000      	b.n	8001ad6 <_ZN6Slider5wrapYEt+0x5a>
        return y;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
    }
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <_ZN6Slider6updateEtt>:


    
    void update(u_int16_t x, u_int16_t y) override
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
 8001aec:	4613      	mov	r3, r2
 8001aee:	803b      	strh	r3, [r7, #0]
    {
        bool isDraggerTouched;
        if (isDragging){
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7e1b      	ldrb	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d03d      	beq.n	8001b74 <_ZN6Slider6updateEtt+0x94>
            draggerY = wrapY(y);
 8001af8:	883b      	ldrh	r3, [r7, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffbd 	bl	8001a7c <_ZN6Slider5wrapYEt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	839a      	strh	r2, [r3, #28]
            render();
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
            isDraggerTouched = x>=draggerX-3*draggerRadius && x<=draggerX+3*draggerRadius && y>=draggerY-draggerRadius && y<=draggerY+draggerRadius;
 8001b14:	887a      	ldrh	r2, [r7, #2]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	8b5b      	ldrh	r3, [r3, #26]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	8adb      	ldrh	r3, [r3, #22]
 8001b20:	4618      	mov	r0, r3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	1ac3      	subs	r3, r0, r3
 8001b26:	440b      	add	r3, r1
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	db20      	blt.n	8001b6e <_ZN6Slider6updateEtt+0x8e>
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	8b5b      	ldrh	r3, [r3, #26]
 8001b32:	4618      	mov	r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	8adb      	ldrh	r3, [r3, #22]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	440b      	add	r3, r1
 8001b40:	4403      	add	r3, r0
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dc13      	bgt.n	8001b6e <_ZN6Slider6updateEtt+0x8e>
 8001b46:	883a      	ldrh	r2, [r7, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	8b9b      	ldrh	r3, [r3, #28]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8adb      	ldrh	r3, [r3, #22]
 8001b52:	1acb      	subs	r3, r1, r3
 8001b54:	429a      	cmp	r2, r3
 8001b56:	db0a      	blt.n	8001b6e <_ZN6Slider6updateEtt+0x8e>
 8001b58:	883a      	ldrh	r2, [r7, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8b9b      	ldrh	r3, [r3, #28]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	8adb      	ldrh	r3, [r3, #22]
 8001b64:	440b      	add	r3, r1
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dc01      	bgt.n	8001b6e <_ZN6Slider6updateEtt+0x8e>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZN6Slider6updateEtt+0x90>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	e027      	b.n	8001bc4 <_ZN6Slider6updateEtt+0xe4>
        }
        else{
            isDraggerTouched = x>=draggerX-draggerRadius && x<=draggerX+draggerRadius && y>=draggerY-draggerRadius && y<=draggerY+draggerRadius;
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	8b5b      	ldrh	r3, [r3, #26]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8adb      	ldrh	r3, [r3, #22]
 8001b80:	1acb      	subs	r3, r1, r3
 8001b82:	429a      	cmp	r2, r3
 8001b84:	db1c      	blt.n	8001bc0 <_ZN6Slider6updateEtt+0xe0>
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8b5b      	ldrh	r3, [r3, #26]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8adb      	ldrh	r3, [r3, #22]
 8001b92:	440b      	add	r3, r1
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dc13      	bgt.n	8001bc0 <_ZN6Slider6updateEtt+0xe0>
 8001b98:	883a      	ldrh	r2, [r7, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8b9b      	ldrh	r3, [r3, #28]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	8adb      	ldrh	r3, [r3, #22]
 8001ba4:	1acb      	subs	r3, r1, r3
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	db0a      	blt.n	8001bc0 <_ZN6Slider6updateEtt+0xe0>
 8001baa:	883a      	ldrh	r2, [r7, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8b9b      	ldrh	r3, [r3, #28]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8adb      	ldrh	r3, [r3, #22]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc01      	bgt.n	8001bc0 <_ZN6Slider6updateEtt+0xe0>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <_ZN6Slider6updateEtt+0xe2>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
        }
        isDragging = isDraggerTouched;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	761a      	strb	r2, [r3, #24]
        value = (draggerY - this->y) * maxValue / height;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	8b9b      	ldrh	r3, [r3, #28]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	88db      	ldrh	r3, [r3, #6]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	8a92      	ldrh	r2, [r2, #20]
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	8952      	ldrh	r2, [r2, #10]
 8001be2:	fb93 f3f2 	sdiv	r3, r3, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f876 	bl	8000cd8 <__aeabi_i2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	611a      	str	r2, [r3, #16]
    }
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <_ZN8TouchPadC1Ettttt>:
    uint16_t dotX;
    uint16_t dotY;
    uint16_t lastDotX = 0;
    uint16_t lastDotY = 0;

    TouchPad(uint16_t x, uint16_t y, uint16_t width = 150, uint16_t height = 150, uint16_t color = CYAN)
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	813b      	strh	r3, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
    : UIElement(x, y, width, height){
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	88fc      	ldrh	r4, [r7, #6]
 8001c1a:	893a      	ldrh	r2, [r7, #8]
 8001c1c:	8979      	ldrh	r1, [r7, #10]
 8001c1e:	8c3b      	ldrh	r3, [r7, #32]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4623      	mov	r3, r4
 8001c24:	f7ff fd96 	bl	8001754 <_ZN9UIElementC1Etttt>
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_ZN8TouchPadC1Ettttt+0x80>)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	220a      	movs	r2, #10
 8001c32:	81da      	strh	r2, [r3, #14]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	829a      	strh	r2, [r3, #20]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	82da      	strh	r2, [r3, #22]
        this->x = x;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	897a      	ldrh	r2, [r7, #10]
 8001c44:	809a      	strh	r2, [r3, #4]
        this->y = y;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	893a      	ldrh	r2, [r7, #8]
 8001c4a:	80da      	strh	r2, [r3, #6]
        this->width = width;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	88fa      	ldrh	r2, [r7, #6]
 8001c50:	811a      	strh	r2, [r3, #8]
        this->height = height;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8c3a      	ldrh	r2, [r7, #32]
 8001c56:	815a      	strh	r2, [r3, #10]
        this->color = color;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c5c:	819a      	strh	r2, [r3, #12]
        dotX = width/2;
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	821a      	strh	r2, [r3, #16]
        dotY = height/2;
 8001c68:	8c3b      	ldrh	r3, [r7, #32]
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	825a      	strh	r2, [r3, #18]
    }
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	08008344 	.word	0x08008344

08001c80 <_ZN8TouchPad6renderEv>:


    void render() override
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    {
        // render background
        LCD_OpenWindow(x, y, width, height);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	8898      	ldrh	r0, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	88d9      	ldrh	r1, [r3, #6]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	891a      	ldrh	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	895b      	ldrh	r3, [r3, #10]
 8001c98:	f000 fb40 	bl	800231c <LCD_OpenWindow>
        LCD_FillColor(width*height, color);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	891b      	ldrh	r3, [r3, #8]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	895b      	ldrh	r3, [r3, #10]
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	899b      	ldrh	r3, [r3, #12]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f000 fb8b 	bl	80023ce <LCD_FillColor>

        // render dot
        renderDot();
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f824 	bl	8001d06 <_ZN8TouchPad9renderDotEv>
    }
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZN8TouchPad8clearDotEv>:

    void clearDot(){
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
        LCD_OpenWindow(x, y, width, height);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8898      	ldrh	r0, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	88d9      	ldrh	r1, [r3, #6]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	891a      	ldrh	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	895b      	ldrh	r3, [r3, #10]
 8001cde:	f000 fb1d 	bl	800231c <LCD_OpenWindow>
        LCD_FillColor(width*height, color);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	891b      	ldrh	r3, [r3, #8]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	895b      	ldrh	r3, [r3, #10]
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	899b      	ldrh	r3, [r3, #12]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f000 fb68 	bl	80023ce <LCD_FillColor>
    }
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN8TouchPad9renderDotEv>:

    void renderDot(){
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
        LCD_OpenWindow(x+dotX, y+dotY, dotRadius, dotRadius);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	889a      	ldrh	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8a1b      	ldrh	r3, [r3, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	b298      	uxth	r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	88da      	ldrh	r2, [r3, #6]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8a5b      	ldrh	r3, [r3, #18]
 8001d22:	4413      	add	r3, r2
 8001d24:	b299      	uxth	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	89da      	ldrh	r2, [r3, #14]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	89db      	ldrh	r3, [r3, #14]
 8001d2e:	f000 faf5 	bl	800231c <LCD_OpenWindow>
        LCD_FillColor(dotRadius*dotRadius, RED);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	89db      	ldrh	r3, [r3, #14]
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	89db      	ldrh	r3, [r3, #14]
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fb42 	bl	80023ce <LCD_FillColor>
    }
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZN8TouchPad5wrapXEt>:

    uint16_t wrapX(u_int16_t x){
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
        if (x>500) return dotX; // x=2048 if not touched
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d64:	d902      	bls.n	8001d6c <_ZN8TouchPad5wrapXEt+0x1a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8a1b      	ldrh	r3, [r3, #16]
 8001d6a:	e01f      	b.n	8001dac <_ZN8TouchPad5wrapXEt+0x5a>
        if (x < this->x) return this->x;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	887a      	ldrh	r2, [r7, #2]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d202      	bcs.n	8001d7c <_ZN8TouchPad5wrapXEt+0x2a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	889b      	ldrh	r3, [r3, #4]
 8001d7a:	e017      	b.n	8001dac <_ZN8TouchPad5wrapXEt+0x5a>
        if (x > this->x+width-dotRadius) return this->x+width-dotRadius;
 8001d7c:	887a      	ldrh	r2, [r7, #2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	889b      	ldrh	r3, [r3, #4]
 8001d82:	4619      	mov	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	891b      	ldrh	r3, [r3, #8]
 8001d88:	440b      	add	r3, r1
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	89c9      	ldrh	r1, [r1, #14]
 8001d8e:	1a5b      	subs	r3, r3, r1
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dd0a      	ble.n	8001daa <_ZN8TouchPad5wrapXEt+0x58>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	889a      	ldrh	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	891b      	ldrh	r3, [r3, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	89db      	ldrh	r3, [r3, #14]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	e000      	b.n	8001dac <_ZN8TouchPad5wrapXEt+0x5a>
        return x;
 8001daa:	887b      	ldrh	r3, [r7, #2]
    }
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <_ZN8TouchPad5wrapYEt>:

    u_int16_t wrapY(u_int16_t y){
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]
        if (y>500) return dotY; // y=2048 if not touched
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dc8:	d902      	bls.n	8001dd0 <_ZN8TouchPad5wrapYEt+0x1a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8a5b      	ldrh	r3, [r3, #18]
 8001dce:	e01f      	b.n	8001e10 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y < this->y) return this->y;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	88db      	ldrh	r3, [r3, #6]
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d202      	bcs.n	8001de0 <_ZN8TouchPad5wrapYEt+0x2a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	88db      	ldrh	r3, [r3, #6]
 8001dde:	e017      	b.n	8001e10 <_ZN8TouchPad5wrapYEt+0x5a>
        if (y > this->y+height-dotRadius) return this->y+height-dotRadius;
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	88db      	ldrh	r3, [r3, #6]
 8001de6:	4619      	mov	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	895b      	ldrh	r3, [r3, #10]
 8001dec:	440b      	add	r3, r1
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	89c9      	ldrh	r1, [r1, #14]
 8001df2:	1a5b      	subs	r3, r3, r1
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dd0a      	ble.n	8001e0e <_ZN8TouchPad5wrapYEt+0x58>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	88da      	ldrh	r2, [r3, #6]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	895b      	ldrh	r3, [r3, #10]
 8001e00:	4413      	add	r3, r2
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	89db      	ldrh	r3, [r3, #14]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	e000      	b.n	8001e10 <_ZN8TouchPad5wrapYEt+0x5a>
        return y;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
    }
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <_ZN8TouchPad6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	807b      	strh	r3, [r7, #2]
 8001e26:	4613      	mov	r3, r2
 8001e28:	803b      	strh	r3, [r7, #0]
    {
        if (x>500 || y>500) return;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e30:	d858      	bhi.n	8001ee4 <_ZN8TouchPad6updateEtt+0xca>
 8001e32:	883b      	ldrh	r3, [r7, #0]
 8001e34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e38:	d854      	bhi.n	8001ee4 <_ZN8TouchPad6updateEtt+0xca>
        if (x < this->x || x > this->x+width || y < this->y || y > this->y+height) return;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	889b      	ldrh	r3, [r3, #4]
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d351      	bcc.n	8001ee8 <_ZN8TouchPad6updateEtt+0xce>
 8001e44:	887a      	ldrh	r2, [r7, #2]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	889b      	ldrh	r3, [r3, #4]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	891b      	ldrh	r3, [r3, #8]
 8001e50:	440b      	add	r3, r1
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dc48      	bgt.n	8001ee8 <_ZN8TouchPad6updateEtt+0xce>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	88db      	ldrh	r3, [r3, #6]
 8001e5a:	883a      	ldrh	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d343      	bcc.n	8001ee8 <_ZN8TouchPad6updateEtt+0xce>
 8001e60:	883a      	ldrh	r2, [r7, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	88db      	ldrh	r3, [r3, #6]
 8001e66:	4619      	mov	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	895b      	ldrh	r3, [r3, #10]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dc3a      	bgt.n	8001ee8 <_ZN8TouchPad6updateEtt+0xce>
        int _dotX = wrapX(x)-this->x;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ff6b 	bl	8001d52 <_ZN8TouchPad5wrapXEt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	889b      	ldrh	r3, [r3, #4]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]
        int _dotY = wrapY(y)-this->y;
 8001e88:	883b      	ldrh	r3, [r7, #0]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff92 	bl	8001db6 <_ZN8TouchPad5wrapYEt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	88db      	ldrh	r3, [r3, #6]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
        if (lastDotX != _dotX || lastDotY != _dotY){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8a9b      	ldrh	r3, [r3, #20]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d105      	bne.n	8001eb6 <_ZN8TouchPad6updateEtt+0x9c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8adb      	ldrh	r3, [r3, #22]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <_ZN8TouchPad6updateEtt+0xd0>
            clearDot();
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff05 	bl	8001cc6 <_ZN8TouchPad8clearDotEv>
            dotX = _dotX;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	821a      	strh	r2, [r3, #16]
            dotY = _dotY;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	825a      	strh	r2, [r3, #18]
            renderDot();
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff1a 	bl	8001d06 <_ZN8TouchPad9renderDotEv>
            lastDotX = dotX;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8a1a      	ldrh	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	829a      	strh	r2, [r3, #20]
            lastDotY = dotY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8a5a      	ldrh	r2, [r3, #18]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	82da      	strh	r2, [r3, #22]
 8001ee2:	e002      	b.n	8001eea <_ZN8TouchPad6updateEtt+0xd0>
        if (x>500 || y>500) return;
 8001ee4:	bf00      	nop
 8001ee6:	e000      	b.n	8001eea <_ZN8TouchPad6updateEtt+0xd0>
        if (x < this->x || x > this->x+width || y < this->y || y > this->y+height) return;
 8001ee8:	bf00      	nop
        }
    }
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <myfunc>:
#include "EasyUI.hpp"

#include <stdio.h>


void myfunc(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0ac      	sub	sp, #176	; 0xb0
 8001ef4:	af06      	add	r7, sp, #24
  SERVO42C servo(0xe0, &huart2);
 8001ef6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001efa:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <myfunc+0xf0>)
 8001efc:	21e0      	movs	r1, #224	; 0xe0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fb9b 	bl	800163a <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>


  Button testButton(150, 50, "Test");
 8001f04:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9304      	str	r3, [sp, #16]
 8001f0c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f10:	9303      	str	r3, [sp, #12]
 8001f12:	2332      	movs	r3, #50	; 0x32
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	2355      	movs	r3, #85	; 0x55
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <myfunc+0xf4>)
 8001f20:	2232      	movs	r2, #50	; 0x32
 8001f22:	2196      	movs	r1, #150	; 0x96
 8001f24:	f7ff fc76 	bl	8001814 <_ZN6ButtonC1EttPcPFvPS_iiEtttt>
  Slider testSlider(200,120,100);
 8001f28:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001f2c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2382      	movs	r3, #130	; 0x82
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	230a      	movs	r3, #10
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2364      	movs	r3, #100	; 0x64
 8001f3c:	2278      	movs	r2, #120	; 0x78
 8001f3e:	21c8      	movs	r1, #200	; 0xc8
 8001f40:	f7ff fd2a 	bl	8001998 <_ZN6SliderC1Etttttt>
  TouchPad testTouchPad(0, 120);
 8001f44:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f48:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	2396      	movs	r3, #150	; 0x96
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2396      	movs	r3, #150	; 0x96
 8001f54:	2278      	movs	r2, #120	; 0x78
 8001f56:	2100      	movs	r1, #0
 8001f58:	f7ff fe50 	bl	8001bfc <_ZN8TouchPadC1Ettttt>
  


  char str[20];
  strType_XPT2046_Coordinate touch;
  LCD_DrawString(0, 0, "Hello World");
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <myfunc+0xf8>)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2000      	movs	r0, #0
 8001f62:	f000 fadd 	bl	8002520 <LCD_DrawString>

    // sprintf(str, "x=%d, y=%d", touch.x, touch.y);
    // LCD_DrawString(0, 0, str);

    
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001f66:	2101      	movs	r1, #1
 8001f68:	4820      	ldr	r0, [pc, #128]	; (8001fec <myfunc+0xfc>)
 8001f6a:	f003 fed3 	bl	8005d14 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <myfunc+0x9a>
      servo.stepCounterClockwise(10);
 8001f7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f82:	210a      	movs	r1, #10
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fbd3 	bl	8001730 <_ZN8SERVO42C20stepCounterClockwiseEh>
    }
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8e:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <myfunc+0x100>)
 8001f90:	f003 fec0 	bl	8005d14 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <myfunc+0xc0>
      servo.stepClockwise(10);
 8001fa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fa8:	210a      	movs	r1, #10
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fbaf 	bl	800170e <_ZN8SERVO42C13stepClockwiseEh>
    }


    uint8_t data[3] = {};
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <myfunc+0x104>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	723b      	strb	r3, [r7, #8]
 8001fb6:	f107 0309 	add.w	r3, r7, #9
 8001fba:	2200      	movs	r2, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
    // HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
    char str[3] = {};
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <myfunc+0x104>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	713b      	strb	r3, [r7, #4]
 8001fc4:	1d7b      	adds	r3, r7, #5
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	801a      	strh	r2, [r3, #0]
    sprintf(str, "%02X", data[0]);
 8001fca:	7a3b      	ldrb	r3, [r7, #8]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <myfunc+0x108>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 f838 	bl	8004048 <sprintf_>
    
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); 
    UIElement::updateAllElements();
 8001fd8:	f7ff f856 	bl	8001088 <_ZN9UIElement17updateAllElementsEv>
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
    // HAL_Delay(500);
  }
 8001fdc:	e7c3      	b.n	8001f66 <myfunc+0x76>
 8001fde:	bf00      	nop
 8001fe0:	2000079c 	.word	0x2000079c
 8001fe4:	080082f4 	.word	0x080082f4
 8001fe8:	080082fc 	.word	0x080082fc
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	08008310 	.word	0x08008310
 8001ff8:	08008308 	.word	0x08008308

08001ffc <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	e002      	b.n	800200c <Delay+0x10>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3b01      	subs	r3, #1
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <Delay+0xa>
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 800201e:	b580      	push	{r7, lr}
 8002020:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 8002022:	2001      	movs	r0, #1
 8002024:	f000 f826 	bl	8002074 <LCD_BackLed_Control>
	LCD_Rst();
 8002028:	f000 f80c 	bl	8002044 <LCD_Rst>
	LCD_REG_Config();
 800202c:	f000 f85c 	bl	80020e8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8002030:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002034:	22f0      	movs	r2, #240	; 0xf0
 8002036:	2100      	movs	r1, #0
 8002038:	2000      	movs	r0, #0
 800203a:	f000 f9e7 	bl	800240c <LCD_Clear>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	2102      	movs	r1, #2
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <LCD_Rst+0x28>)
 800204e:	f003 fe78 	bl	8005d42 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <LCD_Rst+0x2c>)
 8002054:	f7ff ffd2 	bl	8001ffc <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	2102      	movs	r1, #2
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <LCD_Rst+0x28>)
 800205e:	f003 fe70 	bl	8005d42 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <LCD_Rst+0x2c>)
 8002064:	f7ff ffca 	bl	8001ffc <Delay>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40011800 	.word	0x40011800
 8002070:	0002bffc 	.word	0x0002bffc

08002074 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <LCD_BackLed_Control+0x34>)
 800208c:	f003 fe59 	bl	8005d42 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8002090:	e005      	b.n	800209e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <LCD_BackLed_Control+0x34>)
 800209a:	f003 fe52 	bl	8005d42 <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40011400 	.word	0x40011400

080020ac <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80020b6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	8013      	strh	r3, [r2, #0]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <LCD_Write_Data+0x1c>)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	8013      	strh	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	60020000 	.word	0x60020000

080020e8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80020ec:	20cf      	movs	r0, #207	; 0xcf
 80020ee:	f7ff ffdd 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff ffe8 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80020f8:	2081      	movs	r0, #129	; 0x81
 80020fa:	f7ff ffe5 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80020fe:	2030      	movs	r0, #48	; 0x30
 8002100:	f7ff ffe2 	bl	80020c8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8002104:	20ed      	movs	r0, #237	; 0xed
 8002106:	f7ff ffd1 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800210a:	2064      	movs	r0, #100	; 0x64
 800210c:	f7ff ffdc 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8002110:	2003      	movs	r0, #3
 8002112:	f7ff ffd9 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8002116:	2012      	movs	r0, #18
 8002118:	f7ff ffd6 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800211c:	2081      	movs	r0, #129	; 0x81
 800211e:	f7ff ffd3 	bl	80020c8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8002122:	20e8      	movs	r0, #232	; 0xe8
 8002124:	f7ff ffc2 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8002128:	2085      	movs	r0, #133	; 0x85
 800212a:	f7ff ffcd 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800212e:	2010      	movs	r0, #16
 8002130:	f7ff ffca 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8002134:	2078      	movs	r0, #120	; 0x78
 8002136:	f7ff ffc7 	bl	80020c8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800213a:	20cb      	movs	r0, #203	; 0xcb
 800213c:	f7ff ffb6 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8002140:	2039      	movs	r0, #57	; 0x39
 8002142:	f7ff ffc1 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8002146:	202c      	movs	r0, #44	; 0x2c
 8002148:	f7ff ffbe 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff ffbb 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8002152:	2034      	movs	r0, #52	; 0x34
 8002154:	f7ff ffb8 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8002158:	2002      	movs	r0, #2
 800215a:	f7ff ffb5 	bl	80020c8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800215e:	20f7      	movs	r0, #247	; 0xf7
 8002160:	f7ff ffa4 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8002164:	2020      	movs	r0, #32
 8002166:	f7ff ffaf 	bl	80020c8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800216a:	20ea      	movs	r0, #234	; 0xea
 800216c:	f7ff ff9e 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff ffa9 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff ffa6 	bl	80020c8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800217c:	20b1      	movs	r0, #177	; 0xb1
 800217e:	f7ff ff95 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff ffa0 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002188:	201b      	movs	r0, #27
 800218a:	f7ff ff9d 	bl	80020c8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800218e:	20b6      	movs	r0, #182	; 0xb6
 8002190:	f7ff ff8c 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8002194:	200a      	movs	r0, #10
 8002196:	f7ff ff97 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800219a:	20a2      	movs	r0, #162	; 0xa2
 800219c:	f7ff ff94 	bl	80020c8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80021a0:	20c0      	movs	r0, #192	; 0xc0
 80021a2:	f7ff ff83 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80021a6:	2035      	movs	r0, #53	; 0x35
 80021a8:	f7ff ff8e 	bl	80020c8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80021ac:	20c1      	movs	r0, #193	; 0xc1
 80021ae:	f7ff ff7d 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80021b2:	2011      	movs	r0, #17
 80021b4:	f7ff ff88 	bl	80020c8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80021b8:	20c5      	movs	r0, #197	; 0xc5
 80021ba:	f7ff ff77 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80021be:	2045      	movs	r0, #69	; 0x45
 80021c0:	f7ff ff82 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80021c4:	2045      	movs	r0, #69	; 0x45
 80021c6:	f7ff ff7f 	bl	80020c8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80021ca:	20c7      	movs	r0, #199	; 0xc7
 80021cc:	f7ff ff6e 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80021d0:	20a2      	movs	r0, #162	; 0xa2
 80021d2:	f7ff ff79 	bl	80020c8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80021d6:	20f2      	movs	r0, #242	; 0xf2
 80021d8:	f7ff ff68 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff ff73 	bl	80020c8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80021e2:	2026      	movs	r0, #38	; 0x26
 80021e4:	f7ff ff62 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7ff ff6d 	bl	80020c8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80021ee:	20e0      	movs	r0, #224	; 0xe0
 80021f0:	f7ff ff5c 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80021f4:	200f      	movs	r0, #15
 80021f6:	f7ff ff67 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80021fa:	2026      	movs	r0, #38	; 0x26
 80021fc:	f7ff ff64 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8002200:	2024      	movs	r0, #36	; 0x24
 8002202:	f7ff ff61 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8002206:	200b      	movs	r0, #11
 8002208:	f7ff ff5e 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800220c:	200e      	movs	r0, #14
 800220e:	f7ff ff5b 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8002212:	2009      	movs	r0, #9
 8002214:	f7ff ff58 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8002218:	2054      	movs	r0, #84	; 0x54
 800221a:	f7ff ff55 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800221e:	20a8      	movs	r0, #168	; 0xa8
 8002220:	f7ff ff52 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8002224:	2046      	movs	r0, #70	; 0x46
 8002226:	f7ff ff4f 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800222a:	200c      	movs	r0, #12
 800222c:	f7ff ff4c 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8002230:	2017      	movs	r0, #23
 8002232:	f7ff ff49 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8002236:	2009      	movs	r0, #9
 8002238:	f7ff ff46 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800223c:	200f      	movs	r0, #15
 800223e:	f7ff ff43 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002242:	2007      	movs	r0, #7
 8002244:	f7ff ff40 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff ff3d 	bl	80020c8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800224e:	20e1      	movs	r0, #225	; 0xe1
 8002250:	f7ff ff2c 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002254:	2000      	movs	r0, #0
 8002256:	f7ff ff37 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800225a:	2019      	movs	r0, #25
 800225c:	f7ff ff34 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002260:	201b      	movs	r0, #27
 8002262:	f7ff ff31 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8002266:	2004      	movs	r0, #4
 8002268:	f7ff ff2e 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800226c:	2010      	movs	r0, #16
 800226e:	f7ff ff2b 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002272:	2007      	movs	r0, #7
 8002274:	f7ff ff28 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8002278:	202a      	movs	r0, #42	; 0x2a
 800227a:	f7ff ff25 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800227e:	2047      	movs	r0, #71	; 0x47
 8002280:	f7ff ff22 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8002284:	2039      	movs	r0, #57	; 0x39
 8002286:	f7ff ff1f 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800228a:	2003      	movs	r0, #3
 800228c:	f7ff ff1c 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002290:	2006      	movs	r0, #6
 8002292:	f7ff ff19 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002296:	2006      	movs	r0, #6
 8002298:	f7ff ff16 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800229c:	2030      	movs	r0, #48	; 0x30
 800229e:	f7ff ff13 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80022a2:	2038      	movs	r0, #56	; 0x38
 80022a4:	f7ff ff10 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80022a8:	200f      	movs	r0, #15
 80022aa:	f7ff ff0d 	bl	80020c8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80022ae:	2036      	movs	r0, #54	; 0x36
 80022b0:	f7ff fefc 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80022b4:	20c8      	movs	r0, #200	; 0xc8
 80022b6:	f7ff ff07 	bl	80020c8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80022ba:	202a      	movs	r0, #42	; 0x2a
 80022bc:	f7ff fef6 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff ff01 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff fefe 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff fefb 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80022d2:	20ef      	movs	r0, #239	; 0xef
 80022d4:	f7ff fef8 	bl	80020c8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80022d8:	202b      	movs	r0, #43	; 0x2b
 80022da:	f7ff fee7 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff fef2 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff feef 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7ff feec 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80022f0:	203f      	movs	r0, #63	; 0x3f
 80022f2:	f7ff fee9 	bl	80020c8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80022f6:	203a      	movs	r0, #58	; 0x3a
 80022f8:	f7ff fed8 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80022fc:	2055      	movs	r0, #85	; 0x55
 80022fe:	f7ff fee3 	bl	80020c8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8002302:	2011      	movs	r0, #17
 8002304:	f7ff fed2 	bl	80020ac <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <LCD_REG_Config+0x230>)
 800230a:	f7ff fe77 	bl	8001ffc <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800230e:	2029      	movs	r0, #41	; 0x29
 8002310:	f7ff fecc 	bl	80020ac <LCD_Write_Cmd>
	
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	0002bffc 	.word	0x0002bffc

0800231c <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4604      	mov	r4, r0
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4623      	mov	r3, r4
 800232c:	80fb      	strh	r3, [r7, #6]
 800232e:	4603      	mov	r3, r0
 8002330:	80bb      	strh	r3, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]
 8002336:	4613      	mov	r3, r2
 8002338:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800233a:	202a      	movs	r0, #42	; 0x2a
 800233c:	f7ff feb6 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	b29b      	uxth	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff febe 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	b29b      	uxth	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff feb8 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	4413      	add	r3, r2
 800235e:	3b01      	subs	r3, #1
 8002360:	121b      	asrs	r3, r3, #8
 8002362:	b29b      	uxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff feaf 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	4413      	add	r3, r2
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29b      	uxth	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	b29b      	uxth	r3, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fea4 	bl	80020c8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8002380:	202b      	movs	r0, #43	; 0x2b
 8002382:	f7ff fe93 	bl	80020ac <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29b      	uxth	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe9b 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8002392:	88bb      	ldrh	r3, [r7, #4]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fe95 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800239e:	88ba      	ldrh	r2, [r7, #4]
 80023a0:	883b      	ldrh	r3, [r7, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	3b01      	subs	r3, #1
 80023a6:	121b      	asrs	r3, r3, #8
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fe8c 	bl	80020c8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80023b0:	88ba      	ldrh	r2, [r7, #4]
 80023b2:	883b      	ldrh	r3, [r7, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe81 	bl	80020c8 <LCD_Write_Data>
	
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}

080023ce <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80023de:	202c      	movs	r0, #44	; 0x2c
 80023e0:	f7ff fe64 	bl	80020ac <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e006      	b.n	80023f8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe6b 	bl	80020c8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3301      	adds	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3f4      	bcc.n	80023ea <LCD_FillColor+0x1c>
		
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	4604      	mov	r4, r0
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	80fb      	strh	r3, [r7, #6]
 800241e:	4603      	mov	r3, r0
 8002420:	80bb      	strh	r3, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
 8002426:	4613      	mov	r3, r2
 8002428:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <LCD_Clear+0x58>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <LCD_Clear+0x2a>
 8002432:	2300      	movs	r3, #0
 8002434:	e001      	b.n	800243a <LCD_Clear+0x2e>
 8002436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243a:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800243c:	883b      	ldrh	r3, [r7, #0]
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	88b9      	ldrh	r1, [r7, #4]
 8002442:	88f8      	ldrh	r0, [r7, #6]
 8002444:	f7ff ff6a 	bl	800231c <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	883a      	ldrh	r2, [r7, #0]
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	461a      	mov	r2, r3
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f7ff ffb9 	bl	80023ce <LCD_FillColor>
	
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}
 8002464:	20000240 	.word	0x20000240

08002468 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
 8002472:	460b      	mov	r3, r1
 8002474:	80bb      	strh	r3, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <LCD_DrawChar+0xb0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <LCD_DrawChar+0x20>
 8002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002486:	e000      	b.n	800248a <LCD_DrawChar+0x22>
 8002488:	2300      	movs	r3, #0
 800248a:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <LCD_DrawChar+0xb0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <LCD_DrawChar+0x30>
 8002494:	2300      	movs	r3, #0
 8002496:	e001      	b.n	800249c <LCD_DrawChar+0x34>
 8002498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249c:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	3b20      	subs	r3, #32
 80024a2:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80024a4:	88b9      	ldrh	r1, [r7, #4]
 80024a6:	88f8      	ldrh	r0, [r7, #6]
 80024a8:	2310      	movs	r3, #16
 80024aa:	2208      	movs	r2, #8
 80024ac:	f7ff ff36 	bl	800231c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80024b0:	202c      	movs	r0, #44	; 0x2c
 80024b2:	f7ff fdfb 	bl	80020ac <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80024b6:	2300      	movs	r3, #0
 80024b8:	75bb      	strb	r3, [r7, #22]
 80024ba:	e024      	b.n	8002506 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	7dbb      	ldrb	r3, [r7, #22]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <LCD_DrawChar+0xb4>)
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	440a      	add	r2, r1
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80024cc:	2300      	movs	r3, #0
 80024ce:	757b      	strb	r3, [r7, #21]
 80024d0:	e013      	b.n	80024fa <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 80024dc:	8a7b      	ldrh	r3, [r7, #18]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fdf2 	bl	80020c8 <LCD_Write_Data>
 80024e4:	e003      	b.n	80024ee <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 80024e6:	8a3b      	ldrh	r3, [r7, #16]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fded 	bl	80020c8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80024f4:	7d7b      	ldrb	r3, [r7, #21]
 80024f6:	3301      	adds	r3, #1
 80024f8:	757b      	strb	r3, [r7, #21]
 80024fa:	7d7b      	ldrb	r3, [r7, #21]
 80024fc:	2b07      	cmp	r3, #7
 80024fe:	d9e8      	bls.n	80024d2 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002500:	7dbb      	ldrb	r3, [r7, #22]
 8002502:	3301      	adds	r3, #1
 8002504:	75bb      	strb	r3, [r7, #22]
 8002506:	7dbb      	ldrb	r3, [r7, #22]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d9d7      	bls.n	80024bc <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000240 	.word	0x20000240
 800251c:	0800837c 	.word	0x0800837c

08002520 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	603a      	str	r2, [r7, #0]
 800252a:	80fb      	strh	r3, [r7, #6]
 800252c:	460b      	mov	r3, r1
 800252e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8002530:	e01c      	b.n	800256c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2be8      	cmp	r3, #232	; 0xe8
 8002536:	d904      	bls.n	8002542 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002538:	2300      	movs	r3, #0
 800253a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800253c:	88bb      	ldrh	r3, [r7, #4]
 800253e:	3310      	adds	r3, #16
 8002540:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002542:	88bb      	ldrh	r3, [r7, #4]
 8002544:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002548:	d903      	bls.n	8002552 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800254a:	2300      	movs	r3, #0
 800254c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800254e:	2300      	movs	r3, #0
 8002550:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	88b9      	ldrh	r1, [r7, #4]
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff84 	bl	8002468 <LCD_DrawChar>
		
		pStr ++;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	3308      	adds	r3, #8
 800256a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1de      	bne.n	8002532 <LCD_DrawString+0x12>
		
	}
	
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	4604      	mov	r4, r0
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	80fb      	strh	r3, [r7, #6]
 8002592:	4603      	mov	r3, r0
 8002594:	80bb      	strh	r3, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	70fb      	strb	r3, [r7, #3]
 800259a:	4613      	mov	r3, r2
 800259c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	3b20      	subs	r3, #32
 80025a2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80025a4:	88b9      	ldrh	r1, [r7, #4]
 80025a6:	88f8      	ldrh	r0, [r7, #6]
 80025a8:	2310      	movs	r3, #16
 80025aa:	2208      	movs	r2, #8
 80025ac:	f7ff feb6 	bl	800231c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80025b0:	202c      	movs	r0, #44	; 0x2c
 80025b2:	f7ff fd7b 	bl	80020ac <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80025b6:	2300      	movs	r3, #0
 80025b8:	73bb      	strb	r3, [r7, #14]
 80025ba:	e024      	b.n	8002606 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80025bc:	7b3a      	ldrb	r2, [r7, #12]
 80025be:	7bbb      	ldrb	r3, [r7, #14]
 80025c0:	4915      	ldr	r1, [pc, #84]	; (8002618 <LCD_DrawChar_Color+0x98>)
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	440a      	add	r2, r1
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80025cc:	2300      	movs	r3, #0
 80025ce:	737b      	strb	r3, [r7, #13]
 80025d0:	e013      	b.n	80025fa <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80025dc:	8c3b      	ldrh	r3, [r7, #32]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fd72 	bl	80020c8 <LCD_Write_Data>
 80025e4:	e003      	b.n	80025ee <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80025e6:	883b      	ldrh	r3, [r7, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fd6d 	bl	80020c8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80025f4:	7b7b      	ldrb	r3, [r7, #13]
 80025f6:	3301      	adds	r3, #1
 80025f8:	737b      	strb	r3, [r7, #13]
 80025fa:	7b7b      	ldrb	r3, [r7, #13]
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d9e8      	bls.n	80025d2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002600:	7bbb      	ldrb	r3, [r7, #14]
 8002602:	3301      	adds	r3, #1
 8002604:	73bb      	strb	r3, [r7, #14]
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	2b0f      	cmp	r3, #15
 800260a:	d9d7      	bls.n	80025bc <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bd90      	pop	{r4, r7, pc}
 8002616:	bf00      	nop
 8002618:	0800837c 	.word	0x0800837c

0800261c <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b087      	sub	sp, #28
 8002620:	af02      	add	r7, sp, #8
 8002622:	60ba      	str	r2, [r7, #8]
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	81fb      	strh	r3, [r7, #14]
 800262a:	460b      	mov	r3, r1
 800262c:	81bb      	strh	r3, [r7, #12]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002632:	e01f      	b.n	8002674 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002634:	89fb      	ldrh	r3, [r7, #14]
 8002636:	2be8      	cmp	r3, #232	; 0xe8
 8002638:	d904      	bls.n	8002644 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800263a:	2300      	movs	r3, #0
 800263c:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 800263e:	89bb      	ldrh	r3, [r7, #12]
 8002640:	3310      	adds	r3, #16
 8002642:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002644:	89bb      	ldrh	r3, [r7, #12]
 8002646:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800264a:	d903      	bls.n	8002654 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800264c:	2300      	movs	r3, #0
 800264e:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8002650:	2300      	movs	r3, #0
 8002652:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	88fc      	ldrh	r4, [r7, #6]
 800265a:	89b9      	ldrh	r1, [r7, #12]
 800265c:	89f8      	ldrh	r0, [r7, #14]
 800265e:	8c3b      	ldrh	r3, [r7, #32]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	4623      	mov	r3, r4
 8002664:	f7ff ff8c 	bl	8002580 <LCD_DrawChar_Color>
		
		pStr ++;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	3301      	adds	r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	3308      	adds	r3, #8
 8002672:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1db      	bne.n	8002634 <LCD_DrawString_Color+0x18>
		
	}
	
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
	...

08002688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800268c:	f002 fd1a 	bl	80050c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002690:	f000 f830 	bl	80026f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002694:	f7fe feb6 	bl	8001404 <MX_GPIO_Init>
  MX_FSMC_Init();
 8002698:	f7fe fe02 	bl	80012a0 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 800269c:	f002 f938 	bl	8004910 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80026a0:	f001 ff7e 	bl	80045a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026a4:	f001 ffc8 	bl	8004638 <MX_TIM3_Init>
  MX_TIM5_Init();
 80026a8:	f002 f814 	bl	80046d4 <MX_TIM5_Init>
  MX_TIM1_Init();
 80026ac:	f001 fed2 	bl	8004454 <MX_TIM1_Init>
  MX_ADC1_Init();
 80026b0:	f7fe fd52 	bl	8001158 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80026b4:	f002 f980 	bl	80049b8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80026b8:	f002 f954 	bl	8004964 <MX_USART2_UART_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 80026bc:	2200      	movs	r2, #0
 80026be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c2:	4809      	ldr	r0, [pc, #36]	; (80026e8 <main+0x60>)
 80026c4:	f003 fb3d 	bl	8005d42 <HAL_GPIO_WritePin>
	LCD_INIT();
 80026c8:	f7ff fca9 	bl	800201e <LCD_INIT>
	
	
	DEBUG_USART_Config();
 80026cc:	f7fe fdbe 	bl	800124c <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 80026d0:	f002 f8ea 	bl	80048a8 <TIMER_INIT>
	timer_min(1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f002 f8f9 	bl	80048cc <timer_min>
  myfunc();
 80026da:	f7ff fc09 	bl	8001ef0 <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 80026de:	4903      	ldr	r1, [pc, #12]	; (80026ec <main+0x64>)
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <main+0x68>)
 80026e2:	f002 fc41 	bl	8004f68 <XPT2046_Get_TouchedPoint>
 80026e6:	e7fa      	b.n	80026de <main+0x56>
 80026e8:	40011400 	.word	0x40011400
 80026ec:	20000008 	.word	0x20000008
 80026f0:	20000244 	.word	0x20000244

080026f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b096      	sub	sp, #88	; 0x58
 80026f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026fe:	2228      	movs	r2, #40	; 0x28
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f005 fd84 	bl	8008210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002728:	2305      	movs	r3, #5
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002732:	2300      	movs	r3, #0
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002736:	2301      	movs	r3, #1
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273a:	2301      	movs	r3, #1
 800273c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273e:	2302      	movs	r3, #2
 8002740:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002746:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002748:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800274c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fb30 	bl	8005db8 <HAL_RCC_OscConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800275e:	f000 f82b 	bl	80027b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002762:	230f      	movs	r3, #15
 8002764:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002766:	2302      	movs	r3, #2
 8002768:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800276e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	2102      	movs	r1, #2
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fd7e 	bl	8006280 <HAL_RCC_ClockConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800278a:	f000 f815 	bl	80027b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800278e:	2303      	movs	r3, #3
 8002790:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002796:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 ff29 	bl	80065f8 <HAL_RCCEx_PeriphCLKConfig>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80027ac:	f000 f804 	bl	80027b8 <Error_Handler>
  }
}
 80027b0:	bf00      	nop
 80027b2:	3758      	adds	r7, #88	; 0x58
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4603      	mov	r3, r0
 80027d2:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d204      	bcs.n	80027e6 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	701a      	strb	r2, [r3, #0]
  }
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4603      	mov	r3, r0
 80027fe:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e002      	b.n	8002820 <_strnlen_s+0x16>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <_strnlen_s+0x28>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	603a      	str	r2, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f3      	bne.n	800281a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1ad3      	subs	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	2b2f      	cmp	r3, #47	; 0x2f
 8002850:	d904      	bls.n	800285c <_is_digit+0x1a>
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2b39      	cmp	r3, #57	; 0x39
 8002856:	d801      	bhi.n	800285c <_is_digit+0x1a>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <_is_digit+0x1c>
 800285c:	2300      	movs	r3, #0
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800287a:	e00e      	b.n	800289a <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4618      	mov	r0, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1c59      	adds	r1, r3, #1
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6011      	str	r1, [r2, #0]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4403      	add	r3, r0
 8002896:	3b30      	subs	r3, #48	; 0x30
 8002898:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ffce 	bl	8002842 <_is_digit>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e7      	bne.n	800287c <_atoi+0xe>
  }
  return i;
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80028b6:	b590      	push	{r4, r7, lr}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d125      	bne.n	800291e <_out_rev+0x68>
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d120      	bne.n	800291e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e00a      	b.n	80028f8 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	1c53      	adds	r3, r2, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	68fc      	ldr	r4, [r7, #12]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	2020      	movs	r0, #32
 80028f0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3f0      	bcc.n	80028e2 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002900:	e00d      	b.n	800291e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	3b01      	subs	r3, #1
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	4413      	add	r3, r2
 800290e:	7818      	ldrb	r0, [r3, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	1c53      	adds	r3, r2, #1
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	68fc      	ldr	r4, [r7, #12]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	47a0      	blx	r4
  while (len) {
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ee      	bne.n	8002902 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00e      	beq.n	800294c <_out_rev+0x96>
    while (idx - start_idx < width) {
 800292e:	e007      	b.n	8002940 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	1c53      	adds	r3, r2, #1
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	68fc      	ldr	r4, [r7, #12]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	2020      	movs	r0, #32
 800293e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002948:	429a      	cmp	r2, r3
 800294a:	d8f1      	bhi.n	8002930 <_out_rev+0x7a>
    }
  }

  return idx;
 800294c:	687b      	ldr	r3, [r7, #4]
}
 800294e:	4618      	mov	r0, r3
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}

08002956 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b088      	sub	sp, #32
 800295a:	af04      	add	r7, sp, #16
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d136      	bne.n	80029dc <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d018      	beq.n	80029a6 <_ntoa_format+0x50>
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d013      	beq.n	80029a6 <_ntoa_format+0x50>
 800297e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <_ntoa_format+0x3a>
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <_ntoa_format+0x50>
      width--;
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	3b01      	subs	r3, #1
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002996:	e006      	b.n	80029a6 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	61fa      	str	r2, [r7, #28]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	2230      	movs	r2, #48	; 0x30
 80029a4:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d20a      	bcs.n	80029c4 <_ntoa_format+0x6e>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2b1f      	cmp	r3, #31
 80029b2:	d9f1      	bls.n	8002998 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029b4:	e006      	b.n	80029c4 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	61fa      	str	r2, [r7, #28]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	2230      	movs	r2, #48	; 0x30
 80029c2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <_ntoa_format+0x86>
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d202      	bcs.n	80029dc <_ntoa_format+0x86>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2b1f      	cmp	r3, #31
 80029da:	d9ec      	bls.n	80029b6 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d058      	beq.n	8002a98 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <_ntoa_format+0xc8>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d013      	beq.n	8002a1e <_ntoa_format+0xc8>
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d003      	beq.n	8002a06 <_ntoa_format+0xb0>
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d10b      	bne.n	8002a1e <_ntoa_format+0xc8>
      len--;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <_ntoa_format+0xc8>
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d102      	bne.n	8002a1e <_ntoa_format+0xc8>
        len--;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d10f      	bne.n	8002a44 <_ntoa_format+0xee>
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <_ntoa_format+0xee>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b1f      	cmp	r3, #31
 8002a32:	d807      	bhi.n	8002a44 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	61fa      	str	r2, [r7, #28]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	2278      	movs	r2, #120	; 0x78
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e01f      	b.n	8002a84 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d10f      	bne.n	8002a6a <_ntoa_format+0x114>
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <_ntoa_format+0x114>
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b1f      	cmp	r3, #31
 8002a58:	d807      	bhi.n	8002a6a <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	61fa      	str	r2, [r7, #28]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	2258      	movs	r2, #88	; 0x58
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e00c      	b.n	8002a84 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d109      	bne.n	8002a84 <_ntoa_format+0x12e>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b1f      	cmp	r3, #31
 8002a74:	d806      	bhi.n	8002a84 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	61fa      	str	r2, [r7, #28]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	2262      	movs	r2, #98	; 0x62
 8002a82:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b1f      	cmp	r3, #31
 8002a88:	d806      	bhi.n	8002a98 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	61fa      	str	r2, [r7, #28]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	2230      	movs	r2, #48	; 0x30
 8002a96:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b1f      	cmp	r3, #31
 8002a9c:	d824      	bhi.n	8002ae8 <_ntoa_format+0x192>
    if (negative) {
 8002a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	61fa      	str	r2, [r7, #28]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	222d      	movs	r2, #45	; 0x2d
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e018      	b.n	8002ae8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	61fa      	str	r2, [r7, #28]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4413      	add	r3, r2
 8002aca:	222b      	movs	r2, #43	; 0x2b
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e00b      	b.n	8002ae8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	61fa      	str	r2, [r7, #28]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	9303      	str	r3, [sp, #12]
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	9302      	str	r3, [sp, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7ff fed9 	bl	80028b6 <_out_rev>
 8002b04:	4603      	mov	r3, r0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b096      	sub	sp, #88	; 0x58
 8002b12:	af08      	add	r7, sp, #32
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b28:	f023 0310 	bic.w	r3, r3, #16
 8002b2c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <_ntoa_long+0x30>
 8002b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d032      	beq.n	8002ba4 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b42:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b48:	fb01 f202 	mul.w	r2, r1, r2
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b56:	2b09      	cmp	r3, #9
 8002b58:	d804      	bhi.n	8002b64 <_ntoa_long+0x56>
 8002b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b5e:	3330      	adds	r3, #48	; 0x30
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	e00d      	b.n	8002b80 <_ntoa_long+0x72>
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <_ntoa_long+0x64>
 8002b6e:	2241      	movs	r2, #65	; 0x41
 8002b70:	e000      	b.n	8002b74 <_ntoa_long+0x66>
 8002b72:	2261      	movs	r2, #97	; 0x61
 8002b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b78:	4413      	add	r3, r2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3b0a      	subs	r3, #10
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	6379      	str	r1, [r7, #52]	; 0x34
 8002b86:	3338      	adds	r3, #56	; 0x38
 8002b88:	443b      	add	r3, r7
 8002b8a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <_ntoa_long+0x96>
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	2b1f      	cmp	r3, #31
 8002ba2:	d9cc      	bls.n	8002b3e <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba6:	9306      	str	r3, [sp, #24]
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002baa:	9305      	str	r3, [sp, #20]
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	9304      	str	r3, [sp, #16]
 8002bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb2:	9303      	str	r3, [sp, #12]
 8002bb4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff fec3 	bl	8002956 <_ntoa_format>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3738      	adds	r7, #56	; 0x38
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b096      	sub	sp, #88	; 0x58
 8002bde:	af08      	add	r7, sp, #32
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002bec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf6:	f023 0310 	bic.w	r3, r3, #16
 8002bfa:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <_ntoa_long_long+0x34>
 8002c06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	d037      	beq.n	8002c7e <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002c0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c12:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c16:	f7fe f8b3 	bl	8000d80 <__aeabi_uldivmod>
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002c20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c24:	2b09      	cmp	r3, #9
 8002c26:	d804      	bhi.n	8002c32 <_ntoa_long_long+0x58>
 8002c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c2c:	3330      	adds	r3, #48	; 0x30
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	e00d      	b.n	8002c4e <_ntoa_long_long+0x74>
 8002c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <_ntoa_long_long+0x66>
 8002c3c:	2241      	movs	r2, #65	; 0x41
 8002c3e:	e000      	b.n	8002c42 <_ntoa_long_long+0x68>
 8002c40:	2261      	movs	r2, #97	; 0x61
 8002c42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c46:	4413      	add	r3, r2
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3b0a      	subs	r3, #10
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	1c59      	adds	r1, r3, #1
 8002c52:	6379      	str	r1, [r7, #52]	; 0x34
 8002c54:	3338      	adds	r3, #56	; 0x38
 8002c56:	443b      	add	r3, r7
 8002c58:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c60:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c64:	f7fe f88c 	bl	8000d80 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002c70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c74:	4313      	orrs	r3, r2
 8002c76:	d002      	beq.n	8002c7e <_ntoa_long_long+0xa4>
 8002c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7a:	2b1f      	cmp	r3, #31
 8002c7c:	d9c7      	bls.n	8002c0e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c82:	9206      	str	r2, [sp, #24]
 8002c84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c86:	9205      	str	r2, [sp, #20]
 8002c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c8a:	9204      	str	r2, [sp, #16]
 8002c8c:	9303      	str	r3, [sp, #12]
 8002c8e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002c92:	9302      	str	r3, [sp, #8]
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff fe56 	bl	8002956 <_ntoa_format>
 8002caa:	4603      	mov	r3, r0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3738      	adds	r7, #56	; 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	0000      	movs	r0, r0
	...

08002cb8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b09d      	sub	sp, #116	; 0x74
 8002cbc:	af06      	add	r7, sp, #24
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002cd6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002cda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cde:	f7fd fec7 	bl	8000a70 <__aeabi_dcmpeq>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10f      	bne.n	8002d08 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cea:	9303      	str	r3, [sp, #12]
 8002cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cee:	9302      	str	r3, [sp, #8]
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <_ftoa+0x248>)
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff fdd9 	bl	80028b6 <_out_rev>
 8002d04:	4603      	mov	r3, r0
 8002d06:	e224      	b.n	8003152 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d0c:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002d10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d14:	f7fd feb6 	bl	8000a84 <__aeabi_dcmplt>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00f      	beq.n	8002d3e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d20:	9303      	str	r3, [sp, #12]
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	2304      	movs	r3, #4
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <_ftoa+0x24c>)
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fdbe 	bl	80028b6 <_out_rev>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	e209      	b.n	8003152 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d42:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <_ftoa+0x250>)
 8002d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d48:	f7fd feba 	bl	8000ac0 <__aeabi_dcmpgt>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01d      	beq.n	8002d8e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <_ftoa+0xa8>
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <_ftoa+0x254>)
 8002d5e:	e000      	b.n	8002d62 <_ftoa+0xaa>
 8002d60:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <_ftoa+0x258>)
 8002d62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d64:	f002 0204 	and.w	r2, r2, #4
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d001      	beq.n	8002d70 <_ftoa+0xb8>
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	e000      	b.n	8002d72 <_ftoa+0xba>
 8002d70:	2203      	movs	r2, #3
 8002d72:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002d74:	9103      	str	r1, [sp, #12]
 8002d76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002d78:	9102      	str	r1, [sp, #8]
 8002d7a:	9201      	str	r2, [sp, #4]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7ff fd96 	bl	80028b6 <_out_rev>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	e1e1      	b.n	8003152 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002d8e:	a358      	add	r3, pc, #352	; (adr r3, 8002ef0 <_ftoa+0x238>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d98:	f7fd fe92 	bl	8000ac0 <__aeabi_dcmpgt>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <_ftoa+0xfe>
 8002da2:	a355      	add	r3, pc, #340	; (adr r3, 8002ef8 <_ftoa+0x240>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dac:	f7fd fe6a 	bl	8000a84 <__aeabi_dcmplt>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d011      	beq.n	8002dda <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db8:	9304      	str	r3, [sp, #16]
 8002dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002dc6:	e9cd 2300 	strd	r2, r3, [sp]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f9c9 	bl	8003168 <_etoa>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	e1bb      	b.n	8003152 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dec:	f7fd fe4a 	bl	8000a84 <__aeabi_dcmplt>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00e      	beq.n	8002e14 <_ftoa+0x15c>
    negative = true;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8002dfc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	f7fd fa12 	bl	8000230 <__aeabi_dsub>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002e1e:	2306      	movs	r3, #6
 8002e20:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002e22:	e00a      	b.n	8002e3a <_ftoa+0x182>
    buf[len++] = '0';
 8002e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	657a      	str	r2, [r7, #84]	; 0x54
 8002e2a:	3358      	adds	r3, #88	; 0x58
 8002e2c:	443b      	add	r3, r7
 8002e2e:	2230      	movs	r2, #48	; 0x30
 8002e30:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002e34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e36:	3b01      	subs	r3, #1
 8002e38:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3c:	2b1f      	cmp	r3, #31
 8002e3e:	d802      	bhi.n	8002e46 <_ftoa+0x18e>
 8002e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e42:	2b09      	cmp	r3, #9
 8002e44:	d8ee      	bhi.n	8002e24 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e4a:	f7fd fe43 	bl	8000ad4 <__aeabi_d2iz>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8002e52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e54:	f7fd fb3a 	bl	80004cc <__aeabi_i2d>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e60:	f7fd f9e6 	bl	8000230 <__aeabi_dsub>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <_ftoa+0x25c>)
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fb92 	bl	80005a0 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8002e84:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e88:	f7fd fe4c 	bl	8000b24 <__aeabi_d2uiz>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8002e90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e92:	f7fd fb0b 	bl	80004ac <__aeabi_ui2d>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e9e:	f7fd f9c7 	bl	8000230 <__aeabi_dsub>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <_ftoa+0x260>)
 8002eb0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002eb4:	f7fd fe04 	bl	8000ac0 <__aeabi_dcmpgt>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02e      	beq.n	8002f1c <_ftoa+0x264>
    ++frac;
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002ec4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002ec6:	f7fd faf1 	bl	80004ac <__aeabi_ui2d>
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <_ftoa+0x25c>)
 8002ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f7fd fde9 	bl	8000aac <__aeabi_dcmpge>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d032      	beq.n	8002f46 <_ftoa+0x28e>
      frac = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eea:	e02c      	b.n	8002f46 <_ftoa+0x28e>
 8002eec:	f3af 8000 	nop.w
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	41cdcd65 	.word	0x41cdcd65
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	c1cdcd65 	.word	0xc1cdcd65
 8002f00:	08008314 	.word	0x08008314
 8002f04:	08008318 	.word	0x08008318
 8002f08:	7fefffff 	.word	0x7fefffff
 8002f0c:	08008320 	.word	0x08008320
 8002f10:	08008328 	.word	0x08008328
 8002f14:	08008970 	.word	0x08008970
 8002f18:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4b8e      	ldr	r3, [pc, #568]	; (800315c <_ftoa+0x4a4>)
 8002f22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f26:	f7fd fdad 	bl	8000a84 <__aeabi_dcmplt>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <_ftoa+0x288>
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f42:	3301      	adds	r3, #1
 8002f44:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8002f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d133      	bne.n	8002fb4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002f4c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f4e:	f7fd fabd 	bl	80004cc <__aeabi_i2d>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f5a:	f7fd f969 	bl	8000230 <__aeabi_dsub>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002f66:	2301      	movs	r3, #1
 8002f68:	461c      	mov	r4, r3
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <_ftoa+0x4a4>)
 8002f70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f74:	f7fd fd86 	bl	8000a84 <__aeabi_dcmplt>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <_ftoa+0x2ca>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	461c      	mov	r4, r3
 8002f82:	b2e3      	uxtb	r3, r4
 8002f84:	f083 0301 	eor.w	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <_ftoa+0x2ea>
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	4b72      	ldr	r3, [pc, #456]	; (800315c <_ftoa+0x4a4>)
 8002f94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f98:	f7fd fd92 	bl	8000ac0 <__aeabi_dcmpgt>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d04c      	beq.n	800303c <_ftoa+0x384>
 8002fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d069      	beq.n	8003080 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	3301      	adds	r3, #1
 8002fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb2:	e065      	b.n	8003080 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 8002fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002fb8:	e01f      	b.n	8002ffa <_ftoa+0x342>
      --count;
 8002fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8002fc0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fc2:	4b67      	ldr	r3, [pc, #412]	; (8003160 <_ftoa+0x4a8>)
 8002fc4:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc8:	08da      	lsrs	r2, r3, #3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	1aca      	subs	r2, r1, r3
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd8:	1c59      	adds	r1, r3, #1
 8002fda:	6579      	str	r1, [r7, #84]	; 0x54
 8002fdc:	3230      	adds	r2, #48	; 0x30
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	3358      	adds	r3, #88	; 0x58
 8002fe2:	443b      	add	r3, r7
 8002fe4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	4a5d      	ldr	r2, [pc, #372]	; (8003160 <_ftoa+0x4a8>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	08db      	lsrs	r3, r3, #3
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ffc:	2b1f      	cmp	r3, #31
 8002ffe:	d9dc      	bls.n	8002fba <_ftoa+0x302>
 8003000:	e009      	b.n	8003016 <_ftoa+0x35e>
        break;
 8003002:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003004:	e007      	b.n	8003016 <_ftoa+0x35e>
      buf[len++] = '0';
 8003006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	657a      	str	r2, [r7, #84]	; 0x54
 800300c:	3358      	adds	r3, #88	; 0x58
 800300e:	443b      	add	r3, r7
 8003010:	2230      	movs	r2, #48	; 0x30
 8003012:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003018:	2b1f      	cmp	r3, #31
 800301a:	d804      	bhi.n	8003026 <_ftoa+0x36e>
 800301c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301e:	1e5a      	subs	r2, r3, #1
 8003020:	647a      	str	r2, [r7, #68]	; 0x44
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ef      	bne.n	8003006 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003028:	2b1f      	cmp	r3, #31
 800302a:	d829      	bhi.n	8003080 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800302c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	657a      	str	r2, [r7, #84]	; 0x54
 8003032:	3358      	adds	r3, #88	; 0x58
 8003034:	443b      	add	r3, r7
 8003036:	222e      	movs	r2, #46	; 0x2e
 8003038:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800303c:	e020      	b.n	8003080 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800303e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003040:	4b48      	ldr	r3, [pc, #288]	; (8003164 <_ftoa+0x4ac>)
 8003042:	fb83 1302 	smull	r1, r3, r3, r2
 8003046:	1099      	asrs	r1, r3, #2
 8003048:	17d3      	asrs	r3, r2, #31
 800304a:	1ac9      	subs	r1, r1, r3
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	1ad1      	subs	r1, r2, r3
 8003056:	b2ca      	uxtb	r2, r1
 8003058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	6579      	str	r1, [r7, #84]	; 0x54
 800305e:	3230      	adds	r2, #48	; 0x30
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	3358      	adds	r3, #88	; 0x58
 8003064:	443b      	add	r3, r7
 8003066:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	4a3d      	ldr	r2, [pc, #244]	; (8003164 <_ftoa+0x4ac>)
 800306e:	fb82 1203 	smull	r1, r2, r2, r3
 8003072:	1092      	asrs	r2, r2, #2
 8003074:	17db      	asrs	r3, r3, #31
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003082:	2b1f      	cmp	r3, #31
 8003084:	d9db      	bls.n	800303e <_ftoa+0x386>
 8003086:	e000      	b.n	800308a <_ftoa+0x3d2>
      break;
 8003088:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800308a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d123      	bne.n	80030dc <_ftoa+0x424>
 8003094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01e      	beq.n	80030dc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800309e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d014      	beq.n	80030ce <_ftoa+0x416>
 80030a4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <_ftoa+0x3fe>
 80030ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <_ftoa+0x416>
      width--;
 80030b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b8:	3b01      	subs	r3, #1
 80030ba:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80030bc:	e007      	b.n	80030ce <_ftoa+0x416>
      buf[len++] = '0';
 80030be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	657a      	str	r2, [r7, #84]	; 0x54
 80030c4:	3358      	adds	r3, #88	; 0x58
 80030c6:	443b      	add	r3, r7
 80030c8:	2230      	movs	r2, #48	; 0x30
 80030ca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80030ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d202      	bcs.n	80030dc <_ftoa+0x424>
 80030d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d8:	2b1f      	cmp	r3, #31
 80030da:	d9f0      	bls.n	80030be <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030de:	2b1f      	cmp	r3, #31
 80030e0:	d827      	bhi.n	8003132 <_ftoa+0x47a>
    if (negative) {
 80030e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <_ftoa+0x444>
      buf[len++] = '-';
 80030ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	657a      	str	r2, [r7, #84]	; 0x54
 80030f0:	3358      	adds	r3, #88	; 0x58
 80030f2:	443b      	add	r3, r7
 80030f4:	222d      	movs	r2, #45	; 0x2d
 80030f6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80030fa:	e01a      	b.n	8003132 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	657a      	str	r2, [r7, #84]	; 0x54
 800310c:	3358      	adds	r3, #88	; 0x58
 800310e:	443b      	add	r3, r7
 8003110:	222b      	movs	r2, #43	; 0x2b
 8003112:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003116:	e00c      	b.n	8003132 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	657a      	str	r2, [r7, #84]	; 0x54
 8003128:	3358      	adds	r3, #88	; 0x58
 800312a:	443b      	add	r3, r7
 800312c:	2220      	movs	r2, #32
 800312e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003134:	9303      	str	r3, [sp, #12]
 8003136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7ff fbb3 	bl	80028b6 <_out_rev>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	375c      	adds	r7, #92	; 0x5c
 8003156:	46bd      	mov	sp, r7
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	bf00      	nop
 800315c:	3fe00000 	.word	0x3fe00000
 8003160:	cccccccd 	.word	0xcccccccd
 8003164:	66666667 	.word	0x66666667

08003168 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316c:	b09d      	sub	sp, #116	; 0x74
 800316e:	af06      	add	r7, sp, #24
 8003170:	61f8      	str	r0, [r7, #28]
 8003172:	61b9      	str	r1, [r7, #24]
 8003174:	617a      	str	r2, [r7, #20]
 8003176:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003178:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800317c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003180:	f7fd fc76 	bl	8000a70 <__aeabi_dcmpeq>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d014      	beq.n	80031b4 <_etoa+0x4c>
 800318a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800318e:	4bc4      	ldr	r3, [pc, #784]	; (80034a0 <_etoa+0x338>)
 8003190:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003194:	f7fd fc94 	bl	8000ac0 <__aeabi_dcmpgt>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <_etoa+0x4c>
 800319e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031a2:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80031a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031aa:	f7fd fc6b 	bl	8000a84 <__aeabi_dcmplt>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d014      	beq.n	80031de <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80031b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031b8:	9304      	str	r3, [sp, #16]
 80031ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031be:	9303      	str	r3, [sp, #12]
 80031c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c4:	9302      	str	r3, [sp, #8]
 80031c6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80031ca:	e9cd 2300 	strd	r2, r3, [sp]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	69b9      	ldr	r1, [r7, #24]
 80031d4:	69f8      	ldr	r0, [r7, #28]
 80031d6:	f7ff fd6f 	bl	8002cb8 <_ftoa>
 80031da:	4603      	mov	r3, r0
 80031dc:	e247      	b.n	800366e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 80031de:	2301      	movs	r3, #1
 80031e0:	461e      	mov	r6, r3
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031ee:	f7fd fc49 	bl	8000a84 <__aeabi_dcmplt>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <_etoa+0x94>
 80031f8:	2300      	movs	r3, #0
 80031fa:	461e      	mov	r6, r3
 80031fc:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8003200:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <_etoa+0xb8>
    value = -value;
 8003208:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003212:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800321c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800322c:	2306      	movs	r3, #6
 800322e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003232:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003236:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800323a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	0d0a      	lsrs	r2, r1, #20
 8003248:	2300      	movs	r3, #0
 800324a:	4613      	mov	r3, r2
 800324c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003250:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003254:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800325a:	4690      	mov	r8, r2
 800325c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003260:	4644      	mov	r4, r8
 8003262:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003266:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800326a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800326e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003270:	f7fd f92c 	bl	80004cc <__aeabi_i2d>
 8003274:	a37e      	add	r3, pc, #504	; (adr r3, 8003470 <_etoa+0x308>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fd f991 	bl	80005a0 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	a37c      	add	r3, pc, #496	; (adr r3, 8003478 <_etoa+0x310>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fc ffd2 	bl	8000234 <__adddf3>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	4b80      	ldr	r3, [pc, #512]	; (80034a4 <_etoa+0x33c>)
 80032a2:	f7fc ffc5 	bl	8000230 <__aeabi_dsub>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	a374      	add	r3, pc, #464	; (adr r3, 8003480 <_etoa+0x318>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd f974 	bl	80005a0 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4620      	mov	r0, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	f7fc ffb8 	bl	8000234 <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f7fd fc02 	bl	8000ad4 <__aeabi_d2iz>
 80032d0:	4603      	mov	r3, r0
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80032d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80032d6:	f7fd f8f9 	bl	80004cc <__aeabi_i2d>
 80032da:	a36b      	add	r3, pc, #428	; (adr r3, 8003488 <_etoa+0x320>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f7fd f95e 	bl	80005a0 <__aeabi_dmul>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <_etoa+0x340>)
 80032f2:	f7fc ff9f 	bl	8000234 <__adddf3>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	f7fd fbe9 	bl	8000ad4 <__aeabi_d2iz>
 8003302:	4603      	mov	r3, r0
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003306:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003308:	f7fd f8e0 	bl	80004cc <__aeabi_i2d>
 800330c:	a360      	add	r3, pc, #384	; (adr r3, 8003490 <_etoa+0x328>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f945 	bl	80005a0 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4614      	mov	r4, r2
 800331c:	461d      	mov	r5, r3
 800331e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003320:	f7fd f8d4 	bl	80004cc <__aeabi_i2d>
 8003324:	a35c      	add	r3, pc, #368	; (adr r3, 8003498 <_etoa+0x330>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fd f939 	bl	80005a0 <__aeabi_dmul>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f7fc ff7b 	bl	8000230 <__aeabi_dsub>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003342:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003346:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800334a:	f7fd f929 	bl	80005a0 <__aeabi_dmul>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003358:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800335c:	17da      	asrs	r2, r3, #31
 800335e:	469a      	mov	sl, r3
 8003360:	4693      	mov	fp, r2
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800336e:	2200      	movs	r2, #0
 8003370:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003374:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003378:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	f7fc ff58 	bl	8000234 <__adddf3>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4690      	mov	r8, r2
 800338a:	4699      	mov	r9, r3
 800338c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003390:	f04f 0000 	mov.w	r0, #0
 8003394:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003398:	f7fc ff4a 	bl	8000230 <__aeabi_dsub>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4692      	mov	sl, r2
 80033a2:	469b      	mov	fp, r3
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	4b40      	ldr	r3, [pc, #256]	; (80034ac <_etoa+0x344>)
 80033aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033ae:	f7fd fa21 	bl	80007f4 <__aeabi_ddiv>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <_etoa+0x348>)
 80033c0:	f7fc ff38 	bl	8000234 <__adddf3>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033cc:	f7fd fa12 	bl	80007f4 <__aeabi_ddiv>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <_etoa+0x34c>)
 80033de:	f7fc ff29 	bl	8000234 <__adddf3>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033ea:	f7fd fa03 	bl	80007f4 <__aeabi_ddiv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4650      	mov	r0, sl
 80033f4:	4659      	mov	r1, fp
 80033f6:	f7fc ff1d 	bl	8000234 <__adddf3>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4640      	mov	r0, r8
 8003400:	4649      	mov	r1, r9
 8003402:	f7fd f9f7 	bl	80007f4 <__aeabi_ddiv>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <_etoa+0x350>)
 8003414:	f7fc ff0e 	bl	8000234 <__adddf3>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4620      	mov	r0, r4
 800341e:	4629      	mov	r1, r5
 8003420:	f7fd f8be 	bl	80005a0 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800342c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003430:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003434:	f7fd fb26 	bl	8000a84 <__aeabi_dcmplt>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <_etoa+0x2f2>
    expval--;
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	3b01      	subs	r3, #1
 8003442:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003444:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <_etoa+0x348>)
 800344e:	f7fd f9d1 	bl	80007f4 <__aeabi_ddiv>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	2b63      	cmp	r3, #99	; 0x63
 800345e:	dc2d      	bgt.n	80034bc <_etoa+0x354>
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003466:	db29      	blt.n	80034bc <_etoa+0x354>
 8003468:	2304      	movs	r3, #4
 800346a:	e028      	b.n	80034be <_etoa+0x356>
 800346c:	f3af 8000 	nop.w
 8003470:	509f79fb 	.word	0x509f79fb
 8003474:	3fd34413 	.word	0x3fd34413
 8003478:	8b60c8b3 	.word	0x8b60c8b3
 800347c:	3fc68a28 	.word	0x3fc68a28
 8003480:	636f4361 	.word	0x636f4361
 8003484:	3fd287a7 	.word	0x3fd287a7
 8003488:	0979a371 	.word	0x0979a371
 800348c:	400a934f 	.word	0x400a934f
 8003490:	bbb55516 	.word	0xbbb55516
 8003494:	40026bb1 	.word	0x40026bb1
 8003498:	fefa39ef 	.word	0xfefa39ef
 800349c:	3fe62e42 	.word	0x3fe62e42
 80034a0:	7fefffff 	.word	0x7fefffff
 80034a4:	3ff80000 	.word	0x3ff80000
 80034a8:	3fe00000 	.word	0x3fe00000
 80034ac:	402c0000 	.word	0x402c0000
 80034b0:	40240000 	.word	0x40240000
 80034b4:	40180000 	.word	0x40180000
 80034b8:	3ff00000 	.word	0x3ff00000
 80034bc:	2305      	movs	r3, #5
 80034be:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80034c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d03d      	beq.n	8003548 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80034cc:	a36a      	add	r3, pc, #424	; (adr r3, 8003678 <_etoa+0x510>)
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034d6:	f7fd fae9 	bl	8000aac <__aeabi_dcmpge>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d024      	beq.n	800352a <_etoa+0x3c2>
 80034e0:	a367      	add	r3, pc, #412	; (adr r3, 8003680 <_etoa+0x518>)
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034ea:	f7fd facb 	bl	8000a84 <__aeabi_dcmplt>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01a      	beq.n	800352a <_etoa+0x3c2>
      if ((int)prec > expval) {
 80034f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034fa:	429a      	cmp	r2, r3
 80034fc:	da07      	bge.n	800350e <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 80034fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800350c:	e002      	b.n	8003514 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	657b      	str	r3, [r7, #84]	; 0x54
 8003528:	e00e      	b.n	8003548 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800352a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <_etoa+0x3e0>
 8003532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <_etoa+0x3e0>
        --prec;
 800353e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003542:	3b01      	subs	r3, #1
 8003544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800354e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003554:	429a      	cmp	r2, r3
 8003556:	d904      	bls.n	8003562 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800355a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003560:	e001      	b.n	8003566 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003566:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <_etoa+0x414>
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800357c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <_etoa+0x42e>
    value /= conv.F;
 8003582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800358a:	f7fd f933 	bl	80007f4 <__aeabi_ddiv>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800359a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <_etoa+0x44c>
 80035a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e003      	b.n	80035bc <_etoa+0x454>
 80035b4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80035b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80035bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c4:	9304      	str	r3, [sp, #16]
 80035c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c8:	9303      	str	r3, [sp, #12]
 80035ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ce:	9302      	str	r3, [sp, #8]
 80035d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035d4:	e9cd 3400 	strd	r3, r4, [sp]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	69f8      	ldr	r0, [r7, #28]
 80035e0:	f7ff fb6a 	bl	8002cb8 <_ftoa>
 80035e4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80035e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d03f      	beq.n	800366c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80035ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <_etoa+0x494>
 80035f8:	2045      	movs	r0, #69	; 0x45
 80035fa:	e000      	b.n	80035fe <_etoa+0x496>
 80035fc:	2065      	movs	r0, #101	; 0x65
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	1c53      	adds	r3, r2, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	69fc      	ldr	r4, [r7, #28]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	69b9      	ldr	r1, [r7, #24]
 800360a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800360c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360e:	2b00      	cmp	r3, #0
 8003610:	bfb8      	it	lt
 8003612:	425b      	neglt	r3, r3
 8003614:	4618      	mov	r0, r3
 8003616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003618:	0fdb      	lsrs	r3, r3, #31
 800361a:	b2db      	uxtb	r3, r3
 800361c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800361e:	3a01      	subs	r2, #1
 8003620:	2105      	movs	r1, #5
 8003622:	9105      	str	r1, [sp, #20]
 8003624:	9204      	str	r2, [sp, #16]
 8003626:	2200      	movs	r2, #0
 8003628:	9203      	str	r2, [sp, #12]
 800362a:	220a      	movs	r2, #10
 800362c:	9202      	str	r2, [sp, #8]
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	9000      	str	r0, [sp, #0]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	69f8      	ldr	r0, [r7, #28]
 800363a:	f7ff fa68 	bl	8002b0e <_ntoa_long>
 800363e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00f      	beq.n	800366c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800364c:	e007      	b.n	800365e <_etoa+0x4f6>
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	1c53      	adds	r3, r2, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	69fc      	ldr	r4, [r7, #28]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	2020      	movs	r0, #32
 800365c:	47a0      	blx	r4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003668:	429a      	cmp	r2, r3
 800366a:	d8f0      	bhi.n	800364e <_etoa+0x4e6>
    }
  }
  return idx;
 800366c:	697b      	ldr	r3, [r7, #20]
}
 800366e:	4618      	mov	r0, r3
 8003670:	375c      	adds	r7, #92	; 0x5c
 8003672:	46bd      	mov	sp, r7
 8003674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003678:	eb1c432d 	.word	0xeb1c432d
 800367c:	3f1a36e2 	.word	0x3f1a36e2
 8003680:	00000000 	.word	0x00000000
 8003684:	412e8480 	.word	0x412e8480

08003688 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	b0a3      	sub	sp, #140	; 0x8c
 800368e:	af0a      	add	r7, sp, #40	; 0x28
 8003690:	6178      	str	r0, [r7, #20]
 8003692:	6139      	str	r1, [r7, #16]
 8003694:	60fa      	str	r2, [r7, #12]
 8003696:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 84ba 	bne.w	8004018 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 80036a4:	4ba3      	ldr	r3, [pc, #652]	; (8003934 <_vsnprintf+0x2ac>)
 80036a6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80036a8:	f000 bcb6 	b.w	8004018 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b25      	cmp	r3, #37	; 0x25
 80036b2:	d00d      	beq.n	80036d0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	7818      	ldrb	r0, [r3, #0]
 80036b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ba:	1c53      	adds	r3, r2, #1
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036be:	697c      	ldr	r4, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6939      	ldr	r1, [r7, #16]
 80036c4:	47a0      	blx	r4
      format++;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3301      	adds	r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
      continue;
 80036cc:	f000 bca4 	b.w	8004018 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	3b20      	subs	r3, #32
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d857      	bhi.n	8003794 <_vsnprintf+0x10c>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <_vsnprintf+0x64>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	0800376d 	.word	0x0800376d
 80036f0:	08003795 	.word	0x08003795
 80036f4:	08003795 	.word	0x08003795
 80036f8:	08003781 	.word	0x08003781
 80036fc:	08003795 	.word	0x08003795
 8003700:	08003795 	.word	0x08003795
 8003704:	08003795 	.word	0x08003795
 8003708:	08003795 	.word	0x08003795
 800370c:	08003795 	.word	0x08003795
 8003710:	08003795 	.word	0x08003795
 8003714:	08003795 	.word	0x08003795
 8003718:	08003759 	.word	0x08003759
 800371c:	08003795 	.word	0x08003795
 8003720:	08003745 	.word	0x08003745
 8003724:	08003795 	.word	0x08003795
 8003728:	08003795 	.word	0x08003795
 800372c:	08003731 	.word	0x08003731
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	3301      	adds	r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	2301      	movs	r3, #1
 8003740:	653b      	str	r3, [r7, #80]	; 0x50
 8003742:	e02a      	b.n	800379a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003746:	f043 0302 	orr.w	r3, r3, #2
 800374a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3301      	adds	r3, #1
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	2301      	movs	r3, #1
 8003754:	653b      	str	r3, [r7, #80]	; 0x50
 8003756:	e020      	b.n	800379a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375a:	f043 0304 	orr.w	r3, r3, #4
 800375e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3301      	adds	r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	2301      	movs	r3, #1
 8003768:	653b      	str	r3, [r7, #80]	; 0x50
 800376a:	e016      	b.n	800379a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800376c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376e:	f043 0308 	orr.w	r3, r3, #8
 8003772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3301      	adds	r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	2301      	movs	r3, #1
 800377c:	653b      	str	r3, [r7, #80]	; 0x50
 800377e:	e00c      	b.n	800379a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003782:	f043 0310 	orr.w	r3, r3, #16
 8003786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3301      	adds	r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	2301      	movs	r3, #1
 8003790:	653b      	str	r3, [r7, #80]	; 0x50
 8003792:	e002      	b.n	800379a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003794:	2300      	movs	r3, #0
 8003796:	653b      	str	r3, [r7, #80]	; 0x50
 8003798:	bf00      	nop
      }
    } while (n);
 800379a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379c:	2b00      	cmp	r3, #0
 800379e:	d19c      	bne.n	80036da <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff f84a 	bl	8002842 <_is_digit>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d006      	beq.n	80037c2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 80037b4:	f107 0308 	add.w	r3, r7, #8
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff f858 	bl	800286e <_atoi>
 80037be:	65b8      	str	r0, [r7, #88]	; 0x58
 80037c0:	e01a      	b.n	80037f8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b2a      	cmp	r3, #42	; 0x2a
 80037c8:	d116      	bne.n	80037f8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80037ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da07      	bge.n	80037ee <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80037de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	425b      	negs	r3, r3
 80037ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ec:	e001      	b.n	80037f2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b2e      	cmp	r3, #46	; 0x2e
 8003802:	d127      	bne.n	8003854 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	3301      	adds	r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f813 	bl	8002842 <_is_digit>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f821 	bl	800286e <_atoi>
 800382c:	6578      	str	r0, [r7, #84]	; 0x54
 800382e:	e011      	b.n	8003854 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b2a      	cmp	r3, #42	; 0x2a
 8003836:	d10d      	bne.n	8003854 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800384c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3301      	adds	r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	3b68      	subs	r3, #104	; 0x68
 800385a:	2b12      	cmp	r3, #18
 800385c:	d866      	bhi.n	800392c <_vsnprintf+0x2a4>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <_vsnprintf+0x1dc>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	080038d7 	.word	0x080038d7
 8003868:	0800392d 	.word	0x0800392d
 800386c:	0800390d 	.word	0x0800390d
 8003870:	0800392d 	.word	0x0800392d
 8003874:	080038b1 	.word	0x080038b1
 8003878:	0800392d 	.word	0x0800392d
 800387c:	0800392d 	.word	0x0800392d
 8003880:	0800392d 	.word	0x0800392d
 8003884:	0800392d 	.word	0x0800392d
 8003888:	0800392d 	.word	0x0800392d
 800388c:	0800392d 	.word	0x0800392d
 8003890:	0800392d 	.word	0x0800392d
 8003894:	080038fd 	.word	0x080038fd
 8003898:	0800392d 	.word	0x0800392d
 800389c:	0800392d 	.word	0x0800392d
 80038a0:	0800392d 	.word	0x0800392d
 80038a4:	0800392d 	.word	0x0800392d
 80038a8:	0800392d 	.word	0x0800392d
 80038ac:	0800391d 	.word	0x0800391d
      case 'l' :
        flags |= FLAGS_LONG;
 80038b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b6c      	cmp	r3, #108	; 0x6c
 80038c4:	d134      	bne.n	8003930 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80038c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038cc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
        }
        break;
 80038d4:	e02c      	b.n	8003930 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80038d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b68      	cmp	r3, #104	; 0x68
 80038ea:	d125      	bne.n	8003938 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80038ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80038fa:	e01d      	b.n	8003938 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80038fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003902:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3301      	adds	r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
        break;
 800390a:	e016      	b.n	800393a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800390c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003912:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	3301      	adds	r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
        break;
 800391a:	e00e      	b.n	800393a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800391c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003922:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3301      	adds	r3, #1
 8003928:	60bb      	str	r3, [r7, #8]
        break;
 800392a:	e006      	b.n	800393a <_vsnprintf+0x2b2>
      default :
        break;
 800392c:	bf00      	nop
 800392e:	e004      	b.n	800393a <_vsnprintf+0x2b2>
        break;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <_vsnprintf+0x2b2>
 8003934:	080027f1 	.word	0x080027f1
        break;
 8003938:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	3b25      	subs	r3, #37	; 0x25
 8003940:	2b53      	cmp	r3, #83	; 0x53
 8003942:	f200 835c 	bhi.w	8003ffe <_vsnprintf+0x976>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <_vsnprintf+0x2c4>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	08003fe7 	.word	0x08003fe7
 8003950:	08003fff 	.word	0x08003fff
 8003954:	08003fff 	.word	0x08003fff
 8003958:	08003fff 	.word	0x08003fff
 800395c:	08003fff 	.word	0x08003fff
 8003960:	08003fff 	.word	0x08003fff
 8003964:	08003fff 	.word	0x08003fff
 8003968:	08003fff 	.word	0x08003fff
 800396c:	08003fff 	.word	0x08003fff
 8003970:	08003fff 	.word	0x08003fff
 8003974:	08003fff 	.word	0x08003fff
 8003978:	08003fff 	.word	0x08003fff
 800397c:	08003fff 	.word	0x08003fff
 8003980:	08003fff 	.word	0x08003fff
 8003984:	08003fff 	.word	0x08003fff
 8003988:	08003fff 	.word	0x08003fff
 800398c:	08003fff 	.word	0x08003fff
 8003990:	08003fff 	.word	0x08003fff
 8003994:	08003fff 	.word	0x08003fff
 8003998:	08003fff 	.word	0x08003fff
 800399c:	08003fff 	.word	0x08003fff
 80039a0:	08003fff 	.word	0x08003fff
 80039a4:	08003fff 	.word	0x08003fff
 80039a8:	08003fff 	.word	0x08003fff
 80039ac:	08003fff 	.word	0x08003fff
 80039b0:	08003fff 	.word	0x08003fff
 80039b4:	08003fff 	.word	0x08003fff
 80039b8:	08003fff 	.word	0x08003fff
 80039bc:	08003fff 	.word	0x08003fff
 80039c0:	08003fff 	.word	0x08003fff
 80039c4:	08003fff 	.word	0x08003fff
 80039c8:	08003fff 	.word	0x08003fff
 80039cc:	08003d9f 	.word	0x08003d9f
 80039d0:	08003d53 	.word	0x08003d53
 80039d4:	08003d9f 	.word	0x08003d9f
 80039d8:	08003fff 	.word	0x08003fff
 80039dc:	08003fff 	.word	0x08003fff
 80039e0:	08003fff 	.word	0x08003fff
 80039e4:	08003fff 	.word	0x08003fff
 80039e8:	08003fff 	.word	0x08003fff
 80039ec:	08003fff 	.word	0x08003fff
 80039f0:	08003fff 	.word	0x08003fff
 80039f4:	08003fff 	.word	0x08003fff
 80039f8:	08003fff 	.word	0x08003fff
 80039fc:	08003fff 	.word	0x08003fff
 8003a00:	08003fff 	.word	0x08003fff
 8003a04:	08003fff 	.word	0x08003fff
 8003a08:	08003fff 	.word	0x08003fff
 8003a0c:	08003fff 	.word	0x08003fff
 8003a10:	08003fff 	.word	0x08003fff
 8003a14:	08003fff 	.word	0x08003fff
 8003a18:	08003a9d 	.word	0x08003a9d
 8003a1c:	08003fff 	.word	0x08003fff
 8003a20:	08003fff 	.word	0x08003fff
 8003a24:	08003fff 	.word	0x08003fff
 8003a28:	08003fff 	.word	0x08003fff
 8003a2c:	08003fff 	.word	0x08003fff
 8003a30:	08003fff 	.word	0x08003fff
 8003a34:	08003fff 	.word	0x08003fff
 8003a38:	08003fff 	.word	0x08003fff
 8003a3c:	08003fff 	.word	0x08003fff
 8003a40:	08003a9d 	.word	0x08003a9d
 8003a44:	08003e0b 	.word	0x08003e0b
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003d9f 	.word	0x08003d9f
 8003a50:	08003d53 	.word	0x08003d53
 8003a54:	08003d9f 	.word	0x08003d9f
 8003a58:	08003fff 	.word	0x08003fff
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003fff 	.word	0x08003fff
 8003a64:	08003fff 	.word	0x08003fff
 8003a68:	08003fff 	.word	0x08003fff
 8003a6c:	08003fff 	.word	0x08003fff
 8003a70:	08003fff 	.word	0x08003fff
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003f4b 	.word	0x08003f4b
 8003a7c:	08003fff 	.word	0x08003fff
 8003a80:	08003fff 	.word	0x08003fff
 8003a84:	08003e83 	.word	0x08003e83
 8003a88:	08003fff 	.word	0x08003fff
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003fff 	.word	0x08003fff
 8003a94:	08003fff 	.word	0x08003fff
 8003a98:	08003a9d 	.word	0x08003a9d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b78      	cmp	r3, #120	; 0x78
 8003aa2:	d003      	beq.n	8003aac <_vsnprintf+0x424>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b58      	cmp	r3, #88	; 0x58
 8003aaa:	d102      	bne.n	8003ab2 <_vsnprintf+0x42a>
          base = 16U;
 8003aac:	2310      	movs	r3, #16
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ab0:	e013      	b.n	8003ada <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b6f      	cmp	r3, #111	; 0x6f
 8003ab8:	d102      	bne.n	8003ac0 <_vsnprintf+0x438>
          base =  8U;
 8003aba:	2308      	movs	r3, #8
 8003abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003abe:	e00c      	b.n	8003ada <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b62      	cmp	r3, #98	; 0x62
 8003ac6:	d102      	bne.n	8003ace <_vsnprintf+0x446>
          base =  2U;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003acc:	e005      	b.n	8003ada <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003ace:	230a      	movs	r3, #10
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad4:	f023 0310 	bic.w	r3, r3, #16
 8003ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b58      	cmp	r3, #88	; 0x58
 8003ae0:	d103      	bne.n	8003aea <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b69      	cmp	r3, #105	; 0x69
 8003af0:	d007      	beq.n	8003b02 <_vsnprintf+0x47a>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d003      	beq.n	8003b02 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afc:	f023 030c 	bic.w	r3, r3, #12
 8003b00:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8003b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b69      	cmp	r3, #105	; 0x69
 8003b1a:	d004      	beq.n	8003b26 <_vsnprintf+0x49e>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	f040 8098 	bne.w	8003c56 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d031      	beq.n	8003b94 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b34:	3307      	adds	r3, #7
 8003b36:	f023 0307 	bic.w	r3, r3, #7
 8003b3a:	f103 0208 	add.w	r2, r3, #8
 8003b3e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da06      	bge.n	8003b60 <_vsnprintf+0x4d8>
 8003b52:	2100      	movs	r1, #0
 8003b54:	f1d2 0800 	rsbs	r8, r2, #0
 8003b58:	eb61 0903 	sbc.w	r9, r1, r3
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	0fc9      	lsrs	r1, r1, #31
 8003b64:	b2c9      	uxtb	r1, r1
 8003b66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003b68:	2400      	movs	r4, #0
 8003b6a:	4682      	mov	sl, r0
 8003b6c:	46a3      	mov	fp, r4
 8003b6e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003b70:	9008      	str	r0, [sp, #32]
 8003b72:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003b74:	9007      	str	r0, [sp, #28]
 8003b76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003b78:	9006      	str	r0, [sp, #24]
 8003b7a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003b7e:	9102      	str	r1, [sp, #8]
 8003b80:	e9cd 2300 	strd	r2, r3, [sp]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b88:	6939      	ldr	r1, [r7, #16]
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff f825 	bl	8002bda <_ntoa_long_long>
 8003b90:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003b92:	e0da      	b.n	8003d4a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d020      	beq.n	8003be0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8003b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfb8      	it	lt
 8003bb2:	425b      	neglt	r3, r3
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	0fdb      	lsrs	r3, r3, #31
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bbe:	9205      	str	r2, [sp, #20]
 8003bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc2:	9204      	str	r2, [sp, #16]
 8003bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bc6:	9203      	str	r2, [sp, #12]
 8003bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bca:	9202      	str	r2, [sp, #8]
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	9100      	str	r1, [sp, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd4:	6939      	ldr	r1, [r7, #16]
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f7fe ff99 	bl	8002b0e <_ntoa_long>
 8003bdc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003bde:	e0b4      	b.n	8003d4a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <_vsnprintf+0x572>
 8003bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bee:	1d1a      	adds	r2, r3, #4
 8003bf0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e012      	b.n	8003c20 <_vsnprintf+0x598>
 8003bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <_vsnprintf+0x58c>
 8003c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c08:	1d1a      	adds	r2, r3, #4
 8003c0a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	b21b      	sxth	r3, r3
 8003c12:	e005      	b.n	8003c20 <_vsnprintf+0x598>
 8003c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c18:	1d1a      	adds	r2, r3, #4
 8003c1a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bfb8      	it	lt
 8003c28:	425b      	neglt	r3, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	0fdb      	lsrs	r3, r3, #31
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c34:	9205      	str	r2, [sp, #20]
 8003c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c38:	9204      	str	r2, [sp, #16]
 8003c3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c3c:	9203      	str	r2, [sp, #12]
 8003c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c40:	9202      	str	r2, [sp, #8]
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	9100      	str	r1, [sp, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c4a:	6939      	ldr	r1, [r7, #16]
 8003c4c:	6978      	ldr	r0, [r7, #20]
 8003c4e:	f7fe ff5e 	bl	8002b0e <_ntoa_long>
 8003c52:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003c54:	e079      	b.n	8003d4a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d022      	beq.n	8003ca6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c64:	3307      	adds	r3, #7
 8003c66:	f023 0307 	bic.w	r3, r3, #7
 8003c6a:	f103 0208 	add.w	r2, r3, #8
 8003c6e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c78:	2000      	movs	r0, #0
 8003c7a:	460d      	mov	r5, r1
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003c80:	9108      	str	r1, [sp, #32]
 8003c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c84:	9107      	str	r1, [sp, #28]
 8003c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c88:	9106      	str	r1, [sp, #24]
 8003c8a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003c8e:	2100      	movs	r1, #0
 8003c90:	9102      	str	r1, [sp, #8]
 8003c92:	e9cd 2300 	strd	r2, r3, [sp]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c9a:	6939      	ldr	r1, [r7, #16]
 8003c9c:	6978      	ldr	r0, [r7, #20]
 8003c9e:	f7fe ff9c 	bl	8002bda <_ntoa_long_long>
 8003ca2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003ca4:	e051      	b.n	8003d4a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d018      	beq.n	8003ce2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb4:	1d1a      	adds	r2, r3, #4
 8003cb6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cbe:	9205      	str	r2, [sp, #20]
 8003cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cc2:	9204      	str	r2, [sp, #16]
 8003cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cc6:	9203      	str	r2, [sp, #12]
 8003cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cca:	9202      	str	r2, [sp, #8]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	9201      	str	r2, [sp, #4]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cd6:	6939      	ldr	r1, [r7, #16]
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f7fe ff18 	bl	8002b0e <_ntoa_long>
 8003cde:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003ce0:	e033      	b.n	8003d4a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <_vsnprintf+0x674>
 8003cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e012      	b.n	8003d22 <_vsnprintf+0x69a>
 8003cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <_vsnprintf+0x68e>
 8003d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	e005      	b.n	8003d22 <_vsnprintf+0x69a>
 8003d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d26:	9305      	str	r3, [sp, #20]
 8003d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d2a:	9304      	str	r3, [sp, #16]
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d32:	9302      	str	r3, [sp, #8]
 8003d34:	2300      	movs	r3, #0
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d40:	6939      	ldr	r1, [r7, #16]
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7fe fee3 	bl	8002b0e <_ntoa_long>
 8003d48:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
        break;
 8003d50:	e162      	b.n	8004018 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b46      	cmp	r3, #70	; 0x46
 8003d58:	d103      	bne.n	8003d62 <_vsnprintf+0x6da>
 8003d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5c:	f043 0320 	orr.w	r3, r3, #32
 8003d60:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d66:	3307      	adds	r3, #7
 8003d68:	f023 0307 	bic.w	r3, r3, #7
 8003d6c:	f103 0208 	add.w	r2, r3, #8
 8003d70:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003d7a:	9104      	str	r1, [sp, #16]
 8003d7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d7e:	9103      	str	r1, [sp, #12]
 8003d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d82:	9102      	str	r1, [sp, #8]
 8003d84:	e9cd 2300 	strd	r2, r3, [sp]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d8c:	6939      	ldr	r1, [r7, #16]
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7fe ff92 	bl	8002cb8 <_ftoa>
 8003d94:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
        break;
 8003d9c:	e13c      	b.n	8004018 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b67      	cmp	r3, #103	; 0x67
 8003da4:	d003      	beq.n	8003dae <_vsnprintf+0x726>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b47      	cmp	r3, #71	; 0x47
 8003dac:	d103      	bne.n	8003db6 <_vsnprintf+0x72e>
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003db4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b45      	cmp	r3, #69	; 0x45
 8003dbc:	d003      	beq.n	8003dc6 <_vsnprintf+0x73e>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b47      	cmp	r3, #71	; 0x47
 8003dc4:	d103      	bne.n	8003dce <_vsnprintf+0x746>
 8003dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc8:	f043 0320 	orr.w	r3, r3, #32
 8003dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dd2:	3307      	adds	r3, #7
 8003dd4:	f023 0307 	bic.w	r3, r3, #7
 8003dd8:	f103 0208 	add.w	r2, r3, #8
 8003ddc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003de6:	9104      	str	r1, [sp, #16]
 8003de8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dea:	9103      	str	r1, [sp, #12]
 8003dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dee:	9102      	str	r1, [sp, #8]
 8003df0:	e9cd 2300 	strd	r2, r3, [sp]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df8:	6939      	ldr	r1, [r7, #16]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff f9b4 	bl	8003168 <_etoa>
 8003e00:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
        break;
 8003e08:	e106      	b.n	8004018 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10e      	bne.n	8003e36 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8003e18:	e007      	b.n	8003e2a <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8003e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1c:	1c53      	adds	r3, r2, #1
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e20:	697c      	ldr	r4, [r7, #20]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6939      	ldr	r1, [r7, #16]
 8003e26:	2020      	movs	r0, #32
 8003e28:	47a0      	blx	r4
          while (l++ < width) {
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d8f1      	bhi.n	8003e1a <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b2d8      	uxtb	r0, r3
 8003e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e46:	1c53      	adds	r3, r2, #1
 8003e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4a:	697c      	ldr	r4, [r7, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6939      	ldr	r1, [r7, #16]
 8003e50:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00e      	beq.n	8003e7a <_vsnprintf+0x7f2>
          while (l++ < width) {
 8003e5c:	e007      	b.n	8003e6e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8003e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e60:	1c53      	adds	r3, r2, #1
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e64:	697c      	ldr	r4, [r7, #20]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6939      	ldr	r1, [r7, #16]
 8003e6a:	2020      	movs	r0, #32
 8003e6c:	47a0      	blx	r4
          while (l++ < width) {
 8003e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	647a      	str	r2, [r7, #68]	; 0x44
 8003e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d8f1      	bhi.n	8003e5e <_vsnprintf+0x7d6>
          }
        }
        format++;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
        break;
 8003e80:	e0ca      	b.n	8004018 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <_vsnprintf+0x812>
 8003e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e98:	e001      	b.n	8003e9e <_vsnprintf+0x816>
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ea2:	f7fe fcb2 	bl	800280a <_strnlen_s>
 8003ea6:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 8003eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	bf28      	it	cs
 8003eba:	4613      	movcs	r3, r2
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11a      	bne.n	8003efe <_vsnprintf+0x876>
          while (l++ < width) {
 8003ec8:	e007      	b.n	8003eda <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8003eca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ecc:	1c53      	adds	r3, r2, #1
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed0:	697c      	ldr	r4, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6939      	ldr	r1, [r7, #16]
 8003ed6:	2020      	movs	r0, #32
 8003ed8:	47a0      	blx	r4
          while (l++ < width) {
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d8f1      	bhi.n	8003eca <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003ee6:	e00a      	b.n	8003efe <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	643a      	str	r2, [r7, #64]	; 0x40
 8003eee:	7818      	ldrb	r0, [r3, #0]
 8003ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef2:	1c53      	adds	r3, r2, #1
 8003ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef6:	697c      	ldr	r4, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6939      	ldr	r1, [r7, #16]
 8003efc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <_vsnprintf+0x892>
 8003f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0eb      	beq.n	8003ee8 <_vsnprintf+0x860>
 8003f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	657a      	str	r2, [r7, #84]	; 0x54
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e6      	bne.n	8003ee8 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00e      	beq.n	8003f42 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8003f24:	e007      	b.n	8003f36 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8003f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f28:	1c53      	adds	r3, r2, #1
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	697c      	ldr	r4, [r7, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6939      	ldr	r1, [r7, #16]
 8003f32:	2020      	movs	r0, #32
 8003f34:	47a0      	blx	r4
          while (l++ < width) {
 8003f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d8f1      	bhi.n	8003f26 <_vsnprintf+0x89e>
          }
        }
        format++;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
        break;
 8003f48:	e066      	b.n	8004018 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f50:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003f54:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8003f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d023      	beq.n	8003fac <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f68:	1d1a      	adds	r2, r3, #4
 8003f6a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	2300      	movs	r3, #0
 8003f74:	603a      	str	r2, [r7, #0]
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f7a:	9308      	str	r3, [sp, #32]
 8003f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7e:	9307      	str	r3, [sp, #28]
 8003f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f82:	9306      	str	r3, [sp, #24]
 8003f84:	f04f 0210 	mov.w	r2, #16
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f98:	e9cd 3400 	strd	r3, r4, [sp]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa0:	6939      	ldr	r1, [r7, #16]
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f7fe fe19 	bl	8002bda <_ntoa_long_long>
 8003fa8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003faa:	e018      	b.n	8003fde <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fb0:	1d1a      	adds	r2, r3, #4
 8003fb2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fbc:	9305      	str	r3, [sp, #20]
 8003fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fc0:	9304      	str	r3, [sp, #16]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc4:	9303      	str	r3, [sp, #12]
 8003fc6:	2310      	movs	r3, #16
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	9200      	str	r2, [sp, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fd4:	6939      	ldr	r1, [r7, #16]
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7fe fd99 	bl	8002b0e <_ntoa_long>
 8003fdc:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60bb      	str	r3, [r7, #8]
        break;
 8003fe4:	e018      	b.n	8004018 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe8:	1c53      	adds	r3, r2, #1
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fec:	697c      	ldr	r4, [r7, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6939      	ldr	r1, [r7, #16]
 8003ff2:	2025      	movs	r0, #37	; 0x25
 8003ff4:	47a0      	blx	r4
        format++;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
        break;
 8003ffc:	e00c      	b.n	8004018 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	7818      	ldrb	r0, [r3, #0]
 8004002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004004:	1c53      	adds	r3, r2, #1
 8004006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004008:	697c      	ldr	r4, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6939      	ldr	r1, [r7, #16]
 800400e:	47a0      	blx	r4
        format++;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3301      	adds	r3, #1
 8004014:	60bb      	str	r3, [r7, #8]
        break;
 8004016:	bf00      	nop
  while (*format)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f ab45 	bne.w	80036ac <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <_vsnprintf+0x9a8>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	e000      	b.n	8004032 <_vsnprintf+0x9aa>
 8004030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004032:	697c      	ldr	r4, [r7, #20]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6939      	ldr	r1, [r7, #16]
 8004038:	2000      	movs	r0, #0
 800403a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800403e:	4618      	mov	r0, r3
 8004040:	3764      	adds	r7, #100	; 0x64
 8004042:	46bd      	mov	sp, r7
 8004044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004048 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8004048:	b40e      	push	{r1, r2, r3}
 800404a:	b580      	push	{r7, lr}
 800404c:	b087      	sub	sp, #28
 800404e:	af02      	add	r7, sp, #8
 8004050:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004052:	f107 0320 	add.w	r3, r7, #32
 8004056:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <sprintf_+0x34>)
 8004066:	f7ff fb0f 	bl	8003688 <_vsnprintf>
 800406a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004078:	b003      	add	sp, #12
 800407a:	4770      	bx	lr
 800407c:	080027c5 	.word	0x080027c5

08004080 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004098:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d009      	beq.n	80040ba <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	79f9      	ldrb	r1, [r7, #7]
 80040b0:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d017      	beq.n	8004116 <Uart_isr+0x52>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <Uart_isr+0xbc>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ffba 	bl	8004080 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <Uart_isr+0xc0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	605a      	str	r2, [r3, #4]
        return;
 8004114:	e031      	b.n	800417a <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02c      	beq.n	800417a <Uart_isr+0xb6>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d027      	beq.n	800417a <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <Uart_isr+0xc4>)
 800412c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <Uart_isr+0xc4>)
 8004132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004136:	429a      	cmp	r2, r3
 8004138:	d108      	bne.n	800414c <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004148:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800414a:	e015      	b.n	8004178 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <Uart_isr+0xc4>)
 800414e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004152:	4a0d      	ldr	r2, [pc, #52]	; (8004188 <Uart_isr+0xc4>)
 8004154:	5cd3      	ldrb	r3, [r2, r3]
 8004156:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <Uart_isr+0xc4>)
 800415a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004164:	4a08      	ldr	r2, [pc, #32]	; (8004188 <Uart_isr+0xc4>)
 8004166:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	7bba      	ldrb	r2, [r7, #14]
 8004176:	605a      	str	r2, [r3, #4]
    	return;
 8004178:	bf00      	nop
    }
}
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000654 	.word	0x20000654
 8004184:	20000178 	.word	0x20000178
 8004188:	2000024c 	.word	0x2000024c

0800418c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_MspInit+0x5c>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <HAL_MspInit+0x5c>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6193      	str	r3, [r2, #24]
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_MspInit+0x5c>)
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_MspInit+0x5c>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <HAL_MspInit+0x5c>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	61d3      	str	r3, [r2, #28]
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <HAL_MspInit+0x5c>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_MspInit+0x60>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_MspInit+0x60>)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40010000 	.word	0x40010000

080041f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004200:	e7fe      	b.n	8004200 <HardFault_Handler+0x4>

08004202 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004206:	e7fe      	b.n	8004206 <MemManage_Handler+0x4>

08004208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800420c:	e7fe      	b.n	800420c <BusFault_Handler+0x4>

0800420e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004212:	e7fe      	b.n	8004212 <UsageFault_Handler+0x4>

08004214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <SysTick_Handler+0x20>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <SysTick_Handler+0x18>
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <SysTick_Handler+0x20>)
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	4b02      	ldr	r3, [pc, #8]	; (8004258 <SysTick_Handler+0x20>)
 800424e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004250:	f000 ff7e 	bl	8005150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000248 	.word	0x20000248

0800425c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <EXTI0_IRQHandler+0x28>)
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <EXTI0_IRQHandler+0x28>)
 800426e:	2201      	movs	r2, #1
 8004270:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8004272:	2001      	movs	r0, #1
 8004274:	f001 fd96 	bl	8005da4 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004278:	2001      	movs	r0, #1
 800427a:	f001 fd7b 	bl	8005d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40010400 	.word	0x40010400

08004288 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <EXTI4_IRQHandler+0x2c>)
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <EXTI4_IRQHandler+0x30>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <EXTI4_IRQHandler+0x2c>)
 80042a0:	2210      	movs	r2, #16
 80042a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80042a4:	2010      	movs	r0, #16
 80042a6:	f001 fd7d 	bl	8005da4 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80042aa:	2010      	movs	r0, #16
 80042ac:	f001 fd62 	bl	8005d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40010400 	.word	0x40010400
 80042b8:	2000081c 	.word	0x2000081c

080042bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <TIM3_IRQHandler+0x3c>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <TIM3_IRQHandler+0x3c>)
 80042ca:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <TIM3_IRQHandler+0x3c>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10c      	bne.n	80042ee <TIM3_IRQHandler+0x32>
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <TIM3_IRQHandler+0x40>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d108      	bne.n	80042ee <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 80042dc:	4808      	ldr	r0, [pc, #32]	; (8004300 <TIM3_IRQHandler+0x44>)
 80042de:	f002 faca 	bl	8006876 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 80042e2:	4807      	ldr	r0, [pc, #28]	; (8004300 <TIM3_IRQHandler+0x44>)
 80042e4:	f002 fb0b 	bl	80068fe <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <TIM3_IRQHandler+0x40>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042ee:	4804      	ldr	r0, [pc, #16]	; (8004300 <TIM3_IRQHandler+0x44>)
 80042f0:	f002 fb63 	bl	80069ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000758 	.word	0x20000758
 80042fc:	20000759 	.word	0x20000759
 8004300:	200006d8 	.word	0x200006d8

08004304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <USART1_IRQHandler+0x38>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d107      	bne.n	800432c <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <USART1_IRQHandler+0x38>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <USART1_IRQHandler+0x3c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	79fa      	ldrb	r2, [r7, #7]
 800432a:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800432c:	4805      	ldr	r0, [pc, #20]	; (8004344 <USART1_IRQHandler+0x40>)
 800432e:	f003 faa7 	bl	8007880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000178 	.word	0x20000178
 8004340:	200001b8 	.word	0x200001b8
 8004344:	2000075c 	.word	0x2000075c

08004348 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <USART3_IRQHandler+0x10>)
 800434e:	f7ff feb9 	bl	80040c4 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200007dc 	.word	0x200007dc

0800435c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <EXTI15_10_IRQHandler+0x2c>)
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <EXTI15_10_IRQHandler+0x20>
	{
		// extern void debug_alarm_set();
		// debug_alarm_set();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <EXTI15_10_IRQHandler+0x2c>)
 800436e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004372:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8004374:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004378:	f001 fd14 	bl	8005da4 <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800437c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004380:	f001 fcf8 	bl	8005d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40010400 	.word	0x40010400

0800438c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <TIM5_IRQHandler+0x14>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004396:	4803      	ldr	r0, [pc, #12]	; (80043a4 <TIM5_IRQHandler+0x18>)
 8004398:	f002 fb0f 	bl	80069ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800439c:	bf00      	nop
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000000 	.word	0x20000000
 80043a4:	20000718 	.word	0x20000718

080043a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
	return 1;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <_kill>:

int _kill(int pid, int sig)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043c0:	f003 fefc 	bl	80081bc <__errno>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2216      	movs	r2, #22
 80043c8:	601a      	str	r2, [r3, #0]
	return -1;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_exit>:

void _exit (int status)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ffe7 	bl	80043b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043e8:	e7fe      	b.n	80043e8 <_exit+0x12>
	...

080043ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <SystemInit+0x5c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a14      	ldr	r2, [pc, #80]	; (8004448 <SystemInit+0x5c>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <SystemInit+0x5c>)
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	4911      	ldr	r1, [pc, #68]	; (8004448 <SystemInit+0x5c>)
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <SystemInit+0x60>)
 8004404:	4013      	ands	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <SystemInit+0x5c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <SystemInit+0x5c>)
 800440e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <SystemInit+0x5c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <SystemInit+0x5c>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <SystemInit+0x5c>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a07      	ldr	r2, [pc, #28]	; (8004448 <SystemInit+0x5c>)
 800442a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800442e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <SystemInit+0x5c>)
 8004432:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004436:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <SystemInit+0x64>)
 800443a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800443e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	40021000 	.word	0x40021000
 800444c:	f8ff0000 	.word	0xf8ff0000
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b094      	sub	sp, #80	; 0x50
 8004458:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800445a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004468:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004472:	f107 031c 	add.w	r3, r7, #28
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	611a      	str	r2, [r3, #16]
 8004482:	615a      	str	r2, [r3, #20]
 8004484:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004486:	463b      	mov	r3, r7
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
 8004494:	615a      	str	r2, [r3, #20]
 8004496:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8004498:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <MX_TIM1_Init+0x144>)
 800449a:	4a40      	ldr	r2, [pc, #256]	; (800459c <MX_TIM1_Init+0x148>)
 800449c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 800449e:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <MX_TIM1_Init+0x144>)
 80044a0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80044a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a6:	4b3c      	ldr	r3, [pc, #240]	; (8004598 <MX_TIM1_Init+0x144>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 80044ac:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <MX_TIM1_Init+0x144>)
 80044ae:	f240 4265 	movw	r2, #1125	; 0x465
 80044b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b4:	4b38      	ldr	r3, [pc, #224]	; (8004598 <MX_TIM1_Init+0x144>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <MX_TIM1_Init+0x144>)
 80044bc:	2200      	movs	r2, #0
 80044be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c0:	4b35      	ldr	r3, [pc, #212]	; (8004598 <MX_TIM1_Init+0x144>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044c6:	4834      	ldr	r0, [pc, #208]	; (8004598 <MX_TIM1_Init+0x144>)
 80044c8:	f002 f990 	bl	80067ec <HAL_TIM_Base_Init>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80044d2:	f7fe f971 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044da:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044e0:	4619      	mov	r1, r3
 80044e2:	482d      	ldr	r0, [pc, #180]	; (8004598 <MX_TIM1_Init+0x144>)
 80044e4:	f002 fc38 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80044ee:	f7fe f963 	bl	80027b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044f2:	4829      	ldr	r0, [pc, #164]	; (8004598 <MX_TIM1_Init+0x144>)
 80044f4:	f002 fa2d 	bl	8006952 <HAL_TIM_PWM_Init>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80044fe:	f7fe f95b 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800450a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800450e:	4619      	mov	r1, r3
 8004510:	4821      	ldr	r0, [pc, #132]	; (8004598 <MX_TIM1_Init+0x144>)
 8004512:	f003 f878 	bl	8007606 <HAL_TIMEx_MasterConfigSynchronization>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800451c:	f7fe f94c 	bl	80027b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004520:	2360      	movs	r3, #96	; 0x60
 8004522:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 8004524:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004528:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800452e:	2300      	movs	r3, #0
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004536:	2300      	movs	r3, #0
 8004538:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800453a:	2300      	movs	r3, #0
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800453e:	f107 031c 	add.w	r3, r7, #28
 8004542:	2200      	movs	r2, #0
 8004544:	4619      	mov	r1, r3
 8004546:	4814      	ldr	r0, [pc, #80]	; (8004598 <MX_TIM1_Init+0x144>)
 8004548:	f002 fb40 	bl	8006bcc <HAL_TIM_PWM_ConfigChannel>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8004552:	f7fe f931 	bl	80027b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004556:	2300      	movs	r3, #0
 8004558:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800456a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800456e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004574:	463b      	mov	r3, r7
 8004576:	4619      	mov	r1, r3
 8004578:	4807      	ldr	r0, [pc, #28]	; (8004598 <MX_TIM1_Init+0x144>)
 800457a:	f002 ffec 	bl	8007556 <HAL_TIMEx_ConfigBreakDeadTime>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8004584:	f7fe f918 	bl	80027b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8004588:	4803      	ldr	r0, [pc, #12]	; (8004598 <MX_TIM1_Init+0x144>)
 800458a:	f000 f959 	bl	8004840 <HAL_TIM_MspPostInit>

}
 800458e:	bf00      	nop
 8004590:	3750      	adds	r7, #80	; 0x50
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000658 	.word	0x20000658
 800459c:	40012c00 	.word	0x40012c00

080045a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045a6:	f107 0308 	add.w	r3, r7, #8
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b4:	463b      	mov	r3, r7
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80045bc:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <MX_TIM2_Init+0x94>)
 80045be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <MX_TIM2_Init+0x94>)
 80045c6:	2247      	movs	r2, #71	; 0x47
 80045c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ca:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <MX_TIM2_Init+0x94>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80045d0:	4b18      	ldr	r3, [pc, #96]	; (8004634 <MX_TIM2_Init+0x94>)
 80045d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <MX_TIM2_Init+0x94>)
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <MX_TIM2_Init+0x94>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045e4:	4813      	ldr	r0, [pc, #76]	; (8004634 <MX_TIM2_Init+0x94>)
 80045e6:	f002 f901 	bl	80067ec <HAL_TIM_Base_Init>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80045f0:	f7fe f8e2 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4619      	mov	r1, r3
 8004600:	480c      	ldr	r0, [pc, #48]	; (8004634 <MX_TIM2_Init+0x94>)
 8004602:	f002 fba9 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800460c:	f7fe f8d4 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004610:	2300      	movs	r3, #0
 8004612:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004614:	2300      	movs	r3, #0
 8004616:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004618:	463b      	mov	r3, r7
 800461a:	4619      	mov	r1, r3
 800461c:	4805      	ldr	r0, [pc, #20]	; (8004634 <MX_TIM2_Init+0x94>)
 800461e:	f002 fff2 	bl	8007606 <HAL_TIMEx_MasterConfigSynchronization>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004628:	f7fe f8c6 	bl	80027b8 <Error_Handler>
  }

}
 800462c:	bf00      	nop
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000698 	.word	0x20000698

08004638 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464c:	463b      	mov	r3, r7
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <MX_TIM3_Init+0x94>)
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <MX_TIM3_Init+0x98>)
 8004658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <MX_TIM3_Init+0x94>)
 800465c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8004660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004662:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <MX_TIM3_Init+0x94>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <MX_TIM3_Init+0x94>)
 800466a:	f248 32d5 	movw	r2, #33749	; 0x83d5
 800466e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <MX_TIM3_Init+0x94>)
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <MX_TIM3_Init+0x94>)
 8004678:	2280      	movs	r2, #128	; 0x80
 800467a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800467c:	4813      	ldr	r0, [pc, #76]	; (80046cc <MX_TIM3_Init+0x94>)
 800467e:	f002 f8b5 	bl	80067ec <HAL_TIM_Base_Init>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004688:	f7fe f896 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800468c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4619      	mov	r1, r3
 8004698:	480c      	ldr	r0, [pc, #48]	; (80046cc <MX_TIM3_Init+0x94>)
 800469a:	f002 fb5d 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80046a4:	f7fe f888 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046b0:	463b      	mov	r3, r7
 80046b2:	4619      	mov	r1, r3
 80046b4:	4805      	ldr	r0, [pc, #20]	; (80046cc <MX_TIM3_Init+0x94>)
 80046b6:	f002 ffa6 	bl	8007606 <HAL_TIMEx_MasterConfigSynchronization>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80046c0:	f7fe f87a 	bl	80027b8 <Error_Handler>
  }

}
 80046c4:	bf00      	nop
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	200006d8 	.word	0x200006d8
 80046d0:	40000400 	.word	0x40000400

080046d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	609a      	str	r2, [r3, #8]
 80046e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e8:	463b      	mov	r3, r7
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <MX_TIM5_Init+0x94>)
 80046f2:	4a1e      	ldr	r2, [pc, #120]	; (800476c <MX_TIM5_Init+0x98>)
 80046f4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <MX_TIM5_Init+0x94>)
 80046f8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80046fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <MX_TIM5_Init+0x94>)
 8004700:	2200      	movs	r2, #0
 8004702:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <MX_TIM5_Init+0x94>)
 8004706:	f248 32d5 	movw	r2, #33749	; 0x83d5
 800470a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800470c:	4b16      	ldr	r3, [pc, #88]	; (8004768 <MX_TIM5_Init+0x94>)
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <MX_TIM5_Init+0x94>)
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004718:	4813      	ldr	r0, [pc, #76]	; (8004768 <MX_TIM5_Init+0x94>)
 800471a:	f002 f867 	bl	80067ec <HAL_TIM_Base_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004724:	f7fe f848 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800472c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4619      	mov	r1, r3
 8004734:	480c      	ldr	r0, [pc, #48]	; (8004768 <MX_TIM5_Init+0x94>)
 8004736:	f002 fb0f 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004740:	f7fe f83a 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004744:	2300      	movs	r3, #0
 8004746:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004748:	2300      	movs	r3, #0
 800474a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800474c:	463b      	mov	r3, r7
 800474e:	4619      	mov	r1, r3
 8004750:	4805      	ldr	r0, [pc, #20]	; (8004768 <MX_TIM5_Init+0x94>)
 8004752:	f002 ff58 	bl	8007606 <HAL_TIMEx_MasterConfigSynchronization>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800475c:	f7fe f82c 	bl	80027b8 <Error_Handler>
  }

}
 8004760:	bf00      	nop
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000718 	.word	0x20000718
 800476c:	40000c00 	.word	0x40000c00

08004770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <HAL_TIM_Base_MspInit+0xc0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10c      	bne.n	800479c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004782:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 8004788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800478c:	6193      	str	r3, [r2, #24]
 800478e:	4b29      	ldr	r3, [pc, #164]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800479a:	e044      	b.n	8004826 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a4:	d10c      	bne.n	80047c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047a6:	4b23      	ldr	r3, [pc, #140]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4a22      	ldr	r2, [pc, #136]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	61d3      	str	r3, [r2, #28]
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
}
 80047be:	e032      	b.n	8004826 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_TIM_Base_MspInit+0xc8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d114      	bne.n	80047f4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4a19      	ldr	r2, [pc, #100]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 80047d0:	f043 0302 	orr.w	r3, r3, #2
 80047d4:	61d3      	str	r3, [r2, #28]
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80047e2:	2200      	movs	r2, #0
 80047e4:	2100      	movs	r1, #0
 80047e6:	201d      	movs	r0, #29
 80047e8:	f000 ffbd 	bl	8005766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047ec:	201d      	movs	r0, #29
 80047ee:	f000 ffd6 	bl	800579e <HAL_NVIC_EnableIRQ>
}
 80047f2:	e018      	b.n	8004826 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a10      	ldr	r2, [pc, #64]	; (800483c <HAL_TIM_Base_MspInit+0xcc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d113      	bne.n	8004826 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 8004804:	f043 0308 	orr.w	r3, r3, #8
 8004808:	61d3      	str	r3, [r2, #28]
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_TIM_Base_MspInit+0xc4>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2100      	movs	r1, #0
 800481a:	2032      	movs	r0, #50	; 0x32
 800481c:	f000 ffa3 	bl	8005766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004820:	2032      	movs	r0, #50	; 0x32
 8004822:	f000 ffbc 	bl	800579e <HAL_NVIC_EnableIRQ>
}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40021000 	.word	0x40021000
 8004838:	40000400 	.word	0x40000400
 800483c:	40000c00 	.word	0x40000c00

08004840 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a10      	ldr	r2, [pc, #64]	; (800489c <HAL_TIM_MspPostInit+0x5c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d118      	bne.n	8004892 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_TIM_MspPostInit+0x60>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_TIM_MspPostInit+0x60>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	6193      	str	r3, [r2, #24]
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_TIM_MspPostInit+0x60>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800487c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487e:	2302      	movs	r3, #2
 8004880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004882:	2302      	movs	r3, #2
 8004884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004886:	f107 0310 	add.w	r3, r7, #16
 800488a:	4619      	mov	r1, r3
 800488c:	4805      	ldr	r0, [pc, #20]	; (80048a4 <HAL_TIM_MspPostInit+0x64>)
 800488e:	f001 f8a9 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004892:	bf00      	nop
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40010800 	.word	0x40010800

080048a8 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <TIMER_INIT+0x20>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0201 	mvn.w	r2, #1
 80048b4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 80048b6:	4804      	ldr	r0, [pc, #16]	; (80048c8 <TIMER_INIT+0x20>)
 80048b8:	f001 ffc3 	bl	8006842 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <TIMER_INIT+0x20>)
 80048be:	f002 f804 	bl	80068ca <HAL_TIM_Base_Start_IT>
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000718 	.word	0x20000718

080048cc <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <timer_min+0x38>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0201 	mvn.w	r2, #1
 80048de:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <timer_min+0x3c>)
 80048e8:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <timer_min+0x40>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 80048f0:	4804      	ldr	r0, [pc, #16]	; (8004904 <timer_min+0x38>)
 80048f2:	f001 ffa6 	bl	8006842 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80048f6:	4803      	ldr	r0, [pc, #12]	; (8004904 <timer_min+0x38>)
 80048f8:	f001 ffe7 	bl	80068ca <HAL_TIM_Base_Start_IT>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	200006d8 	.word	0x200006d8
 8004908:	20000758 	.word	0x20000758
 800490c:	20000759 	.word	0x20000759

08004910 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004914:	4b11      	ldr	r3, [pc, #68]	; (800495c <MX_USART1_UART_Init+0x4c>)
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <MX_USART1_UART_Init+0x50>)
 8004918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <MX_USART1_UART_Init+0x4c>)
 800491c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <MX_USART1_UART_Init+0x4c>)
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <MX_USART1_UART_Init+0x4c>)
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <MX_USART1_UART_Init+0x4c>)
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <MX_USART1_UART_Init+0x4c>)
 8004936:	220c      	movs	r2, #12
 8004938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <MX_USART1_UART_Init+0x4c>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <MX_USART1_UART_Init+0x4c>)
 8004942:	2200      	movs	r2, #0
 8004944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004946:	4805      	ldr	r0, [pc, #20]	; (800495c <MX_USART1_UART_Init+0x4c>)
 8004948:	f002 feb3 	bl	80076b2 <HAL_UART_Init>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004952:	f7fd ff31 	bl	80027b8 <Error_Handler>
  }

}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	2000075c 	.word	0x2000075c
 8004960:	40013800 	.word	0x40013800

08004964 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <MX_USART2_UART_Init+0x50>)
 800496c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 8004970:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 8004978:	2200      	movs	r2, #0
 800497a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 800497e:	2200      	movs	r2, #0
 8004980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 8004984:	2200      	movs	r2, #0
 8004986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 800498a:	220c      	movs	r2, #12
 800498c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 8004990:	2200      	movs	r2, #0
 8004992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800499a:	4805      	ldr	r0, [pc, #20]	; (80049b0 <MX_USART2_UART_Init+0x4c>)
 800499c:	f002 fe89 	bl	80076b2 <HAL_UART_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80049a6:	f7fd ff07 	bl	80027b8 <Error_Handler>
  }

}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	2000079c 	.word	0x2000079c
 80049b4:	40004400 	.word	0x40004400

080049b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049be:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <MX_USART3_UART_Init+0x50>)
 80049c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049de:	220c      	movs	r2, #12
 80049e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80049ee:	4805      	ldr	r0, [pc, #20]	; (8004a04 <MX_USART3_UART_Init+0x4c>)
 80049f0:	f002 fe5f 	bl	80076b2 <HAL_UART_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80049fa:	f7fd fedd 	bl	80027b8 <Error_Handler>
  }

}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200007dc 	.word	0x200007dc
 8004a08:	40004800 	.word	0x40004800

08004a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 0320 	add.w	r3, r7, #32
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a5b      	ldr	r2, [pc, #364]	; (8004b94 <HAL_UART_MspInit+0x188>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d13a      	bne.n	8004aa2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a2c:	4b5a      	ldr	r3, [pc, #360]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	4a59      	ldr	r2, [pc, #356]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a36:	6193      	str	r3, [r2, #24]
 8004a38:	4b57      	ldr	r3, [pc, #348]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a44:	4b54      	ldr	r3, [pc, #336]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	6193      	str	r3, [r2, #24]
 8004a50:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a62:	2302      	movs	r3, #2
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a66:	2303      	movs	r3, #3
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6a:	f107 0320 	add.w	r3, r7, #32
 8004a6e:	4619      	mov	r1, r3
 8004a70:	484a      	ldr	r0, [pc, #296]	; (8004b9c <HAL_UART_MspInit+0x190>)
 8004a72:	f000 ffb7 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a84:	f107 0320 	add.w	r3, r7, #32
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4844      	ldr	r0, [pc, #272]	; (8004b9c <HAL_UART_MspInit+0x190>)
 8004a8c:	f000 ffaa 	bl	80059e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a90:	2200      	movs	r2, #0
 8004a92:	2100      	movs	r1, #0
 8004a94:	2025      	movs	r0, #37	; 0x25
 8004a96:	f000 fe66 	bl	8005766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a9a:	2025      	movs	r0, #37	; 0x25
 8004a9c:	f000 fe7f 	bl	800579e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004aa0:	e074      	b.n	8004b8c <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3e      	ldr	r2, [pc, #248]	; (8004ba0 <HAL_UART_MspInit+0x194>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d130      	bne.n	8004b0e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004aac:	4b3a      	ldr	r3, [pc, #232]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	4a39      	ldr	r2, [pc, #228]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab6:	61d3      	str	r3, [r2, #28]
 8004ab8:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac4:	4b34      	ldr	r3, [pc, #208]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	4a33      	ldr	r2, [pc, #204]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	6193      	str	r3, [r2, #24]
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004adc:	2304      	movs	r3, #4
 8004ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae8:	f107 0320 	add.w	r3, r7, #32
 8004aec:	4619      	mov	r1, r3
 8004aee:	482b      	ldr	r0, [pc, #172]	; (8004b9c <HAL_UART_MspInit+0x190>)
 8004af0:	f000 ff78 	bl	80059e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004af4:	2308      	movs	r3, #8
 8004af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b00:	f107 0320 	add.w	r3, r7, #32
 8004b04:	4619      	mov	r1, r3
 8004b06:	4825      	ldr	r0, [pc, #148]	; (8004b9c <HAL_UART_MspInit+0x190>)
 8004b08:	f000 ff6c 	bl	80059e4 <HAL_GPIO_Init>
}
 8004b0c:	e03e      	b.n	8004b8c <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART3)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a24      	ldr	r2, [pc, #144]	; (8004ba4 <HAL_UART_MspInit+0x198>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d139      	bne.n	8004b8c <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b18:	4b1f      	ldr	r3, [pc, #124]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b22:	61d3      	str	r3, [r2, #28]
 8004b24:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004b36:	f043 0308 	orr.w	r3, r3, #8
 8004b3a:	6193      	str	r3, [r2, #24]
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_UART_MspInit+0x18c>)
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b52:	2303      	movs	r3, #3
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b56:	f107 0320 	add.w	r3, r7, #32
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4812      	ldr	r0, [pc, #72]	; (8004ba8 <HAL_UART_MspInit+0x19c>)
 8004b5e:	f000 ff41 	bl	80059e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b70:	f107 0320 	add.w	r3, r7, #32
 8004b74:	4619      	mov	r1, r3
 8004b76:	480c      	ldr	r0, [pc, #48]	; (8004ba8 <HAL_UART_MspInit+0x19c>)
 8004b78:	f000 ff34 	bl	80059e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2100      	movs	r1, #0
 8004b80:	2027      	movs	r0, #39	; 0x27
 8004b82:	f000 fdf0 	bl	8005766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b86:	2027      	movs	r0, #39	; 0x27
 8004b88:	f000 fe09 	bl	800579e <HAL_NVIC_EnableIRQ>
}
 8004b8c:	bf00      	nop
 8004b8e:	3730      	adds	r7, #48	; 0x30
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40013800 	.word	0x40013800
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40010800 	.word	0x40010800
 8004ba0:	40004400 	.word	0x40004400
 8004ba4:	40004800 	.word	0x40004800
 8004ba8:	40010c00 	.word	0x40010c00

08004bac <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e00a      	b.n	8004bd0 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 8004bba:	230c      	movs	r3, #12
 8004bbc:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8004bbe:	bf00      	nop
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	72fa      	strb	r2, [r7, #11]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1fa      	bne.n	8004bc0 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3f0      	bcc.n	8004bba <XPT2046_DelayUS+0xe>
			;

	}

}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	481d      	ldr	r0, [pc, #116]	; (8004c68 <XPT2046_WriteCMD+0x84>)
 8004bf4:	f001 f8a5 	bl	8005d42 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	481a      	ldr	r0, [pc, #104]	; (8004c68 <XPT2046_WriteCMD+0x84>)
 8004bfe:	f001 f8a0 	bl	8005d42 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	e027      	b.n	8004c58 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8004c08:	79fa      	ldrb	r2, [r7, #7]
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	f1c3 0307 	rsb	r3, r3, #7
 8004c10:	fa42 f303 	asr.w	r3, r2, r3
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <XPT2046_WriteCMD+0x44>
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2104      	movs	r1, #4
 8004c20:	4811      	ldr	r0, [pc, #68]	; (8004c68 <XPT2046_WriteCMD+0x84>)
 8004c22:	f001 f88e 	bl	8005d42 <HAL_GPIO_WritePin>
 8004c26:	e004      	b.n	8004c32 <XPT2046_WriteCMD+0x4e>
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	480e      	ldr	r0, [pc, #56]	; (8004c68 <XPT2046_WriteCMD+0x84>)
 8004c2e:	f001 f888 	bl	8005d42 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8004c32:	2005      	movs	r0, #5
 8004c34:	f7ff ffba 	bl	8004bac <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8004c38:	2201      	movs	r2, #1
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	480a      	ldr	r0, [pc, #40]	; (8004c68 <XPT2046_WriteCMD+0x84>)
 8004c3e:	f001 f880 	bl	8005d42 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8004c42:	2005      	movs	r0, #5
 8004c44:	f7ff ffb2 	bl	8004bac <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4806      	ldr	r0, [pc, #24]	; (8004c68 <XPT2046_WriteCMD+0x84>)
 8004c4e:	f001 f878 	bl	8005d42 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	3301      	adds	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	2b07      	cmp	r3, #7
 8004c5c:	d9d4      	bls.n	8004c08 <XPT2046_WriteCMD+0x24>
	}

}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40011800 	.word	0x40011800

08004c6c <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8004c72:	2300      	movs	r3, #0
 8004c74:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 8004c76:	2200      	movs	r2, #0
 8004c78:	2104      	movs	r1, #4
 8004c7a:	4819      	ldr	r0, [pc, #100]	; (8004ce0 <XPT2046_ReadCMD+0x74>)
 8004c7c:	f001 f861 	bl	8005d42 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8004c80:	2201      	movs	r2, #1
 8004c82:	2101      	movs	r1, #1
 8004c84:	4816      	ldr	r0, [pc, #88]	; (8004ce0 <XPT2046_ReadCMD+0x74>)
 8004c86:	f001 f85c 	bl	8005d42 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	71fb      	strb	r3, [r7, #7]
 8004c8e:	e01e      	b.n	8004cce <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8004c90:	2200      	movs	r2, #0
 8004c92:	2101      	movs	r1, #1
 8004c94:	4812      	ldr	r0, [pc, #72]	; (8004ce0 <XPT2046_ReadCMD+0x74>)
 8004c96:	f001 f854 	bl	8005d42 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 8004c9a:	2108      	movs	r1, #8
 8004c9c:	4810      	ldr	r0, [pc, #64]	; (8004ce0 <XPT2046_ReadCMD+0x74>)
 8004c9e:	f001 f839 	bl	8005d14 <HAL_GPIO_ReadPin>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 8004ca6:	887a      	ldrh	r2, [r7, #2]
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	f1c3 030b 	rsb	r3, r3, #11
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	b21a      	sxth	r2, r3
 8004cb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b21b      	sxth	r3, r3
 8004cbc:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4807      	ldr	r0, [pc, #28]	; (8004ce0 <XPT2046_ReadCMD+0x74>)
 8004cc4:	f001 f83d 	bl	8005d42 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	71fb      	strb	r3, [r7, #7]
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	2b0b      	cmp	r3, #11
 8004cd2:	d9dd      	bls.n	8004c90 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8004cd4:	88bb      	ldrh	r3, [r7, #4]

}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40011800 	.word	0x40011800

08004ce4 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff ff77 	bl	8004be4 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8004cf6:	f7ff ffb9 	bl	8004c6c <XPT2046_ReadCMD>
 8004cfa:	4603      	mov	r3, r0

}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 8004d0e:	2090      	movs	r0, #144	; 0x90
 8004d10:	f7ff ffe8 	bl	8004ce4 <XPT2046_ReadAdc>
 8004d14:	4603      	mov	r3, r0
 8004d16:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8004d18:	2001      	movs	r0, #1
 8004d1a:	f7ff ff47 	bl	8004bac <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 8004d1e:	20d0      	movs	r0, #208	; 0xd0
 8004d20:	f7ff ffe0 	bl	8004ce4 <XPT2046_ReadAdc>
 8004d24:	4603      	mov	r3, r0
 8004d26:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	89fa      	ldrh	r2, [r7, #14]
 8004d2c:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	89ba      	ldrh	r2, [r7, #12]
 8004d32:	801a      	strh	r2, [r3, #0]

}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b092      	sub	sp, #72	; 0x48
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	2228      	movs	r2, #40	; 0x28
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 fa5c 	bl	8008210 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8004d58:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d5c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff ffce 	bl	8004d04 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8004d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d6c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	3348      	adds	r3, #72	; 0x48
 8004d74:	443b      	add	r3, r7
 8004d76:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 8004d7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d7e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004d82:	330a      	adds	r3, #10
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	3348      	adds	r3, #72	; 0x48
 8004d88:	443b      	add	r3, r7
 8004d8a:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8004d8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d92:	3301      	adds	r3, #1
 8004d94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8004d98:	2110      	movs	r1, #16
 8004d9a:	4871      	ldr	r0, [pc, #452]	; (8004f60 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8004d9c:	f000 ffba 	bl	8005d14 <HAL_GPIO_ReadPin>
 8004da0:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <XPT2046_ReadAdc_Smooth_XY+0x72>
 8004da6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	d9d4      	bls.n	8004d58 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8004dae:	2110      	movs	r1, #16
 8004db0:	486b      	ldr	r0, [pc, #428]	; (8004f60 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8004db2:	f000 ffaf 	bl	8005d14 <HAL_GPIO_ReadPin>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8004dbc:	4b69      	ldr	r3, [pc, #420]	; (8004f64 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8004dc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dc6:	2b0a      	cmp	r3, #10
 8004dc8:	f040 80c4 	bne.w	8004f54 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8004dcc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8004dd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004de6:	e02b      	b.n	8004e40 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8004de8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	3348      	adds	r3, #72	; 0x48
 8004df0:	443b      	add	r3, r7
 8004df2:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	dd08      	ble.n	8004e10 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8004dfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	3348      	adds	r3, #72	; 0x48
 8004e06:	443b      	add	r3, r7
 8004e08:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e0e:	e012      	b.n	8004e36 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8004e10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	3348      	adds	r3, #72	; 0x48
 8004e18:	443b      	add	r3, r7
 8004e1a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	4293      	cmp	r3, r2
 8004e24:	da07      	bge.n	8004e36 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8004e26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	3348      	adds	r3, #72	; 0x48
 8004e2e:	443b      	add	r3, r7
 8004e30:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8004e36:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004e40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d9cf      	bls.n	8004de8 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004e4e:	e02f      	b.n	8004eb0 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8004e50:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e54:	330a      	adds	r3, #10
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	3348      	adds	r3, #72	; 0x48
 8004e5a:	443b      	add	r3, r7
 8004e5c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	4293      	cmp	r3, r2
 8004e66:	dd09      	ble.n	8004e7c <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8004e68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e6c:	330a      	adds	r3, #10
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	3348      	adds	r3, #72	; 0x48
 8004e72:	443b      	add	r3, r7
 8004e74:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e7a:	e014      	b.n	8004ea6 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8004e7c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e80:	330a      	adds	r3, #10
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	3348      	adds	r3, #72	; 0x48
 8004e86:	443b      	add	r3, r7
 8004e88:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	4293      	cmp	r3, r2
 8004e92:	da08      	bge.n	8004ea6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8004e94:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e98:	330a      	adds	r3, #10
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	3348      	adds	r3, #72	; 0x48
 8004e9e:	443b      	add	r3, r7
 8004ea0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8004ea6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004eb0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004eb4:	2b09      	cmp	r3, #9
 8004eb6:	d9cb      	bls.n	8004e50 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8004eb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ec2:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8004ec4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004ed4:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8004ed6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004eda:	4413      	add	r3, r2
 8004edc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004ee6:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8004ee8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004eec:	4413      	add	r3, r2
 8004eee:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efa:	1ad3      	subs	r3, r2, r3
				>> 3;
 8004efc:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8004f04:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004f0e:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8004f10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f14:	4413      	add	r3, r2
 8004f16:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004f20:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8004f22:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004f26:	4413      	add	r3, r2
 8004f28:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8004f32:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8004f34:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8004f38:	4413      	add	r3, r2
 8004f3a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8004f3e:	441a      	add	r2, r3
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	1ad3      	subs	r3, r2, r3
				>> 3;
 8004f48:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	805a      	strh	r2, [r3, #2]

		return 1;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8004f54:	2300      	movs	r3, #0

}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3748      	adds	r7, #72	; 0x48
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40011800 	.word	0x40011800
 8004f64:	2000081c 	.word	0x2000081c

08004f68 <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8004f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fedd 	bl	8004d3c <XPT2046_ReadAdc_Smooth_XY>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d06e      	beq.n	8005066 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004f8e:	893b      	ldrh	r3, [r7, #8]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fb fa9b 	bl	80004cc <__aeabi_i2d>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	f7fb faff 	bl	80005a0 <__aeabi_dmul>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4690      	mov	r8, r2
 8004fa8:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004fb0:	897b      	ldrh	r3, [r7, #10]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb fa8a 	bl	80004cc <__aeabi_i2d>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	f7fb faee 	bl	80005a0 <__aeabi_dmul>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	f7fb f932 	bl	8000234 <__adddf3>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004fde:	f7fb f929 	bl	8000234 <__adddf3>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f7fb fd9b 	bl	8000b24 <__aeabi_d2uiz>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004ffc:	893b      	ldrh	r3, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fa64 	bl	80004cc <__aeabi_i2d>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4620      	mov	r0, r4
 800500a:	4629      	mov	r1, r5
 800500c:	f7fb fac8 	bl	80005a0 <__aeabi_dmul>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4690      	mov	r8, r2
 8005016:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800501e:	897b      	ldrh	r3, [r7, #10]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fa53 	bl	80004cc <__aeabi_i2d>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4620      	mov	r0, r4
 800502c:	4629      	mov	r1, r5
 800502e:	f7fb fab7 	bl	80005a0 <__aeabi_dmul>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4640      	mov	r0, r8
 8005038:	4649      	mov	r1, r9
 800503a:	f7fb f8fb 	bl	8000234 <__adddf3>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800504c:	f7fb f8f2 	bl	8000234 <__adddf3>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	f7fb fd64 	bl	8000b24 <__aeabi_d2uiz>
 800505c:	4603      	mov	r3, r0
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	805a      	strh	r2, [r3, #2]
 8005064:	e001      	b.n	800506a <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 800506a:	7bfb      	ldrb	r3, [r7, #15]

}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08005078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005078:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800507a:	e003      	b.n	8005084 <LoopCopyDataInit>

0800507c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800507e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005080:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005082:	3104      	adds	r1, #4

08005084 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005084:	480a      	ldr	r0, [pc, #40]	; (80050b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005088:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800508a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800508c:	d3f6      	bcc.n	800507c <CopyDataInit>
  ldr r2, =_sbss
 800508e:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005090:	e002      	b.n	8005098 <LoopFillZerobss>

08005092 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005092:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005094:	f842 3b04 	str.w	r3, [r2], #4

08005098 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005098:	4b08      	ldr	r3, [pc, #32]	; (80050bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800509a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800509c:	d3f9      	bcc.n	8005092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800509e:	f7ff f9a5 	bl	80043ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050a2:	f003 f891 	bl	80081c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050a6:	f7fd faef 	bl	8002688 <main>
  bx lr
 80050aa:	4770      	bx	lr
  ldr r3, =_sidata
 80050ac:	080089e8 	.word	0x080089e8
  ldr r0, =_sdata
 80050b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80050b4:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 80050b8:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 80050bc:	20000828 	.word	0x20000828

080050c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050c0:	e7fe      	b.n	80050c0 <ADC1_2_IRQHandler>
	...

080050c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050c8:	4b08      	ldr	r3, [pc, #32]	; (80050ec <HAL_Init+0x28>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a07      	ldr	r2, [pc, #28]	; (80050ec <HAL_Init+0x28>)
 80050ce:	f043 0310 	orr.w	r3, r3, #16
 80050d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050d4:	2003      	movs	r0, #3
 80050d6:	f000 fb3b 	bl	8005750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050da:	2000      	movs	r0, #0
 80050dc:	f000 f808 	bl	80050f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050e0:	f7ff f854 	bl	800418c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40022000 	.word	0x40022000

080050f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050f8:	4b12      	ldr	r3, [pc, #72]	; (8005144 <HAL_InitTick+0x54>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_InitTick+0x58>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	4619      	mov	r1, r3
 8005102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005106:	fbb3 f3f1 	udiv	r3, r3, r1
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fb53 	bl	80057ba <HAL_SYSTICK_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e00e      	b.n	800513c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b0f      	cmp	r3, #15
 8005122:	d80a      	bhi.n	800513a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005124:	2200      	movs	r2, #0
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800512c:	f000 fb1b 	bl	8005766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005130:	4a06      	ldr	r2, [pc, #24]	; (800514c <HAL_InitTick+0x5c>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	e000      	b.n	800513c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000004 	.word	0x20000004
 8005148:	2000003c 	.word	0x2000003c
 800514c:	20000038 	.word	0x20000038

08005150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <HAL_IncTick+0x1c>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_IncTick+0x20>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4413      	add	r3, r2
 8005160:	4a03      	ldr	r2, [pc, #12]	; (8005170 <HAL_IncTick+0x20>)
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	2000003c 	.word	0x2000003c
 8005170:	20000820 	.word	0x20000820

08005174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return uwTick;
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <HAL_GetTick+0x10>)
 800517a:	681b      	ldr	r3, [r3, #0]
}
 800517c:	4618      	mov	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	20000820 	.word	0x20000820

08005188 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0ce      	b.n	8005348 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d109      	bne.n	80051cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc f804 	bl	80011d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9bd 	bl	800554c <ADC_ConversionStop_Disable>
 80051d2:	4603      	mov	r3, r0
 80051d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 80a9 	bne.w	8005336 <HAL_ADC_Init+0x1ae>
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 80a5 	bne.w	8005336 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051f4:	f023 0302 	bic.w	r3, r3, #2
 80051f8:	f043 0202 	orr.w	r2, r3, #2
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4951      	ldr	r1, [pc, #324]	; (8005350 <HAL_ADC_Init+0x1c8>)
 800520a:	428b      	cmp	r3, r1
 800520c:	d10a      	bne.n	8005224 <HAL_ADC_Init+0x9c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005216:	d002      	beq.n	800521e <HAL_ADC_Init+0x96>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	e004      	b.n	8005228 <HAL_ADC_Init+0xa0>
 800521e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005222:	e001      	b.n	8005228 <HAL_ADC_Init+0xa0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8005228:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8005230:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	4313      	orrs	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005240:	d003      	beq.n	800524a <HAL_ADC_Init+0xc2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_ADC_Init+0xc8>
 800524a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800524e:	e000      	b.n	8005252 <HAL_ADC_Init+0xca>
 8005250:	2300      	movs	r3, #0
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d119      	bne.n	8005294 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	3b01      	subs	r3, #1
 800526e:	035a      	lsls	r2, r3, #13
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e00b      	b.n	8005294 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	f043 0220 	orr.w	r2, r3, #32
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	f043 0201 	orr.w	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <HAL_ADC_Init+0x1cc>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d003      	beq.n	80052ce <HAL_ADC_Init+0x146>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d104      	bne.n	80052d8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	051b      	lsls	r3, r3, #20
 80052d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	4b19      	ldr	r3, [pc, #100]	; (8005358 <HAL_ADC_Init+0x1d0>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d10b      	bne.n	8005314 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	f043 0201 	orr.w	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005312:	e018      	b.n	8005346 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	f023 0312 	bic.w	r3, r3, #18
 800531c:	f043 0210 	orr.w	r2, r3, #16
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	f043 0201 	orr.w	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005334:	e007      	b.n	8005346 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	f043 0210 	orr.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40013c00 	.word	0x40013c00
 8005354:	ffe1f7fd 	.word	0xffe1f7fd
 8005358:	ff1f0efe 	.word	0xff1f0efe

0800535c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_ADC_ConfigChannel+0x20>
 8005378:	2302      	movs	r3, #2
 800537a:	e0dc      	b.n	8005536 <HAL_ADC_ConfigChannel+0x1da>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b06      	cmp	r3, #6
 800538a:	d81c      	bhi.n	80053c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	3b05      	subs	r3, #5
 800539e:	221f      	movs	r2, #31
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	4019      	ands	r1, r3
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	3b05      	subs	r3, #5
 80053b8:	fa00 f203 	lsl.w	r2, r0, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	635a      	str	r2, [r3, #52]	; 0x34
 80053c4:	e03c      	b.n	8005440 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d81c      	bhi.n	8005408 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	3b23      	subs	r3, #35	; 0x23
 80053e0:	221f      	movs	r2, #31
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	4019      	ands	r1, r3
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	3b23      	subs	r3, #35	; 0x23
 80053fa:	fa00 f203 	lsl.w	r2, r0, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
 8005406:	e01b      	b.n	8005440 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	3b41      	subs	r3, #65	; 0x41
 800541a:	221f      	movs	r2, #31
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	4019      	ands	r1, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	3b41      	subs	r3, #65	; 0x41
 8005434:	fa00 f203 	lsl.w	r2, r0, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b09      	cmp	r3, #9
 8005446:	d91c      	bls.n	8005482 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4413      	add	r3, r2
 8005458:	3b1e      	subs	r3, #30
 800545a:	2207      	movs	r2, #7
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	4019      	ands	r1, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6898      	ldr	r0, [r3, #8]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	3b1e      	subs	r3, #30
 8005474:	fa00 f203 	lsl.w	r2, r0, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e019      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6919      	ldr	r1, [r3, #16]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	2207      	movs	r2, #7
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	4019      	ands	r1, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	6898      	ldr	r0, [r3, #8]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	fa00 f203 	lsl.w	r2, r0, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d003      	beq.n	80054c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80054c2:	2b11      	cmp	r3, #17
 80054c4:	d132      	bne.n	800552c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_ADC_ConfigChannel+0x1e4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d125      	bne.n	800551c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d126      	bne.n	800552c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80054ec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d11a      	bne.n	800552c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_ADC_ConfigChannel+0x1e8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a13      	ldr	r2, [pc, #76]	; (8005548 <HAL_ADC_ConfigChannel+0x1ec>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	0c9a      	lsrs	r2, r3, #18
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800550c:	e002      	b.n	8005514 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3b01      	subs	r3, #1
 8005512:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f9      	bne.n	800550e <HAL_ADC_ConfigChannel+0x1b2>
 800551a:	e007      	b.n	800552c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr
 8005540:	40012400 	.word	0x40012400
 8005544:	20000004 	.word	0x20000004
 8005548:	431bde83 	.word	0x431bde83

0800554c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b01      	cmp	r3, #1
 8005564:	d127      	bne.n	80055b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005576:	f7ff fdfd 	bl	8005174 <HAL_GetTick>
 800557a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800557c:	e014      	b.n	80055a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800557e:	f7ff fdf9 	bl	8005174 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d90d      	bls.n	80055a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f043 0210 	orr.w	r2, r3, #16
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e007      	b.n	80055b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d0e3      	beq.n	800557e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <NVIC_SetPriorityGrouping+0x44>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055dc:	4013      	ands	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055f2:	4a04      	ldr	r2, [pc, #16]	; (8005604 <NVIC_SetPriorityGrouping+0x44>)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	60d3      	str	r3, [r2, #12]
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <NVIC_GetPriorityGrouping+0x18>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	0a1b      	lsrs	r3, r3, #8
 8005612:	f003 0307 	and.w	r3, r3, #7
}
 8005616:	4618      	mov	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	f003 021f 	and.w	r2, r3, #31
 8005634:	4906      	ldr	r1, [pc, #24]	; (8005650 <NVIC_EnableIRQ+0x2c>)
 8005636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2001      	movs	r0, #1
 800563e:	fa00 f202 	lsl.w	r2, r0, r2
 8005642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	e000e100 	.word	0xe000e100

08005654 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005664:	2b00      	cmp	r3, #0
 8005666:	da0b      	bge.n	8005680 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	490c      	ldr	r1, [pc, #48]	; (80056a0 <NVIC_SetPriority+0x4c>)
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	3b04      	subs	r3, #4
 8005676:	0112      	lsls	r2, r2, #4
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	440b      	add	r3, r1
 800567c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800567e:	e009      	b.n	8005694 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	b2da      	uxtb	r2, r3
 8005684:	4907      	ldr	r1, [pc, #28]	; (80056a4 <NVIC_SetPriority+0x50>)
 8005686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568a:	0112      	lsls	r2, r2, #4
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	440b      	add	r3, r1
 8005690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000ed00 	.word	0xe000ed00
 80056a4:	e000e100 	.word	0xe000e100

080056a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f1c3 0307 	rsb	r3, r3, #7
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	bf28      	it	cs
 80056c6:	2304      	movcs	r3, #4
 80056c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2b06      	cmp	r3, #6
 80056d0:	d902      	bls.n	80056d8 <NVIC_EncodePriority+0x30>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3b03      	subs	r3, #3
 80056d6:	e000      	b.n	80056da <NVIC_EncodePriority+0x32>
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43da      	mvns	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	401a      	ands	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	43d9      	mvns	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005700:	4313      	orrs	r3, r2
         );
}
 8005702:	4618      	mov	r0, r3
 8005704:	3724      	adds	r7, #36	; 0x24
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800571c:	d301      	bcc.n	8005722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800571e:	2301      	movs	r3, #1
 8005720:	e00f      	b.n	8005742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005722:	4a0a      	ldr	r2, [pc, #40]	; (800574c <SysTick_Config+0x40>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3b01      	subs	r3, #1
 8005728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800572a:	210f      	movs	r1, #15
 800572c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005730:	f7ff ff90 	bl	8005654 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <SysTick_Config+0x40>)
 8005736:	2200      	movs	r2, #0
 8005738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <SysTick_Config+0x40>)
 800573c:	2207      	movs	r2, #7
 800573e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	e000e010 	.word	0xe000e010

08005750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ff31 	bl	80055c0 <NVIC_SetPriorityGrouping>
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	4603      	mov	r3, r0
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005778:	f7ff ff46 	bl	8005608 <NVIC_GetPriorityGrouping>
 800577c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	6978      	ldr	r0, [r7, #20]
 8005784:	f7ff ff90 	bl	80056a8 <NVIC_EncodePriority>
 8005788:	4602      	mov	r2, r0
 800578a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800578e:	4611      	mov	r1, r2
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff ff5f 	bl	8005654 <NVIC_SetPriority>
}
 8005796:	bf00      	nop
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	4603      	mov	r3, r0
 80057a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff39 	bl	8005624 <NVIC_EnableIRQ>
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff ffa2 	bl	800570c <SysTick_Config>
 80057c8:	4603      	mov	r3, r0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d005      	beq.n	80057f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2204      	movs	r2, #4
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
 80057f4:	e0d6      	b.n	80059a4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 020e 	bic.w	r2, r2, #14
 8005804:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	4b64      	ldr	r3, [pc, #400]	; (80059b0 <HAL_DMA_Abort_IT+0x1dc>)
 800581e:	429a      	cmp	r2, r3
 8005820:	d958      	bls.n	80058d4 <HAL_DMA_Abort_IT+0x100>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a63      	ldr	r2, [pc, #396]	; (80059b4 <HAL_DMA_Abort_IT+0x1e0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d04f      	beq.n	80058cc <HAL_DMA_Abort_IT+0xf8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a61      	ldr	r2, [pc, #388]	; (80059b8 <HAL_DMA_Abort_IT+0x1e4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d048      	beq.n	80058c8 <HAL_DMA_Abort_IT+0xf4>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a60      	ldr	r2, [pc, #384]	; (80059bc <HAL_DMA_Abort_IT+0x1e8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d040      	beq.n	80058c2 <HAL_DMA_Abort_IT+0xee>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a5e      	ldr	r2, [pc, #376]	; (80059c0 <HAL_DMA_Abort_IT+0x1ec>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d038      	beq.n	80058bc <HAL_DMA_Abort_IT+0xe8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a5d      	ldr	r2, [pc, #372]	; (80059c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d030      	beq.n	80058b6 <HAL_DMA_Abort_IT+0xe2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a5b      	ldr	r2, [pc, #364]	; (80059c8 <HAL_DMA_Abort_IT+0x1f4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d028      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xdc>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a53      	ldr	r2, [pc, #332]	; (80059b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d020      	beq.n	80058aa <HAL_DMA_Abort_IT+0xd6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a57      	ldr	r2, [pc, #348]	; (80059cc <HAL_DMA_Abort_IT+0x1f8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d019      	beq.n	80058a6 <HAL_DMA_Abort_IT+0xd2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a56      	ldr	r2, [pc, #344]	; (80059d0 <HAL_DMA_Abort_IT+0x1fc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d012      	beq.n	80058a2 <HAL_DMA_Abort_IT+0xce>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a54      	ldr	r2, [pc, #336]	; (80059d4 <HAL_DMA_Abort_IT+0x200>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00a      	beq.n	800589c <HAL_DMA_Abort_IT+0xc8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a53      	ldr	r2, [pc, #332]	; (80059d8 <HAL_DMA_Abort_IT+0x204>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d102      	bne.n	8005896 <HAL_DMA_Abort_IT+0xc2>
 8005890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005894:	e01b      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 8005896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800589a:	e018      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 800589c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058a0:	e015      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058a2:	2310      	movs	r3, #16
 80058a4:	e013      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e011      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058ae:	e00e      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80058b4:	e00b      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058ba:	e008      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c0:	e005      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058c6:	e002      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058c8:	2310      	movs	r3, #16
 80058ca:	e000      	b.n	80058ce <HAL_DMA_Abort_IT+0xfa>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4a43      	ldr	r2, [pc, #268]	; (80059dc <HAL_DMA_Abort_IT+0x208>)
 80058d0:	6053      	str	r3, [r2, #4]
 80058d2:	e057      	b.n	8005984 <HAL_DMA_Abort_IT+0x1b0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a36      	ldr	r2, [pc, #216]	; (80059b4 <HAL_DMA_Abort_IT+0x1e0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d04f      	beq.n	800597e <HAL_DMA_Abort_IT+0x1aa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a35      	ldr	r2, [pc, #212]	; (80059b8 <HAL_DMA_Abort_IT+0x1e4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d048      	beq.n	800597a <HAL_DMA_Abort_IT+0x1a6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a33      	ldr	r2, [pc, #204]	; (80059bc <HAL_DMA_Abort_IT+0x1e8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d040      	beq.n	8005974 <HAL_DMA_Abort_IT+0x1a0>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a32      	ldr	r2, [pc, #200]	; (80059c0 <HAL_DMA_Abort_IT+0x1ec>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d038      	beq.n	800596e <HAL_DMA_Abort_IT+0x19a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d030      	beq.n	8005968 <HAL_DMA_Abort_IT+0x194>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <HAL_DMA_Abort_IT+0x1f4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d028      	beq.n	8005962 <HAL_DMA_Abort_IT+0x18e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d020      	beq.n	800595c <HAL_DMA_Abort_IT+0x188>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2b      	ldr	r2, [pc, #172]	; (80059cc <HAL_DMA_Abort_IT+0x1f8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d019      	beq.n	8005958 <HAL_DMA_Abort_IT+0x184>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <HAL_DMA_Abort_IT+0x1fc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d012      	beq.n	8005954 <HAL_DMA_Abort_IT+0x180>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <HAL_DMA_Abort_IT+0x200>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00a      	beq.n	800594e <HAL_DMA_Abort_IT+0x17a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <HAL_DMA_Abort_IT+0x204>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d102      	bne.n	8005948 <HAL_DMA_Abort_IT+0x174>
 8005942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005946:	e01b      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 8005948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800594c:	e018      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 800594e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005952:	e015      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 8005954:	2310      	movs	r3, #16
 8005956:	e013      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 8005958:	2301      	movs	r3, #1
 800595a:	e011      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 800595c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005960:	e00e      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 8005962:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005966:	e00b      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 8005968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800596c:	e008      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 800596e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005972:	e005      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 8005974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005978:	e002      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 800597a:	2310      	movs	r3, #16
 800597c:	e000      	b.n	8005980 <HAL_DMA_Abort_IT+0x1ac>
 800597e:	2301      	movs	r3, #1
 8005980:	4a17      	ldr	r2, [pc, #92]	; (80059e0 <HAL_DMA_Abort_IT+0x20c>)
 8005982:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
    } 
  }
  return status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40020080 	.word	0x40020080
 80059b4:	40020008 	.word	0x40020008
 80059b8:	4002001c 	.word	0x4002001c
 80059bc:	40020030 	.word	0x40020030
 80059c0:	40020044 	.word	0x40020044
 80059c4:	40020058 	.word	0x40020058
 80059c8:	4002006c 	.word	0x4002006c
 80059cc:	40020408 	.word	0x40020408
 80059d0:	4002041c 	.word	0x4002041c
 80059d4:	40020430 	.word	0x40020430
 80059d8:	40020444 	.word	0x40020444
 80059dc:	40020400 	.word	0x40020400
 80059e0:	40020000 	.word	0x40020000

080059e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b08b      	sub	sp, #44	; 0x2c
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	e179      	b.n	8005cfc <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8005a08:	2201      	movs	r2, #1
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	f040 8168 	bne.w	8005cf6 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4a96      	ldr	r2, [pc, #600]	; (8005c84 <HAL_GPIO_Init+0x2a0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d05e      	beq.n	8005aee <HAL_GPIO_Init+0x10a>
 8005a30:	4a94      	ldr	r2, [pc, #592]	; (8005c84 <HAL_GPIO_Init+0x2a0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d875      	bhi.n	8005b22 <HAL_GPIO_Init+0x13e>
 8005a36:	4a94      	ldr	r2, [pc, #592]	; (8005c88 <HAL_GPIO_Init+0x2a4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d058      	beq.n	8005aee <HAL_GPIO_Init+0x10a>
 8005a3c:	4a92      	ldr	r2, [pc, #584]	; (8005c88 <HAL_GPIO_Init+0x2a4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d86f      	bhi.n	8005b22 <HAL_GPIO_Init+0x13e>
 8005a42:	4a92      	ldr	r2, [pc, #584]	; (8005c8c <HAL_GPIO_Init+0x2a8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d052      	beq.n	8005aee <HAL_GPIO_Init+0x10a>
 8005a48:	4a90      	ldr	r2, [pc, #576]	; (8005c8c <HAL_GPIO_Init+0x2a8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d869      	bhi.n	8005b22 <HAL_GPIO_Init+0x13e>
 8005a4e:	4a90      	ldr	r2, [pc, #576]	; (8005c90 <HAL_GPIO_Init+0x2ac>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d04c      	beq.n	8005aee <HAL_GPIO_Init+0x10a>
 8005a54:	4a8e      	ldr	r2, [pc, #568]	; (8005c90 <HAL_GPIO_Init+0x2ac>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d863      	bhi.n	8005b22 <HAL_GPIO_Init+0x13e>
 8005a5a:	4a8e      	ldr	r2, [pc, #568]	; (8005c94 <HAL_GPIO_Init+0x2b0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d046      	beq.n	8005aee <HAL_GPIO_Init+0x10a>
 8005a60:	4a8c      	ldr	r2, [pc, #560]	; (8005c94 <HAL_GPIO_Init+0x2b0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d85d      	bhi.n	8005b22 <HAL_GPIO_Init+0x13e>
 8005a66:	2b12      	cmp	r3, #18
 8005a68:	d82a      	bhi.n	8005ac0 <HAL_GPIO_Init+0xdc>
 8005a6a:	2b12      	cmp	r3, #18
 8005a6c:	d859      	bhi.n	8005b22 <HAL_GPIO_Init+0x13e>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <HAL_GPIO_Init+0x90>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005aef 	.word	0x08005aef
 8005a78:	08005ac9 	.word	0x08005ac9
 8005a7c:	08005adb 	.word	0x08005adb
 8005a80:	08005b1d 	.word	0x08005b1d
 8005a84:	08005b23 	.word	0x08005b23
 8005a88:	08005b23 	.word	0x08005b23
 8005a8c:	08005b23 	.word	0x08005b23
 8005a90:	08005b23 	.word	0x08005b23
 8005a94:	08005b23 	.word	0x08005b23
 8005a98:	08005b23 	.word	0x08005b23
 8005a9c:	08005b23 	.word	0x08005b23
 8005aa0:	08005b23 	.word	0x08005b23
 8005aa4:	08005b23 	.word	0x08005b23
 8005aa8:	08005b23 	.word	0x08005b23
 8005aac:	08005b23 	.word	0x08005b23
 8005ab0:	08005b23 	.word	0x08005b23
 8005ab4:	08005b23 	.word	0x08005b23
 8005ab8:	08005ad1 	.word	0x08005ad1
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	4a75      	ldr	r2, [pc, #468]	; (8005c98 <HAL_GPIO_Init+0x2b4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005ac6:	e02c      	b.n	8005b22 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	623b      	str	r3, [r7, #32]
          break;
 8005ace:	e029      	b.n	8005b24 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	623b      	str	r3, [r7, #32]
          break;
 8005ad8:	e024      	b.n	8005b24 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	623b      	str	r3, [r7, #32]
          break;
 8005ae2:	e01f      	b.n	8005b24 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	623b      	str	r3, [r7, #32]
          break;
 8005aec:	e01a      	b.n	8005b24 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005af6:	2304      	movs	r3, #4
 8005af8:	623b      	str	r3, [r7, #32]
          break;
 8005afa:	e013      	b.n	8005b24 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d105      	bne.n	8005b10 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b04:	2308      	movs	r3, #8
 8005b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	611a      	str	r2, [r3, #16]
          break;
 8005b0e:	e009      	b.n	8005b24 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b10:	2308      	movs	r3, #8
 8005b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	615a      	str	r2, [r3, #20]
          break;
 8005b1a:	e003      	b.n	8005b24 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	623b      	str	r3, [r7, #32]
          break;
 8005b20:	e000      	b.n	8005b24 <HAL_GPIO_Init+0x140>
          break;
 8005b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2bff      	cmp	r3, #255	; 0xff
 8005b28:	d801      	bhi.n	8005b2e <HAL_GPIO_Init+0x14a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	e001      	b.n	8005b32 <HAL_GPIO_Init+0x14e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3304      	adds	r3, #4
 8005b32:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2bff      	cmp	r3, #255	; 0xff
 8005b38:	d802      	bhi.n	8005b40 <HAL_GPIO_Init+0x15c>
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	e002      	b.n	8005b46 <HAL_GPIO_Init+0x162>
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	3b08      	subs	r3, #8
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	210f      	movs	r1, #15
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	401a      	ands	r2, r3
 8005b58:	6a39      	ldr	r1, [r7, #32]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	431a      	orrs	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80c1 	beq.w	8005cf6 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b74:	4b49      	ldr	r3, [pc, #292]	; (8005c9c <HAL_GPIO_Init+0x2b8>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	4a48      	ldr	r2, [pc, #288]	; (8005c9c <HAL_GPIO_Init+0x2b8>)
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	6193      	str	r3, [r2, #24]
 8005b80:	4b46      	ldr	r3, [pc, #280]	; (8005c9c <HAL_GPIO_Init+0x2b8>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8005b8c:	4a44      	ldr	r2, [pc, #272]	; (8005ca0 <HAL_GPIO_Init+0x2bc>)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3302      	adds	r3, #2
 8005b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b98:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	220f      	movs	r2, #15
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4013      	ands	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	; (8005ca4 <HAL_GPIO_Init+0x2c0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d01f      	beq.n	8005bf8 <HAL_GPIO_Init+0x214>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3b      	ldr	r2, [pc, #236]	; (8005ca8 <HAL_GPIO_Init+0x2c4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d019      	beq.n	8005bf4 <HAL_GPIO_Init+0x210>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3a      	ldr	r2, [pc, #232]	; (8005cac <HAL_GPIO_Init+0x2c8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <HAL_GPIO_Init+0x20c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a39      	ldr	r2, [pc, #228]	; (8005cb0 <HAL_GPIO_Init+0x2cc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00d      	beq.n	8005bec <HAL_GPIO_Init+0x208>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a38      	ldr	r2, [pc, #224]	; (8005cb4 <HAL_GPIO_Init+0x2d0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <HAL_GPIO_Init+0x204>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a37      	ldr	r2, [pc, #220]	; (8005cb8 <HAL_GPIO_Init+0x2d4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d101      	bne.n	8005be4 <HAL_GPIO_Init+0x200>
 8005be0:	2305      	movs	r3, #5
 8005be2:	e00a      	b.n	8005bfa <HAL_GPIO_Init+0x216>
 8005be4:	2306      	movs	r3, #6
 8005be6:	e008      	b.n	8005bfa <HAL_GPIO_Init+0x216>
 8005be8:	2304      	movs	r3, #4
 8005bea:	e006      	b.n	8005bfa <HAL_GPIO_Init+0x216>
 8005bec:	2303      	movs	r3, #3
 8005bee:	e004      	b.n	8005bfa <HAL_GPIO_Init+0x216>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e002      	b.n	8005bfa <HAL_GPIO_Init+0x216>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <HAL_GPIO_Init+0x216>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfc:	f002 0203 	and.w	r2, r2, #3
 8005c00:	0092      	lsls	r2, r2, #2
 8005c02:	4093      	lsls	r3, r2
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8005c0a:	4925      	ldr	r1, [pc, #148]	; (8005ca0 <HAL_GPIO_Init+0x2bc>)
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	3302      	adds	r3, #2
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c24:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4924      	ldr	r1, [pc, #144]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	600b      	str	r3, [r1, #0]
 8005c30:	e006      	b.n	8005c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c32:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	4920      	ldr	r1, [pc, #128]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d006      	beq.n	8005c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	491a      	ldr	r1, [pc, #104]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	604b      	str	r3, [r1, #4]
 8005c58:	e006      	b.n	8005c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	4916      	ldr	r1, [pc, #88]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d025      	beq.n	8005cc0 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	4910      	ldr	r1, [pc, #64]	; (8005cbc <HAL_GPIO_Init+0x2d8>)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	608b      	str	r3, [r1, #8]
 8005c80:	e025      	b.n	8005cce <HAL_GPIO_Init+0x2ea>
 8005c82:	bf00      	nop
 8005c84:	10320000 	.word	0x10320000
 8005c88:	10310000 	.word	0x10310000
 8005c8c:	10220000 	.word	0x10220000
 8005c90:	10210000 	.word	0x10210000
 8005c94:	10120000 	.word	0x10120000
 8005c98:	10110000 	.word	0x10110000
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010800 	.word	0x40010800
 8005ca8:	40010c00 	.word	0x40010c00
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	40011800 	.word	0x40011800
 8005cb8:	40011c00 	.word	0x40011c00
 8005cbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005cc0:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	4911      	ldr	r1, [pc, #68]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	490c      	ldr	r1, [pc, #48]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60cb      	str	r3, [r1, #12]
 8005ce6:	e006      	b.n	8005cf6 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ce8:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	4907      	ldr	r1, [pc, #28]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	f67f ae82 	bls.w	8005a08 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	372c      	adds	r7, #44	; 0x2c
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	40010400 	.word	0x40010400

08005d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
 8005d30:	e001      	b.n	8005d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	807b      	strh	r3, [r7, #2]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d52:	787b      	ldrb	r3, [r7, #1]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d58:	887a      	ldrh	r2, [r7, #2]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d5e:	e003      	b.n	8005d68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	041a      	lsls	r2, r3, #16
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	611a      	str	r2, [r3, #16]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d7e:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d006      	beq.n	8005d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d8a:	4a05      	ldr	r2, [pc, #20]	; (8005da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f806 	bl	8005da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40010400 	.word	0x40010400

08005da4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8087 	beq.w	8005ee0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005dd2:	4b92      	ldr	r3, [pc, #584]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d00c      	beq.n	8005df8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dde:	4b8f      	ldr	r3, [pc, #572]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d112      	bne.n	8005e10 <HAL_RCC_OscConfig+0x58>
 8005dea:	4b8c      	ldr	r3, [pc, #560]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d10b      	bne.n	8005e10 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	4b88      	ldr	r3, [pc, #544]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d06c      	beq.n	8005ede <HAL_RCC_OscConfig+0x126>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d168      	bne.n	8005ede <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e22d      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e18:	d106      	bne.n	8005e28 <HAL_RCC_OscConfig+0x70>
 8005e1a:	4b80      	ldr	r3, [pc, #512]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a7f      	ldr	r2, [pc, #508]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e02e      	b.n	8005e86 <HAL_RCC_OscConfig+0xce>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCC_OscConfig+0x92>
 8005e30:	4b7a      	ldr	r3, [pc, #488]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a79      	ldr	r2, [pc, #484]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b77      	ldr	r3, [pc, #476]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a76      	ldr	r2, [pc, #472]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e01d      	b.n	8005e86 <HAL_RCC_OscConfig+0xce>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e52:	d10c      	bne.n	8005e6e <HAL_RCC_OscConfig+0xb6>
 8005e54:	4b71      	ldr	r3, [pc, #452]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a70      	ldr	r2, [pc, #448]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b6e      	ldr	r3, [pc, #440]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a6d      	ldr	r2, [pc, #436]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e00b      	b.n	8005e86 <HAL_RCC_OscConfig+0xce>
 8005e6e:	4b6b      	ldr	r3, [pc, #428]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a6a      	ldr	r2, [pc, #424]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b68      	ldr	r3, [pc, #416]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a67      	ldr	r2, [pc, #412]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e84:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d013      	beq.n	8005eb6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8e:	f7ff f971 	bl	8005174 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e96:	f7ff f96d 	bl	8005174 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b64      	cmp	r3, #100	; 0x64
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e1e1      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea8:	4b5c      	ldr	r3, [pc, #368]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0xde>
 8005eb4:	e014      	b.n	8005ee0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7ff f95d 	bl	8005174 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ebe:	f7ff f959 	bl	8005174 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b64      	cmp	r3, #100	; 0x64
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e1cd      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed0:	4b52      	ldr	r3, [pc, #328]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f0      	bne.n	8005ebe <HAL_RCC_OscConfig+0x106>
 8005edc:	e000      	b.n	8005ee0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ede:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d063      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005eec:	4b4b      	ldr	r3, [pc, #300]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 030c 	and.w	r3, r3, #12
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ef8:	4b48      	ldr	r3, [pc, #288]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f003 030c 	and.w	r3, r3, #12
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d11c      	bne.n	8005f3e <HAL_RCC_OscConfig+0x186>
 8005f04:	4b45      	ldr	r3, [pc, #276]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d116      	bne.n	8005f3e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f10:	4b42      	ldr	r3, [pc, #264]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_RCC_OscConfig+0x170>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e1a1      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f28:	4b3c      	ldr	r3, [pc, #240]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4939      	ldr	r1, [pc, #228]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3c:	e03a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f46:	4b36      	ldr	r3, [pc, #216]	; (8006020 <HAL_RCC_OscConfig+0x268>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4c:	f7ff f912 	bl	8005174 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f54:	f7ff f90e 	bl	8005174 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e182      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f66:	4b2d      	ldr	r3, [pc, #180]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f72:	4b2a      	ldr	r3, [pc, #168]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4926      	ldr	r1, [pc, #152]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	600b      	str	r3, [r1, #0]
 8005f86:	e015      	b.n	8005fb4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <HAL_RCC_OscConfig+0x268>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8e:	f7ff f8f1 	bl	8005174 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f96:	f7ff f8ed 	bl	8005174 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e161      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa8:	4b1c      	ldr	r3, [pc, #112]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f0      	bne.n	8005f96 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d039      	beq.n	8006034 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d019      	beq.n	8005ffc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fce:	f7ff f8d1 	bl	8005174 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd6:	f7ff f8cd 	bl	8005174 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e141      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <HAL_RCC_OscConfig+0x264>)
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f000 fadf 	bl	80065b8 <RCC_Delay>
 8005ffa:	e01b      	b.n	8006034 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ffc:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006002:	f7ff f8b7 	bl	8005174 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	e00e      	b.n	8006028 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600a:	f7ff f8b3 	bl	8005174 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d907      	bls.n	8006028 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e127      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
 800601c:	40021000 	.word	0x40021000
 8006020:	42420000 	.word	0x42420000
 8006024:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006028:	4b92      	ldr	r3, [pc, #584]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ea      	bne.n	800600a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 80a6 	beq.w	800618e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006046:	4b8b      	ldr	r3, [pc, #556]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10d      	bne.n	800606e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006052:	4b88      	ldr	r3, [pc, #544]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	4a87      	ldr	r2, [pc, #540]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605c:	61d3      	str	r3, [r2, #28]
 800605e:	4b85      	ldr	r3, [pc, #532]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606e:	4b82      	ldr	r3, [pc, #520]	; (8006278 <HAL_RCC_OscConfig+0x4c0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d118      	bne.n	80060ac <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607a:	4b7f      	ldr	r3, [pc, #508]	; (8006278 <HAL_RCC_OscConfig+0x4c0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a7e      	ldr	r2, [pc, #504]	; (8006278 <HAL_RCC_OscConfig+0x4c0>)
 8006080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006086:	f7ff f875 	bl	8005174 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608e:	f7ff f871 	bl	8005174 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b64      	cmp	r3, #100	; 0x64
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e0e5      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a0:	4b75      	ldr	r3, [pc, #468]	; (8006278 <HAL_RCC_OscConfig+0x4c0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d106      	bne.n	80060c2 <HAL_RCC_OscConfig+0x30a>
 80060b4:	4b6f      	ldr	r3, [pc, #444]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	4a6e      	ldr	r2, [pc, #440]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	6213      	str	r3, [r2, #32]
 80060c0:	e02d      	b.n	800611e <HAL_RCC_OscConfig+0x366>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x32c>
 80060ca:	4b6a      	ldr	r3, [pc, #424]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	4a69      	ldr	r2, [pc, #420]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	6213      	str	r3, [r2, #32]
 80060d6:	4b67      	ldr	r3, [pc, #412]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	4a66      	ldr	r2, [pc, #408]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060dc:	f023 0304 	bic.w	r3, r3, #4
 80060e0:	6213      	str	r3, [r2, #32]
 80060e2:	e01c      	b.n	800611e <HAL_RCC_OscConfig+0x366>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	d10c      	bne.n	8006106 <HAL_RCC_OscConfig+0x34e>
 80060ec:	4b61      	ldr	r3, [pc, #388]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	4a60      	ldr	r2, [pc, #384]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060f2:	f043 0304 	orr.w	r3, r3, #4
 80060f6:	6213      	str	r3, [r2, #32]
 80060f8:	4b5e      	ldr	r3, [pc, #376]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	4a5d      	ldr	r2, [pc, #372]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	6213      	str	r3, [r2, #32]
 8006104:	e00b      	b.n	800611e <HAL_RCC_OscConfig+0x366>
 8006106:	4b5b      	ldr	r3, [pc, #364]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4a5a      	ldr	r2, [pc, #360]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	6213      	str	r3, [r2, #32]
 8006112:	4b58      	ldr	r3, [pc, #352]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	4a57      	ldr	r2, [pc, #348]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006118:	f023 0304 	bic.w	r3, r3, #4
 800611c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d015      	beq.n	8006152 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006126:	f7ff f825 	bl	8005174 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612c:	e00a      	b.n	8006144 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7ff f821 	bl	8005174 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	; 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e093      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006144:	4b4b      	ldr	r3, [pc, #300]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ee      	beq.n	800612e <HAL_RCC_OscConfig+0x376>
 8006150:	e014      	b.n	800617c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006152:	f7ff f80f 	bl	8005174 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006158:	e00a      	b.n	8006170 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7ff f80b 	bl	8005174 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f241 3288 	movw	r2, #5000	; 0x1388
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e07d      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006170:	4b40      	ldr	r3, [pc, #256]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1ee      	bne.n	800615a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d105      	bne.n	800618e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006182:	4b3c      	ldr	r3, [pc, #240]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	4a3b      	ldr	r2, [pc, #236]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800618c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d069      	beq.n	800626a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006196:	4b37      	ldr	r3, [pc, #220]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d061      	beq.n	8006266 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d146      	bne.n	8006238 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <HAL_RCC_OscConfig+0x4c4>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b0:	f7fe ffe0 	bl	8005174 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b8:	f7fe ffdc 	bl	8005174 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e050      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ca:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061de:	d108      	bne.n	80061f2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061e0:	4b24      	ldr	r3, [pc, #144]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4921      	ldr	r1, [pc, #132]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a19      	ldr	r1, [r3, #32]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	430b      	orrs	r3, r1
 8006204:	491b      	ldr	r1, [pc, #108]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <HAL_RCC_OscConfig+0x4c4>)
 800620c:	2201      	movs	r2, #1
 800620e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006210:	f7fe ffb0 	bl	8005174 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006218:	f7fe ffac 	bl	8005174 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e020      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f0      	beq.n	8006218 <HAL_RCC_OscConfig+0x460>
 8006236:	e018      	b.n	800626a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006238:	4b10      	ldr	r3, [pc, #64]	; (800627c <HAL_RCC_OscConfig+0x4c4>)
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623e:	f7fe ff99 	bl	8005174 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006246:	f7fe ff95 	bl	8005174 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e009      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_RCC_OscConfig+0x4bc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f0      	bne.n	8006246 <HAL_RCC_OscConfig+0x48e>
 8006264:	e001      	b.n	800626a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40021000 	.word	0x40021000
 8006278:	40007000 	.word	0x40007000
 800627c:	42420060 	.word	0x42420060

08006280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800628e:	4b7e      	ldr	r3, [pc, #504]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d910      	bls.n	80062be <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629c:	4b7a      	ldr	r3, [pc, #488]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f023 0207 	bic.w	r2, r3, #7
 80062a4:	4978      	ldr	r1, [pc, #480]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062ac:	4b76      	ldr	r3, [pc, #472]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d001      	beq.n	80062be <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0e0      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d020      	beq.n	800630c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062d6:	4b6d      	ldr	r3, [pc, #436]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4a6c      	ldr	r2, [pc, #432]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 80062dc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062e0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062ee:	4b67      	ldr	r3, [pc, #412]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4a66      	ldr	r2, [pc, #408]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 80062f4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80062f8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062fa:	4b64      	ldr	r3, [pc, #400]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	4961      	ldr	r1, [pc, #388]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 8006308:	4313      	orrs	r3, r2
 800630a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d06a      	beq.n	80063ee <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d107      	bne.n	8006330 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006320:	4b5a      	ldr	r3, [pc, #360]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d115      	bne.n	8006358 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0a7      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d107      	bne.n	8006348 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006338:	4b54      	ldr	r3, [pc, #336]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e09b      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006348:	4b50      	ldr	r3, [pc, #320]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e093      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006358:	4b4c      	ldr	r3, [pc, #304]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f023 0203 	bic.w	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4949      	ldr	r1, [pc, #292]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800636a:	f7fe ff03 	bl	8005174 <HAL_GetTick>
 800636e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d112      	bne.n	800639e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006378:	e00a      	b.n	8006390 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800637a:	f7fe fefb 	bl	8005174 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f241 3288 	movw	r2, #5000	; 0x1388
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e077      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006390:	4b3e      	ldr	r3, [pc, #248]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 030c 	and.w	r3, r3, #12
 8006398:	2b04      	cmp	r3, #4
 800639a:	d1ee      	bne.n	800637a <HAL_RCC_ClockConfig+0xfa>
 800639c:	e027      	b.n	80063ee <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d11d      	bne.n	80063e2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063a6:	e00a      	b.n	80063be <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a8:	f7fe fee4 	bl	8005174 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e060      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063be:	4b33      	ldr	r3, [pc, #204]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f003 030c 	and.w	r3, r3, #12
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d1ee      	bne.n	80063a8 <HAL_RCC_ClockConfig+0x128>
 80063ca:	e010      	b.n	80063ee <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063cc:	f7fe fed2 	bl	8005174 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e04e      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f003 030c 	and.w	r3, r3, #12
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1ee      	bne.n	80063cc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80063ee:	4b26      	ldr	r3, [pc, #152]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d210      	bcs.n	800641e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fc:	4b22      	ldr	r3, [pc, #136]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f023 0207 	bic.w	r2, r3, #7
 8006404:	4920      	ldr	r1, [pc, #128]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <HAL_RCC_ClockConfig+0x208>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d001      	beq.n	800641e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e030      	b.n	8006480 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800642a:	4b18      	ldr	r3, [pc, #96]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4915      	ldr	r1, [pc, #84]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 8006438:	4313      	orrs	r3, r2
 800643a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006448:	4b10      	ldr	r3, [pc, #64]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	490d      	ldr	r1, [pc, #52]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 8006458:	4313      	orrs	r3, r2
 800645a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800645c:	f000 f81c 	bl	8006498 <HAL_RCC_GetSysClockFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <HAL_RCC_ClockConfig+0x20c>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	091b      	lsrs	r3, r3, #4
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	4908      	ldr	r1, [pc, #32]	; (8006490 <HAL_RCC_ClockConfig+0x210>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
 8006474:	4a07      	ldr	r2, [pc, #28]	; (8006494 <HAL_RCC_ClockConfig+0x214>)
 8006476:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006478:	2000      	movs	r0, #0
 800647a:	f7fe fe39 	bl	80050f0 <HAL_InitTick>
  
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40022000 	.word	0x40022000
 800648c:	40021000 	.word	0x40021000
 8006490:	080089c0 	.word	0x080089c0
 8006494:	20000004 	.word	0x20000004

08006498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006498:	b490      	push	{r4, r7}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800649e:	4b29      	ldr	r3, [pc, #164]	; (8006544 <HAL_RCC_GetSysClockFreq+0xac>)
 80064a0:	1d3c      	adds	r4, r7, #4
 80064a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80064a8:	f240 2301 	movw	r3, #513	; 0x201
 80064ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064c2:	4b21      	ldr	r3, [pc, #132]	; (8006548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f003 030c 	and.w	r3, r3, #12
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x40>
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x46>
 80064d6:	e02b      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064d8:	4b1c      	ldr	r3, [pc, #112]	; (800654c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064da:	623b      	str	r3, [r7, #32]
      break;
 80064dc:	e02b      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	0c9b      	lsrs	r3, r3, #18
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	3328      	adds	r3, #40	; 0x28
 80064e8:	443b      	add	r3, r7
 80064ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d012      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	0c5b      	lsrs	r3, r3, #17
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	3328      	adds	r3, #40	; 0x28
 8006506:	443b      	add	r3, r7
 8006508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800650c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4a0e      	ldr	r2, [pc, #56]	; (800654c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006512:	fb03 f202 	mul.w	r2, r3, r2
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	e004      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	4a0b      	ldr	r2, [pc, #44]	; (8006550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006524:	fb02 f303 	mul.w	r3, r2, r3
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	623b      	str	r3, [r7, #32]
      break;
 800652e:	e002      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006532:	623b      	str	r3, [r7, #32]
      break;
 8006534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006536:	6a3b      	ldr	r3, [r7, #32]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3728      	adds	r7, #40	; 0x28
 800653c:	46bd      	mov	sp, r7
 800653e:	bc90      	pop	{r4, r7}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	0800832c 	.word	0x0800832c
 8006548:	40021000 	.word	0x40021000
 800654c:	007a1200 	.word	0x007a1200
 8006550:	003d0900 	.word	0x003d0900

08006554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006558:	4b02      	ldr	r3, [pc, #8]	; (8006564 <HAL_RCC_GetHCLKFreq+0x10>)
 800655a:	681b      	ldr	r3, [r3, #0]
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr
 8006564:	20000004 	.word	0x20000004

08006568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800656c:	f7ff fff2 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 8006570:	4602      	mov	r2, r0
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	4903      	ldr	r1, [pc, #12]	; (800658c <HAL_RCC_GetPCLK1Freq+0x24>)
 800657e:	5ccb      	ldrb	r3, [r1, r3]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40021000 	.word	0x40021000
 800658c:	080089d0 	.word	0x080089d0

08006590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006594:	f7ff ffde 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	0adb      	lsrs	r3, r3, #11
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4903      	ldr	r1, [pc, #12]	; (80065b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40021000 	.word	0x40021000
 80065b4:	080089d0 	.word	0x080089d0

080065b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <RCC_Delay+0x38>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0b      	ldr	r2, [pc, #44]	; (80065f4 <RCC_Delay+0x3c>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	0a5b      	lsrs	r3, r3, #9
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80065d4:	bf00      	nop
}
 80065d6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	60fa      	str	r2, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f8      	bne.n	80065d4 <RCC_Delay+0x1c>
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	20000004 	.word	0x20000004
 80065f4:	10624dd3 	.word	0x10624dd3

080065f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d07d      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006614:	2300      	movs	r3, #0
 8006616:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006618:	4b4f      	ldr	r3, [pc, #316]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10d      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006624:	4b4c      	ldr	r3, [pc, #304]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	4a4b      	ldr	r2, [pc, #300]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662e:	61d3      	str	r3, [r2, #28]
 8006630:	4b49      	ldr	r3, [pc, #292]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800663c:	2301      	movs	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006640:	4b46      	ldr	r3, [pc, #280]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d118      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800664c:	4b43      	ldr	r3, [pc, #268]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a42      	ldr	r2, [pc, #264]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006656:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006658:	f7fe fd8c 	bl	8005174 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665e:	e008      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006660:	f7fe fd88 	bl	8005174 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	; 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e06d      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006672:	4b3a      	ldr	r3, [pc, #232]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800667e:	4b36      	ldr	r3, [pc, #216]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d02e      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	429a      	cmp	r2, r3
 800669a:	d027      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800669c:	4b2e      	ldr	r3, [pc, #184]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066a6:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ac:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066b2:	4a29      	ldr	r2, [pc, #164]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d014      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c2:	f7fe fd57 	bl	8005174 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c8:	e00a      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ca:	f7fe fd53 	bl	8005174 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	4293      	cmp	r3, r2
 80066da:	d901      	bls.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e036      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0ee      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4917      	ldr	r1, [pc, #92]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d105      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006704:	4b14      	ldr	r3, [pc, #80]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	4a13      	ldr	r2, [pc, #76]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800670e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800671c:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	490b      	ldr	r1, [pc, #44]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672a:	4313      	orrs	r3, r2
 800672c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	4904      	ldr	r1, [pc, #16]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006748:	4313      	orrs	r3, r2
 800674a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
 800675c:	40007000 	.word	0x40007000
 8006760:	42420440 	.word	0x42420440

08006764 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e034      	b.n	80067e4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7fa fe2e 	bl	80013f0 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3308      	adds	r3, #8
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f001 fc04 	bl	8007fac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	461a      	mov	r2, r3
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	f001 fc7c 	bl	80080ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6858      	ldr	r0, [r3, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	f001 fca7 	bl	8008114 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	6892      	ldr	r2, [r2, #8]
 80067da:	f041 0101 	orr.w	r1, r1, #1
 80067de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e01d      	b.n	800683a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fd ffac 	bl	8004770 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f000 fbac 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0201 	orr.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr

08006876 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10f      	bne.n	80068b6 <HAL_TIM_Base_Stop+0x40>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6a1a      	ldr	r2, [r3, #32]
 800689c:	f240 4344 	movw	r3, #1092	; 0x444
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <HAL_TIM_Base_Stop+0x40>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0201 	bic.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr

080068ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr

080068fe <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <HAL_TIM_Base_Stop_IT+0x48>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	f240 4344 	movw	r3, #1092	; 0x444
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d107      	bne.n	8006946 <HAL_TIM_Base_Stop_IT+0x48>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0201 	bic.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e01d      	b.n	80069a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f815 	bl	80069a8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	4619      	mov	r1, r3
 8006990:	4610      	mov	r0, r2
 8006992:	f000 faf9 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr

080069ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d122      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d11b      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0202 	mvn.w	r2, #2
 80069e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 faa8 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006a02:	e005      	b.n	8006a10 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa9b 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 faaa 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d122      	bne.n	8006a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d11b      	bne.n	8006a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f06f 0204 	mvn.w	r2, #4
 8006a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa7e 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006a56:	e005      	b.n	8006a64 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa71 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa80 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f003 0308 	and.w	r3, r3, #8
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d122      	bne.n	8006abe <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d11b      	bne.n	8006abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f06f 0208 	mvn.w	r2, #8
 8006a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2204      	movs	r2, #4
 8006a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fa54 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006aaa:	e005      	b.n	8006ab8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa47 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa56 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d122      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d11b      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0210 	mvn.w	r2, #16
 8006ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa2a 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006afe:	e005      	b.n	8006b0c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa1d 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa2c 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10e      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d107      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0201 	mvn.w	r2, #1
 8006b36:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9f8 	bl	8006f2e <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d10e      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b56:	2b80      	cmp	r3, #128	; 0x80
 8006b58:	d107      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd9b 	bl	80076a0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d10e      	bne.n	8006b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b40      	cmp	r3, #64	; 0x40
 8006b84:	d107      	bne.n	8006b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f9f0 	bl	8006f76 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	d10e      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d107      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f06f 0220 	mvn.w	r2, #32
 8006bba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fd66 	bl	800768e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006be2:	2302      	movs	r3, #2
 8006be4:	e0b4      	b.n	8006d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b0c      	cmp	r3, #12
 8006bfa:	f200 809f 	bhi.w	8006d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006d3d 	.word	0x08006d3d
 8006c0c:	08006d3d 	.word	0x08006d3d
 8006c10:	08006d3d 	.word	0x08006d3d
 8006c14:	08006c79 	.word	0x08006c79
 8006c18:	08006d3d 	.word	0x08006d3d
 8006c1c:	08006d3d 	.word	0x08006d3d
 8006c20:	08006d3d 	.word	0x08006d3d
 8006c24:	08006cbb 	.word	0x08006cbb
 8006c28:	08006d3d 	.word	0x08006d3d
 8006c2c:	08006d3d 	.word	0x08006d3d
 8006c30:	08006d3d 	.word	0x08006d3d
 8006c34:	08006cfb 	.word	0x08006cfb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fa20 	bl	8007084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0208 	orr.w	r2, r2, #8
 8006c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0204 	bic.w	r2, r2, #4
 8006c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6999      	ldr	r1, [r3, #24]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	619a      	str	r2, [r3, #24]
    }
    break;
 8006c76:	e062      	b.n	8006d3e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fa76 	bl	8007170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6999      	ldr	r1, [r3, #24]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	021a      	lsls	r2, r3, #8
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	619a      	str	r2, [r3, #24]
    }
    break;
 8006cb8:	e041      	b.n	8006d3e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 facf 	bl	8007264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0208 	orr.w	r2, r2, #8
 8006cd4:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0204 	bic.w	r2, r2, #4
 8006ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69d9      	ldr	r1, [r3, #28]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	61da      	str	r2, [r3, #28]
    }
    break;
 8006cf8:	e021      	b.n	8006d3e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fb29 	bl	8007358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69da      	ldr	r2, [r3, #28]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d14:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69d9      	ldr	r1, [r3, #28]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	021a      	lsls	r2, r3, #8
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	61da      	str	r2, [r3, #28]
    }
    break;
 8006d3a:	e000      	b.n	8006d3e <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8006d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_ConfigClockSource+0x1c>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e0d8      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x1ce>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dac:	d052      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0xfc>
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db2:	f200 80ae 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	d027      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0xb4>
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc0:	f200 80a7 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d02a      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0xc6>
 8006dc8:	2b70      	cmp	r3, #112	; 0x70
 8006dca:	f200 80a2 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006dce:	2b60      	cmp	r3, #96	; 0x60
 8006dd0:	d063      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x142>
 8006dd2:	2b60      	cmp	r3, #96	; 0x60
 8006dd4:	f200 809d 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006dd8:	2b50      	cmp	r3, #80	; 0x50
 8006dda:	d04e      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x122>
 8006ddc:	2b50      	cmp	r3, #80	; 0x50
 8006dde:	f200 8098 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d069      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x162>
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	f200 8093 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006dec:	2b30      	cmp	r3, #48	; 0x30
 8006dee:	f000 8089 	beq.w	8006f04 <HAL_TIM_ConfigClockSource+0x1ac>
 8006df2:	2b30      	cmp	r3, #48	; 0x30
 8006df4:	f200 808d 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d07c      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0x19e>
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	f200 8088 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d069      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x182>
 8006e06:	2b10      	cmp	r3, #16
 8006e08:	d06e      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8006e0a:	e082      	b.n	8006f12 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0207 	bic.w	r2, r2, #7
 8006e1a:	609a      	str	r2, [r3, #8]
    break;
 8006e1c:	e07a      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f000 fb71 	bl	8007514 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	609a      	str	r2, [r3, #8]
    break;
 8006e52:	e05f      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6899      	ldr	r1, [r3, #8]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f000 fb56 	bl	8007514 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e76:	609a      	str	r2, [r3, #8]
    break;
 8006e78:	e04c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6859      	ldr	r1, [r3, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f000 fac0 	bl	800740c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2150      	movs	r1, #80	; 0x50
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fb1f 	bl	80074d6 <TIM_ITRx_SetConfig>
    break;
 8006e98:	e03c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f000 fae2 	bl	8007470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2160      	movs	r1, #96	; 0x60
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fb0f 	bl	80074d6 <TIM_ITRx_SetConfig>
    break;
 8006eb8:	e02c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6859      	ldr	r1, [r3, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f000 faa0 	bl	800740c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2140      	movs	r1, #64	; 0x40
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 faff 	bl	80074d6 <TIM_ITRx_SetConfig>
    break;
 8006ed8:	e01c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 faf8 	bl	80074d6 <TIM_ITRx_SetConfig>
    break;
 8006ee6:	e015      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2110      	movs	r1, #16
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 faf1 	bl	80074d6 <TIM_ITRx_SetConfig>
    break;
 8006ef4:	e00e      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2120      	movs	r1, #32
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 faea 	bl	80074d6 <TIM_ITRx_SetConfig>
    break;
 8006f02:	e007      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2130      	movs	r1, #48	; 0x30
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fae3 	bl	80074d6 <TIM_ITRx_SetConfig>
    break;
 8006f10:	e000      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8006f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr

08006f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr

08006f88 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a34      	ldr	r2, [pc, #208]	; (8007070 <TIM_Base_SetConfig+0xe8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <TIM_Base_SetConfig+0x44>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a33      	ldr	r2, [pc, #204]	; (8007074 <TIM_Base_SetConfig+0xec>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00f      	beq.n	8006fcc <TIM_Base_SetConfig+0x44>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb2:	d00b      	beq.n	8006fcc <TIM_Base_SetConfig+0x44>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a30      	ldr	r2, [pc, #192]	; (8007078 <TIM_Base_SetConfig+0xf0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d007      	beq.n	8006fcc <TIM_Base_SetConfig+0x44>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <TIM_Base_SetConfig+0xf4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_Base_SetConfig+0x44>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a2e      	ldr	r2, [pc, #184]	; (8007080 <TIM_Base_SetConfig+0xf8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d108      	bne.n	8006fde <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a23      	ldr	r2, [pc, #140]	; (8007070 <TIM_Base_SetConfig+0xe8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <TIM_Base_SetConfig+0x86>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a22      	ldr	r2, [pc, #136]	; (8007074 <TIM_Base_SetConfig+0xec>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00f      	beq.n	800700e <TIM_Base_SetConfig+0x86>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff4:	d00b      	beq.n	800700e <TIM_Base_SetConfig+0x86>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a1f      	ldr	r2, [pc, #124]	; (8007078 <TIM_Base_SetConfig+0xf0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d007      	beq.n	800700e <TIM_Base_SetConfig+0x86>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a1e      	ldr	r2, [pc, #120]	; (800707c <TIM_Base_SetConfig+0xf4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <TIM_Base_SetConfig+0x86>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <TIM_Base_SetConfig+0xf8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d108      	bne.n	8007020 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007026:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a09      	ldr	r2, [pc, #36]	; (8007070 <TIM_Base_SetConfig+0xe8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_Base_SetConfig+0xd0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a08      	ldr	r2, [pc, #32]	; (8007074 <TIM_Base_SetConfig+0xec>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d103      	bne.n	8007060 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	615a      	str	r2, [r3, #20]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40013400 	.word	0x40013400
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40000c00 	.word	0x40000c00

08007084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0303 	bic.w	r3, r3, #3
 80070c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f023 0302 	bic.w	r3, r3, #2
 80070d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a20      	ldr	r2, [pc, #128]	; (8007168 <TIM_OC1_SetConfig+0xe4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_OC1_SetConfig+0x70>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a1f      	ldr	r2, [pc, #124]	; (800716c <TIM_OC1_SetConfig+0xe8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d10c      	bne.n	800710e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f023 0308 	bic.w	r3, r3, #8
 80070fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 0304 	bic.w	r3, r3, #4
 800710c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a15      	ldr	r2, [pc, #84]	; (8007168 <TIM_OC1_SetConfig+0xe4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_OC1_SetConfig+0x9a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a14      	ldr	r2, [pc, #80]	; (800716c <TIM_OC1_SetConfig+0xe8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d111      	bne.n	8007142 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800712c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40013400 	.word	0x40013400

08007170 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f023 0210 	bic.w	r2, r3, #16
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0320 	bic.w	r3, r3, #32
 80071c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a21      	ldr	r2, [pc, #132]	; (800725c <TIM_OC2_SetConfig+0xec>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC2_SetConfig+0x74>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a20      	ldr	r2, [pc, #128]	; (8007260 <TIM_OC2_SetConfig+0xf0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d10d      	bne.n	8007200 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a16      	ldr	r2, [pc, #88]	; (800725c <TIM_OC2_SetConfig+0xec>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC2_SetConfig+0xa0>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a15      	ldr	r2, [pc, #84]	; (8007260 <TIM_OC2_SetConfig+0xf0>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d113      	bne.n	8007238 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800721e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40013400 	.word	0x40013400

08007264 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a21      	ldr	r2, [pc, #132]	; (8007350 <TIM_OC3_SetConfig+0xec>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_OC3_SetConfig+0x72>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a20      	ldr	r2, [pc, #128]	; (8007354 <TIM_OC3_SetConfig+0xf0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d10d      	bne.n	80072f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a16      	ldr	r2, [pc, #88]	; (8007350 <TIM_OC3_SetConfig+0xec>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d003      	beq.n	8007302 <TIM_OC3_SetConfig+0x9e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a15      	ldr	r2, [pc, #84]	; (8007354 <TIM_OC3_SetConfig+0xf0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d113      	bne.n	800732a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	621a      	str	r2, [r3, #32]
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	bc80      	pop	{r7}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40013400 	.word	0x40013400

08007358 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a11      	ldr	r2, [pc, #68]	; (8007404 <TIM_OC4_SetConfig+0xac>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC4_SetConfig+0x74>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a10      	ldr	r2, [pc, #64]	; (8007408 <TIM_OC4_SetConfig+0xb0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d109      	bne.n	80073e0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	019b      	lsls	r3, r3, #6
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr
 8007404:	40012c00 	.word	0x40012c00
 8007408:	40013400 	.word	0x40013400

0800740c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800743e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f023 030a 	bic.w	r3, r3, #10
 8007450:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f023 0210 	bic.w	r2, r3, #16
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	031b      	lsls	r3, r3, #12
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	621a      	str	r2, [r3, #32]
}
 80074cc:	bf00      	nop
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80074f4:	887b      	ldrh	r3, [r7, #2]
 80074f6:	f043 0307 	orr.w	r3, r3, #7
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	609a      	str	r2, [r3, #8]
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	431a      	orrs	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4313      	orrs	r3, r2
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	609a      	str	r2, [r3, #8]
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr

08007556 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800756e:	2302      	movs	r3, #2
 8007570:	e044      	b.n	80075fc <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr

08007606 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800761a:	2302      	movs	r3, #2
 800761c:	e032      	b.n	8007684 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800763c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6859      	ldr	r1, [r3, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800765e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6899      	ldr	r1, [r3, #8]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e03f      	b.n	8007744 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fd f997 	bl	8004a0c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2224      	movs	r2, #36	; 0x24
 80076e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076f4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fb40 	bl	8007d7c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800770a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695a      	ldr	r2, [r3, #20]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800771a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800772a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af02      	add	r7, sp, #8
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b20      	cmp	r3, #32
 800776a:	f040 8083 	bne.w	8007874 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <HAL_UART_Transmit+0x2e>
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e07b      	b.n	8007876 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_UART_Transmit+0x40>
 8007788:	2302      	movs	r3, #2
 800778a:	e074      	b.n	8007876 <HAL_UART_Transmit+0x12a>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2221      	movs	r2, #33	; 0x21
 800779e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80077a2:	f7fd fce7 	bl	8005174 <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	88fa      	ldrh	r2, [r7, #6]
 80077b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80077b4:	e042      	b.n	800783c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077cc:	d122      	bne.n	8007814 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2200      	movs	r2, #0
 80077d6:	2180      	movs	r1, #128	; 0x80
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f966 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e046      	b.n	8007876 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077fa:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	3302      	adds	r3, #2
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	e017      	b.n	800783c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	3301      	adds	r3, #1
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	e013      	b.n	800783c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2200      	movs	r2, #0
 800781c:	2180      	movs	r1, #128	; 0x80
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 f943 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e023      	b.n	8007876 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	60ba      	str	r2, [r7, #8]
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1b7      	bne.n	80077b6 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2200      	movs	r2, #0
 800784e:	2140      	movs	r1, #64	; 0x40
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f92a 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e00a      	b.n	8007876 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	e000      	b.n	8007876 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <HAL_UART_IRQHandler+0x52>
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9d5 	bl	8007c7a <UART_Receive_IT>
      return;
 80078d0:	e0cb      	b.n	8007a6a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80ab 	beq.w	8007a30 <HAL_UART_IRQHandler+0x1b0>
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d105      	bne.n	80078f0 <HAL_UART_IRQHandler+0x70>
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 80a0 	beq.w	8007a30 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_UART_IRQHandler+0x90>
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007908:	f043 0201 	orr.w	r2, r3, #1
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <HAL_UART_IRQHandler+0xb0>
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007928:	f043 0202 	orr.w	r2, r3, #2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <HAL_UART_IRQHandler+0xd0>
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	f043 0204 	orr.w	r2, r3, #4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <HAL_UART_IRQHandler+0xf0>
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	f043 0208 	orr.w	r2, r3, #8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d077      	beq.n	8007a68 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d007      	beq.n	8007992 <HAL_UART_IRQHandler+0x112>
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f974 	bl	8007c7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	bf14      	ite	ne
 80079a0:	2301      	movne	r3, #1
 80079a2:	2300      	moveq	r3, #0
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <HAL_UART_IRQHandler+0x13a>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d031      	beq.n	8007a1e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8bf 	bl	8007b3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d023      	beq.n	8007a16 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	695a      	ldr	r2, [r3, #20]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d013      	beq.n	8007a0e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ea:	4a21      	ldr	r2, [pc, #132]	; (8007a70 <HAL_UART_IRQHandler+0x1f0>)
 80079ec:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd feee 	bl	80057d4 <HAL_DMA_Abort_IT>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d016      	beq.n	8007a2c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	e00e      	b.n	8007a2c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f842 	bl	8007a98 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	e00a      	b.n	8007a2c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f83e 	bl	8007a98 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	e006      	b.n	8007a2c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f83a 	bl	8007a98 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007a2a:	e01d      	b.n	8007a68 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2c:	bf00      	nop
    return;
 8007a2e:	e01b      	b.n	8007a68 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <HAL_UART_IRQHandler+0x1cc>
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f8ab 	bl	8007ba0 <UART_Transmit_IT>
    return;
 8007a4a:	e00e      	b.n	8007a6a <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <HAL_UART_IRQHandler+0x1ea>
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8f2 	bl	8007c4a <UART_EndTransmit_IT>
    return;
 8007a66:	e000      	b.n	8007a6a <HAL_UART_IRQHandler+0x1ea>
    return;
 8007a68:	bf00      	nop
  }
}
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	08007b79 	.word	0x08007b79

08007a74 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bc80      	pop	{r7}
 8007a84:	4770      	bx	lr

08007a86 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr

08007a98 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr

08007aaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007aba:	e02c      	b.n	8007b16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac2:	d028      	beq.n	8007b16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d007      	beq.n	8007ada <UART_WaitOnFlagUntilTimeout+0x30>
 8007aca:	f7fd fb53 	bl	8005174 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d21d      	bcs.n	8007b16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ae8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	695a      	ldr	r2, [r3, #20]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e00f      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	bf0c      	ite	eq
 8007b26:	2301      	moveq	r3, #1
 8007b28:	2300      	movne	r3, #0
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d0c3      	beq.n	8007abc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695a      	ldr	r2, [r3, #20]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr

08007b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f7ff ff80 	bl	8007a98 <HAL_UART_ErrorCallback>
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b21      	cmp	r3, #33	; 0x21
 8007bb2:	d144      	bne.n	8007c3e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbc:	d11a      	bne.n	8007bf4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	1c9a      	adds	r2, r3, #2
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	621a      	str	r2, [r3, #32]
 8007be6:	e00e      	b.n	8007c06 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	621a      	str	r2, [r3, #32]
 8007bf2:	e008      	b.n	8007c06 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	1c59      	adds	r1, r3, #1
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6211      	str	r1, [r2, #32]
 8007bfe:	781a      	ldrb	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	4619      	mov	r1, r3
 8007c14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10f      	bne.n	8007c3a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c60:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff ff02 	bl	8007a74 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b22      	cmp	r3, #34	; 0x22
 8007c8c:	d171      	bne.n	8007d72 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c96:	d123      	bne.n	8007ce0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10e      	bne.n	8007cc4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	1c9a      	adds	r2, r3, #2
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	629a      	str	r2, [r3, #40]	; 0x28
 8007cc2:	e029      	b.n	8007d18 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	629a      	str	r2, [r3, #40]	; 0x28
 8007cde:	e01b      	b.n	8007d18 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6858      	ldr	r0, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	1c59      	adds	r1, r3, #1
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6291      	str	r1, [r2, #40]	; 0x28
 8007cf8:	b2c2      	uxtb	r2, r0
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e00c      	b.n	8007d18 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	1c58      	adds	r0, r3, #1
 8007d0c:	6879      	ldr	r1, [r7, #4]
 8007d0e:	6288      	str	r0, [r1, #40]	; 0x28
 8007d10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	4619      	mov	r1, r3
 8007d26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d120      	bne.n	8007d6e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0220 	bic.w	r2, r2, #32
 8007d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d4a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff fe8e 	bl	8007a86 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e002      	b.n	8007d74 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e000      	b.n	8007d74 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007d72:	2302      	movs	r3, #2
  }
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d7c:	b5b0      	push	{r4, r5, r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007dbe:	f023 030c 	bic.w	r3, r3, #12
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a6f      	ldr	r2, [pc, #444]	; (8007fa4 <UART_SetConfig+0x228>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d16b      	bne.n	8007ec4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007dec:	f7fe fbd0 	bl	8006590 <HAL_RCC_GetPCLK2Freq>
 8007df0:	4602      	mov	r2, r0
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009a      	lsls	r2, r3, #2
 8007dfa:	441a      	add	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e06:	4a68      	ldr	r2, [pc, #416]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	011c      	lsls	r4, r3, #4
 8007e10:	f7fe fbbe 	bl	8006590 <HAL_RCC_GetPCLK2Freq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009a      	lsls	r2, r3, #2
 8007e1e:	441a      	add	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e2a:	f7fe fbb1 	bl	8006590 <HAL_RCC_GetPCLK2Freq>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009a      	lsls	r2, r3, #2
 8007e38:	441a      	add	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e44:	4a58      	ldr	r2, [pc, #352]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007e46:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	2264      	movs	r2, #100	; 0x64
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	1aeb      	subs	r3, r5, r3
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	3332      	adds	r3, #50	; 0x32
 8007e58:	4a53      	ldr	r2, [pc, #332]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e64:	441c      	add	r4, r3
 8007e66:	f7fe fb93 	bl	8006590 <HAL_RCC_GetPCLK2Freq>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	009a      	lsls	r2, r3, #2
 8007e74:	441a      	add	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e80:	f7fe fb86 	bl	8006590 <HAL_RCC_GetPCLK2Freq>
 8007e84:	4602      	mov	r2, r0
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009a      	lsls	r2, r3, #2
 8007e8e:	441a      	add	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	4a43      	ldr	r2, [pc, #268]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	2264      	movs	r2, #100	; 0x64
 8007ea4:	fb02 f303 	mul.w	r3, r2, r3
 8007ea8:	1aeb      	subs	r3, r5, r3
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	3332      	adds	r3, #50	; 0x32
 8007eae:	4a3e      	ldr	r2, [pc, #248]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	f003 020f 	and.w	r2, r3, #15
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4422      	add	r2, r4
 8007ec0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007ec2:	e06a      	b.n	8007f9a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007ec4:	f7fe fb50 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009a      	lsls	r2, r3, #2
 8007ed2:	441a      	add	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ede:	4a32      	ldr	r2, [pc, #200]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	011c      	lsls	r4, r3, #4
 8007ee8:	f7fe fb3e 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8007eec:	4602      	mov	r2, r0
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009a      	lsls	r2, r3, #2
 8007ef6:	441a      	add	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	fbb2 f5f3 	udiv	r5, r2, r3
 8007f02:	f7fe fb31 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8007f06:	4602      	mov	r2, r0
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009a      	lsls	r2, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1c:	4a22      	ldr	r2, [pc, #136]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2264      	movs	r2, #100	; 0x64
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	1aeb      	subs	r3, r5, r3
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	3332      	adds	r3, #50	; 0x32
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f3c:	441c      	add	r4, r3
 8007f3e:	f7fe fb13 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8007f42:	4602      	mov	r2, r0
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009a      	lsls	r2, r3, #2
 8007f4c:	441a      	add	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	fbb2 f5f3 	udiv	r5, r2, r3
 8007f58:	f7fe fb06 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009a      	lsls	r2, r3, #2
 8007f66:	441a      	add	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f72:	4a0d      	ldr	r2, [pc, #52]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007f74:	fba2 2303 	umull	r2, r3, r2, r3
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	2264      	movs	r2, #100	; 0x64
 8007f7c:	fb02 f303 	mul.w	r3, r2, r3
 8007f80:	1aeb      	subs	r3, r5, r3
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	3332      	adds	r3, #50	; 0x32
 8007f86:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <UART_SetConfig+0x22c>)
 8007f88:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	f003 020f 	and.w	r2, r3, #15
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4422      	add	r2, r4
 8007f98:	609a      	str	r2, [r3, #8]
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40013800 	.word	0x40013800
 8007fa8:	51eb851f 	.word	0x51eb851f

08007fac <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	f023 0101 	bic.w	r1, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d132      	bne.n	800803c <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fe0:	4b31      	ldr	r3, [pc, #196]	; (80080a8 <FSMC_NORSRAM_Init+0xfc>)
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	6851      	ldr	r1, [r2, #4]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	6892      	ldr	r2, [r2, #8]
 8007fec:	4311      	orrs	r1, r2
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	68d2      	ldr	r2, [r2, #12]
 8007ff2:	4311      	orrs	r1, r2
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	6912      	ldr	r2, [r2, #16]
 8007ff8:	4311      	orrs	r1, r2
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	6952      	ldr	r2, [r2, #20]
 8007ffe:	4311      	orrs	r1, r2
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	6992      	ldr	r2, [r2, #24]
 8008004:	4311      	orrs	r1, r2
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	69d2      	ldr	r2, [r2, #28]
 800800a:	4311      	orrs	r1, r2
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	6a12      	ldr	r2, [r2, #32]
 8008010:	4311      	orrs	r1, r2
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008016:	4311      	orrs	r1, r2
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800801c:	4311      	orrs	r1, r2
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008022:	4311      	orrs	r1, r2
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008028:	430a      	orrs	r2, r1
 800802a:	4313      	orrs	r3, r2
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800803a:	e02f      	b.n	800809c <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008046:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <FSMC_NORSRAM_Init+0xfc>)
 8008048:	4013      	ands	r3, r2
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	6851      	ldr	r1, [r2, #4]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	6892      	ldr	r2, [r2, #8]
 8008052:	4311      	orrs	r1, r2
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	68d2      	ldr	r2, [r2, #12]
 8008058:	4311      	orrs	r1, r2
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	6912      	ldr	r2, [r2, #16]
 800805e:	4311      	orrs	r1, r2
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	6952      	ldr	r2, [r2, #20]
 8008064:	4311      	orrs	r1, r2
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	6992      	ldr	r2, [r2, #24]
 800806a:	4311      	orrs	r1, r2
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	69d2      	ldr	r2, [r2, #28]
 8008070:	4311      	orrs	r1, r2
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	6a12      	ldr	r2, [r2, #32]
 8008076:	4311      	orrs	r1, r2
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800807c:	4311      	orrs	r1, r2
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008082:	4311      	orrs	r1, r2
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008088:	4311      	orrs	r1, r2
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800808e:	4311      	orrs	r1, r2
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	6812      	ldr	r2, [r2, #0]
 8008094:	4319      	orrs	r1, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr
 80080a8:	fff70081 	.word	0xfff70081

080080ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	431a      	orrs	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	431a      	orrs	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	431a      	orrs	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	051b      	lsls	r3, r3, #20
 80080ea:	431a      	orrs	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	3b02      	subs	r3, #2
 80080f2:	061b      	lsls	r3, r3, #24
 80080f4:	431a      	orrs	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	3201      	adds	r2, #1
 8008100:	4319      	orrs	r1, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008128:	d11d      	bne.n	8008166 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008134:	4013      	ands	r3, r2
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	6811      	ldr	r1, [r2, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	6852      	ldr	r2, [r2, #4]
 800813e:	0112      	lsls	r2, r2, #4
 8008140:	4311      	orrs	r1, r2
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	6892      	ldr	r2, [r2, #8]
 8008146:	0212      	lsls	r2, r2, #8
 8008148:	4311      	orrs	r1, r2
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	6992      	ldr	r2, [r2, #24]
 800814e:	4311      	orrs	r1, r2
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	68d2      	ldr	r2, [r2, #12]
 8008154:	0412      	lsls	r2, r2, #16
 8008156:	430a      	orrs	r2, r1
 8008158:	ea43 0102 	orr.w	r1, r3, r2
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008164:	e005      	b.n	8008172 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800816e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	cff00000 	.word	0xcff00000

08008184 <__cxa_pure_virtual>:
 8008184:	b508      	push	{r3, lr}
 8008186:	f000 f80d 	bl	80081a4 <_ZSt9terminatev>

0800818a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800818a:	b508      	push	{r3, lr}
 800818c:	4780      	blx	r0
 800818e:	f000 f80e 	bl	80081ae <abort>
	...

08008194 <_ZSt13get_terminatev>:
 8008194:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <_ZSt13get_terminatev+0xc>)
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	f3bf 8f5b 	dmb	ish
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20000040 	.word	0x20000040

080081a4 <_ZSt9terminatev>:
 80081a4:	b508      	push	{r3, lr}
 80081a6:	f7ff fff5 	bl	8008194 <_ZSt13get_terminatev>
 80081aa:	f7ff ffee 	bl	800818a <_ZN10__cxxabiv111__terminateEPFvvE>

080081ae <abort>:
 80081ae:	2006      	movs	r0, #6
 80081b0:	b508      	push	{r3, lr}
 80081b2:	f000 f85d 	bl	8008270 <raise>
 80081b6:	2001      	movs	r0, #1
 80081b8:	f7fc f90d 	bl	80043d6 <_exit>

080081bc <__errno>:
 80081bc:	4b01      	ldr	r3, [pc, #4]	; (80081c4 <__errno+0x8>)
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20000044 	.word	0x20000044

080081c8 <__libc_init_array>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	2600      	movs	r6, #0
 80081cc:	4d0c      	ldr	r5, [pc, #48]	; (8008200 <__libc_init_array+0x38>)
 80081ce:	4c0d      	ldr	r4, [pc, #52]	; (8008204 <__libc_init_array+0x3c>)
 80081d0:	1b64      	subs	r4, r4, r5
 80081d2:	10a4      	asrs	r4, r4, #2
 80081d4:	42a6      	cmp	r6, r4
 80081d6:	d109      	bne.n	80081ec <__libc_init_array+0x24>
 80081d8:	f000 f86e 	bl	80082b8 <_init>
 80081dc:	2600      	movs	r6, #0
 80081de:	4d0a      	ldr	r5, [pc, #40]	; (8008208 <__libc_init_array+0x40>)
 80081e0:	4c0a      	ldr	r4, [pc, #40]	; (800820c <__libc_init_array+0x44>)
 80081e2:	1b64      	subs	r4, r4, r5
 80081e4:	10a4      	asrs	r4, r4, #2
 80081e6:	42a6      	cmp	r6, r4
 80081e8:	d105      	bne.n	80081f6 <__libc_init_array+0x2e>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f0:	4798      	blx	r3
 80081f2:	3601      	adds	r6, #1
 80081f4:	e7ee      	b.n	80081d4 <__libc_init_array+0xc>
 80081f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081fa:	4798      	blx	r3
 80081fc:	3601      	adds	r6, #1
 80081fe:	e7f2      	b.n	80081e6 <__libc_init_array+0x1e>
 8008200:	080089e0 	.word	0x080089e0
 8008204:	080089e0 	.word	0x080089e0
 8008208:	080089e0 	.word	0x080089e0
 800820c:	080089e4 	.word	0x080089e4

08008210 <memset>:
 8008210:	4603      	mov	r3, r0
 8008212:	4402      	add	r2, r0
 8008214:	4293      	cmp	r3, r2
 8008216:	d100      	bne.n	800821a <memset+0xa>
 8008218:	4770      	bx	lr
 800821a:	f803 1b01 	strb.w	r1, [r3], #1
 800821e:	e7f9      	b.n	8008214 <memset+0x4>

08008220 <_raise_r>:
 8008220:	291f      	cmp	r1, #31
 8008222:	b538      	push	{r3, r4, r5, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	460d      	mov	r5, r1
 8008228:	d904      	bls.n	8008234 <_raise_r+0x14>
 800822a:	2316      	movs	r3, #22
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008236:	b112      	cbz	r2, 800823e <_raise_r+0x1e>
 8008238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800823c:	b94b      	cbnz	r3, 8008252 <_raise_r+0x32>
 800823e:	4620      	mov	r0, r4
 8008240:	f000 f830 	bl	80082a4 <_getpid_r>
 8008244:	462a      	mov	r2, r5
 8008246:	4601      	mov	r1, r0
 8008248:	4620      	mov	r0, r4
 800824a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800824e:	f000 b817 	b.w	8008280 <_kill_r>
 8008252:	2b01      	cmp	r3, #1
 8008254:	d00a      	beq.n	800826c <_raise_r+0x4c>
 8008256:	1c59      	adds	r1, r3, #1
 8008258:	d103      	bne.n	8008262 <_raise_r+0x42>
 800825a:	2316      	movs	r3, #22
 800825c:	6003      	str	r3, [r0, #0]
 800825e:	2001      	movs	r0, #1
 8008260:	e7e7      	b.n	8008232 <_raise_r+0x12>
 8008262:	2400      	movs	r4, #0
 8008264:	4628      	mov	r0, r5
 8008266:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800826a:	4798      	blx	r3
 800826c:	2000      	movs	r0, #0
 800826e:	e7e0      	b.n	8008232 <_raise_r+0x12>

08008270 <raise>:
 8008270:	4b02      	ldr	r3, [pc, #8]	; (800827c <raise+0xc>)
 8008272:	4601      	mov	r1, r0
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	f7ff bfd3 	b.w	8008220 <_raise_r>
 800827a:	bf00      	nop
 800827c:	20000044 	.word	0x20000044

08008280 <_kill_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	2300      	movs	r3, #0
 8008284:	4d06      	ldr	r5, [pc, #24]	; (80082a0 <_kill_r+0x20>)
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	4611      	mov	r1, r2
 800828c:	602b      	str	r3, [r5, #0]
 800828e:	f7fc f892 	bl	80043b6 <_kill>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	d102      	bne.n	800829c <_kill_r+0x1c>
 8008296:	682b      	ldr	r3, [r5, #0]
 8008298:	b103      	cbz	r3, 800829c <_kill_r+0x1c>
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	bd38      	pop	{r3, r4, r5, pc}
 800829e:	bf00      	nop
 80082a0:	20000824 	.word	0x20000824

080082a4 <_getpid_r>:
 80082a4:	f7fc b880 	b.w	80043a8 <_getpid>

080082a8 <strcpy>:
 80082a8:	4603      	mov	r3, r0
 80082aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ae:	f803 2b01 	strb.w	r2, [r3], #1
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	d1f9      	bne.n	80082aa <strcpy+0x2>
 80082b6:	4770      	bx	lr

080082b8 <_init>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr

080082c4 <_fini>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr
